00000000                            ; /=========================================================================\
00000000                            ; º	This file is generated by The Interactive Disassembler (IDA)	    º
00000000                            ; º	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    º
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            	;include	"_smps2asm_inc.asm"	;Allows SL to play ASM music
00000000                            	include	"_s1smps2asm_inc.asm"	;Allows SL to play ASM music
00000000                            ; Standard Octave Pitch Equates
00000000 =00000088                  smpsPitch10lo		EQU	$88
00000000 =00000094                  smpsPitch09lo		EQU	$94
00000000 =000000A0                  smpsPitch08lo		EQU	$A0
00000000 =000000AC                  smpsPitch07lo		EQU	$AC
00000000 =000000B8                  smpsPitch06lo		EQU	$B8
00000000 =000000C4                  smpsPitch05lo		EQU	$C4
00000000 =000000D0                  smpsPitch04lo		EQU	$D0
00000000 =000000DC                  smpsPitch03lo		EQU	$DC
00000000 =000000E8                  smpsPitch02lo		EQU	$E8
00000000 =000000F4                  smpsPitch01lo		EQU	$F4
00000000 =00000000                  smpsPitch00		EQU	$00
00000000 =0000000C                  smpsPitch01hi		EQU	$0C
00000000 =00000018                  smpsPitch02hi		EQU	$18
00000000 =00000024                  smpsPitch03hi		EQU	$24
00000000 =00000030                  smpsPitch04hi		EQU	$30
00000000 =0000003C                  smpsPitch05hi		EQU	$3C
00000000 =00000048                  smpsPitch06hi		EQU	$48
00000000 =00000054                  smpsPitch07hi		EQU	$54
00000000 =00000060                  smpsPitch08hi		EQU	$60
00000000 =0000006C                  smpsPitch09hi		EQU	$6C
00000000 =00000078                  smpsPitch10hi		EQU	$78
00000000                            
00000000                            ; Note Equates
00000000 =00000080                  nRst			EQU	$80
00000000 =00000081                  nC0			EQU	$81
00000000 =00000082                  nCs0			EQU	$82
00000000 =00000083                  nD0			EQU	$83
00000000 =00000084                  nEb0			EQU	$84
00000000 =00000085                  nE0			EQU	$85
00000000 =00000086                  nF0			EQU	$86
00000000 =00000087                  nFs0			EQU	$87
00000000 =00000088                  nG0			EQU	$88
00000000 =00000089                  nAb0			EQU	$89
00000000 =0000008A                  nA0			EQU	$8A
00000000 =0000008B                  nBb0			EQU	$8B
00000000 =0000008C                  nB0			EQU	$8C
00000000 =0000008D                  nC1			EQU	$8D
00000000 =0000008E                  nCs1			EQU	$8E
00000000 =0000008F                  nD1			EQU	$8F
00000000 =00000090                  nEb1			EQU	$90
00000000 =00000091                  nE1			EQU	$91
00000000 =00000092                  nF1			EQU	$92
00000000 =00000093                  nFs1			EQU	$93
00000000 =00000094                  nG1			EQU	$94
00000000 =00000095                  nAb1			EQU	$95
00000000 =00000096                  nA1			EQU	$96
00000000 =00000097                  nBb1			EQU	$97
00000000 =00000098                  nB1			EQU	$98
00000000 =00000099                  nC2			EQU	$99
00000000 =0000009A                  nCs2			EQU	$9A
00000000 =0000009B                  nD2			EQU	$9B
00000000 =0000009C                  nEb2			EQU	$9C
00000000 =0000009D                  nE2			EQU	$9D
00000000 =0000009E                  nF2			EQU	$9E
00000000 =0000009F                  nFs2			EQU	$9F
00000000 =000000A0                  nG2			EQU	$A0
00000000 =000000A1                  nAb2			EQU	$A1
00000000 =000000A2                  nA2			EQU	$A2
00000000 =000000A3                  nBb2			EQU	$A3
00000000 =000000A4                  nB2			EQU	$A4
00000000 =000000A5                  nC3			EQU	$A5
00000000 =000000A6                  nCs3			EQU	$A6
00000000 =000000A7                  nD3			EQU	$A7
00000000 =000000A8                  nEb3			EQU	$A8
00000000 =000000A9                  nE3			EQU	$A9
00000000 =000000AA                  nF3			EQU	$AA
00000000 =000000AB                  nFs3			EQU	$AB
00000000 =000000AC                  nG3			EQU	$AC
00000000 =000000AD                  nAb3			EQU	$AD
00000000 =000000AE                  nA3			EQU	$AE
00000000 =000000AF                  nBb3			EQU	$AF
00000000 =000000B0                  nB3			EQU	$B0
00000000 =000000B1                  nC4			EQU	$B1
00000000 =000000B2                  nCs4			EQU	$B2
00000000 =000000B3                  nD4			EQU	$B3
00000000 =000000B4                  nEb4			EQU	$B4
00000000 =000000B5                  nE4			EQU	$B5
00000000 =000000B6                  nF4			EQU	$B6
00000000 =000000B7                  nFs4			EQU	$B7
00000000 =000000B8                  nG4			EQU	$B8
00000000 =000000B9                  nAb4			EQU	$B9
00000000 =000000BA                  nA4			EQU	$BA
00000000 =000000BB                  nBb4			EQU	$BB
00000000 =000000BC                  nB4			EQU	$BC
00000000 =000000BD                  nC5			EQU	$BD
00000000 =000000BE                  nCs5			EQU	$BE
00000000 =000000BF                  nD5			EQU	$BF
00000000 =000000C0                  nEb5			EQU	$C0
00000000 =000000C1                  nE5			EQU	$C1
00000000 =000000C2                  nF5			EQU	$C2
00000000 =000000C3                  nFs5			EQU	$C3
00000000 =000000C4                  nG5			EQU	$C4
00000000 =000000C5                  nAb5			EQU	$C5
00000000 =000000C6                  nA5			EQU	$C6
00000000 =000000C7                  nBb5			EQU	$C7
00000000 =000000C8                  nB5			EQU	$C8
00000000 =000000C9                  nC6			EQU	$C9
00000000 =000000CA                  nCs6			EQU	$CA
00000000 =000000CB                  nD6			EQU	$CB
00000000 =000000CC                  nEb6			EQU	$CC
00000000 =000000CD                  nE6			EQU	$CD
00000000 =000000CE                  nF6			EQU	$CE
00000000 =000000CF                  nFs6			EQU	$CF
00000000 =000000D0                  nG6			EQU	$D0
00000000 =000000D1                  nAb6			EQU	$D1
00000000 =000000D2                  nA6			EQU	$D2
00000000 =000000D3                  nBb6			EQU	$D3
00000000 =000000D4                  nB6			EQU	$D4
00000000 =000000D5                  nC7			EQU	$D5
00000000 =000000D6                  nCs7			EQU	$D6
00000000 =000000D7                  nD7			EQU	$D7
00000000 =000000D8                  nEb7			EQU	$D8
00000000 =000000D9                  nE7			EQU	$D9
00000000 =000000DA                  nF7			EQU	$DA
00000000 =000000DB                  nFs7			EQU	$DB
00000000 =000000DC                  nG7			EQU	$DC
00000000 =000000DD                  nAb7			EQU	$DD
00000000 =000000DE                  nA7			EQU	$DE
00000000 =000000DF                  nBb7			EQU	$DF
00000000                            
00000000                            ; DAC Equates
00000000 =00000081                  dKick			EQU	$81
00000000 =00000082                  dSnare			EQU	$82
00000000 =00000083                  dTimpani		EQU	$83
00000000 =00000088                  dHiTimpani		EQU	$88
00000000 =00000089                  dMidTimpani		EQU	$89
00000000 =0000008A                  dLowTimpani		EQU	$8A
00000000 =0000008B                  dVLowTimpani		EQU	$8B
00000000                            
00000000                            ; Header Macros
00000000                            ; Header - Set up Voice Location
00000000                            smpsHeaderVoice macro loc
00000000                            songStart set *
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            ; Header - Set up Channel Usage	
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro div,mod
00000000                            	dc.b	div,mod
00000000                            	endm
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc
00000000                            	dc.w	loc-songStart
00000000                            	dc.w	$00
00000000                            	endm
00000000                            ; Header - Set up FM Channel	
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,voice
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	dc.w	voice
00000000                            	endm
00000000                            
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            	
00000000                            ; E1xx - Alter note values by xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            	
00000000                            ; E2xx - Unknown
00000000                            smpsE2 macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            
00000000                            ; E3 - Return (generally used after F8)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            	
00000000                            ; E4 - Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            	endm
00000000                            	
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000                            	
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            	dc.b	$E8,val
00000000                            	endm
00000000                            	
00000000                            ; E9xx - Add xx to channel pitch
00000000                            smpsAlterPitch macro val
00000000                            	dc.b	$E9,val
00000000                            	endm
00000000                            	
00000000                            ; EAxx - Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro val
00000000                            	dc.b	$EA,val
00000000                            	endm
00000000                            	
00000000                            ; EBxx - Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            	
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	dc.b	$EC,val
00000000                            	endm
00000000                            	
00000000                            ; ED - Unknown
00000000 =000000ED                  smpsED		EQU $ED
00000000                            	
00000000                            ; EE - Unknown (Something to do with voice selection)
00000000 =000000EE                  smpsEE 		EQU $EE
00000000                            	
00000000                            ; EFxx - Set Voice of FM channel to xx
00000000                            smpsFMvoice macro voice
00000000                            	dc.b	$EF,voice
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0,wait,speed,change,step
00000000                            	endm
00000000                            	
00000000                            ; F1 - Turn on Modulation
00000000 =000000F1                  smpsModOn 	EQU $F1
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            	
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            	
00000000                            ; F4 - Turn off Modulation
00000000 =000000F4                  smpsModOff 	EQU $F4
00000000                            	
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            	
00000000                            ; F9 - Unknown
00000000 =000000F9                  smpsF9		EQU $F9
00000000                            
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set op1
00000000                            vcDT2 set op2
00000000                            vcDT3 set op3
00000000                            vcDT4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set op1
00000000                            vcCF2 set op2
00000000                            vcCF3 set op3
00000000                            vcCF4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set op1
00000000                            vcRS2 set op2
00000000                            vcRS3 set op3
00000000                            vcRS4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set op1
00000000                            vcAR2 set op2
00000000                            vcAR3 set op3
00000000                            vcAR4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set op1
00000000                            vcAM2 set op2
00000000                            vcAM3 set op3
00000000                            vcAM4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set op1
00000000                            vcD1R2 set op2
00000000                            vcD1R3 set op3
00000000                            vcD1R4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set op1
00000000                            vcD2R2 set op2
00000000                            vcD2R3 set op3
00000000                            vcD2R4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level	
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set op1
00000000                            vcDL2 set op2
00000000                            vcDL3 set op3
00000000                            vcDL4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set op1
00000000                            vcRR2 set op2
00000000                            vcRR3 set op3
00000000                            vcRR4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set op1
00000000                            vcTL2 set op2
00000000                            vcTL3 set op3
00000000                            vcTL4 set op4
00000000                            	dc.b	(vcFeedback<<3)+vcAlgorithm
00000000                            	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
00000000                            	dc.b	vcTL4,vcTL3,vcTL2,vcTL1	
00000000                            	endm
00000000                            	endm
00000000                            	include	"modlist.asm"	
00000000                            
00000000 =00000001                  warmpalettemod: = 1
00000000                            
00000000 =00000003                  showsplash: = 3
00000000                            
00000000 =00000001                  simplecheatentry: = 1
00000000                            
00000000 =00000001                  s2lvlselect: = 1
00000000                            
00000000 =00000000                  retainrings: = 0
00000000                            
00000000 =00000001                  spikeshield: = 1
00000000                            
00000000 =00000000                  dynamictitlecards: = 0
00000000                            
00000000 =00000001                  Spikefix: = 1
00000000                            
00000000 =00000001                  crashspikes: = 1
00000000                            
00000000 =00000001                  s2spindash: = 1
00000000                            
00000000 =00000001                  waterskim: = 1
00000000                            
00000000 =00000001                  spikesfxfix: = 1
00000000                            
00000000 =00000001                  specialstagejumpfix: = 1
00000000                            
00000000 =00000001                  shieldartmod: = 1
00000000                            
00000000 =00000000                  skipSega: = 0
00000000                            
00000000 =00000000                  peelout: = 0
00000000 =00000000                  peelout: = 0
00000000                            	include	"Constants (2).asm"
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Constants
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            ; VRAM data
00000000 =0000C000                  vram_fg:	equ $C000	; foreground namespace
00000000 =0000E000                  vram_bg:	equ $E000	; background namespace
00000000 =0000F000                  vram_sonic:	equ $F000	; Sonic graphics
00000000 =0000F800                  vram_sprites:	equ $F800	; sprite table
00000000 =0000FC00                  vram_hscroll:	equ $FC00	; horizontal scroll table
00000000                            
00000000                            ; Game modes
00000000                            id_Sega:	equ ptr_GM_Sega-GameModeArray	; $00
00000000                            id_Title:	equ ptr_GM_Title-GameModeArray	; $04
00000000                            id_Demo:	equ ptr_GM_Demo-GameModeArray	; $08
00000000                            id_Level:	equ ptr_GM_Level-GameModeArray	; $0C
00000000                            id_Special:	equ ptr_GM_Special-GameModeArray; $10
00000000                            id_Continue:	equ ptr_GM_Cont-GameModeArray	; $14
00000000                            id_Ending:	equ ptr_GM_Ending-GameModeArray	; $18
00000000                            id_Credits:	equ ptr_GM_Credits-GameModeArray; $1C
00000000                            
00000000                            ; Levels
00000000 =00000000                  id_GHZ:		equ 0
00000000 =00000001                  id_LZ:		equ 1
00000000 =00000002                  id_MZ:		equ 2
00000000 =00000003                  id_SLZ:		equ 3
00000000 =00000004                  id_SYZ:		equ 4
00000000 =00000005                  id_SBZ:		equ 5
00000000 =00000006                  id_EndZ:	equ 6
00000000                            
00000000                            ; Colours
00000000 =00000000                  cBlack:		equ $000		; colour black
00000000 =00000EEE                  cWhite:		equ $EEE		; colour white
00000000 =00000E00                  cBlue:		equ $E00		; colour blue
00000000 =000000E0                  cGreen:		equ $0E0		; colour green
00000000 =0000000E                  cRed:		equ $00E		; colour red
00000000 =000000EE                  cYellow:	equ cGreen+cRed		; colour yellow
00000000 =00000EE0                  cAqua:		equ cGreen+cBlue	; colour aqua
00000000 =00000E0E                  cMagenta:	equ cBlue+cRed		; colour magenta
00000000                            
00000000                            ; Joypad input
00000000 =00000080                  btnStart:	equ %10000000 ; Start button	($80)
00000000 =00000040                  btnA:		equ %01000000 ; A		($40)
00000000 =00000020                  btnC:		equ %00100000 ; C		($20)
00000000 =00000010                  btnB:		equ %00010000 ; B		($10)
00000000 =00000008                  btnR:		equ %00001000 ; Right		($08)
00000000 =00000004                  btnL:		equ %00000100 ; Left		($04)
00000000 =00000002                  btnDn:		equ %00000010 ; Down		($02)
00000000 =00000001                  btnUp:		equ %00000001 ; Up		($01)
00000000 =0000000F                  btnDir:		equ %00001111 ; Any direction	($0F)
00000000 =00000070                  btnABC:		equ %01110000 ; A, B or C	($70)
00000000 =00000007                  bitStart:	equ 7
00000000 =00000006                  bitA:		equ 6
00000000 =00000005                  bitC:		equ 5
00000000 =00000004                  bitB:		equ 4
00000000 =00000003                  bitR:		equ 3
00000000 =00000002                  bitL:		equ 2
00000000 =00000001                  bitDn:		equ 1
00000000 =00000000                  bitUp:		equ 0
00000000                            
00000000                            ; Object variables
00000000 =00000001                  obRender:	equ 1	; bitfield for x/y flip, display mode
00000000 =00000002                  obGfx:		equ 2	; palette line & VRAM setting (2 bytes)
00000000 =00000004                  obMap:		equ 4	; mappings address (4 bytes)
00000000 =00000008                  obX:		equ 8	; x-axis position (2-4 bytes)
00000000 =0000000A                  obScreenY:	equ $A	; y-axis position for screen-fixed items (2 bytes)
00000000 =0000000C                  obY:		equ $C	; y-axis position (2-4 bytes)
00000000 =00000010                  obVelX:		equ $10	; x-axis velocity (2 bytes)
00000000 =00000012                  obVelY:		equ $12	; y-axis velocity (2 bytes)
00000000 =00000014                  obInertia:	equ $14	; potential speed (2 bytes)
00000000 =00000016                  obHeight:	equ $16	; height/2
00000000 =00000017                  obWidth:	equ $17	; width/2
00000000 =00000018                  obPriority:	equ $18	; sprite stack priority -- 0 is front
00000000 =00000019                  obActWid:	equ $19	; action width
00000000 =0000001A                  obFrame:	equ $1A	; current frame displayed
00000000 =0000001B                  obAniFrame:	equ $1B	; current frame in animation script
00000000 =0000001C                  obAnim:		equ $1C	; current animation
00000000 =0000001D                  obNextAni:	equ $1D	; next animation
00000000 =0000001E                  obTimeFrame:	equ $1E	; time to next frame
00000000 =0000001F                  obDelayAni:	equ $1F	; time to delay animation
00000000 =00000020                  obColType:	equ $20	; collision response type
00000000 =00000021                  obColProp:	equ $21	; collision extra property
00000000 =00000022                  obStatus:	equ $22	; orientation or mode
00000000 =00000023                  obRespawnNo:	equ $23	; respawn list index number
00000000 =00000024                  obRoutine:	equ $24	; routine number
00000000 =00000025                  ob2ndRout:	equ $25	; secondary routine number
00000000 =00000026                  obAngle:	equ $26	; angle
00000000 =00000028                  obSubtype:	equ $28	; object subtype
00000000 =00000025                  obSolid:	equ ob2ndRout ; solid status flag
00000000                            
00000000                            ; Animation flags
00000000 =000000FF                  afEnd:		equ $FF	; return to beginning of animation
00000000 =000000FE                  afBack:		equ $FE	; go back (specified number) bytes
00000000 =000000FD                  afChange:	equ $FD	; run specified animation
00000000 =000000FC                  afRoutine:	equ $FC	; increment routine counter
00000000 =000000FB                  afReset:	equ $FB	; reset animation and 2nd object routine counter
00000000 =000000FA                  af2ndRoutine:	equ $FA	; increment 2nd routine counter
00000000                            
00000000                            ; Background music
00000000                            bgm_GHZ:	equ ((ptr_mus81-MusicIndex)/4)+$81
00000000                            bgm_LZ:		equ ((ptr_mus82-MusicIndex)/4)+$81
00000000                            bgm_MZ:		equ ((ptr_mus83-MusicIndex)/4)+$81
00000000                            bgm_SLZ:	equ ((ptr_mus84-MusicIndex)/4)+$81
00000000                            bgm_SYZ:	equ ((ptr_mus85-MusicIndex)/4)+$81
00000000                            bgm_SBZ:	equ ((ptr_mus86-MusicIndex)/4)+$81
00000000                            bgm_Invincible:	equ ((ptr_mus87-MusicIndex)/4)+$81
00000000                            bgm_ExtraLife:	equ ((ptr_mus88-MusicIndex)/4)+$81
00000000                            bgm_SS:		equ ((ptr_mus89-MusicIndex)/4)+$81
00000000                            bgm_Title:	equ ((ptr_mus8A-MusicIndex)/4)+$81
00000000                            bgm_Ending:	equ ((ptr_mus8B-MusicIndex)/4)+$81
00000000                            bgm_Boss:	equ ((ptr_mus8C-MusicIndex)/4)+$81
00000000                            bgm_FZ:		equ ((ptr_mus8D-MusicIndex)/4)+$81
00000000                            bgm_GotThrough:	equ ((ptr_mus8E-MusicIndex)/4)+$81
00000000                            bgm_GameOver:	equ ((ptr_mus8F-MusicIndex)/4)+$81
00000000                            bgm_Continue:	equ ((ptr_mus90-MusicIndex)/4)+$81
00000000                            bgm_Credits:	equ ((ptr_mus91-MusicIndex)/4)+$81
00000000                            bgm_Drowning:	equ ((ptr_mus92-MusicIndex)/4)+$81
00000000                            bgm_Emerald:	equ ((ptr_mus93-MusicIndex)/4)+$81
00000000                            
00000000                            ; Sound effects
00000000                            sfx_Jump:	equ ((ptr_sndA0-SoundIndex)/4)+$A0
00000000                            sfx_Lamppost:	equ ((ptr_sndA1-SoundIndex)/4)+$A0
00000000                            sfx_A2:		equ ((ptr_sndA2-SoundIndex)/4)+$A0
00000000                            sfx_Death:	equ ((ptr_sndA3-SoundIndex)/4)+$A0
00000000                            sfx_Skid:	equ ((ptr_sndA4-SoundIndex)/4)+$A0
00000000                            sfx_A5:		equ ((ptr_sndA5-SoundIndex)/4)+$A0
00000000                            sfx_HitSpikes:	equ ((ptr_sndA6-SoundIndex)/4)+$A0
00000000                            sfx_Push:	equ ((ptr_sndA7-SoundIndex)/4)+$A0
00000000                            sfx_SSGoal:	equ ((ptr_sndA8-SoundIndex)/4)+$A0
00000000                            sfx_SSItem:	equ ((ptr_sndA9-SoundIndex)/4)+$A0
00000000                            sfx_Splash:	equ ((ptr_sndAA-SoundIndex)/4)+$A0
00000000                            sfx_AB:		equ ((ptr_sndAB-SoundIndex)/4)+$A0
00000000                            sfx_HitBoss:	equ ((ptr_sndAC-SoundIndex)/4)+$A0
00000000                            sfx_Bubble:	equ ((ptr_sndAD-SoundIndex)/4)+$A0
00000000                            sfx_Fireball:	equ ((ptr_sndAE-SoundIndex)/4)+$A0
00000000                            sfx_Shield:	equ ((ptr_sndAF-SoundIndex)/4)+$A0
00000000                            sfx_Saw:	equ ((ptr_sndB0-SoundIndex)/4)+$A0
00000000                            sfx_Electric:	equ ((ptr_sndB1-SoundIndex)/4)+$A0
00000000                            sfx_Drown:	equ ((ptr_sndB2-SoundIndex)/4)+$A0
00000000                            sfx_Flamethrower:equ ((ptr_sndB3-SoundIndex)/4)+$A0
00000000                            sfx_Bumper:	equ ((ptr_sndB4-SoundIndex)/4)+$A0
00000000                            sfx_Ring:	equ ((ptr_sndB5-SoundIndex)/4)+$A0
00000000                            sfx_SpikesMove:	equ ((ptr_sndB6-SoundIndex)/4)+$A0
00000000                            sfx_Rumbling:	equ ((ptr_sndB7-SoundIndex)/4)+$A0
00000000                            sfx_B8:		equ ((ptr_sndB8-SoundIndex)/4)+$A0
00000000                            sfx_Collapse:	equ ((ptr_sndB9-SoundIndex)/4)+$A0
00000000                            sfx_SSGlass:	equ ((ptr_sndBA-SoundIndex)/4)+$A0
00000000                            sfx_Door:	equ ((ptr_sndBB-SoundIndex)/4)+$A0
00000000                            sfx_Teleport:	equ ((ptr_sndBC-SoundIndex)/4)+$A0
00000000                            sfx_ChainStomp:	equ ((ptr_sndBD-SoundIndex)/4)+$A0
00000000                            sfx_Roll:	equ ((ptr_sndBE-SoundIndex)/4)+$A0
00000000                            sfx_Continue:	equ ((ptr_sndBF-SoundIndex)/4)+$A0
00000000                            sfx_Basaran:	equ ((ptr_sndC0-SoundIndex)/4)+$A0
00000000                            sfx_BreakItem:	equ ((ptr_sndC1-SoundIndex)/4)+$A0
00000000                            sfx_Warning:	equ ((ptr_sndC2-SoundIndex)/4)+$A0
00000000                            sfx_GiantRing:	equ ((ptr_sndC3-SoundIndex)/4)+$A0
00000000                            sfx_Bomb:	equ ((ptr_sndC4-SoundIndex)/4)+$A0
00000000                            sfx_Cash:	equ ((ptr_sndC5-SoundIndex)/4)+$A0
00000000                            sfx_RingLoss:	equ ((ptr_sndC6-SoundIndex)/4)+$A0
00000000                            sfx_ChainRise:	equ ((ptr_sndC7-SoundIndex)/4)+$A0
00000000                            sfx_Burning:	equ ((ptr_sndC8-SoundIndex)/4)+$A0
00000000                            sfx_Bonus:	equ ((ptr_sndC9-SoundIndex)/4)+$A0
00000000                            sfx_EnterSS:	equ ((ptr_sndCA-SoundIndex)/4)+$A0
00000000                            sfx_WallSmash:	equ ((ptr_sndCB-SoundIndex)/4)+$A0
00000000                            sfx_Spring:	equ ((ptr_sndCC-SoundIndex)/4)+$A0
00000000                            sfx_Switch:	equ ((ptr_sndCD-SoundIndex)/4)+$A0
00000000                            sfx_RingLeft:	equ ((ptr_sndCE-SoundIndex)/4)+$A0
00000000                            sfx_Signpost:	equ ((ptr_sndCF-SoundIndex)/4)+$A0
00000000 =000000D0                  sfx_Waterfall:	equ $D0
00000000 =000000D0                  sfx_Waterfall:	equ $D0
00000000                            	include	"Variables (2).asm"
00000000                            ; Variables (v) and Flags (f)
00000000 =FFFFFFBF                  v_palmuscounter  = $FFFFFFBF	; counts up to 5 then runs UpdateMusic twice
00000000                            
00000000 =FFFFFC00                  v_regbuffer:	= $FFFFFC00	; stores registers d0-a7 during an error event ($40 bytes)
00000000 =FFFFFC40                  v_spbuffer:	= $FFFFFC40	; stores most recent sp address (4 bytes)
00000000 =FFFFFC44                  v_errortype:	= $FFFFFC44	; error type
00000000                            
00000000 =00FF0000                  v_256x256:	=   $FF0000	; 256x256 tile mappings ($A400 bytes)
00000000 =FFFFA400                  v_lvllayout:	= $FFFFA400	; level and background layouts ($400 bytes)
00000000                            
00000000 =FFFFAA00                  v_ngfx_buffer:	= $FFFFAA00	; Nemesis graphics decompression buffer ($200 bytes)
00000000 =FFFFAC00                  v_spritequeue:	= $FFFFAC00	; sprite display queue, in order of priority ($400 bytes)
00000000 =FFFFB000                  v_16x16:	= $FFFFB000	; 16x16 tile mappings
00000000                            
00000000 =FFFFC800                  v_sgfx_buffer:	= $FFFFC800	; buffered Sonic graphics ($18 cells) ($300 bytes)
00000000 =FFFFCB00                  v_tracksonic:	= $FFFFCB00	; position tracking data for Sonic ($100 bytes)
00000000 =FFFFCC00                  v_scrolltable:	= $FFFFCC00	; scrolling table data ($400 bytes)
00000000 =FFFFD000                  v_objspace:	= $FFFFD000	; object variable space ($40 bytes per object) ($2000 bytes)
00000000 =FFFFD000                  v_player:	= v_objspace	; object variable space for Sonic ($40 bytes)
00000000 =FFFFD800                  v_lvlobjspace:	= $FFFFD800	; level object variable space ($1800 bytes)
00000000 =FFFFF000                  v_sndtype:	= $FFFFF000	; sound type (90=music; 80=waterfall; 70=sound; 68/60=special sound)
00000000                            
00000000 =FFFFF003                  f_stopmusic:	= $FFFFF003	; flag set to stop music when paused
00000000                            
00000000 =FFFFF009                  v_playsnd0:	= $FFFFF009	; sound or music copied from below
00000000 =FFFFF00A                  v_playsnd1:	= $FFFFF00A	; sound or music to play
00000000 =FFFFF00B                  v_playsnd2:	= $FFFFF00B	; special sound to play
00000000 =FFFFF00C                  v_playnull:	= $FFFFF00C	; unused sound to play
00000000                            
00000000 =FFFFF018                  v_voice_ptr:	= $FFFFF018	; voice data pointer (4 bytes)
00000000                            
00000000 =FFFFF028                  v_tempo_mod:	= $FFFFF028	; music - tempo modifier
00000000                            
00000000 =FFFFF02B                  v_ring_speaker:	= $FFFFF02B	; which speaker the "ring" sound is played in (00 = right; 01 = left)
00000000                            
00000000 =FFFFF042                  v_tempo_time:	= $FFFFF042	; music - tempo dividing timing
00000000                            
00000000 =FFFFF044                  v_dac_ptr:	= $FFFFF044	; DAC channel pointer (4 bytes)
00000000                            
00000000 =FFFFF074                  v_fm1_ptr:	= $FFFFF074	; FM channel 1 pointer (4 bytes)
00000000 =FFFFF078                  v_fm1_mod:	= $FFFFF078	; FM channel 1 modifier (2 bytes)
00000000                            
00000000 =FFFFF0A4                  v_fm2_ptr:	= $FFFFF0A4	; FM channel 2 pointer (4 bytes)
00000000 =FFFFF0A8                  v_fm2_mod:	= $FFFFF0A8	; FM channel 2 modifier (2 bytes)
00000000                            
00000000 =FFFFF0D4                  v_fm3_ptr:	= $FFFFF0D4	; FM channel 3 pointer (4 bytes)
00000000 =FFFFF0D8                  v_fm3_mod:	= $FFFFF0D8	; FM channel 3 modifier (2 bytes)
00000000                            
00000000 =FFFFF104                  v_fm4_ptr:	= $FFFFF104	; FM channel 4 pointer (4 bytes)
00000000 =FFFFF108                  v_fm4_mod:	= $FFFFF108	; FM channel 4 modifier (2 bytes)
00000000                            
00000000 =FFFFF134                  v_fm5_ptr:	= $FFFFF134	; FM channel 5 pointer (4 bytes)
00000000 =FFFFF138                  v_fm5_mod:	= $FFFFF138	; FM channel 5 modifier (2 bytes)
00000000                            
00000000 =FFFFF194                  v_psg1_ptr:	= $FFFFF194	; PSG channel 1 pointer (4 bytes)
00000000 =FFFFF198                  v_psg1_mod:	= $FFFFF198	; PSG channel 1 modifier (2 bytes)
00000000                            
00000000 =FFFFF1C4                  v_psg2_ptr:	= $FFFFF1C4	; PSG channel 2 pointer (4 bytes)
00000000 =FFFFF1C8                  v_psg2_mod:	= $FFFFF1C8	; PSG channel 2 modifier (2 bytes)
00000000                            
00000000 =FFFFF1F4                  v_psg3_ptr:	= $FFFFF1F4	; PSG channel 3 pointer (4 bytes)
00000000 =FFFFF1F8                  v_psg3_mod:	= $FFFFF1F8	; PSG channel 3 modifier (2 bytes)
00000000                            
00000000 =FFFFF3CA                  f_fastmusic:	= $FFFFF3CA	; flag set to speed up the music (00 = normal; 80 = fast)
00000000                            
00000000 =FFFFF600                  v_gamemode:	= $FFFFF600	; game mode (00=Sega; 04=Title; 08=Demo; 0C=Level; 10=SS; 14=Cont; 18=End; 1C=Credit; +8C=PreLevel)
00000000 =FFFFF602                  v_jpadhold2:	= $FFFFF602	; joypad input - held, duplicate
00000000 =FFFFF603                  v_jpadpress2:	= $FFFFF603	; joypad input - pressed, duplicate
00000000 =FFFFF604                  v_jpadhold1:	= $FFFFF604	; joypad input - held
00000000 =FFFFF605                  v_jpadpress1:	= $FFFFF605	; joypad input - pressed
00000000                            
00000000 =FFFFF60C                  v_vdp_buffer1:	= $FFFFF60C	; VDP instruction buffer (2 bytes)
00000000                            
00000000 =FFFFF614                  v_demolength:	= $FFFFF614	; the length of a demo in frames (2 bytes)
00000000 =FFFFF616                  v_scrposy_dup:	= $FFFFF616	; screen position y (duplicate) (2 bytes)
00000000                            
00000000 =FFFFF61A                  v_scrposx_dup:	= $FFFFF61A	; screen position x (duplicate) (2 bytes)
00000000                            
00000000 =FFFFF624                  v_hbla_hreg:	= $FFFFF624	; VDP H.interrupt register buffer (8Axx) (2 bytes)
00000000 =FFFFF625                  v_hbla_line:	= $FFFFF625	; screen line where water starts and palette is changed by HBlank
00000000 =FFFFF626                  v_pfade_start:	= $FFFFF626	; palette fading - start position in bytes
00000000 =FFFFF627                  v_pfade_size:	= $FFFFF627	; palette fading - number of colours
00000000 =FFFFF62A                  v_vbla_routine:	= $FFFFF62A	; VBlank - routine counter
00000000 =FFFFF62C                  v_spritecount:	= $FFFFF62C	; number of sprites on-screen
00000000 =FFFFF632                  v_pcyc_num:	= $FFFFF632	; palette cycling - current reference number (2 bytes)
00000000 =FFFFF634                  v_pcyc_time:	= $FFFFF634	; palette cycling - time until the next change (2 bytes)
00000000 =FFFFF636                  v_random:	= $FFFFF636	; pseudo random number buffer (4 bytes)
00000000 =FFFFF63A                  f_pause:	= $FFFFF63A	; flag set to pause the game (2 bytes)
00000000 =FFFFF640                  v_vdp_buffer2:	= $FFFFF640	; VDP instruction buffer (2 bytes)
00000000 =FFFFF644                  f_hbla_pal:	= $FFFFF644	; flag set to change palette during HBlank (0000 = no; 0001 = change) (2 bytes)
00000000 =FFFFF646                  v_waterpos1:	= $FFFFF646	; water height, actual (2 bytes)
00000000 =FFFFF648                  v_waterpos2:	= $FFFFF648	; water height, ignoring sway (2 bytes)
00000000 =FFFFF64A                  v_waterpos3:	= $FFFFF64A	; water height, next target (2 bytes)
00000000 =FFFFF64C                  f_water:	= $FFFFF64C	; flag set for water
00000000 =FFFFF64D                  v_wtr_routine:	= $FFFFF64D	; water event - routine counter
00000000 =FFFFF64E                  f_wtr_state:	= $FFFFF64E	; water palette state when water is above/below the screen (00 = partly/all dry; 01 = all underwater)
00000000                            
00000000 =FFFFF650                  v_pal_buffer:	= $FFFFF650	; palette data buffer (used for palette cycling) ($30 bytes)
00000000 =FFFFF680                  v_plc_buffer:	= $FFFFF680	; pattern load cues buffer (maximum $10 PLCs) ($60 bytes)
00000000 =FFFFF6E0                  v_ptrnemcode:	= $FFFFF6E0	; pointer for nemesis decompression code ($1502 or $150C) (4 bytes)
00000000                            
00000000 =FFFFF6F8                  f_plc_execute:	= $FFFFF6F8	; flag set for pattern load cue execution (2 bytes)
00000000                            
00000000 =FFFFF700                  v_screenposx:	= $FFFFF700	; screen position x (2 bytes)
00000000                            
00000000 =FFFFF704                  v_screenposy:	= $FFFFF704	; screen position y (2 bytes)
00000000                            
00000000 =FFFFF720                  v_limitleft1:	= $FFFFF720	; left level boundary (2 bytes)
00000000 =FFFFF722                  v_limitright1:	= $FFFFF722	; right level boundary (2 bytes)
00000000 =FFFFF724                  v_limittop1:	= $FFFFF724	; top level boundary (2 bytes)
00000000 =FFFFF726                  v_limitbtm1:	= $FFFFF726	; bottom level boundary (2 bytes)
00000000 =FFFFF728                  v_limitleft2:	= $FFFFF728	; left level boundary (2 bytes)
00000000 =FFFFF72A                  v_limitright2:	= $FFFFF72A	; right level boundary (2 bytes)
00000000 =FFFFF72C                  v_limittop2:	= $FFFFF72C	; top level boundary (2 bytes)
00000000 =FFFFF72E                  v_limitbtm2:	= $FFFFF72E	; bottom level boundary (2 bytes)
00000000                            
00000000 =FFFFF732                  v_limitleft3:	= $FFFFF732	; left level boundary, at the end of an act (2 bytes)
00000000                            
00000000 =FFFFF73A                  v_scrshiftx:	= $FFFFF73A	; screen shift as Sonic moves horizontally
00000000                            
00000000 =FFFFF73E                  v_lookshift:	= $FFFFF73E	; screen shift when Sonic looks up/down (2 bytes)
00000000 =FFFFF742                  v_dle_routine:	= $FFFFF742	; dynamic level event - routine counter
00000000 =FFFFF744                  f_nobgscroll:	= $FFFFF744	; flag set to cancel background scrolling
00000000                            
00000000 =FFFFF754                  v_bgscroll1:	= $FFFFF754	; background scrolling variable 1
00000000 =FFFFF756                  v_bgscroll2:	= $FFFFF756	; background scrolling variable 2
00000000 =FFFFF758                  v_bgscroll3:	= $FFFFF758	; background scrolling variable 3
00000000 =FFFFF75C                  f_bgscrollvert:	= $FFFFF75C	; flag for vertical background scrolling
00000000 =FFFFF760                  v_sonspeedmax:	= $FFFFF760	; Sonic's maximum speed (2 bytes)
00000000 =FFFFF762                  v_sonspeedacc:	= $FFFFF762	; Sonic's acceleration (2 bytes)
00000000 =FFFFF764                  v_sonspeeddec:	= $FFFFF764	; Sonic's deceleration (2 bytes)
00000000 =FFFFF766                  v_sonframenum:	= $FFFFF766	; frame to display for Sonic
00000000 =FFFFF767                  f_sonframechg:	= $FFFFF767	; flag set to update Sonic's sprite frame
00000000 =FFFFF768                  v_anglebuffer:	= $FFFFF768	; angle of collision block that Sonic or object is standing on
00000000                            
00000000 =FFFFF76C                  v_opl_routine:	= $FFFFF76C	; ObjPosLoad - routine counter
00000000 =FFFFF76E                  v_opl_screen:	= $FFFFF76E	; ObjPosLoad - screen variable
00000000 =FFFFF770                  v_opl_data:	= $FFFFF770	; ObjPosLoad - data buffer ($10 bytes)
00000000                            
00000000 =FFFFF780                  v_ssangle:	= $FFFFF780	; Special Stage angle (2 bytes)
00000000 =FFFFF782                  v_ssrotate:	= $FFFFF782	; Special Stage rotation speed (2 bytes)
00000000                            
00000000 =FFFFF790                  v_btnpushtime1:	= $FFFFF790	; button push duration - in level (2 bytes)
00000000 =FFFFF792                  v_btnpushtime2:	= $FFFFF792	; button push duration - in demo (2 bytes)
00000000 =FFFFF794                  v_palchgspeed:	= $FFFFF794	; palette fade/transition speed (0 is fastest) (2 bytes)
00000000 =FFFFF796                  v_collindex:	= $FFFFF796	; ROM address for collision index of current level (4 bytes)
00000000 =FFFFF79A                  v_palss_num:	= $FFFFF79A	; palette cycling in Special Stage - reference number (2 bytes)
00000000 =FFFFF79C                  v_palss_time:	= $FFFFF79C	; palette cycling in Special Stage - time until next change (2 bytes)
00000000                            
00000000 =FFFFF7A4                  v_obj31ypos:	= $FFFFF7A4	; y-position of object 31 (MZ stomper) (2 bytes)
00000000 =FFFFF7A7                  v_bossstatus:	= $FFFFF7A7	; status of boss and prison capsule (01 = boss defeated; 02 = prison opened)
00000000 =FFFFF7A8                  v_trackpos:	= $FFFFF7A8	; position tracking reference number (2 bytes)
00000000 =FFFFF7A9                  v_trackbyte:	= $FFFFF7A9	; low byte for position tracking
00000000 =FFFFF7AA                  f_lockscreen:	= $FFFFF7AA	; flag set to lock screen during bosses
00000000 =FFFFF7AC                  v_256loop1:	= $FFFFF7AC	; 256x256 level tile which contains a loop (GHZ/SLZ)
00000000 =FFFFF7AD                  v_256loop2:	= $FFFFF7AD	; 256x256 level tile which contains a loop (GHZ/SLZ)
00000000 =FFFFF7AE                  v_256roll1:	= $FFFFF7AE	; 256x256 level tile which contains a roll tunnel (GHZ)
00000000 =FFFFF7AF                  v_256roll2:	= $FFFFF7AF	; 256x256 level tile which contains a roll tunnel (GHZ)
00000000 =FFFFF7B0                  v_lani0_frame:	= $FFFFF7B0	; level graphics animation 0 - current frame
00000000 =FFFFF7B1                  v_lani0_time:	= $FFFFF7B1	; level graphics animation 0 - time until next frame
00000000 =FFFFF7B2                  v_lani1_frame:	= $FFFFF7B2	; level graphics animation 1 - current frame
00000000 =FFFFF7B3                  v_lani1_time:	= $FFFFF7B3	; level graphics animation 1 - time until next frame
00000000 =FFFFF7B4                  v_lani2_frame:	= $FFFFF7B4	; level graphics animation 2 - current frame
00000000 =FFFFF7B5                  v_lani2_time:	= $FFFFF7B5	; level graphics animation 2 - time until next frame
00000000 =FFFFF7B6                  v_lani3_frame:	= $FFFFF7B6	; level graphics animation 3 - current frame
00000000 =FFFFF7B7                  v_lani3_time:	= $FFFFF7B7	; level graphics animation 3 - time until next frame
00000000 =FFFFF7B8                  v_lani4_frame:	= $FFFFF7B8	; level graphics animation 4 - current frame
00000000 =FFFFF7B9                  v_lani4_time:	= $FFFFF7B9	; level graphics animation 4 - time until next frame
00000000 =FFFFF7BA                  v_lani5_frame:	= $FFFFF7BA	; level graphics animation 5 - current frame
00000000 =FFFFF7BB                  v_lani5_time:	= $FFFFF7BB	; level graphics animation 5 - time until next frame
00000000 =FFFFF7BE                  v_gfxbigring:	= $FFFFF7BE	; settings for giant ring graphics loading (2 bytes)
00000000 =FFFFF7C0                  f_conveyrev:	= $FFFFF7C0	; flag set to reverse conveyor belts in LZ/SBZ
00000000 =FFFFF7C1                  v_obj63:	= $FFFFF7C1	; object 63 (LZ/SBZ platforms) variables (6 bytes)
00000000 =FFFFF7C7                  f_wtunnelmode:	= $FFFFF7C7	; LZ water tunnel mode
00000000 =FFFFF7C8                  f_lockmulti:	= $FFFFF7C8	; flag set to lock controls, lock Sonic's position & animation
00000000 =FFFFF7C9                  f_wtunnelallow:	= $FFFFF7C9	; LZ water tunnels (00 = enabled; 01 = disabled)
00000000 =FFFFF7CA                  f_jumponly:	= $FFFFF7CA	; flag set to lock controls apart from jumping
00000000 =FFFFF7CB                  v_obj6B:	= $FFFFF7CB	; object 6B (SBZ stomper) variable
00000000 =FFFFF7CC                  f_lockctrl:	= $FFFFF7CC	; flag set to lock controls during ending sequence
00000000 =FFFFF7CD                  f_bigring:	= $FFFFF7CD	; flag set when Sonic collects the giant ring
00000000 =FFFFF7D0                  v_itembonus:	= $FFFFF7D0	; item bonus from broken enemies, blocks etc. (2 bytes)
00000000 =FFFFF7D2                  v_timebonus:	= $FFFFF7D2	; time bonus at the end of an act (2 bytes)
00000000 =FFFFF7D4                  v_ringbonus:	= $FFFFF7D4	; ring bonus at the end of an act (2 bytes)
00000000 =FFFFF7D6                  f_endactbonus:	= $FFFFF7D6	; time/ring bonus update flag at the end of an act
00000000 =FFFFF7D7                  v_sonicend:	= $FFFFF7D7	; routine counter for Sonic in the ending sequence
00000000 =FFFFF7E0                  f_switch:	= $FFFFF7E0	; flags set when Sonic stands on a switch ($10 bytes)
00000000                            
00000000 =FFFFF800                  v_sprites:	= $FFFFF800	; sprite table ($200 bytes)
00000000 =FFFFFA00                  v_pal0_wat:	= $FFFFFA00	; duplicate palette data - underwater ($80 bytes)
00000000 =FFFFFA80                  v_pal0_dry:	= $FFFFFA80	; duplicate palette data - main ($80 bytes)
00000000 =FFFFFB00                  v_pal1_wat:	= $FFFFFB00	; palette data - underwater ($80 bytes)
00000000 =FFFFFB80                  v_pal1_dry:	= $FFFFFB80	; palette data - main ($80 bytes)
00000000 =FFFFFC00                  v_objstate:	= $FFFFFC00	; object state list ($200 bytes)
00000000 =FFFFFE02                  f_restart:	= $FFFFFE02	; restart level flag (2 bytes)
00000000 =FFFFFE04                  v_framecount:	= $FFFFFE04	; frame counter (adds 1 every frame) (2 bytes)
00000000 =FFFFFE05                  v_framebyte:	= v_framecount+1; low byte for frame counter
00000000 =FFFFFE06                  v_debugitem:	= $FFFFFE06	; debug item currently selected (NOT the object number of the item)
00000000 =FFFFFE08                  v_debuguse:	= $FFFFFE08	; debug mode use & routine counter (when Sonic is a ring/item) (2 bytes)
00000000 =FFFFFE0A                  v_debugxspeed:	= $FFFFFE0A	; debug mode - horizontal speed
00000000 =FFFFFE0B                  v_debugyspeed:	= $FFFFFE0B	; debug mode - vertical speed
00000000 =FFFFFE0C                  v_vbla_count:	= $FFFFFE0C	; vertical interrupt counter (adds 1 every VBlank) (4 bytes)
00000000 =FFFFFE0E                  v_vbla_word:	= v_vbla_count+2 ; low word for vertical interrupt counter (2 bytes)
00000000 =FFFFFE0F                  v_vbla_byte:	= v_vbla_word+1	; low byte for vertical interrupt counter
00000000 =FFFFFE10                  v_zone:		= $FFFFFE10	; current zone number
00000000 =FFFFFE11                  v_act:		= $FFFFFE11	; current act number
00000000 =FFFFFE12                  v_lives:	= $FFFFFE12	; number of lives
00000000 =FFFFFE14                  v_air:		= $FFFFFE14	; air remaining while underwater (2 bytes)
00000000 =FFFFFE15                  v_airbyte:	= v_air+1	; low byte for air
00000000 =FFFFFE16                  v_lastspecial:	= $FFFFFE16	; last special stage number
00000000 =FFFFFE18                  v_continues:	= $FFFFFE18	; number of continues
00000000 =FFFFFE1A                  f_timeover:	= $FFFFFE1A	; time over flag
00000000 =FFFFFE1B                  v_lifecount:	= $FFFFFE1B	; lives counter value (for actual number, see "v_lives")
00000000 =FFFFFE1C                  f_lifecount:	= $FFFFFE1C	; lives counter update flag
00000000 =FFFFFE1D                  f_ringcount:	= $FFFFFE1D	; ring counter update flag
00000000 =FFFFFE1E                  f_timecount:	= $FFFFFE1E	; time counter update flag
00000000 =FFFFFE1F                  f_scorecount:	= $FFFFFE1F	; score counter update flag
00000000 =FFFFFE20                  v_rings:	= $FFFFFE20	; rings (2 bytes)
00000000 =FFFFFE21                  v_ringbyte:	= v_rings+1	; low byte for rings
00000000 =FFFFFE22                  v_time:		= $FFFFFE22	; time (4 bytes)
00000000 =FFFFFE23                  v_timemin:	= $FFFFFE23	; time - minutes
00000000 =FFFFFE24                  v_timesec:	= $FFFFFE24	; time - seconds
00000000 =FFFFFE25                  v_timecent:	= $FFFFFE25	; time - centiseconds
00000000 =FFFFFE26                  v_score:	= $FFFFFE26	; score (4 bytes)
00000000 =FFFFFE2C                  v_shield:	= $FFFFFE2C	; shield status (00 = no; 01 = yes)
00000000 =FFFFFE2D                  v_invinc:	= $FFFFFE2D	; invinciblity status (00 = no; 01 = yes)
00000000 =FFFFFE2E                  v_shoes:	= $FFFFFE2E	; speed shoes status (00 = no; 01 = yes)
00000000 =FFFFFE30                  v_lastlamp:	= $FFFFFE30	; number of the last lamppost you hit
00000000 =FFFFFE32                  v_lamp_xpos:	= v_lastlamp+2	; x-axis for Sonic to respawn at lamppost (2 bytes)
00000000 =FFFFFE34                  v_lamp_ypos:	= v_lastlamp+4	; y-axis for Sonic to respawn at lamppost (2 bytes)
00000000 =FFFFFE36                  v_lamp_rings:	= v_lastlamp+6	; rings stored at lamppost (2 bytes)
00000000 =FFFFFE38                  v_lamp_time:	= v_lastlamp+8	; time stored at lamppost (2 bytes)
00000000 =FFFFFE3C                  v_lamp_dle:	= v_lastlamp+$C	; dynamic level event routine counter at lamppost
00000000 =FFFFFE3E                  v_lamp_limitbtm:= v_lastlamp+$E	; level bottom boundary at lamppost (2 bytes)
00000000 =FFFFFE40                  v_lamp_scrx:	= v_lastlamp+$10 ; x-axis screen at lamppost (2 bytes)
00000000 =FFFFFE42                  v_lamp_scry:	= v_lastlamp+$12 ; y-axis screen at lamppost (2 bytes)
00000000                            
00000000 =FFFFFE50                  v_lamp_wtrpos:	= v_lastlamp+$20 ; water position at lamppost (2 bytes)
00000000 =FFFFFE52                  v_lamp_wtrrout:	= v_lastlamp+$22 ; water routine at lamppost
00000000 =FFFFFE53                  v_lamp_wtrstat:	= v_lastlamp+$23 ; water state at lamppost
00000000 =FFFFFE54                  v_lamp_lives:	= v_lastlamp+$24 ; lives counter at lamppost
00000000 =FFFFFE57                  v_emeralds:	= $FFFFFE57	; number of chaos emeralds
00000000 =FFFFFE58                  v_emldlist:	= $FFFFFE58	; which individual emeralds you have (00 = no; 01 = yes) (6 bytes)
00000000 =FFFFFE5E                  v_oscillate:	= $FFFFFE5E	; values which oscillate - for swinging platforms, et al ($42 bytes)
00000000                            
00000000 =FFFFFEC0                  v_ani0_time:	= $FFFFFEC0	; synchronised sprite animation 0 - time until next frame (used for synchronised animations)
00000000 =FFFFFEC1                  v_ani0_frame:	= $FFFFFEC1	; synchronised sprite animation 0 - current frame
00000000 =FFFFFEC2                  v_ani1_time:	= $FFFFFEC2	; synchronised sprite animation 1 - time until next frame
00000000 =FFFFFEC3                  v_ani1_frame:	= $FFFFFEC3	; synchronised sprite animation 1 - current frame
00000000 =FFFFFEC4                  v_ani2_time:	= $FFFFFEC4	; synchronised sprite animation 2 - time until next frame
00000000 =FFFFFEC5                  v_ani2_frame:	= $FFFFFEC5	; synchronised sprite animation 2 - current frame
00000000 =FFFFFEC6                  v_ani3_time:	= $FFFFFEC6	; synchronised sprite animation 3 - time until next frame
00000000 =FFFFFEC7                  v_ani3_frame:	= $FFFFFEC7	; synchronised sprite animation 3 - current frame
00000000 =FFFFFEC8                  v_ani3_buf:	= $FFFFFEC8	; synchronised sprite animation 3 - info buffer (2 bytes)
00000000 =FFFFFEF0                  v_limittopdb:	= $FFFFFEF0	; level upper boundary, buffered for debug mode (2 bytes)
00000000 =FFFFFEF2                  v_limitbtmdb:	= $FFFFFEF2	; level bottom boundary, buffered for debug mode (2 bytes)
00000000                            
00000000 =FFFFFF80                  v_levseldelay:	= $FFFFFF80	; level select - time until change when up/down is held (2 bytes)
00000000 =FFFFFF82                  v_levselitem:	= $FFFFFF82	; level select - item selected (2 bytes)
00000000 =FFFFFF84                  v_levselsound:	= $FFFFFF84	; level select - sound selected (2 bytes)
00000000 =FFFFFFC0                  v_scorecopy:	= $FFFFFFC0	; score, duplicate (4 bytes)
00000000 =FFFFFFC0                  v_scorelife:	= $FFFFFFC0	; points required for an extra life (4 bytes) (JP1 only)
00000000 =FFFFFFE0                  f_levselcheat:	= $FFFFFFE0	; level select cheat flag
00000000 =FFFFFFE1                  f_slomocheat:	= $FFFFFFE1	; slow motion & frame advance cheat flag
00000000 =FFFFFFE2                  f_debugcheat:	= $FFFFFFE2	; debug mode cheat flag
00000000 =FFFFFFE3                  f_creditscheat:	= $FFFFFFE3	; hidden credits & press start cheat flag
00000000 =FFFFFFE4                  v_title_dcount:	= $FFFFFFE4	; number of times the d-pad is pressed on title screen (2 bytes)
00000000 =FFFFFFE6                  v_title_ccount:	= $FFFFFFE6	; number of times C is pressed on title screen (2 bytes)
00000000                            
00000000 =FFFFFFF0                  f_demo:		= $FFFFFFF0	; demo mode flag (0 = no; 1 = yes; $8001 = ending) (2 bytes)
00000000 =FFFFFFF2                  v_demonum:	= $FFFFFFF2	; demo level number (not the same as the level number) (2 bytes)
00000000 =FFFFFFF4                  v_creditsnum:	= $FFFFFFF4	; credits index number (2 bytes)
00000000 =FFFFFFF8                  v_megadrive:	= $FFFFFFF8	; Megadrive machine type
00000000 =FFFFFFFA                  f_debugmode:	= $FFFFFFFA	; debug mode flag (sometimes 2 bytes)
00000000 =FFFFFFFC                  v_init:		= $FFFFFFFC	; 'init' text string (4 bytes)
00000000 =FFFFFFFC                  v_init:		= $FFFFFFFC	; 'init' text string (4 bytes)
00000000                            	include	"Macros (2).asm"
00000000                            binclude macro Directory
00000000                            	incbin \Directory
00000000                            	endm
00000000                            
00000000                            ;==================================================================================================================
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA Transfer
00000000                            ; ---------------------------------------------------------------------------
00000000                            dma68kToVDP macro source,dest,length,type
00000000                            	lea	($C00004).l,a5
00000000                            	move.l	#(($9400|((((length)>>1)&$FF00)>>8))<<16)|($9300|(((length)>>1)&$FF)),(a5)
00000000                            	move.l	#(($9600|((((source)>>1)&$FF00)>>8))<<16)|($9500|(((source)>>1)&$FF)),(a5)
00000000                            	move.w	#$9700|(((((source)>>1)&$FF0000)>>16)&$7F),(a5)
00000000                            	move.w	#((dest)&$3FFF)|((type&1)<<15)|$4000,(a5)
00000000                            	move.w	#$80|(((dest)&$C000)>>14)|((type&2)<<3),($FFFFF640).w
00000000                            	move.w	($FFFFF640).w,(a5)
00000000                                endm
00000000                                ; values for the type argument
00000000 =00000000                  VRAM	=	$0
00000000 =00000001                  CRAM	=	$1
00000000 =00000002                  VSRAM	=	$2
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Align and pad
00000000                            ; input: length to align to, value to use as padding (default is 0)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            align:	macro
00000000                            	if (narg=1)
00000000                            	dcb.b \1-(*%\1),0
00000000                            	else
00000000                            	dcb.b \1-(*%\1),\2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Set a VRAM address via the VDP control port.
00000000                            ; input: 16-bit VRAM address, control port (default is ($C00004).l)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            locVRAM:	macro loc,controlport
00000000                            		if (narg=1)
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),($C00004).l
00000000                            		else
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),controlport
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA copy data from 68K (ROM/RAM) to the VRAM
00000000                            ; input: source, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            writeVRAM:	macro
00000000                            		lea	($C00004).l,a5
00000000                            		move.l	#$94000000+(((\2>>1)&$FF00)<<8)+$9300+((\2>>1)&$FF),(a5)
00000000                            		move.l	#$96000000+(((\1>>1)&$FF00)<<8)+$9500+((\1>>1)&$FF),(a5)
00000000                            		move.w	#$9700+((((\1>>1)&$FF0000)>>16)&$7F),(a5)
00000000                            		move.w	#$4000+(\3&$3FFF),(a5)
00000000                            		move.w	#$80+((\3&$C000)>>14),(v_vdp_buffer2).w
00000000                            		move.w	(v_vdp_buffer2).w,(a5)
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA copy data from 68K (ROM/RAM) to the CRAM
00000000                            ; input: source, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            writeCRAM:	macro
00000000                            		lea	($C00004).l,a5
00000000                            		move.l	#$94000000+(((\2>>1)&$FF00)<<8)+$9300+((\2>>1)&$FF),(a5)
00000000                            		move.l	#$96000000+(((\1>>1)&$FF00)<<8)+$9500+((\1>>1)&$FF),(a5)
00000000                            		move.w	#$9700+((((\1>>1)&$FF0000)>>16)&$7F),(a5)
00000000                            		move.w	#$C000+(\3&$3FFF),(a5)
00000000                            		move.w	#$80+((\3&$C000)>>14),(v_vdp_buffer2).w
00000000                            		move.w	(v_vdp_buffer2).w,(a5)
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA fill VRAM with a value
00000000                            ; input: value, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            fillVRAM:	macro value,length,loc
00000000                            		lea	($C00004).l,a5
00000000                            		move.w	#$8F01,(a5)
00000000                            		move.l	#$94000000+((length&$FF00)<<8)+$9300+(length&$FF),(a5)
00000000                            		move.w	#$9780,(a5)
00000000                            		move.l	#$40000080+((loc&$3FFF)<<16)+((loc&$C000)>>14),(a5)
00000000                            		move.w	#value,($C00000).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Copy a tilemap from 68K (ROM/RAM) to the VRAM without using DMA
00000000                            ; input: source, destination, width [cells], height [cells]
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            copyTilemap:	macro source,loc,width,height
00000000                            		lea	(source).l,a1
00000000                            		move.l	#$40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14),d0
00000000                            		moveq	#width,d1
00000000                            		moveq	#height,d2
00000000                            		bsr.w	TilemapToVRAM
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; stop the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            stopZ80:	macro
00000000                            		move.w	#$100,($A11100).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; wait for Z80 to stop
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            waitZ80:	macro
00000000                            	@wait:	btst	#0,($A11100).l
00000000                            		bne.s	@wait
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; reset the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            resetZ80:	macro
00000000                            		move.w	#$100,($A11200).l
00000000                            		endm
00000000                            
00000000                            resetZ80a:	macro
00000000                            		move.w	#0,($A11200).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; start the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            startZ80:	macro
00000000                            		move.w	#0,($A11100).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; check if object moves out of range
00000000                            ; input: location to jump to if out of range, x-axis pos (obX(a0) by default)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            obRange:	macro exit,pos
00000000                            		if (narg=2)
00000000                            		move.w	pos,d0		; get object position (if specified as not obX)
00000000                            		else
00000000                            		move.w	obX(a0),d0	; get object position
00000000                            		endc
00000000                            		andi.w	#$FF80,d0	; round down to nearest $80
00000000                            		move.w	(v_screenposx).w,d1 ; get screen position
00000000                            		subi.w	#128,d1
00000000                            		andi.w	#$FF80,d1
00000000                            		sub.w	d1,d0
00000000                            		cmpi.w	#128+320+192,d0
00000000                            		bhi.w	exit		; if object moves out of range, branch
00000000                            		endm
00000000                            
00000000                            obRanges:	macro exit,pos
00000000                            		if (narg=2)
00000000                            		move.w	pos,d0		; get object position (if specified as not obX)
00000000                            		else
00000000                            		move.w	obX(a0),d0	; get object position
00000000                            		endc
00000000                            		andi.w	#$FF80,d0	; round down to nearest $80
00000000                            		move.w	(v_screenposx).w,d1 ; get screen position
00000000                            		subi.w	#128,d1
00000000                            		andi.w	#$FF80,d1
00000000                            		sub.w	d1,d0
00000000                            		cmpi.w	#128+320+192,d0
00000000                            		bhi.s	exit		; if object moves out of range, branch
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; play a sound effect or music
00000000                            ; input: track, terminate routine (leave blank to not terminate)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            music:		macro track,terminate
00000000                            		move.w	#track,d0
00000000                            		if (narg=1)
00000000                            		jsr	(PlaySound).l
00000000                            		else
00000000                            		jmp	(PlaySound).l
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            sfx:		macro track,terminate
00000000                            		move.w	#track,d0
00000000                            		if (narg=1)
00000000                            		jsr	(PlaySound_Special).l
00000000                            		else
00000000                            		jmp	(PlaySound_Special).l
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; bankswitch between SRAM and ROM
00000000                            ; (remember to enable SRAM in the header first!)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            gotoSRAM:	macro
00000000                            		move.b  #1,($A130F1).l
00000000                            		endm
00000000                            
00000000                            gotoROM:	macro
00000000                            		move.b  #0,($A130F1).l
00000000                            		endm
00000000                            		endm
00000000                            ; =============================================================
00000000                            stopZ80        macro
00000000                                    move.w    #$100,($A11100).l
00000000                                    nop
00000000                                    nop
00000000                                    nop
00000000                            
00000000                            @wait\@:    btst    #0,($A11100).l
00000000                                    bne.s    @wait\@
00000000                                    endm
00000000                            
00000000                            ; =============================================================
00000000                            
00000000                            startZ80    macro
00000000                                    move.w    #0,($A11100).l    ; start the Z80
00000000                                    endm
00000000                            
00000000                            ; =============================================================
00000000                            
00000000                            waitYM        macro
00000000                            @wait\@:    move.b    ($A04000).l,d2
00000000                                    btst    #7,d2
00000000                                    bne.s    @wait\@
00000000                                    endm
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 0000 0000 0000 0000 0000+  		dc.l PalToCRAM,	ErrorTrap, loc_B10, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 2047 454E 4553+  Console:	dc.b 'SEGA GENESIS    ' ; Hardware system ID
00000110 4C55 4947 4958 4820 3230+  Date:		dc.b 'LUIGIXH 2014.APR' ; Release date
00000120 534F 4E49 4320 5448 4520+  Title_Local:	dc.b 'SONIC THE HEDGEHOG LEGENDS                      ' ; Domestic name
00000150 534F 4E49 4320 5448 4520+  Title_Int:	dc.b 'SONIC THE HEDGEHOG LEGENDS                      ' ; International name
00000180 474D 2030 3030 3031 3030+  Serial:		dc.b 'GM 00001009-00'   ; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	($C00004).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E 6700                       		beq.s	CheckSumCheck
00000310 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w ; has checksum routine already run?
00000318 6700 0000                  		beq.w	GameInit	; if yes, branch
0000031C                            
0000031C                            CheckSumCheck:
0000031C 207C 0000 0200             		movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
00000322 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000328 2011                       		move.l	(a1),d0
0000032A 7200                       		moveq	#0,d1
0000032C                            		
0000032C                            loc_32C:
0000032C D258                       		add.w	(a0)+,d1
0000032E B088                       		cmp.l	a0,d0
00000330 64FA                       		bcc.s	loc_32C
00000332 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
00000338 B251                       		cmp.w	(a1),d1		; compare correct checksum to the one in ROM
0000033A 6600 0000                  		bne.w	CheckSumError	; if they don't match, branch
0000033E 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000342 7E00                       		moveq	#0,d7
00000344 3C3C 007F                  		move.w	#$7F,d6
00000348                            
00000348                            loc_348:
00000348 2CC7                       		move.l	d7,(a6)+
0000034A 51CE FFFC                  		dbf	d6,loc_348
0000034E 1039 00A1 0001             		move.b	($A10001).l,d0
00000354 0200 00C0                  		andi.b	#$C0,d0
00000358 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
0000035C 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
00000364                            
00000364                            GameInit:
00000364 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000036A 7E00                       		moveq	#0,d7
0000036C 3C3C 3F7F                  		move.w	#$3F7F,d6
00000370                            
00000370                            GameClrRAM:
00000370 2CC7                       		move.l	d7,(a6)+
00000372 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
00000376 6100 0000                  		bsr.w	VDPSetupGame
0000037A 6100 0000                  		bsr.w	SoundDriverLoad
0000037E 6100 0000                  		bsr.w	JoypadInit
00000382 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
00000388                            
00000388                            MainGameLoop:
00000388 1038 F600                  		move.b	($FFFFF600).w,d0 ; load	Game Mode
0000038C 0240 003C                  		andi.w	#$3C,d0				; <--- changed $1C to $3C
00000390 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
00000394 60F2                       		bra.s	MainGameLoop
00000396                            ; ===========================================================================
00000396                            ; ---------------------------------------------------------------------------
00000396                            ; Main game mode array
00000396                            ; ---------------------------------------------------------------------------
00000396                            
00000396                            GameModeArray:
00000396 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
0000039A 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
0000039E 6000 0000                  		bra.w	Level		; Demo Mode ($08)
000003A2 6000 0000                  		bra.w	Level		; Normal Level ($0C)
000003A6 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
000003AA 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
000003AE 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
000003B2 6000 0000                  		bra.w	Credits		; Credits ($1C)
000003B6 6000 0000                  		bra.w	SGDSplasher	; Splash screen ($20)
000003BA 6000 0000                  		bra.w 	SplashScreen_JMP ; SGD Splash Screen ($24)
000003BE 4E75                       		rts	
000003C0                            ; ===========================================================================
000003C0                            SGDSplasher:
000003C0 4EF9 0000 0000             		jmp SGDSplash
000003C6                            ; ===========================================================================
000003C6                            SplashScreen_JMP:
000003C6 4EF9 0000 0000             		jmp SplashScreen
000003CC                            ; ===========================================================================
000003CC                            CheckSumError:
000003CC 6100 0000                  		bsr.w	VDPSetupGame
000003D0 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000003DA 7E3F                       		moveq	#$3F,d7
000003DC                            
000003DC                            CheckSum_Red:
000003DC 33FC 000E 00C0 0000        		move.w	#$E,($C00000).l	; fill screen with colour red
000003E4 51CF FFF6                  		dbf	d7,CheckSum_Red	; repeat $3F more times
000003E8                            
000003E8                            CheckSum_Loop:
000003E8 60FE                       		bra.s	CheckSum_Loop
000003EA                            ; ===========================================================================
000003EA                            
000003EA                            BusError:
000003EA 11FC 0002 FC44             		move.b	#2,($FFFFFC44).w
000003F0 6000                       		bra.s	loc_43A
000003F2                            ; ===========================================================================
000003F2                            
000003F2                            AddressError:
000003F2 11FC 0004 FC44             		move.b	#4,($FFFFFC44).w
000003F8 6000                       		bra.s	loc_43A
000003FA                            ; ===========================================================================
000003FA                            
000003FA                            IllegalInstr:
000003FA 11FC 0006 FC44             		move.b	#6,($FFFFFC44).w
00000400 54AF 0002                  		addq.l	#2,2(sp)
00000404 6000                       		bra.s	loc_462
00000406                            ; ===========================================================================
00000406                            
00000406                            ZeroDivide:
00000406 11FC 0008 FC44             		move.b	#8,($FFFFFC44).w
0000040C 6000                       		bra.s	loc_462
0000040E                            ; ===========================================================================
0000040E                            
0000040E                            ChkInstr:
0000040E 11FC 000A FC44             		move.b	#$A,($FFFFFC44).w
00000414 6000                       		bra.s	loc_462
00000416                            ; ===========================================================================
00000416                            
00000416                            TrapvInstr:
00000416 11FC 000C FC44             		move.b	#$C,($FFFFFC44).w
0000041C 6000                       		bra.s	loc_462
0000041E                            ; ===========================================================================
0000041E                            
0000041E                            PrivilegeViol:
0000041E 11FC 000E FC44             		move.b	#$E,($FFFFFC44).w
00000424 6000                       		bra.s	loc_462
00000426                            ; ===========================================================================
00000426                            
00000426                            Trace:
00000426 11FC 0010 FC44             		move.b	#$10,($FFFFFC44).w
0000042C 6000                       		bra.s	loc_462
0000042E                            ; ===========================================================================
0000042E                            
0000042E                            Line1010Emu:
0000042E 11FC 0012 FC44             		move.b	#$12,($FFFFFC44).w
00000434 54AF 0002                  		addq.l	#2,2(sp)
00000438 6000                       		bra.s	loc_462
0000043A                            ; ===========================================================================
0000043A                            
0000043A                            Line1111Emu:
0000043A 11FC 0014 FC44             		move.b	#$14,($FFFFFC44).w
00000440 54AF 0002                  		addq.l	#2,2(sp)
00000444 6000                       		bra.s	loc_462
00000446                            ; ===========================================================================
00000446                            
00000446                            ErrorExcept:
00000446 11FC 0000 FC44             		move.b	#0,($FFFFFC44).w
0000044C 6000                       		bra.s	loc_462
0000044E                            ; ===========================================================================
0000044E                            
0000044E                            loc_43A:
0000044E 46FC 2700                  		move	#$2700,sr
00000452 544F                       		addq.w	#2,sp
00000454 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
00000458 544F                       		addq.w	#2,sp
0000045A 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
00000460 6100 0000                  		bsr.w	ShowErrorMsg
00000464 202F 0002                  		move.l	2(sp),d0
00000468 6100 0000                  		bsr.w	sub_5BA
0000046C 2038 FC40                  		move.l	($FFFFFC40).w,d0
00000470 6100 0000                  		bsr.w	sub_5BA
00000474 6000                       		bra.s	loc_478
00000476                            ; ===========================================================================
00000476                            
00000476                            loc_462:
00000476 46FC 2700                  		move	#$2700,sr
0000047A 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
00000480 6100 0000                  		bsr.w	ShowErrorMsg
00000484 202F 0002                  		move.l	2(sp),d0
00000488 6100 0000                  		bsr.w	sub_5BA
0000048C                            
0000048C                            loc_478:
0000048C 6100 0000                  		bsr.w	ErrorWaitForC
00000490 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
00000496 46FC 2300                  		move	#$2300,sr
0000049A 4E73                       		rte	
0000049C                            
0000049C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000049C                            
0000049C                            
0000049C                            ShowErrorMsg:				; XREF: loc_43A; loc_462
0000049C 4DF9 00C0 0000             		lea	($C00000).l,a6
000004A2 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
000004AC 41F9 0000 0000             		lea	(Art_Text).l,a0
000004B2 323C 027F                  		move.w	#$27F,d1
000004B6                            
000004B6                            Error_LoadGfx:
000004B6 3C98                       		move.w	(a0)+,(a6)
000004B8 51C9 FFFC                  		dbf	d1,Error_LoadGfx
000004BC 7000                       		moveq	#0,d0		; clear	d0
000004BE 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
000004C2 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
000004C6 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
000004CA 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
000004D4 7212                       		moveq	#$12,d1		; number of characters
000004D6                            
000004D6                            Error_LoopChars:
000004D6 7000                       		moveq	#0,d0
000004D8 1018                       		move.b	(a0)+,d0
000004DA 0640 0790                  		addi.w	#$790,d0
000004DE 3C80                       		move.w	d0,(a6)
000004E0 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
000004E4 4E75                       		rts	
000004E6                            ; End of function ShowErrorMsg
000004E6                            
000004E6                            ; ===========================================================================
000004E6 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
000004EA 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
000004EE 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
000004F2 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
000004F6 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
000004FA 0000                       		dc.w asc_5A6-ErrorText
000004FC 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
0000050F 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
00000522 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
00000535 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
00000548 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
0000055B 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
0000056E 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
00000581 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
00000594 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
000005A7 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
000005BA 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
000005CE 00                         		even
000005CE                            
000005CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005CE                            
000005CE                            
000005CE                            sub_5BA:				; XREF: loc_43A; loc_462
000005CE 3CBC 07CA                  		move.w	#$7CA,(a6)
000005D2 7407                       		moveq	#7,d2
000005D4                            
000005D4                            loc_5C0:
000005D4 E998                       		rol.l	#4,d0
000005D6 6100                       		bsr.s	sub_5CA
000005D8 51CA FFFA                  		dbf	d2,loc_5C0
000005DC 4E75                       		rts	
000005DE                            ; End of function sub_5BA
000005DE                            
000005DE                            
000005DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005DE                            
000005DE                            
000005DE                            sub_5CA:				; XREF: sub_5BA
000005DE 3200                       		move.w	d0,d1
000005E0 0241 000F                  		andi.w	#$F,d1
000005E4 0C41 000A                  		cmpi.w	#$A,d1
000005E8 6500                       		bcs.s	loc_5D8
000005EA 5E41                       		addq.w	#7,d1
000005EC                            
000005EC                            loc_5D8:
000005EC 0641 07C0                  		addi.w	#$7C0,d1
000005F0 3C81                       		move.w	d1,(a6)
000005F2 4E75                       		rts	
000005F4                            ; End of function sub_5CA
000005F4                            
000005F4                            
000005F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005F4                            
000005F4                            
000005F4                            ErrorWaitForC:				; XREF: loc_478
000005F4 6100 0000                  		bsr.w	ReadJoypads
000005F8 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
000005FE 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
00000602 4E75                       		rts	
00000604                            ; End of function ErrorWaitForC
00000604                            
00000604                            ; ===========================================================================
00000604                            
00000604                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000B24                            		even
00000B24                            
00000B24                            ; ===========================================================================
00000B24                            
00000B24                            loc_B10:				; XREF: Vectors
00000B24 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000B28 4A38 F62A                  		tst.b	($FFFFF62A).w
00000B2C 6700                       		beq.s	loc_B88
00000B2E 3039 00C0 0004             		move.w	($C00004).l,d0
00000B34 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000B3E 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000B46 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000B4C 6700                       		beq.s	loc_B42
00000B4E 303C 0700                  		move.w	#$700,d0
00000B52                            
00000B52                            loc_B3E:
00000B52 51C8 FFFE                  		dbf	d0,loc_B3E
00000B56                            
00000B56                            loc_B42:
00000B56 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000B5A 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000B60 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000B66 0240 003E                  		andi.w	#$3E,d0
00000B6A 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000B6E 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000B72                            
00000B72                            loc_B5E:				; XREF: loc_B88
00000B72 4EB9 0000 0000             		jsr	sub_71B4C
00000B78                            
00000B78                            loc_B64:				; XREF: loc_D50
00000B78 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000B7C 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000B80 4E73                       		rte	
00000B82                            ; ===========================================================================
00000B82 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000B86 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000B8A 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000B8E 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000B92 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000B96 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000B9A 0000                       		dc.w loc_E72-off_B6E
00000B9C                            ; ===========================================================================
00000B9C                            
00000B9C                            loc_B88:				; XREF: loc_B10; off_B6E
00000B9C 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000BA2 6700                       		beq.s	loc_B9A
00000BA4 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000BAA 6600 FFC6                  		bne.w	loc_B5E
00000BAE                            
00000BAE                            loc_B9A:
00000BAE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000BB4 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000BB8 3039 00C0 0004             		move.w	($C00004).l,d0
00000BBE 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000BC4 6700                       		beq.s	loc_BBA
00000BC6 303C 0700                  		move.w	#$700,d0
00000BCA                            
00000BCA                            loc_BB6:
00000BCA 51C8 FFFE                  		dbf	d0,loc_BB6
00000BCE                            
00000BCE                            loc_BBA:
00000BCE 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000BD4 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
00000BDC                            
00000BDC                            loc_BC8:
00000BDC 0839 0000 00A1 1100        		btst	#0,($A11100).l
00000BE4 66F6                       		bne.s	loc_BC8
00000BE6 4A38 F64E                  		tst.b	($FFFFF64E).w
00000BEA 6600                       		bne.s	loc_BFE
00000BEC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000BF2 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000BF8 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000BFE 3ABC 977F                  		move.w	#$977F,(a5)
00000C02 3ABC C000                  		move.w	#$C000,(a5)
00000C06 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000C0C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000C10 6000                       		bra.s	loc_C22
00000C12                            ; ===========================================================================
00000C12                            
00000C12                            loc_BFE:				; XREF: loc_BC8
00000C12 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C18 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000C1E 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000C24 3ABC 977F                  		move.w	#$977F,(a5)
00000C28 3ABC C000                  		move.w	#$C000,(a5)
00000C2C 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000C32 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000C36                            
00000C36                            loc_C22:				; XREF: loc_BC8
00000C36 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000C3A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000C42 6000 FF2E                  		bra.w	loc_B5E
00000C46                            ; ===========================================================================
00000C46                            
00000C46                            loc_C32:				; XREF: off_B6E
00000C46 6100 0000                  		bsr.w	sub_106E
00000C4A                            
00000C4A                            loc_C36:				; XREF: off_B6E
00000C4A 4A78 F614                  		tst.w	($FFFFF614).w
00000C4E 6700 0000                  		beq.w	locret_C42
00000C52 5378 F614                  		subq.w	#1,($FFFFF614).w
00000C56                            
00000C56                            locret_C42:
00000C56 4E75                       		rts	
00000C58                            ; ===========================================================================
00000C58                            
00000C58                            loc_C44:				; XREF: off_B6E
00000C58 6100 0000                  		bsr.w	sub_106E
00000C5C 6100 0000                  		bsr.w	sub_6886
00000C60 6100 0000                  		bsr.w	sub_1642
00000C64 4A78 F614                  		tst.w	($FFFFF614).w
00000C68 6700 0000                  		beq.w	locret_C5C
00000C6C 5378 F614                  		subq.w	#1,($FFFFF614).w
00000C70                            
00000C70                            locret_C5C:
00000C70 4E75                       		rts	
00000C72                            ; ===========================================================================
00000C72                            
00000C72                            loc_C5E:				; XREF: off_B6E
00000C72 6100 0000                  		bsr.w	sub_106E
00000C76 4E75                       		rts	
00000C78                            ; ===========================================================================
00000C78                            
00000C78                            loc_C64:				; XREF: off_B6E
00000C78 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000C7E 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000C82                            
00000C82                            loc_C6E:				; XREF: off_B6E
00000C82 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000C8A                            
00000C8A                            loc_C76:
00000C8A 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000C92 66F6                       		bne.s	loc_C76		; if not, branch
00000C94 6100 0000                  		bsr.w	ReadJoypads
00000C98 4A38 F64E                  		tst.b	($FFFFF64E).w
00000C9C 6600                       		bne.s	loc_CB0
00000C9E 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CA4 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000CAA 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000CB0 3ABC 977F                  		move.w	#$977F,(a5)
00000CB4 3ABC C000                  		move.w	#$C000,(a5)
00000CB8 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000CBE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CC2 6000                       		bra.s	loc_CD4
00000CC4                            ; ===========================================================================
00000CC4                            
00000CC4                            loc_CB0:				; XREF: loc_C76
00000CC4 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CCA 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000CD0 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000CD6 3ABC 977F                  		move.w	#$977F,(a5)
00000CDA 3ABC C000                  		move.w	#$C000,(a5)
00000CDE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000CE4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CE8                            
00000CE8                            loc_CD4:				; XREF: loc_C76
00000CE8 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000CEC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CF2 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000CF8 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000CFE 3ABC 977F                  		move.w	#$977F,(a5)
00000D02 3ABC 7C00                  		move.w	#$7C00,(a5)
00000D06 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000D0C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D10 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D16 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000D1C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000D22 3ABC 977F                  		move.w	#$977F,(a5)
00000D26 3ABC 7800                  		move.w	#$7800,(a5)
00000D2A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000D30 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D34 4EB9 0000 0000                     jsr	(ProcessDMAQueue).l 
00000D3A                            
00000D3A                            loc_D50:
00000D3A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000D42 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000D48 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000D4E 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000D54 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000D5A 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000D60 6400                       		bcc.s	Demo_Time
00000D62 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000D68 588F                       		addq.l	#4,sp
00000D6A 6000 FE0C                  		bra.w	loc_B64
00000D6E                            
00000D6E                            ; ---------------------------------------------------------------------------
00000D6E                            ; Subroutine to	run a demo for an amount of time
00000D6E                            ; ---------------------------------------------------------------------------
00000D6E                            
00000D6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000D6E                            
00000D6E                            
00000D6E                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000D6E 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000D72 4EB9 0000 0000             		jsr	AniArt_Load
00000D78 4EB9 0000 0000             		jsr	HudUpdate
00000D7E 6100 0000                  		bsr.w	sub_165E
00000D82 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000D86 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000D8A 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000D8E                            
00000D8E                            Demo_TimeEnd:
00000D8E 4E75                       		rts	
00000D90                            ; End of function Demo_Time
00000D90                            
00000D90                            ; ===========================================================================
00000D90                            
00000D90                            loc_DA6:				; XREF: off_B6E
00000D90 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000D98                            
00000D98                            loc_DAE:
00000D98 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000DA0 66F6                       		bne.s	loc_DAE		; if not, branch
00000DA2 6100 0000                  		bsr.w	ReadJoypads
00000DA6 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DAC 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000DB2 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000DB8 3ABC 977F                  		move.w	#$977F,(a5)
00000DBC 3ABC C000                  		move.w	#$C000,(a5)
00000DC0 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000DC6 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000DCA 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DD0 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000DD6 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000DDC 3ABC 977F                  		move.w	#$977F,(a5)
00000DE0 3ABC 7800                  		move.w	#$7800,(a5)
00000DE4 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000DEA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000DEE 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DF4 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000DFA 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000E00 3ABC 977F                  		move.w	#$977F,(a5)
00000E04 3ABC 7C00                  		move.w	#$7C00,(a5)
00000E08 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E0E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E12 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000E1A 6100 0000                  		bsr.w	PalCycle_SS
00000E1E 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l 
00000E24                            
00000E24                            loc_E64:
00000E24 4A78 F614                  		tst.w	($FFFFF614).w
00000E28 6700 0000                  		beq.w	locret_E70
00000E2C 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E30                            
00000E30                            locret_E70:
00000E30 4E75                       		rts	
00000E32                            ; ===========================================================================
00000E32                            
00000E32                            loc_E72:				; XREF: off_B6E
00000E32 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000E3A                            
00000E3A                            loc_E7A:
00000E3A 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000E42 66F6                       		bne.s	loc_E7A		; if not, branch
00000E44 6100 0000                  		bsr.w	ReadJoypads
00000E48 4A38 F64E                  		tst.b	($FFFFF64E).w
00000E4C 6600                       		bne.s	loc_EB4
00000E4E 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E54 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E5A 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000E60 3ABC 977F                  		move.w	#$977F,(a5)
00000E64 3ABC C000                  		move.w	#$C000,(a5)
00000E68 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E6E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E72 6000                       		bra.s	loc_ED8
00000E74                            ; ===========================================================================
00000E74                            
00000E74                            loc_EB4:				; XREF: loc_E7A
00000E74 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E7A 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E80 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000E86 3ABC 977F                  		move.w	#$977F,(a5)
00000E8A 3ABC C000                  		move.w	#$C000,(a5)
00000E8E 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E94 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E98                            
00000E98                            loc_ED8:				; XREF: loc_E7A
00000E98 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000E9C 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EA2 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000EA8 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000EAE                            
00000EAE                            loc_EEE:
00000EAE 3ABC 977F                  		move.w	#$977F,(a5)
00000EB2 3ABC 7C00                  		move.w	#$7C00,(a5)
00000EB6 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000EBC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EC0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EC6 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000ECC 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000ED2 3ABC 977F                  		move.w	#$977F,(a5)
00000ED6 3ABC 7800                  		move.w	#$7800,(a5)
00000EDA 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000EE0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EE4 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000EEA                            
00000EEA                            loc_F54:
00000EEA 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00000EF2 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000EF8 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000EFE 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000F04 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000F0A 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000F0E 4EB9 0000 0000             		jsr	AniArt_Load
00000F14 4EB9 0000 0000             		jsr	HudUpdate
00000F1A 6100 0000                  		bsr.w	sub_1642
00000F1E 4E75                       		rts	
00000F20                            ; ===========================================================================
00000F20                            
00000F20                            loc_F8A:				; XREF: off_B6E
00000F20 6100 0000                  		bsr.w	sub_106E
00000F24 5238 F628                  		addq.b	#1,($FFFFF628).w
00000F28 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
00000F2E 4E75                       		rts	
00000F30                            ; ===========================================================================
00000F30                            
00000F30                            loc_F9A:				; XREF: off_B6E
00000F30 6100 0000                  		bsr.w	sub_106E
00000F34 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000F38 6000 0000                  		bra.w	sub_1642
00000F3C                            ; ===========================================================================
00000F3C                            
00000F3C                            loc_FA6:				; XREF: off_B6E
00000F3C 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000F44                            
00000F44                            loc_FAE:
00000F44 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000F4C 66F6                       		bne.s	loc_FAE		; if not, branch
00000F4E 6100 0000                  		bsr.w	ReadJoypads
00000F52 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F58 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000F5E 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000F64 3ABC 977F                  		move.w	#$977F,(a5)
00000F68 3ABC C000                  		move.w	#$C000,(a5)
00000F6C 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000F72 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F76 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F7C 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000F82 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F88 3ABC 977F                  		move.w	#$977F,(a5)
00000F8C 3ABC 7800                  		move.w	#$7800,(a5)
00000F90 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F96 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F9A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FA0 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000FA6 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000FAC 3ABC 977F                  		move.w	#$977F,(a5)
00000FB0 3ABC 7C00                  		move.w	#$7C00,(a5)
00000FB4 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000FBA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000FBE 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00000FC6 4EB9 0000 0000                     jsr	(ProcessDMAQueue).l 
00000FCC                            
00000FCC                            loc_1060:
00000FCC 4A78 F614                  		tst.w	($FFFFF614).w
00000FD0 6700 0000                  		beq.w	locret_106C
00000FD4 5378 F614                  		subq.w	#1,($FFFFF614).w
00000FD8                            
00000FD8                            locret_106C:
00000FD8 4E75                       		rts	
00000FDA                            
00000FDA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FDA                            
00000FDA                            
00000FDA                            sub_106E:				; XREF: loc_C32; et al
00000FDA 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000FE2                            
00000FE2                            loc_1076:
00000FE2 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000FEA 66F6                       		bne.s	loc_1076	; if not, branch
00000FEC 6100 0000                  		bsr.w	ReadJoypads
00000FF0 4A38 F64E                  		tst.b	($FFFFF64E).w
00000FF4 6600                       		bne.s	loc_10B0
00000FF6 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FFC 2ABC 9400 9340             		move.l	#$94009340,(a5)
00001002 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00001008 3ABC 977F                  		move.w	#$977F,(a5)
0000100C 3ABC C000                  		move.w	#$C000,(a5)
00001010 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001016 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000101A 6000                       		bra.s	loc_10D4
0000101C                            ; ===========================================================================
0000101C                            
0000101C                            loc_10B0:				; XREF: sub_106E
0000101C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001022 2ABC 9400 9340             		move.l	#$94009340,(a5)
00001028 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
0000102E 3ABC 977F                  		move.w	#$977F,(a5)
00001032 3ABC C000                  		move.w	#$C000,(a5)
00001036 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
0000103C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001040                            
00001040                            loc_10D4:				; XREF: sub_106E
00001040 4BF9 00C0 0004             		lea	($C00004).l,a5
00001046 2ABC 9401 9340             		move.l	#$94019340,(a5)
0000104C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001052 3ABC 977F                  		move.w	#$977F,(a5)
00001056 3ABC 7800                  		move.w	#$7800,(a5)
0000105A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001060 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001064 4BF9 00C0 0004             		lea	($C00004).l,a5
0000106A 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001070 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001076 3ABC 977F                  		move.w	#$977F,(a5)
0000107A 3ABC 7C00                  		move.w	#$7C00,(a5)
0000107E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001084 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001088 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001090 4E75                       		rts	
00001092                            ; End of function sub_106E
00001092                            
00001092                            ; ---------------------------------------------------------------------------
00001092                            ; Subroutine to	move Palettes from the RAM to CRAM
00001092                            ; ---------------------------------------------------------------------------
00001092                            
00001092                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001092                            
00001092                            
00001092                            PalToCRAM:
00001092 46FC 2700                  		move	#$2700,sr
00001096 4A78 F644                  		tst.w	($FFFFF644).w
0000109A 6700                       		beq.s	locret_119C
0000109C 31FC 0000 F644             		move.w	#0,($FFFFF644).w
000010A2 48E7 00C0                  		movem.l	a0-a1,-(sp)
000010A6 43F9 00C0 0000             		lea	($C00000).l,a1
000010AC 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	Palette from RAM
000010B0 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
000010B8 2298                       		move.l	(a0)+,(a1)	; move Palette to CRAM
000010BA 2298                       		move.l	(a0)+,(a1)
000010BC 2298                       		move.l	(a0)+,(a1)
000010BE 2298                       		move.l	(a0)+,(a1)
000010C0 2298                       		move.l	(a0)+,(a1)
000010C2 2298                       		move.l	(a0)+,(a1)
000010C4 2298                       		move.l	(a0)+,(a1)
000010C6 2298                       		move.l	(a0)+,(a1)
000010C8 2298                       		move.l	(a0)+,(a1)
000010CA 2298                       		move.l	(a0)+,(a1)
000010CC 2298                       		move.l	(a0)+,(a1)
000010CE 2298                       		move.l	(a0)+,(a1)
000010D0 2298                       		move.l	(a0)+,(a1)
000010D2 2298                       		move.l	(a0)+,(a1)
000010D4 2298                       		move.l	(a0)+,(a1)
000010D6 2298                       		move.l	(a0)+,(a1)
000010D8 2298                       		move.l	(a0)+,(a1)
000010DA 2298                       		move.l	(a0)+,(a1)
000010DC 2298                       		move.l	(a0)+,(a1)
000010DE 2298                       		move.l	(a0)+,(a1)
000010E0 2298                       		move.l	(a0)+,(a1)
000010E2 2298                       		move.l	(a0)+,(a1)
000010E4 2298                       		move.l	(a0)+,(a1)
000010E6 2298                       		move.l	(a0)+,(a1)
000010E8 2298                       		move.l	(a0)+,(a1)
000010EA 2298                       		move.l	(a0)+,(a1)
000010EC 2298                       		move.l	(a0)+,(a1)
000010EE 2298                       		move.l	(a0)+,(a1)
000010F0 2298                       		move.l	(a0)+,(a1)
000010F2 2298                       		move.l	(a0)+,(a1)
000010F4 2298                       		move.l	(a0)+,(a1)
000010F6 2298                       		move.l	(a0)+,(a1)
000010F8 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
000010FE 4CDF 0300                  		movem.l	(sp)+,a0-a1
00001102 4A38 F64F                  		tst.b	($FFFFF64F).w
00001106 6600                       		bne.s	loc_119E
00001108                            
00001108                            locret_119C:
00001108 4E73                       		rte	
0000110A                            ; ===========================================================================
0000110A                            
0000110A                            loc_119E:				; XREF: PalToCRAM
0000110A 4238 F64F                  		clr.b	($FFFFF64F).w
0000110E 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00001112 6100 FC5A                  		bsr.w	Demo_Time
00001116 4EB9 0000 0000             		jsr	sub_71B4C
0000111C 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00001120 4E73                       		rte	
00001122                            ; End of function PalToCRAM
00001122                            
00001122                            ; ---------------------------------------------------------------------------
00001122                            ; Subroutine to	initialise joypads
00001122                            ; ---------------------------------------------------------------------------
00001122                            
00001122                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001122                            
00001122                            
00001122                            JoypadInit:				; XREF: GameClrRAM
00001122 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000112A                            
0000112A                            Joypad_WaitZ80:
0000112A 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
00001132 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
00001134 7040                       		moveq	#$40,d0
00001136 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
0000113C 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
00001142 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
00001148 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001150 4E75                       		rts	
00001152                            ; End of function JoypadInit
00001152                            
00001152                            ; ---------------------------------------------------------------------------
00001152                            ; Subroutine to	read joypad input, and send it to the RAM
00001152                            ; ---------------------------------------------------------------------------
00001152                            
00001152                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001152                            
00001152                            
00001152                            ReadJoypads:
00001152 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
00001156 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
0000115C 6100                       		bsr.s	Joypad_Read	; do the first joypad
0000115E 5449                       		addq.w	#2,a1		; do the second	joypad
00001160                            
00001160                            Joypad_Read:
00001160 12BC 0000                  		move.b	#0,(a1)
00001164 4E71                       		nop	
00001166 4E71                       		nop	
00001168 1011                       		move.b	(a1),d0
0000116A E508                       		lsl.b	#2,d0
0000116C 0200 00C0                  		andi.b	#$C0,d0
00001170 12BC 0040                  		move.b	#$40,(a1)
00001174 4E71                       		nop	
00001176 4E71                       		nop	
00001178 1211                       		move.b	(a1),d1
0000117A 0201 003F                  		andi.b	#$3F,d1
0000117E 8001                       		or.b	d1,d0
00001180 4600                       		not.b	d0
00001182 1210                       		move.b	(a0),d1
00001184 B101                       		eor.b	d0,d1
00001186 10C0                       		move.b	d0,(a0)+
00001188 C200                       		and.b	d0,d1
0000118A 10C1                       		move.b	d1,(a0)+
0000118C 4E75                       		rts	
0000118E                            ; End of function ReadJoypads
0000118E                            
0000118E                            
0000118E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000118E                            
0000118E                            
0000118E                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
0000118E 41F9 00C0 0004             		lea	($C00004).l,a0
00001194 43F9 00C0 0000             		lea	($C00000).l,a1
0000119A 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
000011A0 7E12                       		moveq	#$12,d7
000011A2                            
000011A2                            VDP_Loop:
000011A2 309A                       		move.w	(a2)+,(a0)
000011A4 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
000011A8                            
000011A8 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
000011AE 31C0 F60C                  		move.w	d0,($FFFFF60C).w
000011B2 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
000011B8 7000                       		moveq	#0,d0
000011BA 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000011C4 3E3C 003F                  		move.w	#$3F,d7
000011C8                            
000011C8                            VDP_ClrCRAM:
000011C8 3280                       		move.w	d0,(a1)
000011CA 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
000011CE                            
000011CE 42B8 F616                  		clr.l	($FFFFF616).w
000011D2 42B8 F61A                  		clr.l	($FFFFF61A).w
000011D6 2F01                       		move.l	d1,-(sp)
000011D8 4BF9 00C0 0004             		lea	($C00004).l,a5
000011DE 3ABC 8F01                  		move.w	#$8F01,(a5)
000011E2 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
000011E8 3ABC 9780                  		move.w	#$9780,(a5)
000011EC 2ABC 4000 0080             		move.l	#$40000080,(a5)
000011F2 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
000011FA                            
000011FA                            loc_128E:
000011FA 3215                       		move.w	(a5),d1
000011FC 0801 0001                  		btst	#1,d1
00001200 66F8                       		bne.s	loc_128E
00001202                            
00001202 3ABC 8F02                  		move.w	#$8F02,(a5)
00001206 221F                       		move.l	(sp)+,d1
00001208 4E75                       		rts	
0000120A                            ; End of function VDPSetupGame
0000120A                            
0000120A                            ; ===========================================================================
0000120A 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
00001212 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
0000121A 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
00001222 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
0000122A 9001 9100 9200             		dc.w $9001, $9100, $9200
00001230                            
00001230                            ; ---------------------------------------------------------------------------
00001230                            ; Subroutine to	clear the screen
00001230                            ; ---------------------------------------------------------------------------
00001230                            
00001230                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001230                            
00001230                            
00001230                            ClearScreen:
00001230 4BF9 00C0 0004             		lea	($C00004).l,a5
00001236 3ABC 8F01                  		move.w	#$8F01,(a5)
0000123A 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001240 3ABC 9780                  		move.w	#$9780,(a5)
00001244 2ABC 4000 0083             		move.l	#$40000083,(a5)
0000124A 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001252                            
00001252                            loc_12E6:
00001252 3215                       		move.w	(a5),d1
00001254 0801 0001                  		btst	#1,d1
00001258 66F8                       		bne.s	loc_12E6
0000125A                            
0000125A 3ABC 8F02                  		move.w	#$8F02,(a5)
0000125E 4BF9 00C0 0004             		lea	($C00004).l,a5
00001264 3ABC 8F01                  		move.w	#$8F01,(a5)
00001268 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
0000126E 3ABC 9780                  		move.w	#$9780,(a5)
00001272 2ABC 6000 0083             		move.l	#$60000083,(a5)
00001278 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001280                            
00001280                            loc_1314:
00001280 3215                       		move.w	(a5),d1
00001282 0801 0001                  		btst	#1,d1
00001286 66F8                       		bne.s	loc_1314
00001288                            
00001288 3ABC 8F02                  		move.w	#$8F02,(a5)
0000128C 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
00001294 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
0000129C 43F8 F800                  		lea	($FFFFF800).w,a1
000012A0 7000                       		moveq	#0,d0
000012A2 323C 00A0                  		move.w	#$A0,d1
000012A6                            
000012A6                            loc_133A:
000012A6 22C0                       		move.l	d0,(a1)+
000012A8 51C9 FFFC                  		dbf	d1,loc_133A
000012AC                            
000012AC 43F8 CC00                  		lea	($FFFFCC00).w,a1
000012B0 7000                       		moveq	#0,d0
000012B2 323C 0100                  		move.w	#$100,d1
000012B6                            
000012B6                            loc_134A:
000012B6 22C0                       		move.l	d0,(a1)+
000012B8 51C9 FFFC                  		dbf	d1,loc_134A
000012BC 4E75                       		rts	
000012BE                            ; End of function ClearScreen
000012BE                            
000012BE                            ; ---------------------------------------------------------------------------
000012BE                            ; Subroutine to	load the sound driver
000012BE                            ; ---------------------------------------------------------------------------
000012BE                            
000012BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012BE                            
000012BE                            
000012BE                            SoundDriverLoad:                        ; XREF: GameClrRAM; TitleScreen
000012BE 4E71                                       nop
000012C0 303C 0100                                  move.w  #$100,d0
000012C4 33C0 00A1 1100                             move.w  d0,($A11100).l
000012CA 33C0 00A1 1200                             move.w  d0,($A11200).l
000012D0 41F9 0000 0000                             lea     (MegaPCM).l,a0
000012D6 43F9 00A0 0000                             lea     ($A00000).l,a1
000012DC 323C 0000                                  move.w  #(MegaPCM_End-MegaPCM)-1,d1
000012E0                            
000012E0 12D8                               @Load:  move.b  (a0)+,(a1)+
000012E2 51C9 FFFC                                  dbf     d1,@Load
000012E6 7200                                       moveq   #0,d1
000012E8 33C1 00A1 1200                             move.w  d1,($A11200).l
000012EE 4E71                                       nop
000012F0 4E71                                       nop
000012F2 4E71                                       nop
000012F4 4E71                                       nop
000012F6 33C0 00A1 1200                             move.w  d0,($A11200).l
000012FC 33C1 00A1 1100                             move.w  d1,($A11100).l
00001302 4E75                                       rts
00001304                            ; End of function SoundDriverLoad
00001304                            
00001304                            ; ---------------------------------------------------------------------------
00001304                            ; Subroutine to play a DAC sample
00001304                            ; ---------------------------------------------------------------------------
00001304                            
00001304                            PlaySample:
00001304 33FC 0100 00A1 1100                move.w  #$100,($A11100).l       ; stop the Z80
0000130C 0839 0000 00A1 1100        @0      btst    #0,($A11100).l
00001314 66F6                               bne.s   @0
00001316 13C0 00A0 1FFF                     move.b  d0,$A01FFF
0000131C 33FC 0000 00A1 1100                move.w  #0,($A11100).l
00001324 4E75                               rts
00001326                            
00001326                            ; ---------------------------------------------------------------------------
00001326                            ; Subroutine to	play a sound or	music track
00001326                            ; ---------------------------------------------------------------------------
00001326                            
00001326                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001326                            
00001326                            
00001326                            PlaySound:
00001326 11C0 F00A                  		move.b	d0,($FFFFF00A).w
0000132A 4E75                       		rts	
0000132C                            ; End of function PlaySound
0000132C                            
0000132C                            ; ---------------------------------------------------------------------------
0000132C                            ; Subroutine to	play a special sound/music (E0-E4)
0000132C                            ;
0000132C                            ; E0 - Fade out
0000132C                            ; E1 - Sega
0000132C                            ; E2 - Speed up
0000132C                            ; E3 - Normal speed
0000132C                            ; E4 - Stop
0000132C                            ; ---------------------------------------------------------------------------
0000132C                            
0000132C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000132C                            
0000132C                            
0000132C                            PlaySound_Special:
0000132C 11C0 F00B                  		move.b	d0,($FFFFF00B).w
00001330 4E75                       		rts	
00001332                            ; End of function PlaySound_Special
00001332                            
00001332                            ; ===========================================================================
00001332                            ; ---------------------------------------------------------------------------
00001332                            ; Unused sound/music subroutine
00001332                            ; ---------------------------------------------------------------------------
00001332                            
00001332                            PlaySound_Unk:
00001332 11C0 F00C                  		move.b	d0,($FFFFF00C).w
00001336 4E75                       		rts	
00001338                            
00001338                            ; ---------------------------------------------------------------------------
00001338                            ; Subroutine to	pause the game
00001338                            ; ---------------------------------------------------------------------------
00001338                            
00001338                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001338                            
00001338                            
00001338                            PauseGame:				; XREF: Level_MainLoop; et al
00001338 4E71                       		nop	
0000133A 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
0000133E 6700                       		beq.s	Unpause		; if not, branch
00001340 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
00001344 6600                       		bne.s	loc_13BE	; if yes, branch
00001346 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
0000134C 6700                       		beq.s	Pause_DoNothing	; if not, branch
0000134E                            
0000134E                            loc_13BE:
0000134E 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
00001354 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
0000135A                            
0000135A                            loc_13CA:
0000135A 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
00001360 6100 0000                  		bsr.w	DelayProgram
00001364 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
00001368 6700                       		beq.s	Pause_ChkStart	; if not, branch
0000136A 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
00001370 6700                       		beq.s	Pause_ChkBC	; if not, branch
00001372 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
00001378 4E71                       		nop	
0000137A 6000                       		bra.s	loc_1404
0000137C                            ; ===========================================================================
0000137C                            
0000137C                            Pause_ChkBC:				; XREF: PauseGame
0000137C 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
00001382 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001384 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0000138A 6600                       		bne.s	Pause_SlowMo	; if yes, branch
0000138C                            
0000138C                            Pause_ChkStart:				; XREF: PauseGame
0000138C 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001392 67C6                       		beq.s	loc_13CA	; if not, branch
00001394                            
00001394                            loc_1404:				; XREF: PauseGame
00001394 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
0000139A                            
0000139A                            Unpause:				; XREF: PauseGame
0000139A 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
000013A0                            
000013A0                            Pause_DoNothing:			; XREF: PauseGame
000013A0 4E75                       		rts	
000013A2                            ; ===========================================================================
000013A2                            
000013A2                            Pause_SlowMo:				; XREF: PauseGame
000013A2 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
000013A8 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
000013AE 4E75                       		rts	
000013B0                            ; End of function PauseGame
000013B0                            
000013B0                            ; ---------------------------------------------------------------------------
000013B0                            ; Subroutine to	display	patterns via the VDP
000013B0                            ; ---------------------------------------------------------------------------
000013B0                            
000013B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013B0                            
000013B0                            
000013B0                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
000013B0 4DF9 00C0 0000             		lea	($C00000).l,a6
000013B6 283C 0080 0000             		move.l	#$800000,d4
000013BC                            
000013BC                            loc_142C:
000013BC 2D40 0004                  		move.l	d0,4(a6)
000013C0 3601                       		move.w	d1,d3
000013C2                            
000013C2                            loc_1432:
000013C2 3C99                       		move.w	(a1)+,(a6)
000013C4 51CB FFFC                  		dbf	d3,loc_1432
000013C8 D084                       		add.l	d4,d0
000013CA 51CA FFF0                  		dbf	d2,loc_142C
000013CE 4E75                       		rts	
000013D0                            ; End of function ShowVDPGraphics
000013D0                            
000013D0                            ; ==============================================================================
000013D0                            ; ------------------------------------------------------------------------------
000013D0                            ; Nemesis decompression routine
000013D0                            ; ------------------------------------------------------------------------------
000013D0                            ; Optimized by vladikcomper
000013D0                            ; ------------------------------------------------------------------------------
000013D0                             
000013D0                            NemDec_RAM:
000013D0 48E7 FFDE                          movem.l d0-a1/a3-a6,-(sp)
000013D4 47FA 0000                          lea     NemDec_WriteRowToRAM(pc),a3
000013D8 6000                               bra.s   NemDec_Main
000013DA                             
000013DA                            ; ------------------------------------------------------------------------------
000013DA                            NemDec:
000013DA 48E7 FFDE                          movem.l d0-a1/a3-a6,-(sp)
000013DE 49F9 00C0 0000                     lea     $C00000,a4              ; load VDP Data Port    
000013E4 47FA 0000                          lea     NemDec_WriteRowToVDP(pc),a3
000013E8                             
000013E8                            NemDec_Main:
000013E8 43F9 FFFF AA00                     lea     $FFFFAA00,a1            ; load Nemesis decompression buffer
000013EE 3418                               move.w  (a0)+,d2                ; get number of patterns
000013F0 6A00                               bpl.s   @0                      ; are we in Mode 0?
000013F2 47EB 000A                          lea     $A(a3),a3               ; if not, use Mode 1
000013F6 E74A                       @0      lsl.w   #3,d2
000013F8 3A42                               movea.w d2,a5
000013FA 7607                               moveq   #7,d3
000013FC 7400                               moveq   #0,d2
000013FE 7800                               moveq   #0,d4
00001400 6100 0000                          bsr.w   NemDec4
00001404 1A18                               move.b  (a0)+,d5                ; get first byte of compressed data
00001406 E145                               asl.w   #8,d5                   ; shift up by a byte
00001408 1A18                               move.b  (a0)+,d5                ; get second byte of compressed data
0000140A 3C3C 0010                          move.w  #$10,d6                 ; set initial shift value
0000140E 6100                               bsr.s   NemDec2
00001410 4CDF 7BFF                          movem.l (sp)+,d0-a1/a3-a6
00001414 4E75                               rts
00001416                             
00001416                            ; ---------------------------------------------------------------------------
00001416                            ; Part of the Nemesis decompressor, processes the actual compressed data
00001416                            ; ---------------------------------------------------------------------------
00001416                             
00001416                            NemDec2:
00001416 3E06                               move.w  d6,d7
00001418 5147                               subq.w  #8,d7                   ; get shift value
0000141A 3205                               move.w  d5,d1
0000141C EE69                               lsr.w   d7,d1                   ; shift so that high bit of the code is in bit position 7
0000141E 0C01 00FC                          cmpi.b  #%11111100,d1           ; are the high 6 bits set?
00001422 6400                               bcc.s   NemDec_InlineData       ; if they are, it signifies inline data
00001424 0241 00FF                          andi.w  #$FF,d1
00001428 D241                               add.w   d1,d1
0000142A 9C31 1000                          sub.b   (a1,d1.w),d6            ; ~~ subtract from shift value so that the next code is read next time around
0000142E 0C46 0009                          cmpi.w  #9,d6                   ; does a new byte need to be read?
00001432 6400                               bcc.s   @0                      ; if not, branch
00001434 5046                               addq.w  #8,d6
00001436 E145                               asl.w   #8,d5
00001438 1A18                               move.b  (a0)+,d5                ; read next byte
0000143A 1231 1001                  @0      move.b  1(a1,d1.w),d1
0000143E 3001                               move.w  d1,d0
00001440 0241 000F                          andi.w  #$F,d1                  ; get palette index for pixel
00001444 0240 00F0                          andi.w  #$F0,d0
00001448                             
00001448                            NemDec_GetRepeatCount:
00001448 E848                               lsr.w   #4,d0                   ; get repeat count
0000144A                             
0000144A                            NemDec_WritePixel:
0000144A E98C                               lsl.l   #4,d4                   ; shift up by a nybble
0000144C 8801                               or.b    d1,d4                   ; write pixel
0000144E 51CB 0000                          dbf     d3,NemDec_WritePixelLoop; ~~
00001452 4ED3                               jmp     (a3)                    ; otherwise, write the row to its destination
00001454                            ; ---------------------------------------------------------------------------
00001454                             
00001454                            NemDec3:
00001454 7800                               moveq   #0,d4                   ; reset row
00001456 7607                               moveq   #7,d3                   ; reset nybble counter
00001458                             
00001458                            NemDec_WritePixelLoop:
00001458 51C8 FFF0                          dbf     d0,NemDec_WritePixel
0000145C 60B8                               bra.s   NemDec2
0000145E                            ; ---------------------------------------------------------------------------
0000145E                             
0000145E                            NemDec_InlineData:
0000145E 5D46                               subq.w  #6,d6                   ; 6 bits needed to signal inline data
00001460 0C46 0009                          cmpi.w  #9,d6
00001464 6400                               bcc.s   @0
00001466 5046                               addq.w  #8,d6
00001468 E145                               asl.w   #8,d5
0000146A 1A18                               move.b  (a0)+,d5
0000146C 5F46                       @0      subq.w  #7,d6                   ; and 7 bits needed for the inline data itself
0000146E 3205                               move.w  d5,d1
00001470 EC69                               lsr.w   d6,d1                   ; shift so that low bit of the code is in bit position 0
00001472 3001                               move.w  d1,d0
00001474 0241 000F                          andi.w  #$F,d1                  ; get palette index for pixel
00001478 0240 0070                          andi.w  #$70,d0                 ; high nybble is repeat count for pixel
0000147C 0C46 0009                          cmpi.w  #9,d6
00001480 64C6                               bcc.s   NemDec_GetRepeatCount
00001482 5046                               addq.w  #8,d6
00001484 E145                               asl.w   #8,d5
00001486 1A18                               move.b  (a0)+,d5
00001488 60BE                               bra.s   NemDec_GetRepeatCount
0000148A                             
0000148A                            ; ---------------------------------------------------------------------------
0000148A                            ; Subroutines to output decompressed entry
0000148A                            ; Selected depending on current decompression mode
0000148A                            ; ---------------------------------------------------------------------------
0000148A                             
0000148A                            NemDec_WriteRowToVDP:
0000148A                            loc_1502:
0000148A 2884                               move.l  d4,(a4)                 ; write 8-pixel row
0000148C 534D                               subq.w  #1,a5
0000148E 380D                               move.w  a5,d4                   ; have all the 8-pixel rows been written?
00001490 66C2                               bne.s   NemDec3                 ; if not, branch
00001492 4E75                               rts
00001494                            ; ---------------------------------------------------------------------------
00001494                             
00001494                            NemDec_WriteRowToVDP_XOR:
00001494 B982                               eor.l   d4,d2                   ; XOR the previous row by the current row
00001496 2882                               move.l  d2,(a4)                 ; and write the result
00001498 534D                               subq.w  #1,a5
0000149A 380D                               move.w  a5,d4
0000149C 66B6                               bne.s   NemDec3
0000149E 4E75                               rts
000014A0                            ; ---------------------------------------------------------------------------
000014A0                             
000014A0                            NemDec_WriteRowToRAM:
000014A0 28C4                               move.l  d4,(a4)+                ; write 8-pixel row
000014A2 534D                               subq.w  #1,a5
000014A4 380D                               move.w  a5,d4                   ; have all the 8-pixel rows been written?
000014A6 66AC                               bne.s   NemDec3                 ; if not, branch
000014A8 4E75                               rts
000014AA                            ; ---------------------------------------------------------------------------
000014AA                             
000014AA                            NemDec_WriteRowToRAM_XOR:
000014AA B982                               eor.l   d4,d2                   ; XOR the previous row by the current row
000014AC 28C2                               move.l  d2,(a4)+                ; and write the result
000014AE 534D                               subq.w  #1,a5
000014B0 380D                               move.w  a5,d4
000014B2 66A0                               bne.s   NemDec3
000014B4 4E75                               rts
000014B6                             
000014B6                            ; ---------------------------------------------------------------------------
000014B6                            ; Part of the Nemesis decompressor, builds the code table (in RAM)
000014B6                            ; ---------------------------------------------------------------------------
000014B6                             
000014B6                            NemDec4:
000014B6 1018                               move.b  (a0)+,d0                ; read first byte
000014B8                             
000014B8                            @ChkEnd:
000014B8 0C00 00FF                          cmpi.b  #$FF,d0                 ; has the end of the code table description been reached?
000014BC 6600                               bne.s   @NewPalIndex            ; if not, branch
000014BE 4E75                               rts
000014C0                            ; ---------------------------------------------------------------------------
000014C0                             
000014C0                            @NewPalIndex:
000014C0 3E00                               move.w  d0,d7
000014C2                             
000014C2                            @ItemLoop:
000014C2 1018                               move.b  (a0)+,d0                ; read next byte
000014C4 6BF2                               bmi.s   @ChkEnd                 ; ~~
000014C6 1200                               move.b  d0,d1
000014C8 0247 000F                          andi.w  #$F,d7                  ; get palette index
000014CC 0241 0070                          andi.w  #$70,d1                 ; get repeat count for palette index
000014D0 8E41                               or.w    d1,d7                   ; combine the two
000014D2 0240 000F                          andi.w  #$F,d0                  ; get the length of the code in bits
000014D6 1200                               move.b  d0,d1
000014D8 E149                               lsl.w   #8,d1
000014DA 8E41                               or.w    d1,d7                   ; combine with palette index and repeat count to form code table entry
000014DC 7208                               moveq   #8,d1
000014DE 9240                               sub.w   d0,d1                   ; is the code 8 bits long?
000014E0 6600                               bne.s   @ItemShortCode          ; if not, a bit of extra processing is needed
000014E2 1018                               move.b  (a0)+,d0                ; get code
000014E4 D040                               add.w   d0,d0                   ; each code gets a word-sized entry in the table
000014E6 3387 0000                          move.w  d7,(a1,d0.w)            ; store the entry for the code
000014EA 60D6                               bra.s   @ItemLoop               ; repeat
000014EC                            ; ---------------------------------------------------------------------------
000014EC                             
000014EC                            @ItemShortCode:
000014EC 1018                               move.b  (a0)+,d0                ; get code
000014EE E368                               lsl.w   d1,d0                   ; shift so that high bit is in bit position 7
000014F0 D040                               add.w   d0,d0                   ; get index into code table
000014F2 7A01                               moveq   #1,d5
000014F4 E36D                               lsl.w   d1,d5
000014F6 5345                               subq.w  #1,d5                   ; d5 = 2^d1 - 1
000014F8 4DF1 0000                          lea     (a1,d0.w),a6            ; ~~
000014FC                             
000014FC                            @ItemShortCodeLoop:
000014FC 3CC7                               move.w  d7,(a6)+                ; ~~ store entry
000014FE 51CD FFFC                          dbf     d5,@ItemShortCodeLoop   ; repeat for required number of entries
00001502 60BE                               bra.s   @ItemLoop
00001504                            
00001504                            ; ---------------------------------------------------------------
00001504                            ; COMPER Decompressor
00001504                            ; ---------------------------------------------------------------
00001504                            ; INPUT:
00001504                            ;       a0      - Source Offset
00001504                            ;       a1      - Destination Offset
00001504                            ; ---------------------------------------------------------------
00001504                             
00001504                            CompDec
00001504                             
00001504                            @newblock
00001504 3018                               move.w  (a0)+,d0                ; fetch description field
00001506 760F                               moveq   #15,d3                  ; set bits counter to 16
00001508                             
00001508                            @mainloop
00001508 D040                               add.w   d0,d0                   ; roll description field
0000150A 6500                               bcs.s   @flag                   ; if a flag issued, branch
0000150C 32D8                               move.w  (a0)+,(a1)+             ; otherwise, do uncompressed data
0000150E 51CB FFF8                          dbf     d3,@mainloop            ; if bits counter remains, parse the next word
00001512 60F0                               bra.s   @newblock               ; start a new block
00001514                             
00001514                            ; ---------------------------------------------------------------
00001514 72FF                       @flag   moveq   #-1,d1                  ; init displacement
00001516 1218                               move.b  (a0)+,d1                ; load displacement
00001518 D241                               add.w   d1,d1
0000151A 7400                               moveq   #0,d2                   ; init copy count
0000151C 1418                               move.b  (a0)+,d2                ; load copy length
0000151E 6700                               beq.s   @end                    ; if zero, branch
00001520 45F1 1000                          lea     (a1,d1),a2              ; load start copy address
00001524                             
00001524 32DA                       @loop   move.w  (a2)+,(a1)+             ; copy given sequence
00001526 51CA FFFC                          dbf     d2,@loop                ; repeat
0000152A 51CB FFDC                          dbf     d3,@mainloop            ; if bits counter remains, parse the next word
0000152E 60D4                               bra.s   @newblock               ; start a new block
00001530                             
00001530 4E75                       @end    rts
00001532                            
00001532                            ; ---------------------------------------------------------------------------
00001532                            ; Subroutine to	load pattern load cues
00001532                            ; ---------------------------------------------------------------------------
00001532                            
00001532                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001532                            
00001532                            
00001532                            LoadPLC:
00001532 48E7 0060                  		movem.l	a1-a2,-(sp)
00001536 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
0000153C D040                       		add.w	d0,d0
0000153E 3031 0000                  		move.w	(a1,d0.w),d0
00001542 43F1 0000                  		lea	(a1,d0.w),a1
00001546 45F8 F680                  		lea	($FFFFF680).w,a2
0000154A                            
0000154A                            loc_1598:
0000154A 4A92                       		tst.l	(a2)
0000154C 6700                       		beq.s	loc_15A0
0000154E 5C4A                       		addq.w	#6,a2
00001550 60F8                       		bra.s	loc_1598
00001552                            ; ===========================================================================
00001552                            
00001552                            loc_15A0:				; XREF: LoadPLC
00001552 3019                       		move.w	(a1)+,d0
00001554 6B00                       		bmi.s	loc_15AC
00001556                            
00001556                            loc_15A4:
00001556 24D9                       		move.l	(a1)+,(a2)+
00001558 34D9                       		move.w	(a1)+,(a2)+
0000155A 51C8 FFFA                  		dbf	d0,loc_15A4
0000155E                            
0000155E                            loc_15AC:
0000155E 4CDF 0600                  		movem.l	(sp)+,a1-a2
00001562 4E75                       		rts	
00001564                            ; End of function LoadPLC
00001564                            
00001564                            
00001564                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001564                            
00001564                            
00001564                            LoadPLC2:
00001564 48E7 0060                  		movem.l	a1-a2,-(sp)
00001568 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
0000156E D040                       		add.w	d0,d0
00001570 3031 0000                  		move.w	(a1,d0.w),d0
00001574 43F1 0000                  		lea	(a1,d0.w),a1
00001578 6100                       		bsr.s	ClearPLC
0000157A 45F8 F680                  		lea	($FFFFF680).w,a2
0000157E 3019                       		move.w	(a1)+,d0
00001580 6B00                       		bmi.s	loc_15D8
00001582                            
00001582                            loc_15D0:
00001582 24D9                       		move.l	(a1)+,(a2)+
00001584 34D9                       		move.w	(a1)+,(a2)+
00001586 51C8 FFFA                  		dbf	d0,loc_15D0
0000158A                            
0000158A                            loc_15D8:
0000158A 4CDF 0600                  		movem.l	(sp)+,a1-a2
0000158E 4E75                       		rts	
00001590                            ; End of function LoadPLC2
00001590                            
00001590                            ; ---------------------------------------------------------------------------
00001590                            ; Subroutine to	clear the pattern load cues
00001590                            ; ---------------------------------------------------------------------------
00001590                            
00001590                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001590                            
00001590                            
00001590                            ClearPLC:				; XREF: LoadPLC2
00001590 45F8 F680                  		lea	($FFFFF680).w,a2
00001594 701F                       		moveq	#$1F,d0
00001596                            
00001596                            ClearPLC_Loop:
00001596 429A                       		clr.l	(a2)+
00001598 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
0000159C 4E75                       		rts	
0000159E                            ; End of function ClearPLC
0000159E                            
0000159E                            ; ---------------------------------------------------------------------------
0000159E                            ; Subroutine to	use graphics listed in a pattern load cue
0000159E                            ; ---------------------------------------------------------------------------
0000159E                            
0000159E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000159E                            
0000159E                            
0000159E                            RunPLC_RAM:				; XREF: Pal_FadeTo
0000159E 4AB8 F680                  		tst.l	($FFFFF680).w
000015A2 6700                       		beq.s	locret_1640
000015A4 4A78 F6F8                  		tst.w	($FFFFF6F8).w
000015A8 6600                       		bne.s	locret_1640
000015AA 2078 F680                  		movea.l	($FFFFF680).w,a0
000015AE 47F9 0000 148A             		lea	(loc_1502).l,a3
000015B4 43F8 AA00                  		lea	($FFFFAA00).w,a1
000015B8 3418                       		move.w	(a0)+,d2
000015BA 6A00                       		bpl.s	loc_160E
000015BC D6FC 000A                  		adda.w	#$A,a3
000015C0                            
000015C0                            loc_160E:
000015C0 0242 7FFF                  		andi.w	#$7FFF,d2
000015C4 6100 FEF0                  		bsr.w	NemDec4
000015C8 1A18                       		move.b	(a0)+,d5
000015CA E145                       		asl.w	#8,d5
000015CC 1A18                       		move.b	(a0)+,d5
000015CE 7C10                       		moveq	#$10,d6
000015D0 7000                       		moveq	#0,d0
000015D2 21C8 F680                  		move.l	a0,($FFFFF680).w
000015D6 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
000015DA 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000015DE 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
000015E2 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
000015E6 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000015EA 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000015EE 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
000015F2                            
000015F2                            locret_1640:
000015F2 4E75                       		rts	
000015F4                            ; End of function RunPLC_RAM
000015F4                            
000015F4                            
000015F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015F4                            
000015F4                            
000015F4                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
000015F4 4A78 F6F8                  		tst.w	($FFFFF6F8).w
000015F8 6700 0000                  		beq.w	locret_16DA
000015FC 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
00001602 7000                       		moveq	#0,d0
00001604 3038 F684                  		move.w	($FFFFF684).w,d0
00001608 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
0000160E 6000                       		bra.s	loc_1676
00001610                            ; End of function sub_1642
00001610                            
00001610                            
00001610                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001610                            
00001610                            
00001610                            sub_165E:				; XREF: Demo_Time
00001610 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001614 6700                       		beq.s	locret_16DA
00001616 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
0000161C 7000                       		moveq	#0,d0
0000161E 3038 F684                  		move.w	($FFFFF684).w,d0
00001622 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
00001628                            
00001628                            loc_1676:				; XREF: sub_1642
00001628 49F9 00C0 0004             		lea	($C00004).l,a4
0000162E E588                       		lsl.l	#2,d0
00001630 E448                       		lsr.w	#2,d0
00001632 0040 4000                  		ori.w	#$4000,d0
00001636 4840                       		swap	d0
00001638 2880                       		move.l	d0,(a4)
0000163A 594C                       		subq.w	#4,a4
0000163C 2078 F680                  		movea.l	($FFFFF680).w,a0
00001640 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
00001644 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
00001648 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
0000164C 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
00001650 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
00001654 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
00001658 43F8 AA00                  		lea	($FFFFAA00).w,a1
0000165C                            
0000165C                            loc_16AA:				; XREF: sub_165E
0000165C 3A7C 0008                  		movea.w	#8,a5
00001660 6100 FDF2                  		bsr.w	NemDec3
00001664 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
00001668 6700                       		beq.s	loc_16DC
0000166A 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
0000166E 66EC                       		bne.s	loc_16AA
00001670 21C8 F680                  		move.l	a0,($FFFFF680).w
00001674 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
00001678 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
0000167C 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
00001680 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
00001684 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001688 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
0000168C                            
0000168C                            locret_16DA:				; XREF: sub_1642
0000168C 4E75                       		rts	
0000168E                            ; ===========================================================================
0000168E                            
0000168E                            loc_16DC:				; XREF: sub_165E
0000168E 41F8 F680                  		lea	($FFFFF680).w,a0
00001692 7015                       		moveq	#$15,d0
00001694                            
00001694                            loc_16E2:				; XREF: sub_165E
00001694 20E8 0006                  		move.l	6(a0),(a0)+
00001698 51C8 FFFA                  		dbf	d0,loc_16E2
0000169C 4E75                       		rts	
0000169E                            ; End of function sub_165E
0000169E                            
0000169E                            ; ---------------------------------------------------------------------------
0000169E                            ; Subroutine to	execute	the pattern load cue
0000169E                            ; ---------------------------------------------------------------------------
0000169E                            
0000169E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000169E                            
0000169E                            
0000169E                            RunPLC_ROM:
0000169E 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
000016A4 D040                       		add.w	d0,d0
000016A6 3031 0000                  		move.w	(a1,d0.w),d0
000016AA 43F1 0000                  		lea	(a1,d0.w),a1
000016AE 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
000016B0                            
000016B0                            RunPLC_Loop:
000016B0 2059                       		movea.l	(a1)+,a0	; get art pointer
000016B2 7000                       		moveq	#0,d0
000016B4 3019                       		move.w	(a1)+,d0	; get VRAM address
000016B6 E588                       		lsl.l	#2,d0		; divide address by $20
000016B8 E448                       		lsr.w	#2,d0
000016BA 0040 4000                  		ori.w	#$4000,d0
000016BE 4840                       		swap	d0
000016C0 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
000016C6 6100 FD12                  		bsr.w	NemDec		; decompress
000016CA 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
000016CE 4E75                       		rts	
000016D0                            ; End of function RunPLC_ROM
000016D0                            
000016D0                            ; ---------------------------------------------------------------------------
000016D0                            ; Enigma decompression algorithm
000016D0                            ; ---------------------------------------------------------------------------
000016D0                            
000016D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016D0                            
000016D0                            
000016D0                            EniDec:
000016D0 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
000016D4 3640                       		movea.w	d0,a3
000016D6 1018                       		move.b	(a0)+,d0
000016D8 4880                       		ext.w	d0
000016DA 3A40                       		movea.w	d0,a5
000016DC 1818                       		move.b	(a0)+,d4
000016DE E70C                       		lsl.b	#3,d4
000016E0 3458                       		movea.w	(a0)+,a2
000016E2 D4CB                       		adda.w	a3,a2
000016E4 3858                       		movea.w	(a0)+,a4
000016E6 D8CB                       		adda.w	a3,a4
000016E8 1A18                       		move.b	(a0)+,d5
000016EA E145                       		asl.w	#8,d5
000016EC 1A18                       		move.b	(a0)+,d5
000016EE 7C10                       		moveq	#$10,d6
000016F0                            
000016F0                            loc_173E:				; XREF: loc_1768
000016F0 7007                       		moveq	#7,d0
000016F2 3E06                       		move.w	d6,d7
000016F4 9E40                       		sub.w	d0,d7
000016F6 3205                       		move.w	d5,d1
000016F8 EE69                       		lsr.w	d7,d1
000016FA 0241 007F                  		andi.w	#$7F,d1
000016FE 3401                       		move.w	d1,d2
00001700 0C41 0040                  		cmpi.w	#$40,d1
00001704 6400                       		bcc.s	loc_1758
00001706 7006                       		moveq	#6,d0
00001708 E24A                       		lsr.w	#1,d2
0000170A                            
0000170A                            loc_1758:
0000170A 6100 0000                  		bsr.w	sub_188C
0000170E 0242 000F                  		andi.w	#$F,d2
00001712 E849                       		lsr.w	#4,d1
00001714 D241                       		add.w	d1,d1
00001716 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
0000171A                            ; End of function EniDec
0000171A                            
0000171A                            ; ===========================================================================
0000171A                            
0000171A                            loc_1768:				; XREF: loc_17B4
0000171A 32CA                       		move.w	a2,(a1)+
0000171C 524A                       		addq.w	#1,a2
0000171E 51CA FFFA                  		dbf	d2,loc_1768
00001722 60CC                       		bra.s	loc_173E
00001724                            ; ===========================================================================
00001724                            
00001724                            loc_1772:				; XREF: loc_17B4
00001724 32CC                       		move.w	a4,(a1)+
00001726 51CA FFFC                  		dbf	d2,loc_1772
0000172A 60C4                       		bra.s	loc_173E
0000172C                            ; ===========================================================================
0000172C                            
0000172C                            loc_177A:				; XREF: loc_17B4
0000172C 6100 0000                  		bsr.w	loc_17DC
00001730                            
00001730                            loc_177E:
00001730 32C1                       		move.w	d1,(a1)+
00001732 51CA FFFC                  		dbf	d2,loc_177E
00001736 60B8                       		bra.s	loc_173E
00001738                            ; ===========================================================================
00001738                            
00001738                            loc_1786:				; XREF: loc_17B4
00001738 6100 0000                  		bsr.w	loc_17DC
0000173C                            
0000173C                            loc_178A:
0000173C 32C1                       		move.w	d1,(a1)+
0000173E 5241                       		addq.w	#1,d1
00001740 51CA FFFA                  		dbf	d2,loc_178A
00001744 60AA                       		bra.s	loc_173E
00001746                            ; ===========================================================================
00001746                            
00001746                            loc_1794:				; XREF: loc_17B4
00001746 6100 0000                  		bsr.w	loc_17DC
0000174A                            
0000174A                            loc_1798:
0000174A 32C1                       		move.w	d1,(a1)+
0000174C 5341                       		subq.w	#1,d1
0000174E 51CA FFFA                  		dbf	d2,loc_1798
00001752 609C                       		bra.s	loc_173E
00001754                            ; ===========================================================================
00001754                            
00001754                            loc_17A2:				; XREF: loc_17B4
00001754 0C42 000F                  		cmpi.w	#$F,d2
00001758 6700                       		beq.s	loc_17C4
0000175A                            
0000175A                            loc_17A8:
0000175A 6100 0000                  		bsr.w	loc_17DC
0000175E 32C1                       		move.w	d1,(a1)+
00001760 51CA FFF8                  		dbf	d2,loc_17A8
00001764 608A                       		bra.s	loc_173E
00001766                            ; ===========================================================================
00001766                            
00001766                            loc_17B4:				; XREF: EniDec
00001766 60B2                       		bra.s	loc_1768
00001768                            ; ===========================================================================
00001768 60B0                       		bra.s	loc_1768
0000176A                            ; ===========================================================================
0000176A 60B8                       		bra.s	loc_1772
0000176C                            ; ===========================================================================
0000176C 60B6                       		bra.s	loc_1772
0000176E                            ; ===========================================================================
0000176E 60BC                       		bra.s	loc_177A
00001770                            ; ===========================================================================
00001770 60C6                       		bra.s	loc_1786
00001772                            ; ===========================================================================
00001772 60D2                       		bra.s	loc_1794
00001774                            ; ===========================================================================
00001774 60DE                       		bra.s	loc_17A2
00001776                            ; ===========================================================================
00001776                            
00001776                            loc_17C4:				; XREF: loc_17A2
00001776 5348                       		subq.w	#1,a0
00001778 0C46 0010                  		cmpi.w	#$10,d6
0000177C 6600                       		bne.s	loc_17CE
0000177E 5348                       		subq.w	#1,a0
00001780                            
00001780                            loc_17CE:
00001780 3008                       		move.w	a0,d0
00001782 E248                       		lsr.w	#1,d0
00001784 6400                       		bcc.s	loc_17D6
00001786 5248                       		addq.w	#1,a0
00001788                            
00001788                            loc_17D6:
00001788 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
0000178C 4E75                       		rts	
0000178E                            ; ===========================================================================
0000178E                            
0000178E                            loc_17DC:				; XREF: loc_17A2
0000178E 360B                       		move.w	a3,d3
00001790 1204                       		move.b	d4,d1
00001792 D201                       		add.b	d1,d1
00001794 6400                       		bcc.s	loc_17EE
00001796 5346                       		subq.w	#1,d6
00001798 0D05                       		btst	d6,d5
0000179A 6700                       		beq.s	loc_17EE
0000179C 0043 8000                  		ori.w	#-$8000,d3
000017A0                            
000017A0                            loc_17EE:
000017A0 D201                       		add.b	d1,d1
000017A2 6400                       		bcc.s	loc_17FC
000017A4 5346                       		subq.w	#1,d6
000017A6 0D05                       		btst	d6,d5
000017A8 6700                       		beq.s	loc_17FC
000017AA 0643 4000                  		addi.w	#$4000,d3
000017AE                            
000017AE                            loc_17FC:
000017AE D201                       		add.b	d1,d1
000017B0 6400                       		bcc.s	loc_180A
000017B2 5346                       		subq.w	#1,d6
000017B4 0D05                       		btst	d6,d5
000017B6 6700                       		beq.s	loc_180A
000017B8 0643 2000                  		addi.w	#$2000,d3
000017BC                            
000017BC                            loc_180A:
000017BC D201                       		add.b	d1,d1
000017BE 6400                       		bcc.s	loc_1818
000017C0 5346                       		subq.w	#1,d6
000017C2 0D05                       		btst	d6,d5
000017C4 6700                       		beq.s	loc_1818
000017C6 0043 1000                  		ori.w	#$1000,d3
000017CA                            
000017CA                            loc_1818:
000017CA D201                       		add.b	d1,d1
000017CC 6400                       		bcc.s	loc_1826
000017CE 5346                       		subq.w	#1,d6
000017D0 0D05                       		btst	d6,d5
000017D2 6700                       		beq.s	loc_1826
000017D4 0043 0800                  		ori.w	#$800,d3
000017D8                            
000017D8                            loc_1826:
000017D8 3205                       		move.w	d5,d1
000017DA 3E06                       		move.w	d6,d7
000017DC 9E4D                       		sub.w	a5,d7
000017DE 6400                       		bcc.s	loc_1856
000017E0 3C07                       		move.w	d7,d6
000017E2 0646 0010                  		addi.w	#$10,d6
000017E6 4447                       		neg.w	d7
000017E8 EF69                       		lsl.w	d7,d1
000017EA 1A10                       		move.b	(a0),d5
000017EC EF3D                       		rol.b	d7,d5
000017EE DE47                       		add.w	d7,d7
000017F0 CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
000017F4 D245                       		add.w	d5,d1
000017F6                            
000017F6                            loc_1844:				; XREF: loc_1868
000017F6 300D                       		move.w	a5,d0
000017F8 D040                       		add.w	d0,d0
000017FA C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
000017FE D243                       		add.w	d3,d1
00001800 1A18                       		move.b	(a0)+,d5
00001802 E14D                       		lsl.w	#8,d5
00001804 1A18                       		move.b	(a0)+,d5
00001806 4E75                       		rts	
00001808                            ; ===========================================================================
00001808                            
00001808                            loc_1856:				; XREF: loc_1826
00001808 6700                       		beq.s	loc_1868
0000180A EE69                       		lsr.w	d7,d1
0000180C 300D                       		move.w	a5,d0
0000180E D040                       		add.w	d0,d0
00001810 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001814 D243                       		add.w	d3,d1
00001816 300D                       		move.w	a5,d0
00001818 6000                       		bra.s	sub_188C
0000181A                            ; ===========================================================================
0000181A                            
0000181A                            loc_1868:				; XREF: loc_1856
0000181A 7C10                       		moveq	#$10,d6
0000181C                            
0000181C                            loc_186A:
0000181C 60D8                       		bra.s	loc_1844
0000181E                            ; ===========================================================================
0000181E 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
00001834 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
0000183E                            
0000183E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000183E                            
0000183E                            
0000183E                            sub_188C:				; XREF: EniDec
0000183E 9C40                       		sub.w	d0,d6
00001840 0C46 0009                  		cmpi.w	#9,d6
00001844 6400                       		bcc.s	locret_189A
00001846 5046                       		addq.w	#8,d6
00001848 E145                       		asl.w	#8,d5
0000184A 1A18                       		move.b	(a0)+,d5
0000184C                            
0000184C                            locret_189A:
0000184C 4E75                       		rts	
0000184E                            ; End of function sub_188C
0000184E                            
0000184E                            ; ===========================================================================
0000184E                            ; ---------------------------------------------------------------------------
0000184E                            ; Kosinski decompression routine
0000184E                            ;
0000184E                            ; Created by vladikcomper
0000184E                            ; Special thanks to flamewing and MarkeyJester
0000184E                            ; ---------------------------------------------------------------------------
0000184E                             
0000184E                            _Kos_RunBitStream macro
0000184E                                    dbf     d2,@skip\@
0000184E                                    moveq   #7,d2
0000184E                                    move.b  d1,d0
0000184E                                    swap    d3
0000184E                                    bpl.s   @skip\@
0000184E                                    move.b  (a0)+,d0                        ; get desc. bitfield
0000184E                                    move.b  (a0)+,d1                        ;
0000184E                                    move.b  (a4,d0.w),d0                    ; reload converted desc. bitfield from a LUT
0000184E                                    move.b  (a4,d1.w),d1                    ;
0000184E                            @skip\@
0000184E                                    endm
0000184E                            ; ---------------------------------------------------------------------------
0000184E                             
0000184E                            KosDec:
0000184E 7E07                               moveq   #7,d7
00001850 7000                               moveq   #0,d0
00001852 7200                               moveq   #0,d1
00001854 49FA 0000                          lea     KosDec_ByteMap(pc),a4
00001858 1018                               move.b  (a0)+,d0                        ; get desc field low-byte
0000185A 1218                               move.b  (a0)+,d1                        ; get desc field hi-byte
0000185C 1034 0000                          move.b  (a4,d0.w),d0                    ; reload converted desc. bitfield from a LUT
00001860 1234 1000                          move.b  (a4,d1.w),d1                    ;
00001864 7407                               moveq   #7,d2                           ; set repeat count to 8
00001866 76FF                               moveq   #-1,d3                          ; d3 will be desc field switcher
00001868 4243                               clr.w   d3                              ;
0000186A 6000                               bra.s   KosDec_FetchNewCode
0000186C                             
0000186C                            KosDec_FetchCodeLoop:
0000186C                                    ; code 1 (Uncompressed byte)
0000186C 51CA 0000 7407 1001 4843+          _Kos_RunBitStream
00001884 12D8                               move.b  (a0)+,(a1)+
00001886                             
00001886                            KosDec_FetchNewCode:
00001886 D000                               add.b   d0,d0                           ; get a bit from the bitstream
00001888 65E2                               bcs.s   KosDec_FetchCodeLoop            ; if code = 0, branch
0000188A                             
0000188A                                    ; codes 00 and 01
0000188A 51CA 0000 7407 1001 4843+          _Kos_RunBitStream
000018A2 7800                               moveq   #0,d4                           ; d4 will contain copy count
000018A4 D000                               add.b   d0,d0                           ; get a bit from the bitstream
000018A6 6500                               bcs.s   KosDec_Code_01
000018A8                             
000018A8                                    ; code 00 (Dictionary ref. short)
000018A8 51CA 0000 7407 1001 4843+          _Kos_RunBitStream
000018C0 D000                               add.b   d0,d0                           ; get a bit from the bitstream
000018C2 D944                               addx.w  d4,d4
000018C4 51CA 0000 7407 1001 4843+          _Kos_RunBitStream
000018DC D000                               add.b   d0,d0                           ; get a bit from the bitstream
000018DE D944                               addx.w  d4,d4
000018E0 51CA 0000 7407 1001 4843+          _Kos_RunBitStream
000018F8 7AFF                               moveq   #-1,d5
000018FA 1A18                               move.b  (a0)+,d5                        ; d5 = displacement
000018FC                             
000018FC                            KosDec_StreamCopy:
000018FC 47F1 5000                          lea     (a1,d5),a3
00001900 12DB                               move.b  (a3)+,(a1)+                     ; do 1 extra copy (to compensate for +1 to copy counter)
00001902                             
00001902                            KosDec_copy:
00001902 12DB                               move.b  (a3)+,(a1)+
00001904 51CC FFFC                          dbf     d4,KosDec_copy
00001908 6000 FF7C                          bra.w   KosDec_FetchNewCode
0000190C                            ; ---------------------------------------------------------------------------
0000190C                            KosDec_Code_01:
0000190C                                    ; code 01 (Dictionary ref. long / special)
0000190C 51CA 0000 7407 1001 4843+          _Kos_RunBitStream
00001924 1C18                               move.b  (a0)+,d6                        ; d6 = %LLLLLLLL
00001926 1818                               move.b  (a0)+,d4                        ; d4 = %HHHHHCCC
00001928 7AFF                               moveq   #-1,d5
0000192A 1A04                               move.b  d4,d5                           ; d5 = %11111111 HHHHHCCC
0000192C EB4D                               lsl.w   #5,d5                           ; d5 = %111HHHHH CCC00000
0000192E 1A06                               move.b  d6,d5                           ; d5 = %111HHHHH LLLLLLLL
00001930 C847                               and.w   d7,d4                           ; d4 = %00000CCC
00001932 66C8                               bne.s   KosDec_StreamCopy               ; if CCC=0, branch
00001934                             
00001934                                    ; special mode (extended counter)
00001934 1818                               move.b  (a0)+,d4                        ; read cnt
00001936 6700                               beq.s   KosDec_Quit                     ; if cnt=0, quit decompression
00001938 5304                               subq.b  #1,d4
0000193A 6700 FF4A                          beq.w   KosDec_FetchNewCode             ; if cnt=1, fetch a new code
0000193E                             
0000193E 47F1 5000                          lea     (a1,d5),a3
00001942 12DB                               move.b  (a3)+,(a1)+                     ; do 1 extra copy (to compensate for +1 to copy counter)
00001944 3C04                               move.w  d4,d6
00001946 4646                               not.w   d6
00001948 CC47                               and.w   d7,d6
0000194A DC46                               add.w   d6,d6
0000194C E64C                               lsr.w   #3,d4
0000194E 4EFB 6000                          jmp     KosDec_largecopy(pc,d6.w)
00001952                             
00001952                            KosDec_largecopy:
00001952                                    rept 8
00001952                                    move.b  (a3)+,(a1)+
00001952 12DB 12DB 12DB 12DB 12DB+          endr
00001962 51CC FFEE                          dbf     d4,KosDec_largecopy
00001966 6000 FF1E                          bra.w   KosDec_FetchNewCode
0000196A                             
0000196A                            KosDec_Quit:
0000196A 4E75                               rts
0000196C                             
0000196C                            ; ---------------------------------------------------------------------------
0000196C                            ; A look-up table to invert bits order in desc. field bytes
0000196C                            ; ---------------------------------------------------------------------------
0000196C                             
0000196C                            KosDec_ByteMap:
0000196C 0080 40C0 20A0 60E0 1090+          dc.b    $00,$80,$40,$C0,$20,$A0,$60,$E0,$10,$90,$50,$D0,$30,$B0,$70,$F0
0000197C 0888 48C8 28A8 68E8 1898+          dc.b    $08,$88,$48,$C8,$28,$A8,$68,$E8,$18,$98,$58,$D8,$38,$B8,$78,$F8
0000198C 0484 44C4 24A4 64E4 1494+          dc.b    $04,$84,$44,$C4,$24,$A4,$64,$E4,$14,$94,$54,$D4,$34,$B4,$74,$F4
0000199C 0C8C 4CCC 2CAC 6CEC 1C9C+          dc.b    $0C,$8C,$4C,$CC,$2C,$AC,$6C,$EC,$1C,$9C,$5C,$DC,$3C,$BC,$7C,$FC
000019AC 0282 42C2 22A2 62E2 1292+          dc.b    $02,$82,$42,$C2,$22,$A2,$62,$E2,$12,$92,$52,$D2,$32,$B2,$72,$F2
000019BC 0A8A 4ACA 2AAA 6AEA 1A9A+          dc.b    $0A,$8A,$4A,$CA,$2A,$AA,$6A,$EA,$1A,$9A,$5A,$DA,$3A,$BA,$7A,$FA
000019CC 0686 46C6 26A6 66E6 1696+          dc.b    $06,$86,$46,$C6,$26,$A6,$66,$E6,$16,$96,$56,$D6,$36,$B6,$76,$F6
000019DC 0E8E 4ECE 2EAE 6EEE 1E9E+          dc.b    $0E,$8E,$4E,$CE,$2E,$AE,$6E,$EE,$1E,$9E,$5E,$DE,$3E,$BE,$7E,$FE
000019EC 0181 41C1 21A1 61E1 1191+          dc.b    $01,$81,$41,$C1,$21,$A1,$61,$E1,$11,$91,$51,$D1,$31,$B1,$71,$F1
000019FC 0989 49C9 29A9 69E9 1999+          dc.b    $09,$89,$49,$C9,$29,$A9,$69,$E9,$19,$99,$59,$D9,$39,$B9,$79,$F9
00001A0C 0585 45C5 25A5 65E5 1595+          dc.b    $05,$85,$45,$C5,$25,$A5,$65,$E5,$15,$95,$55,$D5,$35,$B5,$75,$F5
00001A1C 0D8D 4DCD 2DAD 6DED 1D9D+          dc.b    $0D,$8D,$4D,$CD,$2D,$AD,$6D,$ED,$1D,$9D,$5D,$DD,$3D,$BD,$7D,$FD
00001A2C 0383 43C3 23A3 63E3 1393+          dc.b    $03,$83,$43,$C3,$23,$A3,$63,$E3,$13,$93,$53,$D3,$33,$B3,$73,$F3
00001A3C 0B8B 4BCB 2BAB 6BEB 1B9B+          dc.b    $0B,$8B,$4B,$CB,$2B,$AB,$6B,$EB,$1B,$9B,$5B,$DB,$3B,$BB,$7B,$FB
00001A4C 0787 47C7 27A7 67E7 1797+          dc.b    $07,$87,$47,$C7,$27,$A7,$67,$E7,$17,$97,$57,$D7,$37,$B7,$77,$F7
00001A5C 0F8F 4FCF 2FAF 6FEF 1F9F+          dc.b    $0F,$8F,$4F,$CF,$2F,$AF,$6F,$EF,$1F,$9F,$5F,$DF,$3F,$BF,$7F,$FF
00001A6C                             
00001A6C                            ; ===========================================================================
00001A6C                            
00001A6C                            ; ---------------------------------------------------------------------------
00001A6C                            ; Palette cycling routine loading subroutine
00001A6C                            ; ---------------------------------------------------------------------------
00001A6C                            
00001A6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A6C                            
00001A6C                            
00001A6C                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
00001A6C 7400                       		moveq	#0,d2
00001A6E 7000                       		moveq	#0,d0
00001A70 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00001A74 D040                       		add.w	d0,d0		; multiply by 2
00001A76 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated Palettes offset index into d0
00001A7A 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
00001A7E                            ; End of function PalCycle_Load
00001A7E                            
00001A7E                            ; ===========================================================================
00001A7E                            ; ---------------------------------------------------------------------------
00001A7E                            ; Palette cycling routines
00001A7E                            ; ---------------------------------------------------------------------------
00001A7E 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
00001A80 0000                       		dc.w PalCycle_LZ-PalCycle
00001A82 0000                       		dc.w PalCycle_MZ-PalCycle
00001A84 0000                       		dc.w PalCycle_SLZ-PalCycle
00001A86 0000                       		dc.w PalCycle_SYZ-PalCycle
00001A88 0000                       		dc.w PalCycle_SBZ-PalCycle
00001A8A 0000                       		dc.w PalCycle_GHZ-PalCycle
00001A8C                            
00001A8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A8C                            
00001A8C                            
00001A8C                            PalCycle_Title:				; XREF: TitleScreen
00001A8C 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001A92 6000                       		bra.s	loc_196A
00001A94                            ; ===========================================================================
00001A94                            
00001A94                            PalCycle_GHZ:				; XREF: PalCycle
00001A94 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001A9A                            
00001A9A                            loc_196A:				; XREF: PalCycle_Title
00001A9A 5378 F634                  		subq.w	#1,($FFFFF634).w
00001A9E 6A00                       		bpl.s	locret_1990
00001AA0 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001AA6 3038 F632                  		move.w	($FFFFF632).w,d0
00001AAA 5278 F632                  		addq.w	#1,($FFFFF632).w
00001AAE 0240 0003                  		andi.w	#3,d0
00001AB2 E748                       		lsl.w	#3,d0
00001AB4 43F8 FB50                  		lea	($FFFFFB50).w,a1
00001AB8 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001ABC 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001AC0                            
00001AC0                            locret_1990:
00001AC0 4E75                       		rts	
00001AC2                            ; End of function PalCycle_Title
00001AC2                            
00001AC2                            
00001AC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AC2                            
00001AC2                            
00001AC2                            PalCycle_LZ:				; XREF: PalCycle
00001AC2 5378 F634                  		subq.w	#1,($FFFFF634).w
00001AC6 6A00                       		bpl.s	loc_19D8
00001AC8 31FC 0002 F634             		move.w	#2,($FFFFF634).w
00001ACE 3038 F632                  		move.w	($FFFFF632).w,d0
00001AD2 5278 F632                  		addq.w	#1,($FFFFF632).w
00001AD6 0240 0003                  		andi.w	#3,d0
00001ADA E748                       		lsl.w	#3,d0
00001ADC 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001AE2 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
00001AE8 6600                       		bne.s	loc_19C0
00001AEA 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	Palette instead
00001AF0                            
00001AF0                            loc_19C0:
00001AF0 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001AF4 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001AF8 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001AFC 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
00001B00 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001B04 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001B08                            
00001B08                            loc_19D8:
00001B08 3038 FE04                  		move.w	($FFFFFE04).w,d0
00001B0C 0240 0007                  		andi.w	#7,d0
00001B10 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
00001B14 6700                       		beq.s	locret_1A3A
00001B16 7201                       		moveq	#1,d1
00001B18 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001B1C 6700                       		beq.s	loc_19F0
00001B1E 4441                       		neg.w	d1
00001B20                            
00001B20                            loc_19F0:
00001B20 3038 F650                  		move.w	($FFFFF650).w,d0
00001B24 0240 0003                  		andi.w	#3,d0
00001B28 D041                       		add.w	d1,d0
00001B2A 0C40 0003                  		cmpi.w	#3,d0
00001B2E 6500                       		bcs.s	loc_1A0A
00001B30 3200                       		move.w	d0,d1
00001B32 7000                       		moveq	#0,d0
00001B34 4A41                       		tst.w	d1
00001B36 6A00                       		bpl.s	loc_1A0A
00001B38 7002                       		moveq	#2,d0
00001B3A                            
00001B3A                            loc_1A0A:
00001B3A 31C0 F650                  		move.w	d0,($FFFFF650).w
00001B3E D040                       		add.w	d0,d0
00001B40 3200                       		move.w	d0,d1
00001B42 D040                       		add.w	d0,d0
00001B44 D041                       		add.w	d1,d0
00001B46 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001B4C 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001B50 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001B54 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001B58 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001B5E 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
00001B62 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001B66 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001B6A                            
00001B6A                            locret_1A3A:
00001B6A 4E75                       		rts	
00001B6C                            ; End of function PalCycle_LZ
00001B6C                            
00001B6C                            ; ===========================================================================
00001B6C 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001B74                            ; ===========================================================================
00001B74                            
00001B74                            PalCycle_MZ:				; XREF: PalCycle
00001B74 4E75                       		rts	
00001B76                            
00001B76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B76                            
00001B76                            
00001B76                            PalCycle_SLZ:				; XREF: PalCycle
00001B76 5378 F634                  		subq.w	#1,($FFFFF634).w
00001B7A 6A00                       		bpl.s	locret_1A80
00001B7C 31FC 0007 F634             		move.w	#7,($FFFFF634).w
00001B82 3038 F632                  		move.w	($FFFFF632).w,d0
00001B86 5240                       		addq.w	#1,d0
00001B88 0C40 0006                  		cmpi.w	#6,d0
00001B8C 6500                       		bcs.s	loc_1A60
00001B8E 7000                       		moveq	#0,d0
00001B90                            
00001B90                            loc_1A60:
00001B90 31C0 F632                  		move.w	d0,($FFFFF632).w
00001B94 3200                       		move.w	d0,d1
00001B96 D241                       		add.w	d1,d1
00001B98 D041                       		add.w	d1,d0
00001B9A D040                       		add.w	d0,d0
00001B9C 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00001BA2 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001BA6 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001BAA 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
00001BB0                            
00001BB0                            locret_1A80:
00001BB0 4E75                       		rts	
00001BB2                            ; End of function PalCycle_SLZ
00001BB2                            
00001BB2                            
00001BB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001BB2                            
00001BB2                            
00001BB2                            PalCycle_SYZ:				; XREF: PalCycle
00001BB2 5378 F634                  		subq.w	#1,($FFFFF634).w
00001BB6 6A00                       		bpl.s	locret_1AC6
00001BB8 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001BBE 3038 F632                  		move.w	($FFFFF632).w,d0
00001BC2 5278 F632                  		addq.w	#1,($FFFFF632).w
00001BC6 0240 0003                  		andi.w	#3,d0
00001BCA E548                       		lsl.w	#2,d0
00001BCC 3200                       		move.w	d0,d1
00001BCE D040                       		add.w	d0,d0
00001BD0 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001BD6 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001BDA 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BDE 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BE2 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001BE8 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001BEC 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001BF0 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001BF6                            
00001BF6                            locret_1AC6:
00001BF6 4E75                       		rts	
00001BF8                            ; End of function PalCycle_SYZ
00001BF8                            
00001BF8                            
00001BF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001BF8                            
00001BF8                            
00001BF8                            PalCycle_SBZ:				; XREF: PalCycle
00001BF8 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001BFE 4A38 FE11                  		tst.b	($FFFFFE11).w
00001C02 6700                       		beq.s	loc_1ADA
00001C04 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001C0A                            
00001C0A                            loc_1ADA:
00001C0A 43F8 F650                  		lea	($FFFFF650).w,a1
00001C0E 321A                       		move.w	(a2)+,d1
00001C10                            
00001C10                            loc_1AE0:
00001C10 5311                       		subq.b	#1,(a1)
00001C12 6B00                       		bmi.s	loc_1AEA
00001C14 5489                       		addq.l	#2,a1
00001C16 5C8A                       		addq.l	#6,a2
00001C18 6000                       		bra.s	loc_1B06
00001C1A                            ; ===========================================================================
00001C1A                            
00001C1A                            loc_1AEA:				; XREF: PalCycle_SBZ
00001C1A 12DA                       		move.b	(a2)+,(a1)+
00001C1C 1011                       		move.b	(a1),d0
00001C1E 5200                       		addq.b	#1,d0
00001C20 B01A                       		cmp.b	(a2)+,d0
00001C22 6500                       		bcs.s	loc_1AF6
00001C24 7000                       		moveq	#0,d0
00001C26                            
00001C26                            loc_1AF6:
00001C26 12C0                       		move.b	d0,(a1)+
00001C28 0240 000F                  		andi.w	#$F,d0
00001C2C D040                       		add.w	d0,d0
00001C2E 305A                       		movea.w	(a2)+,a0
00001C30 365A                       		movea.w	(a2)+,a3
00001C32 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001C36                            
00001C36                            loc_1B06:				; XREF: PalCycle_SBZ
00001C36 51C9 FFD8                  		dbf	d1,loc_1AE0
00001C3A 5378 F634                  		subq.w	#1,($FFFFF634).w
00001C3E 6A00                       		bpl.s	locret_1B64
00001C40 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001C46 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001C4C 4A38 FE11                  		tst.b	($FFFFFE11).w
00001C50 6700                       		beq.s	loc_1B2E
00001C52 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001C58 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001C5E                            
00001C5E                            loc_1B2E:
00001C5E 72FF                       		moveq	#-1,d1
00001C60 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001C64 6700                       		beq.s	loc_1B38
00001C66 4441                       		neg.w	d1
00001C68                            
00001C68                            loc_1B38:
00001C68 3038 F632                  		move.w	($FFFFF632).w,d0
00001C6C 0240 0003                  		andi.w	#3,d0
00001C70 D041                       		add.w	d1,d0
00001C72 0C40 0003                  		cmpi.w	#3,d0
00001C76 6500                       		bcs.s	loc_1B52
00001C78 3200                       		move.w	d0,d1
00001C7A 7000                       		moveq	#0,d0
00001C7C 4A41                       		tst.w	d1
00001C7E 6A00                       		bpl.s	loc_1B52
00001C80 7002                       		moveq	#2,d0
00001C82                            
00001C82                            loc_1B52:
00001C82 31C0 F632                  		move.w	d0,($FFFFF632).w
00001C86 D040                       		add.w	d0,d0
00001C88 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001C8C 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C90 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C94                            
00001C94                            locret_1B64:
00001C94 4E75                       		rts	
00001C96                            ; End of function PalCycle_SBZ
00001C96                            
00001C96                            ; ===========================================================================
00001C96                            Pal_TitleCyc:	incbin	Palette\c_title.bin
00001CB6                            Pal_GHZCyc:	incbin	Palette\c_ghz.bin
00001CD6                            Pal_LZCyc1:	incbin	Palette\c_lz_wat.bin	; waterfalls Palette
00001CF6                            Pal_LZCyc2:	incbin	Palette\c_lz_bel.bin	; conveyor belt Palette
00001D08                            Pal_LZCyc3:	incbin	Palette\c_lz_buw.bin	; conveyor belt (underwater) Palette
00001D1A                            Pal_SBZ3Cyc1:	incbin	Palette\c_sbz3_w.bin	; waterfalls Palette
00001D82                            Pal_SLZCyc:	incbin	Palette\c_slz.bin
00001DA6                            Pal_SYZCyc1:	incbin	Palette\c_syz_1.bin
00001DC6                            Pal_SYZCyc2:	incbin	Palette\c_syz_2.bin
00001DD6                            
00001DD6                            Pal_SBZCycList:
00001DD6                            	include "_inc\SBZ Palette script 1.asm"
00001DD6                            ; ---------------------------------------------------------------------------
00001DD6                            ; Scrap Brain Zone 1 pallet cycling script
00001DD6                            ; ---------------------------------------------------------------------------
00001DD6 0008                       	dc.w 8			; number of entries - 1
00001DD8 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001DDA 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001DDC FB50                       	dc.w $FB50		; RAM address
00001DDE 0D08                       	dc.b $D, 8
00001DE0 0000                       	dc.w Pal_SBZCyc2
00001DE2 FB52                       	dc.w $FB52
00001DE4 0E08                       	dc.b $E, 8
00001DE6 0000                       	dc.w Pal_SBZCyc3
00001DE8 FB6E                       	dc.w $FB6E
00001DEA 0B08                       	dc.b $B, 8
00001DEC 0000                       	dc.w Pal_SBZCyc5
00001DEE FB70                       	dc.w $FB70
00001DF0 0708                       	dc.b 7,	8
00001DF2 0000                       	dc.w Pal_SBZCyc6
00001DF4 FB72                       	dc.w $FB72
00001DF6 1C10                       	dc.b $1C, $10
00001DF8 0000                       	dc.w Pal_SBZCyc7
00001DFA FB7E                       	dc.w $FB7E
00001DFC 0303                       	dc.b 3,	3
00001DFE 0000                       	dc.w Pal_SBZCyc8
00001E00 FB78                       	dc.w $FB78
00001E02 0303                       	dc.b 3,	3
00001E04 0000                       	dc.w Pal_SBZCyc8+2
00001E06 FB7A                       	dc.w $FB7A
00001E08 0303                       	dc.b 3,	3
00001E0A 0000                       	dc.w Pal_SBZCyc8+4
00001E0C FB7C                       	dc.w $FB7C
00001E0E                            	even
00001E0E                            	even
00001E0E                            
00001E0E                            Pal_SBZCycList2:
00001E0E                            	include "_inc\SBZ Palette script 2.asm"
00001E0E                            ; ---------------------------------------------------------------------------
00001E0E                            ; Scrap Brain Zone 2 pallet cycling script
00001E0E                            ; ---------------------------------------------------------------------------
00001E0E 0006                       	dc.w 6
00001E10 0708                       	dc.b 7,	8
00001E12 0000                       	dc.w Pal_SBZCyc1
00001E14 FB50                       	dc.w $FB50
00001E16 0D08                       	dc.b $D, 8
00001E18 0000                       	dc.w Pal_SBZCyc2
00001E1A FB52                       	dc.w $FB52
00001E1C 0908                       	dc.b 9,	8
00001E1E 0000                       	dc.w Pal_SBZCyc9
00001E20 FB70                       	dc.w $FB70
00001E22 0708                       	dc.b 7,	8
00001E24 0000                       	dc.w Pal_SBZCyc6
00001E26 FB72                       	dc.w $FB72
00001E28 0303                       	dc.b 3,	3
00001E2A 0000                       	dc.w Pal_SBZCyc8
00001E2C FB78                       	dc.w $FB78
00001E2E 0303                       	dc.b 3,	3
00001E30 0000                       	dc.w Pal_SBZCyc8+2
00001E32 FB7A                       	dc.w $FB7A
00001E34 0303                       	dc.b 3,	3
00001E36 0000                       	dc.w Pal_SBZCyc8+4
00001E38 FB7C                       	dc.w $FB7C
00001E3A                            	even
00001E3A                            	even
00001E3A                            
00001E3A                            Pal_SBZCyc1:	incbin	Palette\c_sbz_1.bin
00001E4A                            Pal_SBZCyc2:	incbin	Palette\c_sbz_2.bin
00001E5A                            Pal_SBZCyc3:	incbin	Palette\c_sbz_3.bin
00001E6A                            Pal_SBZCyc4:	incbin	Palette\c_sbz_4.bin
00001E76                            Pal_SBZCyc5:	incbin	Palette\c_sbz_5.bin
00001E86                            Pal_SBZCyc6:	incbin	Palette\c_sbz_6.bin
00001E96                            Pal_SBZCyc7:	incbin	Palette\c_sbz_7.bin
00001EB6                            Pal_SBZCyc8:	incbin	Palette\c_sbz_8.bin
00001EC0                            Pal_SBZCyc9:	incbin	Palette\c_sbz_9.bin
00001ED0                            Pal_SBZCyc10:	incbin	Palette\c_sbz_10.bin
00001EDC                            ; ---------------------------------------------------------------------------
00001EDC                            ; Subroutine to	fade out and fade in
00001EDC                            ; ---------------------------------------------------------------------------
00001EDC                            
00001EDC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001EDC                            
00001EDC                            
00001EDC                            Pal_FadeTo:
00001EDC 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001EE2                             
00001EE2                            Pal_FadeTo2:
00001EE2 7000                       		moveq	#0,d0
00001EE4 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001EE8 1038 F626                  		move.b	($FFFFF626).w,d0
00001EEC D0C0                       		adda.w	d0,a0
00001EEE 7200                       		moveq	#0,d1
00001EF0 1038 F627                  		move.b	($FFFFF627).w,d0
00001EF4                             
00001EF4                            Pal_ToBlack:
00001EF4 30C1                       		move.w	d1,(a0)+
00001EF6 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
00001EFA 780E                       		moveq	#$0E,d4					; MJ: prepare maximum colour check
00001EFC 7C00                       		moveq	#$00,d6					; MJ: clear d6
00001EFE                             
00001EFE                            loc_1DCE:
00001EFE 6100 F69E                  		bsr.w	RunPLC_RAM
00001F02 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001F08 6100 0000                  		bsr.w	DelayProgram
00001F0C 0846 0000                  		bchg	#$00,d6					; MJ: change delay counter
00001F10 6700 FFEC                  		beq	loc_1DCE				; MJ: if null, delay a frame
00001F14 6100                       		bsr.s	Pal_FadeIn
00001F16 5504                       		subq.b	#$02,d4					; MJ: decrease colour check
00001F18 6600 FFE4                  		bne	loc_1DCE				; MJ: if it has not reached null, branch
00001F1C 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w			; MJ: wait for V-blank again (so colours transfer)
00001F22 6000 0000                  		bra	DelayProgram				; MJ: ''
00001F26                             
00001F26                            ; End of function Pal_FadeTo
00001F26                             
00001F26                            ; ---------------------------------------------------------------------------
00001F26                            ; Pallet fade-in subroutine
00001F26                            ; ---------------------------------------------------------------------------
00001F26                             
00001F26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F26                             
00001F26                             
00001F26                            Pal_FadeIn:				; XREF: Pal_FadeTo
00001F26 7000                       		moveq	#0,d0
00001F28 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001F2C 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001F30 1038 F626                  		move.b	($FFFFF626).w,d0
00001F34 D0C0                       		adda.w	d0,a0
00001F36 D2C0                       		adda.w	d0,a1
00001F38 1038 F627                  		move.b	($FFFFF627).w,d0
00001F3C                             
00001F3C                            loc_1DFA:
00001F3C 6100                       		bsr.s	Pal_AddColor
00001F3E 51C8 FFFC                  		dbf	d0,loc_1DFA
00001F42 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00001F48 6600                       		bne.s	locret_1E24
00001F4A 7000                       		moveq	#0,d0
00001F4C 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001F50 43F8 FA00                  		lea	($FFFFFA00).w,a1
00001F54 1038 F626                  		move.b	($FFFFF626).w,d0
00001F58 D0C0                       		adda.w	d0,a0
00001F5A D2C0                       		adda.w	d0,a1
00001F5C 1038 F627                  		move.b	($FFFFF627).w,d0
00001F60                             
00001F60                            loc_1E1E:
00001F60 6100                       		bsr.s	Pal_AddColor
00001F62 51C8 FFFC                  		dbf	d0,loc_1E1E
00001F66                             
00001F66                            locret_1E24:
00001F66 4E75                       		rts	
00001F68                            ; End of function Pal_FadeIn
00001F68                             
00001F68                             
00001F68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F68                             
00001F68                             
00001F68                            Pal_AddColor:				; XREF: Pal_FadeIn
00001F68 1A11                       		move.b	(a1),d5					; MJ: load blue
00001F6A 3219                       		move.w	(a1)+,d1				; MJ: load green and red
00001F6C 1401                       		move.b	d1,d2					; MJ: load red
00001F6E E809                       		lsr.b	#$04,d1					; MJ: get only green
00001F70 0202 000E                  		andi.b	#$0E,d2					; MJ: get only red
00001F74 3610                       		move.w	(a0),d3					; MJ: load current colour in buffer
00001F76 B805                       		cmp.b	d5,d4					; MJ: is it time for blue to fade?
00001F78 6200 0000                  		bhi	FCI_NoBlue				; MJ: if not, branch
00001F7C 0643 0200                  		addi.w	#$0200,d3				; MJ: increase blue
00001F80                             
00001F80                            FCI_NoBlue:
00001F80 B801                       		cmp.b	d1,d4					; MJ: is it time for green to fade?
00001F82 6200 0000                  		bhi	FCI_NoGreen				; MJ: if not, branch
00001F86 0603 0020                  		addi.b	#$20,d3					; MJ: increase green
00001F8A                             
00001F8A                            FCI_NoGreen:
00001F8A B802                       		cmp.b	d2,d4					; MJ: is it time for red to fade?
00001F8C 6200 0000                  		bhi	FCI_NoRed				; MJ: if not, branch
00001F90 5403                       		addq.b	#$02,d3					; MJ: increase red
00001F92                             
00001F92                            FCI_NoRed:
00001F92 30C3                       		move.w	d3,(a0)+				; MJ: save colour
00001F94 4E75                       		rts						; MJ: return
00001F96                             
00001F96                            ; End of function Pal_AddColor
00001F96                             
00001F96                             
00001F96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F96                             
00001F96                             
00001F96                            Pal_FadeFrom:
00001F96 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001F9C 7807                       		moveq	#$07,d4					; MJ: set repeat times
00001F9E 7C00                       		moveq	#$00,d6					; MJ: clear d6
00001FA0                             
00001FA0                            loc_1E5C:
00001FA0 6100 F5FC                  		bsr.w	RunPLC_RAM
00001FA4 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001FAA 6100 0000                  		bsr.w	DelayProgram
00001FAE 0846 0000                  		bchg	#$00,d6					; MJ: change delay counter
00001FB2 6700 FFEC                  		beq	loc_1E5C				; MJ: if null, delay a frame
00001FB6 6100                       		bsr.s	Pal_FadeOut
00001FB8 51CC FFE6                  		dbf	d4,loc_1E5C
00001FBC 4E75                       		rts	
00001FBE                            ; End of function Pal_FadeFrom
00001FBE                             
00001FBE                            ; ---------------------------------------------------------------------------
00001FBE                            ; Pallet fade-out subroutine
00001FBE                            ; ---------------------------------------------------------------------------
00001FBE                             
00001FBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FBE                             
00001FBE                             
00001FBE                            Pal_FadeOut:				; XREF: Pal_FadeFrom
00001FBE 7000                       		moveq	#0,d0
00001FC0 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FC4 1038 F626                  		move.b	($FFFFF626).w,d0
00001FC8 D0C0                       		adda.w	d0,a0
00001FCA 1038 F627                  		move.b	($FFFFF627).w,d0
00001FCE                             
00001FCE                            loc_1E82:
00001FCE 6100                       		bsr.s	Pal_DecColor
00001FD0 51C8 FFFC                  		dbf	d0,loc_1E82
00001FD4                             
00001FD4 7000                       		moveq	#0,d0
00001FD6 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001FDA 1038 F626                  		move.b	($FFFFF626).w,d0
00001FDE D0C0                       		adda.w	d0,a0
00001FE0 1038 F627                  		move.b	($FFFFF627).w,d0
00001FE4                             
00001FE4                            loc_1E98:
00001FE4 6100                       		bsr.s	Pal_DecColor
00001FE6 51C8 FFFC                  		dbf	d0,loc_1E98
00001FEA 4E75                       		rts	
00001FEC                            ; End of function Pal_FadeOut
00001FEC                             
00001FEC                             
00001FEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FEC                             
00001FEC                             
00001FEC                            Pal_DecColor:				; XREF: Pal_FadeOut
00001FEC 3A10                       		move.w	(a0),d5					; MJ: load colour
00001FEE 3205                       		move.w	d5,d1					; MJ: copy to d1
00001FF0 1401                       		move.b	d1,d2					; MJ: load green and red
00001FF2 1601                       		move.b	d1,d3					; MJ: load red
00001FF4 0241 0E00                  		andi.w	#$0E00,d1				; MJ: get only blue
00001FF8 6700 0000                  		beq	FCO_NoBlue				; MJ: if blue is finished, branch
00001FFC 0445 0200                  		subi.w	#$0200,d5				; MJ: decrease blue
00002000                             
00002000                            FCO_NoBlue:
00002000 0242 00E0                  		andi.w	#$00E0,d2				; MJ: get only green (needs to be word)
00002004 6700 0000                  		beq	FCO_NoGreen				; MJ: if green is finished, branch
00002008 0405 0020                  		subi.b	#$20,d5					; MJ: decrease green
0000200C                             
0000200C                            FCO_NoGreen:
0000200C 0203 000E                  		andi.b	#$0E,d3					; MJ: get only red
00002010 6700 0000                  		beq	FCO_NoRed				; MJ: if red is finished, branch
00002014 5505                       		subq.b	#$02,d5					; MJ: decrease red
00002016                             
00002016                            FCO_NoRed:
00002016 30C5                       		move.w	d5,(a0)+				; MJ: save new colour
00002018 4E75                       		rts						; MJ: return
0000201A                             
0000201A                            ; End of function Pal_DecColor
0000201A                            
0000201A                            ; ---------------------------------------------------------------------------
0000201A                            ; Subroutine to	fill the Palette	with white (special stage)
0000201A                            ; ---------------------------------------------------------------------------
0000201A                            
0000201A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000201A                            
0000201A                            
0000201A                            Pal_MakeWhite:				; XREF: SpecialStage
0000201A 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002020 7000                       		moveq	#0,d0
00002022 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002026 1038 F626                  		move.b	($FFFFF626).w,d0
0000202A D0C0                       		adda.w	d0,a0
0000202C 323C 0EEE                  		move.w	#$EEE,d1
00002030 1038 F627                  		move.b	($FFFFF627).w,d0
00002034                            
00002034                            PalWhite_Loop:
00002034 30C1                       		move.w	d1,(a0)+
00002036 51C8 FFFC                  		dbf	d0,PalWhite_Loop
0000203A 383C 0015                  		move.w	#$15,d4
0000203E                            
0000203E                            loc_1EF4:
0000203E 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002044 6100 0000                  		bsr.w	DelayProgram
00002048 6100                       		bsr.s	Pal_WhiteToBlack
0000204A 6100 F552                  		bsr.w	RunPLC_RAM
0000204E 51CC FFEE                  		dbf	d4,loc_1EF4
00002052 4E75                       		rts	
00002054                            ; End of function Pal_MakeWhite
00002054                            
00002054                            
00002054                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002054                            
00002054                            
00002054                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
00002054 7000                       		moveq	#0,d0
00002056 41F8 FB00                  		lea	($FFFFFB00).w,a0
0000205A 43F8 FB80                  		lea	($FFFFFB80).w,a1
0000205E 1038 F626                  		move.b	($FFFFF626).w,d0
00002062 D0C0                       		adda.w	d0,a0
00002064 D2C0                       		adda.w	d0,a1
00002066 1038 F627                  		move.b	($FFFFF627).w,d0
0000206A                            
0000206A                            loc_1F20:
0000206A 6100                       		bsr.s	Pal_DecColor2
0000206C 51C8 FFFC                  		dbf	d0,loc_1F20
00002070                            
00002070 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00002076 6600                       		bne.s	locret_1F4A
00002078 7000                       		moveq	#0,d0
0000207A 41F8 FA80                  		lea	($FFFFFA80).w,a0
0000207E 43F8 FA00                  		lea	($FFFFFA00).w,a1
00002082 1038 F626                  		move.b	($FFFFF626).w,d0
00002086 D0C0                       		adda.w	d0,a0
00002088 D2C0                       		adda.w	d0,a1
0000208A 1038 F627                  		move.b	($FFFFF627).w,d0
0000208E                            
0000208E                            loc_1F44:
0000208E 6100                       		bsr.s	Pal_DecColor2
00002090 51C8 FFFC                  		dbf	d0,loc_1F44
00002094                            
00002094                            locret_1F4A:
00002094 4E75                       		rts	
00002096                            ; End of function Pal_WhiteToBlack
00002096                            
00002096                            
00002096                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002096                            
00002096                            
00002096                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
00002096 3419                       		move.w	(a1)+,d2
00002098 3610                       		move.w	(a0),d3
0000209A B642                       		cmp.w	d2,d3
0000209C 6700                       		beq.s	loc_1F78
0000209E 3203                       		move.w	d3,d1
000020A0 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
000020A4 6500                       		bcs.s	loc_1F64
000020A6 B242                       		cmp.w	d2,d1
000020A8 6500                       		bcs.s	loc_1F64
000020AA 30C1                       		move.w	d1,(a0)+
000020AC 4E75                       		rts	
000020AE                            ; ===========================================================================
000020AE                            
000020AE                            loc_1F64:				; XREF: Pal_DecColor2
000020AE 3203                       		move.w	d3,d1
000020B0 0441 0020                  		subi.w	#$20,d1		; decrease green value
000020B4 6500                       		bcs.s	loc_1F74
000020B6 B242                       		cmp.w	d2,d1
000020B8 6500                       		bcs.s	loc_1F74
000020BA 30C1                       		move.w	d1,(a0)+
000020BC 4E75                       		rts	
000020BE                            ; ===========================================================================
000020BE                            
000020BE                            loc_1F74:				; XREF: loc_1F64
000020BE 5558                       		subq.w	#2,(a0)+	; decrease red value
000020C0 4E75                       		rts	
000020C2                            ; ===========================================================================
000020C2                            
000020C2                            loc_1F78:				; XREF: Pal_DecColor2
000020C2 5448                       		addq.w	#2,a0
000020C4 4E75                       		rts	
000020C6                            ; End of function Pal_DecColor2
000020C6                            
000020C6                            ; ---------------------------------------------------------------------------
000020C6                            ; Subroutine to	make a white flash when	you enter a special stage
000020C6                            ; ---------------------------------------------------------------------------
000020C6                            
000020C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020C6                            
000020C6                            
000020C6                            Pal_MakeFlash:				; XREF: SpecialStage
000020C6 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000020CC 383C 0015                  		move.w	#$15,d4
000020D0                            
000020D0                            loc_1F86:
000020D0 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
000020D6 6100 0000                  		bsr.w	DelayProgram
000020DA 6100                       		bsr.s	Pal_ToWhite
000020DC 6100 F4C0                  		bsr.w	RunPLC_RAM
000020E0 51CC FFEE                  		dbf	d4,loc_1F86
000020E4 4E75                       		rts	
000020E6                            ; End of function Pal_MakeFlash
000020E6                            
000020E6                            
000020E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020E6                            
000020E6                            
000020E6                            Pal_ToWhite:				; XREF: Pal_MakeFlash
000020E6 7000                       		moveq	#0,d0
000020E8 41F8 FB00                  		lea	($FFFFFB00).w,a0
000020EC 1038 F626                  		move.b	($FFFFF626).w,d0
000020F0 D0C0                       		adda.w	d0,a0
000020F2 1038 F627                  		move.b	($FFFFF627).w,d0
000020F6                            
000020F6                            loc_1FAC:
000020F6 6100                       		bsr.s	Pal_AddColor2
000020F8 51C8 FFFC                  		dbf	d0,loc_1FAC
000020FC 7000                       		moveq	#0,d0
000020FE 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002102 1038 F626                  		move.b	($FFFFF626).w,d0
00002106 D0C0                       		adda.w	d0,a0
00002108 1038 F627                  		move.b	($FFFFF627).w,d0
0000210C                            
0000210C                            loc_1FC2:
0000210C 6100                       		bsr.s	Pal_AddColor2
0000210E 51C8 FFFC                  		dbf	d0,loc_1FC2
00002112 4E75                       		rts	
00002114                            ; End of function Pal_ToWhite
00002114                            
00002114                            
00002114                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002114                            
00002114                            
00002114                            Pal_AddColor2:				; XREF: Pal_ToWhite
00002114 3410                       		move.w	(a0),d2
00002116 0C42 0EEE                  		cmpi.w	#$EEE,d2
0000211A 6700                       		beq.s	loc_2006
0000211C 3202                       		move.w	d2,d1
0000211E 0241 000E                  		andi.w	#$E,d1
00002122 0C41 000E                  		cmpi.w	#$E,d1
00002126 6700                       		beq.s	loc_1FE2
00002128 5458                       		addq.w	#2,(a0)+	; increase red value
0000212A 4E75                       		rts	
0000212C                            ; ===========================================================================
0000212C                            
0000212C                            loc_1FE2:				; XREF: Pal_AddColor2
0000212C 3202                       		move.w	d2,d1
0000212E 0241 00E0                  		andi.w	#$E0,d1
00002132 0C41 00E0                  		cmpi.w	#$E0,d1
00002136 6700                       		beq.s	loc_1FF4
00002138 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
0000213C 4E75                       		rts	
0000213E                            ; ===========================================================================
0000213E                            
0000213E                            loc_1FF4:				; XREF: loc_1FE2
0000213E 3202                       		move.w	d2,d1
00002140 0241 0E00                  		andi.w	#$E00,d1
00002144 0C41 0E00                  		cmpi.w	#$E00,d1
00002148 6700                       		beq.s	loc_2006
0000214A 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
0000214E 4E75                       		rts	
00002150                            ; ===========================================================================
00002150                            
00002150                            loc_2006:				; XREF: Pal_AddColor2
00002150 5448                       		addq.w	#2,a0
00002152 4E75                       		rts	
00002154                            ; End of function Pal_AddColor2
00002154                            
00002154                            ; ---------------------------------------------------------------------------
00002154                            ; Palette cycling routine - Sega	logo
00002154                            ; ---------------------------------------------------------------------------
00002154                            
00002154                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002154                            
00002154                            
00002154                            PalCycle_Sega:				; XREF: SegaScreen
00002154 4A38 F635                  		tst.b	($FFFFF635).w
00002158 6600                       		bne.s	loc_206A
0000215A 43F8 FB20                  		lea	($FFFFFB20).w,a1
0000215E 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
00002164 7205                       		moveq	#5,d1
00002166 3038 F632                  		move.w	($FFFFF632).w,d0
0000216A                            
0000216A                            loc_2020:
0000216A 6A00                       		bpl.s	loc_202A
0000216C 5448                       		addq.w	#2,a0
0000216E 5341                       		subq.w	#1,d1
00002170 5440                       		addq.w	#2,d0
00002172 60F6                       		bra.s	loc_2020
00002174                            ; ===========================================================================
00002174                            
00002174                            loc_202A:				; XREF: PalCycle_Sega
00002174 3400                       		move.w	d0,d2
00002176 0242 001E                  		andi.w	#$1E,d2
0000217A 6600                       		bne.s	loc_2034
0000217C 5440                       		addq.w	#2,d0
0000217E                            
0000217E                            loc_2034:
0000217E 0C40 0060                  		cmpi.w	#$60,d0
00002182 6400                       		bcc.s	loc_203E
00002184 3398 0000                  		move.w	(a0)+,(a1,d0.w)
00002188                            
00002188                            loc_203E:
00002188 5440                       		addq.w	#2,d0
0000218A 51C9 FFE8                  		dbf	d1,loc_202A
0000218E 3038 F632                  		move.w	($FFFFF632).w,d0
00002192 5440                       		addq.w	#2,d0
00002194 3400                       		move.w	d0,d2
00002196 0242 001E                  		andi.w	#$1E,d2
0000219A 6600                       		bne.s	loc_2054
0000219C 5440                       		addq.w	#2,d0
0000219E                            
0000219E                            loc_2054:
0000219E 0C40 0064                  		cmpi.w	#$64,d0
000021A2 6D00                       		blt.s	loc_2062
000021A4 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
000021AA 70F4                       		moveq	#-$C,d0
000021AC                            
000021AC                            loc_2062:
000021AC 31C0 F632                  		move.w	d0,($FFFFF632).w
000021B0 7001                       		moveq	#1,d0
000021B2 4E75                       		rts	
000021B4                            ; ===========================================================================
000021B4                            
000021B4                            loc_206A:				; XREF: loc_202A
000021B4 5338 F634                  		subq.b	#1,($FFFFF634).w
000021B8 6A00                       		bpl.s	loc_20BC
000021BA 11FC 0004 F634             		move.b	#4,($FFFFF634).w
000021C0 3038 F632                  		move.w	($FFFFF632).w,d0
000021C4 0640 000C                  		addi.w	#$C,d0
000021C8 0C40 0030                  		cmpi.w	#$30,d0
000021CC 6500                       		bcs.s	loc_2088
000021CE 7000                       		moveq	#0,d0
000021D0 4E75                       		rts	
000021D2                            ; ===========================================================================
000021D2                            
000021D2                            loc_2088:				; XREF: loc_206A
000021D2 31C0 F632                  		move.w	d0,($FFFFF632).w
000021D6 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
000021DC 41F0 0000                  		lea	(a0,d0.w),a0
000021E0 43F8 FB04                  		lea	($FFFFFB04).w,a1
000021E4 22D8                       		move.l	(a0)+,(a1)+
000021E6 22D8                       		move.l	(a0)+,(a1)+
000021E8 3298                       		move.w	(a0)+,(a1)
000021EA 43F8 FB20                  		lea	($FFFFFB20).w,a1
000021EE 7000                       		moveq	#0,d0
000021F0 722C                       		moveq	#$2C,d1
000021F2                            
000021F2                            loc_20A8:
000021F2 3400                       		move.w	d0,d2
000021F4 0242 001E                  		andi.w	#$1E,d2
000021F8 6600                       		bne.s	loc_20B2
000021FA 5440                       		addq.w	#2,d0
000021FC                            
000021FC                            loc_20B2:
000021FC 3390 0000                  		move.w	(a0),(a1,d0.w)
00002200 5440                       		addq.w	#2,d0
00002202 51C9 FFEE                  		dbf	d1,loc_20A8
00002206                            
00002206                            loc_20BC:
00002206 7001                       		moveq	#1,d0
00002208 4E75                       		rts	
0000220A                            ; End of function PalCycle_Sega
0000220A                            
0000220A                            ; ===========================================================================
0000220A                            
0000220A                            Pal_Sega1:	incbin	Palette\sega1.bin
00002216                            Pal_Sega2:	incbin	Palette\sega2.bin
00002246                            
00002246                            ; ---------------------------------------------------------------------------
00002246                            ; Subroutines to load Palettes
00002246                            ; ---------------------------------------------------------------------------
00002246                            
00002246                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
00002246                            
00002246                            
00002246                            PalLoad1:
00002246 1239 FFFF FE11               move.b $FFFFFE11,d1
0000224C 43F9 0000 0000               lea (PalPointers).l,a1
00002252 0C01 0000                    cmp.b #0,d1
00002256 6700 0000                    beq.w PalLoad1_Continue
0000225A 43F9 0000 0000               lea (PalPointers2).l,a1
00002260 0C01 0001                    cmp.b #1,d1
00002264 6700 0000                    beq.w PalLoad1_Continue
00002268 43F9 0000 0000               lea (PalPointers3).l,a1
0000226E                            
0000226E                            PalLoad1_Continue:
0000226E E748                         lsl.w    #3,d0
00002270 D2C0                         adda.w    d0,a1
00002272 2459                         movea.l    (a1)+,a2
00002274 3659                         movea.w    (a1)+,a3
00002276 D6FC 0080                    adda.w    #$80,a3
0000227A 3E19                         move.w    (a1)+,d7
0000227C                            
0000227C                            loc_2110:
0000227C 26DA                         move.l    (a2)+,(a3)+
0000227E 51CF FFFC                    dbf    d7,loc_2110
00002282 4E75                         rts    
00002284                            ; End of function PalLoad1
00002284                            
00002284                            
00002284                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
00002284                            
00002284                            
00002284                            PalLoad2:
00002284 1239 FFFF FE11               move.b $FFFFFE11,d1
0000228A 43F9 0000 0000               lea (PalPointers).l,a1
00002290 0C01 0000                    cmp.b #0,d1
00002294 6700 0000                    beq.w PalLoad2_Continue
00002298 43F9 0000 0000               lea (PalPointers2).l,a1
0000229E 0C01 0001                    cmp.b #1,d1
000022A2 6700 0000                    beq.w PalLoad2_Continue
000022A6 43F9 0000 0000               lea (PalPointers3).l,a1
000022AC                            
000022AC                            PalLoad2_Continue:
000022AC E748                         lsl.w    #3,d0
000022AE D2C0                         adda.w    d0,a1
000022B0 2459                         movea.l    (a1)+,a2
000022B2 3659                         movea.w    (a1)+,a3
000022B4 3E19                         move.w    (a1)+,d7
000022B6                            
000022B6                            loc_2128:
000022B6 26DA                         move.l    (a2)+,(a3)+
000022B8 51CF FFFC                    dbf    d7,loc_2128
000022BC 4E75                         rts    
000022BE                            ; End of function PalLoad2
000022BE                            
000022BE                            ; ---------------------------------------------------------------------------
000022BE                            ; Underwater Palette loading subroutine
000022BE                            ; ---------------------------------------------------------------------------
000022BE                            
000022BE                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
000022BE                            
000022BE                            
000022BE                            PalLoad3_Water:
000022BE 1239 FFFF FE11               move.b $FFFFFE11,d1
000022C4 43F9 0000 0000               lea (PalPointers).l,a1
000022CA 0C01 0000                    cmp.b #0,d1
000022CE 6700 0000                    beq.w PalLoad3_Continue
000022D2 43F9 0000 0000               lea (PalPointers2).l,a1
000022D8 0C01 0001                    cmp.b #1,d1
000022DC 6700 0000                    beq.w PalLoad3_Continue
000022E0 43F9 0000 0000               lea (PalPointers3).l,a1
000022E6                            
000022E6                            PalLoad3_Continue:
000022E6 E748                         lsl.w    #3,d0
000022E8 D2C0                         adda.w    d0,a1
000022EA 2459                         movea.l    (a1)+,a2
000022EC 3659                         movea.w    (a1)+,a3
000022EE 96FC 0080                    suba.w    #$80,a3
000022F2 3E19                         move.w    (a1)+,d7
000022F4                            
000022F4                            loc_2144:
000022F4 26DA                         move.l    (a2)+,(a3)+
000022F6 51CF FFFC                    dbf    d7,loc_2144
000022FA 4E75                         rts    
000022FC                            ; End of function PalLoad3_Water
000022FC                            
000022FC                            
000022FC                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
000022FC                            
000022FC                            
000022FC                            PalLoad4_Water:
000022FC 1239 FFFF FE11               move.b $FFFFFE11,d1
00002302 43F9 0000 0000               lea (PalPointers).l,a1
00002308 0C01 0000                    cmp.b #0,d1
0000230C 6700 0000                    beq.w PalLoad4_Continue
00002310 43F9 0000 0000               lea (PalPointers2).l,a1
00002316 0C01 0001                    cmp.b #1,d1
0000231A 6700 0000                    beq.w PalLoad4_Continue
0000231E 43F9 0000 0000               lea (PalPointers3).l,a1
00002324                            
00002324                            PalLoad4_Continue:
00002324 E748                         lsl.w    #3,d0
00002326 D2C0                         adda.w    d0,a1
00002328 2459                         movea.l    (a1)+,a2
0000232A 3659                         movea.w    (a1)+,a3
0000232C 96FC 0100                    suba.w    #$100,a3
00002330 3E19                         move.w    (a1)+,d7
00002332                            
00002332                            loc_2160:
00002332 26DA                         move.l    (a2)+,(a3)+
00002334 51CF FFFC                    dbf    d7,loc_2160
00002338 4E75                         rts    
0000233A                            ; End of function PalLoad4_Water
0000233A                            
0000233A                            ; ===========================================================================
0000233A                            ; ---------------------------------------------------------------------------
0000233A                            ; Palette pointers
0000233A                            ; ---------------------------------------------------------------------------
0000233A                            PalPointers:
0000233A                            	include "_inc\Palette pointers.asm"
0000233A                            ; ---------------------------------------------------------------------------
0000233A                            ; Pallet pointers
0000233A                            ; ---------------------------------------------------------------------------
0000233A 0000 0000                  	dc.l Pal_SegaBG		; pallet address
0000233E FB00                       	dc.w $FB00		; RAM address
00002340 001F                       	dc.w $1F		; (pallet length / 2) - 1
00002342 0000 0000                  	dc.l Pal_Title
00002346 FB00                       	dc.w $FB00
00002348 001F                       	dc.w $1F
0000234A 0000 0000                  	dc.l Pal_LevelSel
0000234E FB00                       	dc.w $FB00
00002350 001F                       	dc.w $1F
00002352 0000 0000                  	dc.l Pal_Sonic
00002356 FB00                       	dc.w $FB00
00002358 0007                       	dc.w 7
0000235A 0000 0000                  	dc.l Pal_GHZ
0000235E FB20                       	dc.w $FB20
00002360 0017                       	dc.w $17
00002362 0000 0000                  	dc.l Pal_LZ
00002366 FB20                       	dc.w $FB20
00002368 0017                       	dc.w $17
0000236A 0000 0000                  	dc.l Pal_MZ
0000236E FB20                       	dc.w $FB20
00002370 0017                       	dc.w $17
00002372 0000 0000                  	dc.l Pal_SLZ
00002376 FB20                       	dc.w $FB20
00002378 0017                       	dc.w $17
0000237A 0000 0000                  	dc.l Pal_SYZ
0000237E FB20                       	dc.w $FB20
00002380 0017                       	dc.w $17
00002382 0000 0000                  	dc.l Pal_SBZ1
00002386 FB20                       	dc.w $FB20
00002388 0017                       	dc.w $17
0000238A 0000 0000                  	dc.l Pal_Special
0000238E FB00                       	dc.w $FB00
00002390 001F                       	dc.w $1F
00002392 0000 0000                  	dc.l Pal_LZWater
00002396 FB00                       	dc.w $FB00
00002398 001F                       	dc.w $1F
0000239A 0000 0000                  	dc.l Pal_SBZ3
0000239E FB20                       	dc.w $FB20
000023A0 0017                       	dc.w $17
000023A2 0000 0000                  	dc.l Pal_SBZ3Water
000023A6 FB00                       	dc.w $FB00
000023A8 001F                       	dc.w $1F
000023AA 0000 0000                  	dc.l Pal_SBZ2
000023AE FB20                       	dc.w $FB20
000023B0 0017                       	dc.w $17
000023B2 0000 0000                  	dc.l Pal_LZSonWater
000023B6 FB00                       	dc.w $FB00
000023B8 0007                       	dc.w 7
000023BA 0000 0000                  	dc.l Pal_SBZ3SonWat
000023BE FB00                       	dc.w $FB00
000023C0 0007                       	dc.w 7
000023C2 0000 0000                  	dc.l Pal_SpeResult
000023C6 FB00                       	dc.w $FB00
000023C8 001F                       	dc.w $1F
000023CA 0000 0000                  	dc.l Pal_SpeContinue
000023CE FB00                       	dc.w $FB00
000023D0 000F                       	dc.w $F
000023D2 0000 0000                  	dc.l Pal_Ending
000023D6 FB00                       	dc.w $FB00
000023D8 001F                       	dc.w $1F
000023DA 0000 0000                  	dc.l Menu_Palette; pallet address
000023DE FB00                       	dc.w $FB00	; RAM address
000023E0 001F                       	dc.w $1F	; (pallet length / 2) - 1
000023E2 0000 0000                  	dc.l Pal_Splash
000023E6 FB00                       	dc.w $FB00
000023E8 0007                       	dc.w 7
000023EA 0000 0000                     	dc.l SGD_Pal3
000023EE FB00                          	dc.w $FB00
000023F0 0007                          	dc.w 7
000023F0 0007                          	dc.w 7
000023F2                            PalPointers2:
000023F2                            	include "_inc\Palette pointers2.asm"
000023F2                            ; ---------------------------------------------------------------------------
000023F2                            ; Pallet pointers - Act 2
000023F2                            ; ---------------------------------------------------------------------------
000023F2 0000 0000                  	dc.l Pal_SegaBG		; pallet address
000023F6 FB00                       	dc.w $FB00		; RAM address
000023F8 001F                       	dc.w $1F		; (pallet length / 2) - 1
000023FA 0000 0000                  	dc.l Pal_Title
000023FE FB00                       	dc.w $FB00
00002400 001F                       	dc.w $1F
00002402 0000 0000                  	dc.l Pal_LevelSel
00002406 FB00                       	dc.w $FB00
00002408 001F                       	dc.w $1F
0000240A 0000 0000                  	dc.l Pal_Sonic
0000240E FB00                       	dc.w $FB00
00002410 0007                       	dc.w 7
00002412 0000 0000                  	dc.l Pal_GHZ2
00002416 FB20                       	dc.w $FB20
00002418 0017                       	dc.w $17
0000241A 0000 0000                  	dc.l Pal_LZ2
0000241E FB20                       	dc.w $FB20
00002420 0017                       	dc.w $17
00002422 0000 0000                  	dc.l Pal_MZ2
00002426 FB20                       	dc.w $FB20
00002428 0017                       	dc.w $17
0000242A 0000 0000                  	dc.l Pal_SLZ2
0000242E FB20                       	dc.w $FB20
00002430 0017                       	dc.w $17
00002432 0000 0000                  	dc.l Pal_SYZ2
00002436 FB20                       	dc.w $FB20
00002438 0017                       	dc.w $17
0000243A 0000 0000                  	dc.l Pal_SBZ1
0000243E FB20                       	dc.w $FB20
00002440 0017                       	dc.w $17
00002442 0000 0000                  	dc.l Pal_Special
00002446 FB00                       	dc.w $FB00
00002448 001F                       	dc.w $1F
0000244A 0000 0000                  	dc.l Pal_LZWater2
0000244E FB00                       	dc.w $FB00
00002450 001F                       	dc.w $1F
00002452 0000 0000                  	dc.l Pal_SBZ3
00002456 FB20                       	dc.w $FB20
00002458 0017                       	dc.w $17
0000245A 0000 0000                  	dc.l Pal_SBZ3Water
0000245E FB00                       	dc.w $FB00
00002460 001F                       	dc.w $1F
00002462 0000 0000                  	dc.l Pal_SBZ2
00002466 FB20                       	dc.w $FB20
00002468 0017                       	dc.w $17
0000246A 0000 0000                  	dc.l Pal_LZSonWater
0000246E FB00                       	dc.w $FB00
00002470 0007                       	dc.w 7
00002472 0000 0000                  	dc.l Pal_SBZ3SonWat
00002476 FB00                       	dc.w $FB00
00002478 0007                       	dc.w 7
0000247A 0000 0000                  	dc.l Pal_SpeResult
0000247E FB00                       	dc.w $FB00
00002480 001F                       	dc.w $1F
00002482 0000 0000                  	dc.l Pal_SpeContinue
00002486 FB00                       	dc.w $FB00
00002488 000F                       	dc.w $F
0000248A 0000 0000                  	dc.l Pal_Ending
0000248E FB00                       	dc.w $FB00
00002490 001F                       	dc.w $1F
00002492 0000 0000                  	dc.l Menu_Palette; pallet address
00002496 FB00                       	dc.w $FB00	; RAM address
00002498 001F                       	dc.w $1F	; (pallet length / 2) - 1
0000249A 0000 0000                  	dc.l Pal_Splash
0000249E FB00                       	dc.w $FB00
000024A0 0007                       	dc.w 7
000024A2 0000 0000                     	dc.l SGD_Pal3
000024A6 FB00                          	dc.w $FB00
000024A8 0007                          	dc.w 7
000024A8 0007                          	dc.w 7
000024AA                            PalPointers3:
000024AA                            	include "_inc\Palette pointers3.asm"
000024AA                            ; ---------------------------------------------------------------------------
000024AA                            ; Pallet pointers - Act 3
000024AA                            ; ---------------------------------------------------------------------------
000024AA 0000 0000                  	dc.l Pal_SegaBG		; pallet address
000024AE FB00                       	dc.w $FB00		; RAM address
000024B0 001F                       	dc.w $1F		; (pallet length / 2) - 1
000024B2 0000 0000                  	dc.l Pal_Title
000024B6 FB00                       	dc.w $FB00
000024B8 001F                       	dc.w $1F
000024BA 0000 0000                  	dc.l Pal_LevelSel
000024BE FB00                       	dc.w $FB00
000024C0 001F                       	dc.w $1F
000024C2 0000 0000                  	dc.l Pal_Sonic
000024C6 FB00                       	dc.w $FB00
000024C8 0007                       	dc.w 7
000024CA 0000 0000                  	dc.l Pal_GHZ3
000024CE FB20                       	dc.w $FB20
000024D0 0017                       	dc.w $17
000024D2 0000 0000                  	dc.l Pal_LZ3
000024D6 FB20                       	dc.w $FB20
000024D8 0017                       	dc.w $17
000024DA 0000 0000                  	dc.l Pal_MZ3
000024DE FB20                       	dc.w $FB20
000024E0 0017                       	dc.w $17
000024E2 0000 0000                  	dc.l Pal_SLZ3
000024E6 FB20                       	dc.w $FB20
000024E8 0017                       	dc.w $17
000024EA 0000 0000                  	dc.l Pal_SYZ3
000024EE FB20                       	dc.w $FB20
000024F0 0017                       	dc.w $17
000024F2 0000 0000                  	dc.l Pal_SBZ1
000024F6 FB20                       	dc.w $FB20
000024F8 0017                       	dc.w $17
000024FA 0000 0000                  	dc.l Pal_Special
000024FE FB00                       	dc.w $FB00
00002500 001F                       	dc.w $1F
00002502 0000 0000                  	dc.l Pal_LZWater3
00002506 FB00                       	dc.w $FB00
00002508 001F                       	dc.w $1F
0000250A 0000 0000                  	dc.l Pal_SBZ3
0000250E FB20                       	dc.w $FB20
00002510 0017                       	dc.w $17
00002512 0000 0000                  	dc.l Pal_SBZ3Water
00002516 FB00                       	dc.w $FB00
00002518 001F                       	dc.w $1F
0000251A 0000 0000                  	dc.l Pal_SBZ2
0000251E FB20                       	dc.w $FB20
00002520 0017                       	dc.w $17
00002522 0000 0000                  	dc.l Pal_LZSonWater
00002526 FB00                       	dc.w $FB00
00002528 0007                       	dc.w 7
0000252A 0000 0000                  	dc.l Pal_SBZ3SonWat
0000252E FB00                       	dc.w $FB00
00002530 0007                       	dc.w 7
00002532 0000 0000                  	dc.l Pal_SpeResult
00002536 FB00                       	dc.w $FB00
00002538 001F                       	dc.w $1F
0000253A 0000 0000                  	dc.l Pal_SpeContinue
0000253E FB00                       	dc.w $FB00
00002540 000F                       	dc.w $F
00002542 0000 0000                  	dc.l Pal_Ending
00002546 FB00                       	dc.w $FB00
00002548 001F                       	dc.w $1F
0000254A 0000 0000                  	dc.l Menu_Palette; pallet address
0000254E FB00                       	dc.w $FB00	; RAM address
00002550 001F                       	dc.w $1F	; (pallet length / 2) - 1
00002552 0000 0000                  	dc.l Pal_Splash
00002556 FB00                       	dc.w $FB00
00002558 0007                       	dc.w 7
0000255A 0000 0000                     	dc.l SGD_Pal3
0000255E FB00                          	dc.w $FB00
00002560 0007                          	dc.w 7
00002560 0007                          	dc.w 7
00002562                            ; ---------------------------------------------------------------------------
00002562                            ; Palette data
00002562                            ; ---------------------------------------------------------------------------
00002562                            Pal_SegaBG:    incbin    Palette\sega_bg.bin
000025E2                            Pal_Title:    incbin    Palette\title.bin
00002662                            Pal_LevelSel:    incbin    Palette\levelsel.bin
000026E2                            Pal_Sonic:	incbin	Palette\sonicW.bin
00002702                            Pal_GHZ:    incbin    Palette\ghzW.bin
00002762                            Pal_GHZ2:    incbin    Palette\ghzW2.bin
000027C2                            Pal_GHZ3:    incbin    Palette\ghzW3.bin
00002822                            Pal_LZ:  incbin    Palette\lzW.bin
00002882                            Pal_LZ2:  incbin    Palette\lzW2.bin
000028E2                            Pal_LZ3:  incbin    Palette\lzW3.bin
00002942                            Pal_LZWater:    incbin    Palette\lz_uwW.bin; LZ underwater Palettes
000029C2                            Pal_LZWater2:    incbin    Palette\lz_uwW2.bin; LZ underwater Palettes
00002A42                            Pal_LZWater3:    incbin    Palette\lz_uwW3.bin; LZ underwater Palettes
00002AC2                            Pal_MZ:  incbin    Palette\mzW.bin
00002B42                            Pal_MZ2:  incbin    Palette\mzW2.bin
00002BC2                            Pal_MZ3:  incbin    Palette\mzW3.bin
00002C42                            Pal_SLZ:    incbin    Palette\slzW.bin
00002CC2                            Pal_SLZ2:    incbin    Palette\slz2.bin
00002D22                            Pal_SLZ3:    incbin    Palette\slz3.bin
00002D82                            Pal_SYZ:    incbin    Palette\syz.bin
00002DE2                            Pal_SYZ2:    incbin    Palette\syz2.bin
00002E42                            Pal_SYZ3:    incbin    Palette\syz3.bin
00002EA2                            Pal_SBZ1:    incbin    Palette\sbz_act1.bin; SBZ act 1 Palettes
00002F02                            Pal_SBZ2:    incbin    Palette\sbz_act2.bin; SBZ act 2 & Final Zone Palettes
00002F62                            Pal_Special:    incbin    Palette\special.bin; special stage Palettes
00002FE2                            Pal_SBZ3:    incbin    Palette\sbz_act3.bin; SBZ act 3 Palettes
00003042                            Pal_SBZ3Water:    incbin    Palette\sbz_a3uw.bin; SBZ act 3 (underwater) Palettes
000030C2                            Pal_LZSonWater:    incbin    Palette\son_lzuw.bin; Sonic (underwater in LZ) Palette
000030E2                            Pal_SBZ3SonWat:    incbin    Palette\son_sbzu.bin; Sonic (underwater in SBZ act 3) Palette
00003102                            Pal_SpeResult:    incbin    Palette\ssresult.bin; special stage results screen Palettes
00003182                            Pal_SpeContinue:incbin    Palette\sscontin.bin; special stage results screen continue Palette
000031C2                            Pal_Ending:    incbin    Palette\ending.bin; ending sequence Palettes
00003242                            
00003242                            ; ---------------------------------------------------------------------------
00003242                            ; Subroutine to	delay the program by ($FFFFF62A) frames
00003242                            ; ---------------------------------------------------------------------------
00003242                            
00003242                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003242                            
00003242                            
00003242                            DelayProgram:				; XREF: PauseGame
00003242 46FC 2300                  		move	#$2300,sr
00003246                            
00003246                            loc_29AC:
00003246 4A38 F62A                  		tst.b	($FFFFF62A).w
0000324A 66FA                       		bne.s	loc_29AC
0000324C 4E75                       		rts	
0000324E                            ; End of function DelayProgram
0000324E                            
0000324E                            ; ---------------------------------------------------------------------------
0000324E                            ; Subroutine to	generate a pseudo-random number	in d0
0000324E                            ; ---------------------------------------------------------------------------
0000324E                            
0000324E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000324E                            
0000324E                            
0000324E                            RandomNumber:
0000324E 2238 F636                  		move.l	($FFFFF636).w,d1
00003252 6600                       		bne.s	loc_29C0
00003254 223C 2A6D 365A             		move.l	#$2A6D365A,d1
0000325A                            
0000325A                            loc_29C0:
0000325A 2001                       		move.l	d1,d0
0000325C E581                       		asl.l	#2,d1
0000325E D280                       		add.l	d0,d1
00003260 E781                       		asl.l	#3,d1
00003262 D280                       		add.l	d0,d1
00003264 3001                       		move.w	d1,d0
00003266 4841                       		swap	d1
00003268 D041                       		add.w	d1,d0
0000326A 3200                       		move.w	d0,d1
0000326C 4841                       		swap	d1
0000326E 21C1 F636                  		move.l	d1,($FFFFF636).w
00003272 4E75                       		rts	
00003274                            ; End of function RandomNumber
00003274                            
00003274                            
00003274                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003274                            
00003274                            
00003274                            CalcSine:				; XREF: SS_BGAnimate; et al
00003274 0240 00FF                  		andi.w	#$FF,d0
00003278 D040                       		add.w	d0,d0
0000327A 0640 0080                  		addi.w	#$80,d0
0000327E 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
00003282 0440 0080                  		subi.w	#$80,d0
00003286 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
0000328A 4E75                       		rts	
0000328C                            ; End of function CalcSine
0000328C                            
0000328C                            ; ===========================================================================
0000328C                            
0000328C                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360º sine wave
0000350C                            
0000350C                            ; ===========================================================================
0000350C 48E7 6000                  		movem.l	d1-d2,-(sp)
00003510 3200                       		move.w	d0,d1
00003512 4841                       		swap	d1
00003514 7000                       		moveq	#0,d0
00003516 3200                       		move.w	d0,d1
00003518 7407                       		moveq	#7,d2
0000351A                            
0000351A                            loc_2C80:
0000351A E599                       		rol.l	#2,d1
0000351C D040                       		add.w	d0,d0
0000351E 5240                       		addq.w	#1,d0
00003520 9240                       		sub.w	d0,d1
00003522 6400                       		bcc.s	loc_2C9A
00003524 D240                       		add.w	d0,d1
00003526 5340                       		subq.w	#1,d0
00003528 51CA FFF0                  		dbf	d2,loc_2C80
0000352C E248                       		lsr.w	#1,d0
0000352E 4CDF 0006                  		movem.l	(sp)+,d1-d2
00003532 4E75                       		rts	
00003534                            ; ===========================================================================
00003534                            
00003534                            loc_2C9A:
00003534 5240                       		addq.w	#1,d0
00003536 51CA FFE2                  		dbf	d2,loc_2C80
0000353A E248                       		lsr.w	#1,d0
0000353C 4CDF 0006                  		movem.l	(sp)+,d1-d2
00003540 4E75                       		rts	
00003542                            
00003542                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003542                            
00003542                            
00003542                            CalcAngle:
00003542 48E7 1800                  		movem.l	d3-d4,-(sp)
00003546 7600                       		moveq	#0,d3
00003548 7800                       		moveq	#0,d4
0000354A 3601                       		move.w	d1,d3
0000354C 3802                       		move.w	d2,d4
0000354E 8843                       		or.w	d3,d4
00003550 6700                       		beq.s	loc_2D04
00003552 3802                       		move.w	d2,d4
00003554 4A43                       		tst.w	d3
00003556 6A00 0000                  		bpl.w	loc_2CC2
0000355A 4443                       		neg.w	d3
0000355C                            
0000355C                            loc_2CC2:
0000355C 4A44                       		tst.w	d4
0000355E 6A00 0000                  		bpl.w	loc_2CCA
00003562 4444                       		neg.w	d4
00003564                            
00003564                            loc_2CCA:
00003564 B843                       		cmp.w	d3,d4
00003566 6400 0000                  		bcc.w	loc_2CDC
0000356A E18C                       		lsl.l	#8,d4
0000356C 88C3                       		divu.w	d3,d4
0000356E 7000                       		moveq	#0,d0
00003570 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00003574 6000                       		bra.s	loc_2CE6
00003576                            ; ===========================================================================
00003576                            
00003576                            loc_2CDC:				; XREF: CalcAngle
00003576 E18B                       		lsl.l	#8,d3
00003578 86C4                       		divu.w	d4,d3
0000357A 7040                       		moveq	#$40,d0
0000357C 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00003580                            
00003580                            loc_2CE6:
00003580 4A41                       		tst.w	d1
00003582 6A00 0000                  		bpl.w	loc_2CF2
00003586 4440                       		neg.w	d0
00003588 0640 0080                  		addi.w	#$80,d0
0000358C                            
0000358C                            loc_2CF2:
0000358C 4A42                       		tst.w	d2
0000358E 6A00 0000                  		bpl.w	loc_2CFE
00003592 4440                       		neg.w	d0
00003594 0640 0100                  		addi.w	#$100,d0
00003598                            
00003598                            loc_2CFE:
00003598 4CDF 0018                  		movem.l	(sp)+,d3-d4
0000359C 4E75                       		rts	
0000359E                            ; ===========================================================================
0000359E                            
0000359E                            loc_2D04:				; XREF: CalcAngle
0000359E 303C 0040                  		move.w	#$40,d0
000035A2 4CDF 0018                  		movem.l	(sp)+,d3-d4
000035A6 4E75                       		rts	
000035A8                            ; End of function CalcAngle
000035A8                            
000035A8                            ; ===========================================================================
000035A8                            
000035A8                            Angle_Data:	incbin	misc\angles.bin
000036AA                            
000036AA                            ; ===========================================================================
000036AA                            
000036AA                            ; ---------------------------------------------------------------------------
000036AA                            ; Sega screen
000036AA                            ; ---------------------------------------------------------------------------
000036AA                            SegaScreen:				; XREF: GameModeArray
000036AA 103C 00E4                      move.b  #$E4,d0                 ; set music ID to stop
000036AE 4EB8 132C                      jsr    PlaySound_Special.w      ; play music ID
000036B2 4EB8 1F96                      jsr    Pal_FadeFrom.w           ; fade palette out
000036B6 46FC 2700                      move   #$2700,sr                ; disable interrupts
000036BA 3038 F60C                      move.w ($FFFFF60C).w,d0         ; load VDP register 81XX data
000036BE 0200 00BF                      andi.b #%10111111,d0            ; set display to "disable"
000036C2 33C0 FFC0 0004                 move.w d0,($FFC00004).l         ; save to VDP
000036C8 4EB8 1590                      jsr    ClearPLC.w               ; clear pattern load cues
000036CC 4EB8 1230                      jsr    ClearScreen.w            ; clear VRAM planes, sprite buffer and scroll buffer
000036D0 43F9 00FF 0000                 lea    ($FF0000).l,a1           ; load dump location
000036D6 41F9 0000 0000                 lea    MAPS_SEGA.l,a0           ; load compressed mappings address
000036DC 303C 0140                      move.w #320,d0                  ; prepare pattern index value to patch to mappings
000036E0 4EB8 16D0                      jsr    EniDec.w                 ; decompress and dump
000036E4 203C 6000 0003                 move.l #$60000003,d0            ; prepare VRAM write mode address (Plane B E000)
000036EA 7227                           moveq  #$28-$01,d1              ; set map box draw width
000036EC 741D                           moveq  #$1E-$01,d2              ; set map box draw height
000036EE 6100 DCC0                      bsr.w  ShowVDPGraphics          ; flush mappings to VRAM
000036F2 4DF9 FFC0 0004                 lea    ($FFC00004).l,a6         ; load VDP control port
000036F8 2CBC 6800 0000                 move.l #$68000000,(a6)          ; set VDP to VRAM write mode (Address 2800)
000036FE 41F9 0000 0000                 lea    ART_SEGA.l,a0            ; load compressed art address
00003704 4EB8 13DA                      jsr    NemDec.w                 ; decompress and dump to VDP memory
00003708 41F9 0000 0000                 lea    Pal_SEGANew.l,a0         ; load palette address
0000370E 43F8 FB80                      lea    ($FFFFFB80).w,a1         ; load palette buffer address
00003712 700F                           moveq  #$F,d0                   ; set repeat times
00003714                            
00003714                            
00003714                            SegaScreen_PalLoop:
00003714 22D8                           move.l (a0)+,(a1)+              ; copy colours to buffer
00003716 22D8                           move.l (a0)+,(a1)+              ; ''
00003718 51C8 FFFA                      dbf    d0,SegaScreen_PalLoop    ; repeat until done
0000371C 3038 F60C                      move.w ($FFFFF60C).w,d0         ; load VDP register 81XX data
00003720 0000 0040                      ori.b  #%01000000,d0            ; set display to "enable"
00003724 3C80                           move.w d0,(a6)                  ; save to VDP
00003726 4EB9 0000 1EDC                 jsr    Pal_FadeTo               ; fade palette in
0000372C 31FC 003C F614                 move.w #1*60,($FFFFF614).w      ; set delay time (3 seconds on a 60hz system)
00003732 103C 00E1                  	move.b	#$E1,d0
00003736 6100 DBF4                  	bsr.w	PlaySound_Special ; play "SEGA"	sound
0000373A                            
0000373A                            Sega_MainLoop:
0000373A 11FC 0002 F62A                 move.b #2,($FFFFF62A).w         ; set V-blank routine to run
00003740 4EB8 3242                      jsr    DelayProgram.w           ; wait for V-blank (decreases "Demo_Time_left")
00003744 4A38 F605                      tst.b  ($FFFFF605).w            ; has player 1 pressed start button?
00003748 6B00                           bmi.s  sega_GotoTitle           ; if so, branch
0000374A 4A78 F614                      tst.w  ($FFFFF614).w            ; has the delay time finished?
0000374E 66EA                           bne.s  Sega_MainLoop            ; if not, branch
00003750                            
00003750                            Sega_GotoTitle:
00003750 11FC 0020 F600             		move.b	#$20,($FFFFF600).w ; go to title screen
00003756 4E75                       		rts
00003758                            ; ===========================================================================
00003758                            
00003758                            ; ---------------------------------------------------------------------------
00003758                            ; Title	screen
00003758                            ; ---------------------------------------------------------------------------
00003758                            
00003758                            TitleScreen:				; XREF: GameModeArray
00003758 103C 00E4                  		move.b	#$E4,d0
0000375C 6100 DBCE                  		bsr.w	PlaySound_Special ; stop music
00003760 6100 DE2E                  		bsr.w	ClearPLC
00003764 6100 E830                  		bsr.w	Pal_FadeFrom
00003768 46FC 2700                  		move	#$2700,sr
0000376C 6100 DB50                  		bsr.w	SoundDriverLoad
00003770 4DF9 00C0 0004             		lea	($C00004).l,a6
00003776 3CBC 8004                  		move.w	#$8004,(a6)
0000377A 3CBC 8230                  		move.w	#$8230,(a6)
0000377E 3CBC 8407                  		move.w	#$8407,(a6)
00003782 3CBC 9001                  		move.w	#$9001,(a6)
00003786 3CBC 9200                  		move.w	#$9200,(a6)
0000378A 3CBC 8B03                  		move.w	#$8B03,(a6)
0000378E 3CBC 8720                  		move.w	#$8720,(a6)
00003792 4238 F64E                  		clr.b	($FFFFF64E).w
00003796 6100 DA98                  		bsr.w	ClearScreen
0000379A 43F8 D000                  		lea	($FFFFD000).w,a1
0000379E 7000                       		moveq	#0,d0
000037A0 323C 07FF                  		move.w	#$7FF,d1
000037A4                            
000037A4                            Title_ClrObjRam:
000037A4 22C0                       		move.l	d0,(a1)+
000037A6 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
000037AA                            
000037AA 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000037B4 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
000037BA 6100 DC1E                  		bsr.w	NemDec
000037BE 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
000037C8 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
000037CE 6100 DC0A                  		bsr.w	NemDec
000037D2 43F9 00FF 0000             		lea	($FF0000).l,a1
000037D8 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
000037DE 303C 0000                  		move.w	#0,d0
000037E2 6100 DEEC                  		bsr.w	EniDec
000037E6 43F9 00FF 0000             		lea	($FF0000).l,a1
000037EC 203C 4000 0003             		move.l	#$40000003,d0
000037F2 7227                       		moveq	#$27,d1
000037F4 741B                       		moveq	#$1B,d2
000037F6 6100 DBB8                  		bsr.w	ShowVDPGraphics
000037FA 43F8 FB80                  		lea	($FFFFFB80).w,a1
000037FE 7000                       		moveq	#0,d0
00003800 323C 001F                  		move.w	#$1F,d1
00003804                            
00003804                            Title_ClrPalette:
00003804 22C0                       		move.l	d0,(a1)+
00003806 51C9 FFFC                  		dbf	d1,Title_ClrPalette ; fill Palette with 0	(black)
0000380A                            
0000380A 7003                       		moveq	#3,d0		; load Sonic's Palette
0000380C 6100 EA38                  		bsr.w	PalLoad1
00003810 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
00003816 4EB9 0000 0000             		jsr	ObjectsLoad
0000381C 4EB9 0000 0000             		jsr	BuildSprites
00003822 6100 E6B8                  		bsr.w	Pal_FadeTo
00003826 46FC 2700                  		move	#$2700,sr
0000382A 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
00003834 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
0000383A 6100 DB9E                  		bsr.w	NemDec
0000383E 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
00003848 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
0000384E 6100 DB8A                  		bsr.w	NemDec
00003852 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
0000385C                            	;	lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
0000385C                            	;	bsr.w	NemDec
0000385C 4DF9 00C0 0000             		lea	($C00000).l,a6
00003862 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
0000386A 4BF9 0000 0604             		lea	(Art_Text).l,a5
00003870 323C 028F                  		move.w	#$28F,d1
00003874                            
00003874                            Title_LoadText:
00003874 3C9D                       		move.w	(a5)+,(a6)
00003876 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
0000387A                            
0000387A 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
00003880 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
00003886 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
0000388C 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
00003892 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
00003898 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable Palette cycling
0000389E 6100 0000                  		bsr.w	LevelSizeLoad
000038A2 6100 0000                  		bsr.w	DeformBgLayer
000038A6 43F8 B000                  		lea	($FFFFB000).w,a1
000038AA 41F9 0000 0000             		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
000038B0 303C 0000                  		move.w	#0,d0
000038B4 6100 DE1A                  		bsr.w	EniDec
000038B8 41F9 0000 0000             		lea	(Blk256_GHZ).l,a0 ; load GHZ 256x256 mappings
000038BE 43F9 00FF 0000             		lea	($FF0000).l,a1
000038C4 6100 DF88                  		bsr.w	KosDec
000038C8 6100 0000                  		bsr.w	LevelLayoutLoad
000038CC 6100 E6C8                  		bsr.w	Pal_FadeFrom
000038D0 46FC 2700                  		move	#$2700,sr
000038D4 6100 D95A                  		bsr.w	ClearScreen
000038D8 4BF9 00C0 0004             		lea	($C00004).l,a5
000038DE 4DF9 00C0 0000             		lea	($C00000).l,a6
000038E4 47F8 F708                  		lea	($FFFFF708).w,a3
000038E8 49F8 A440                  		lea	($FFFFA440).w,a4
000038EC 343C 6000                  		move.w	#$6000,d2
000038F0 6100 0000                  		bsr.w	LoadTilesFromStart2
000038F4 43F9 00FF 0000             		lea	($FF0000).l,a1
000038FA 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
00003900 303C 0000                  		move.w	#0,d0
00003904 6100 DDCA                  		bsr.w	EniDec
00003908 43F9 00FF 0000             		lea	($FF0000).l,a1
0000390E 203C 4206 0003             		move.l	#$42060003,d0
00003914 7221                       		moveq	#$21,d1
00003916 7415                       		moveq	#$15,d2
00003918 6100 DA96                  		bsr.w	ShowVDPGraphics
0000391C 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003926 41F9 0000 0000             		lea	(Nem_GHZ_1st).l,a0 ; load GHZ patterns
0000392C 6100 DAAC                  		bsr.w	NemDec
00003930 7001                       		moveq	#1,d0		; load title screen Palette
00003932 6100 E912                  		bsr.w	PalLoad1
00003936 103C 008A                  		move.b	#$8A,d0		; play title screen music
0000393A 6100 D9F0                  		bsr.w	PlaySound_Special
0000393E 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
00003944 31FC 0178 F614             		move.w	#$178,($FFFFF614).w ; run title	screen for $178	frames
0000394A 43F8 D080                  		lea	($FFFFD080).w,a1
0000394E                            ;		moveq	#0,d0
0000394E                            ;		move.w	#7,d1
0000394E                             
0000394E                            ;Title_ClrObjRam2:
0000394E                            ;		move.l	d0,(a1)+
0000394E                            ;		dbf	d1,Title_ClrObjRam2
0000394E 4EB9 0000 0000             		jsr	DeleteObject2	; clear object RAM to make room for the "Press Start Button" object
00003954 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
0000395A 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
00003960                            	;	move.b	#$F,($FFFFD0C0).w ; load "TM" object
00003960 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00003966 11FC 000F D100             		move.b	#$F,($FFFFD100).w
0000396C 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
00003972 4EB9 0000 0000             		jsr	ObjectsLoad
00003978 6100 0000                  		bsr.w	DeformBgLayer
0000397C 4EB9 0000 0000             		jsr	BuildSprites
00003982 7000                       		moveq	#0,d0
00003984 6100 DBDE                  		bsr.w	LoadPLC2
00003988 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
0000398E 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
00003994 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003998 0000 0040                  		ori.b	#$40,d0
0000399C 33C0 00C0 0004             		move.w	d0,($C00004).l
000039A2 6100 E538                  		bsr.w	Pal_FadeTo
000039A6                            
000039A6                            loc_317C:
000039A6 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000039AC 6100 F894                  		bsr.w	DelayProgram
000039B0 4EB9 0000 0000             		jsr	ObjectsLoad
000039B6 6100 0000                  		bsr.w	DeformBgLayer
000039BA 4EB9 0000 0000             		jsr	BuildSprites
000039C0 6100 E0CA                  		bsr.w	PalCycle_Title
000039C4 6100 DBD8                  		bsr.w	RunPLC_RAM
000039C8 3038 D008                  		move.w	($FFFFD008).w,d0
000039CC 5440                       		addq.w	#2,d0
000039CE 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
000039D2 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
000039D6 6500                       		bcs.s	Title_ChkRegion	; if not, branch
000039D8 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000039DE 4E75                       		rts	
000039E0                            ; ===========================================================================
000039E0                            
000039E0                            Title_ChkRegion:
000039E0 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
000039E4 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
000039E6 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
000039EC 6000                       		bra.s	Title_EnterCheat
000039EE                            ; ===========================================================================
000039EE                            
000039EE                            Title_RegionJ:				; XREF: Title_ChkRegion
000039EE 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
000039F4                            
000039F4                            Title_EnterCheat:			; XREF: Title_ChkRegion
000039F4 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
000039F8 D0C0                       		adda.w	d0,a0
000039FA 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
000039FE 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
00003A02 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
00003A04 6600                       		bne.s	loc_3210	; if not, branch
00003A06 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
00003A0A 4A00                       		tst.b	d0
00003A0C 6600                       		bne.s	Title_CountC
00003A0E 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
00003A12 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
00003A16 E249                       		lsr.w	#1,d1
00003A18 0241 0003                  		andi.w	#3,d1
00003A1C 6700                       		beq.s	Title_PlayRing
00003A1E 4A38 FFF8                  		tst.b	($FFFFFFF8).w
00003A22 6A00                       		bpl.s	Title_PlayRing
00003A24 7201                       		moveq	#1,d1
00003A26 1181 1001                  		move.b	d1,1(a0,d1.w)
00003A2A                            
00003A2A                            Title_PlayRing:
00003A2A 21FC 0101 0101 FFE0        		move.l	#$01010101,($FFFFFFE0).w	; activate all cheats
00003A32 303C 00BF                  		move.w	#$BF,d0
00003A36 6100 D8F4                  		bsr.w	PlaySound_Special
00003A3A 6000                       		bra.s	Title_CountC
00003A3C                            ; ===========================================================================
00003A3C                            
00003A3C                            loc_3210:				; XREF: Title_EnterCheat
00003A3C 4A00                       		tst.b	d0
00003A3E 6700                       		beq.s	Title_CountC
00003A40 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
00003A46 6700                       		beq.s	Title_CountC
00003A48 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003A4E                            
00003A4E                            Title_CountC:
00003A4E 1038 F605                  		move.b	($FFFFF605).w,d0
00003A52 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
00003A56 6700                       		beq.s	loc_3230	; if not, branch
00003A58 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
00003A5C                            
00003A5C                            loc_3230:
00003A5C 4A78 F614                  		tst.w	($FFFFF614).w
00003A60 6700 0000                  		beq.w	Demo
00003A64 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
00003A6A 6700 FF3A                  		beq.w	loc_317C	; if not, branch
00003A6E                            
00003A6E                            Title_ChkLevSel:
00003A6E 4A38 FFE0                  		tst.b	($FFFFFFE0).w; check	if level select	asm is	on
00003A72 6700 0000                  		beq.w	PlayLevel; if not, play level
00003A76 4EF9 0000 0000             				jmp	 Level_Select_Menu; Go to Sonic 2 Level Select
00003A7C 7002                       		moveq	#2,d0
00003A7E 6100 E804                  		bsr.w	PalLoad2; load level select Palette
00003A82 43F8 CC00                  		lea	($FFFFCC00).w,a1
00003A86 7000                       		moveq	#0,d0
00003A88 323C 00DF                  		move.w	#$DF,d1
00003A8C 4E75                       				rts
00003A8E                            Title_ClrScroll:
00003A8E 22C0                       		move.l	d0,(a1)+
00003A90 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
00003A94                            
00003A94 21C0 F616                  		move.l	d0,($FFFFF616).w
00003A98 46FC 2700                  		move	#$2700,sr
00003A9C 4DF9 00C0 0000             		lea	($C00000).l,a6
00003AA2 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
00003AAC 323C 03FF                  		move.w	#$3FF,d1
00003AB0                            
00003AB0                            Title_ClrVram:
00003AB0 2C80                       		move.l	d0,(a6)
00003AB2 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
00003AB6 103C 0096                  		move.b  #$96,d0
00003ABA 4EB9 0000 1326             		jsr PlaySound
00003AC0 6100 0000                  		bsr.w	LevSelTextLoad
00003AC4                            
00003AC4                            ; ---------------------------------------------------------------------------
00003AC4                            ; Level	Select
00003AC4                            ; ---------------------------------------------------------------------------
00003AC4                            
00003AC4                            LevelSelect:
00003AC4 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003ACA 6100 F776                  		bsr.w	DelayProgram
00003ACE 6100 0000                  		bsr.w	LevSelControls
00003AD2 6100 DACA                  		bsr.w	RunPLC_RAM
00003AD6 4AB8 F680                  		tst.l	($FFFFF680).w
00003ADA 66E8                       		bne.s	LevelSelect
00003ADC 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003AE0 0C40 0014                  		cmpi.w	#$14,d0		; have you selected item $14 (sound test)?
00003AE4 6600                       		bne.s	LevSelLevCheckStart; if not, go to	Level/SS subroutine
00003AE6 0C38 0080 F605             		cmpi.b	#$80,($FFFFF605).w ; is	Start pressed?
00003AEC 6700                       		beq.s	LevSelStartPress	; if true, branch
00003AEE 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	B pressed?
00003AF4 6700                       		beq.s	LevSelBCPress	; if not, branch
00003AF6 0C38 0010 F605             		cmpi.b	#$10,($FFFFF605).w ; is	C pressed?
00003AFC 6700                       		beq.s	LevSelBCPress	; if not, branch
00003AFE 60C4                       		bra.s	LevelSelect
00003B00                            ; ===========================================================================
00003B00                            LevSelLevCheckStart:				; XREF: LevelSelect
00003B00 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start pressed?
00003B06 67BC                       		beq.s	LevelSelect	; if not, branch
00003B08 6000                       		bra.s	LevSel_Level_SS
00003B0A                             
00003B0A                            LevSelBCPress:				; XREF: LevelSelect ; also known as LevSel_NoCheat:
00003B0A 3038 FF84                  		move.w	($FFFFFF84).w,d0
00003B0E 0640 0080                  		addi.w	#$80,d0
00003B12 0C40 00FF                  		cmpi.w	#$FF,d0		; is sound $80-$FF being played?
00003B16 6500                       		bcs.s	LevSel_PlaySnd	; if yes, branch
00003B18 0C40 00A0                  		cmpi.w	#$A0,d0		; is sound $95-$A0 being played?
00003B1C 65A6                       		bcs.s	LevelSelect	; if yes, branch
00003B1E                             
00003B1E                            LevSel_PlaySnd:
00003B1E 6100 D80C                  		bsr.w	PlaySound_Special
00003B22 60A0                       		bra.s	LevelSelect
00003B24                             
00003B24                            LevSelStartPress:				; XREF: LevelSelect
00003B24 13FC 0000 FFFF F600        		move.b	#$00,$FFFFF600
00003B2C 4EF9 0000 0388             		jmp MainGameLoop ;go to sega screen
00003B32                            ; ===========================================================================
00003B32                            
00003B32                            LevSel_Ending:				; XREF: LevelSelect
00003B32 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
00003B38 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
00003B3E 4E75                       		rts	
00003B40                            ; ===========================================================================
00003B40                            
00003B40                            LevSel_Credits:				; XREF: LevelSelect
00003B40 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
00003B46 103C 0091                  		move.b	#$91,d0
00003B4A 6100 D7E0                  		bsr.w	PlaySound_Special ; play credits music
00003B4E 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
00003B54 4E75                       		rts	
00003B56                            ; ===========================================================================
00003B56                            
00003B56                            LevSel_Level_SS:			; XREF: LevelSelect
00003B56 D040                       		add.w	d0,d0
00003B58 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
00003B5C 6B00 FF66                  		bmi.w	LevelSelect
00003B60 0C40 0700                  		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
00003B64 6600                       		bne.s	LevSel_Level	; if not, branch
00003B66 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00003B6C 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
00003B70 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00003B76 7000                       		moveq	#0,d0
00003B78 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003B7C 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003B80 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003B84 4E75                       		rts	
00003B86                            ; ===========================================================================
00003B86                            
00003B86                            LevSel_Level:				; XREF: LevSel_Level_SS
00003B86 0240 3FFF                  		andi.w	#$3FFF,d0
00003B8A 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
00003B8E                            
00003B8E                            PlayLevel:				; XREF: ROM:00003246j ...
00003B8E 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00003B94 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00003B9A 7000                       		moveq	#0,d0
00003B9C 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003BA0 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003BA4 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003BA8 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
00003BAC 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
00003BB0 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
00003BB4 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
00003BB8 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
00003BBC 103C 00E0                  		move.b	#$E0,d0
00003BC0 6100 D76A                  		bsr.w	PlaySound_Special ; fade out music
00003BC4 4E75                       		rts	
00003BC6                            ; ===========================================================================
00003BC6                            ; ---------------------------------------------------------------------------
00003BC6                            ; Level	select - level pointers
00003BC6                            ; ---------------------------------------------------------------------------
00003BC6                            LSelectPointers:
00003BC6                            		incbin	misc\ls_point.bin
00003BF0                            		even
00003BF0                            ; ---------------------------------------------------------------------------
00003BF0                            ; Level	select codes
00003BF0                            ; ---------------------------------------------------------------------------
00003BF0                            LevelSelectCode_J:
00003BF0                            		incbin	misc\ls_jcode.bin
00003BF6                            		even
00003BF6                            
00003BF6                            LevelSelectCode_US:
00003BF6                            		incbin	misc\ls_ucode.bin
00003BFC                            		even
00003BFC                            ; ===========================================================================
00003BFC                            
00003BFC                            ; ---------------------------------------------------------------------------
00003BFC                            ; Demo mode
00003BFC                            ; ---------------------------------------------------------------------------
00003BFC                            
00003BFC                            Demo:					; XREF: TitleScreen
00003BFC 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00003C02                            
00003C02                            loc_33B6:				; XREF: loc_33E4
00003C02 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003C08 6100 F638                  		bsr.w	DelayProgram
00003C0C 6100 0000                  		bsr.w	DeformBgLayer
00003C10 6100 DE5A                  		bsr.w	PalCycle_Load
00003C14 6100 D988                  		bsr.w	RunPLC_RAM
00003C18 3038 D008                  		move.w	($FFFFD008).w,d0
00003C1C 5440                       		addq.w	#2,d0
00003C1E 31C0 D008                  		move.w	d0,($FFFFD008).w
00003C22 0C40 1C00                  		cmpi.w	#$1C00,d0
00003C26 6500                       		bcs.s	loc_33E4
00003C28 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
00003C2E 4E75                       		rts	
00003C30                            ; ===========================================================================
00003C30                            
00003C30                            loc_33E4:				; XREF: Demo
00003C30 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00003C36 6600 FE36                  		bne.w	Title_ChkLevSel	; if yes, branch
00003C3A 4A78 F614                  		tst.w	($FFFFF614).w
00003C3E 6600 FFC2                  		bne.w	loc_33B6
00003C42 103C 00E0                  		move.b	#$E0,d0
00003C46 6100 D6E4                  		bsr.w	PlaySound_Special ; fade out music
00003C4A 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
00003C4E 0240 0007                  		andi.w	#7,d0
00003C52 D040                       		add.w	d0,d0
00003C54 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
00003C58 31C0 FE10                  		move.w	d0,($FFFFFE10).w
00003C5C 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
00003C60 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
00003C66 6500                       		bcs.s	loc_3422	; if yes, branch
00003C68 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
00003C6E                            
00003C6E                            loc_3422:
00003C6E 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
00003C74 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
00003C7A 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
00003C7E 6600                       		bne.s	Demo_Level	; if not, branch
00003C80 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00003C86 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
00003C8A 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
00003C8E                            
00003C8E                            Demo_Level:
00003C8E 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00003C94 7000                       		moveq	#0,d0
00003C96 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003C9A 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003C9E 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003CA2 4E75                       		rts	
00003CA4                            ; ===========================================================================
00003CA4                            ; ---------------------------------------------------------------------------
00003CA4                            ; Levels used in demos
00003CA4                            ; ---------------------------------------------------------------------------
00003CA4                            Demo_Levels:	incbin	misc\dm_ord1.bin
00003CAC                            		even
00003CAC                            
00003CAC                            ; ---------------------------------------------------------------------------
00003CAC                            ; Subroutine to	change what you're selecting in the level select
00003CAC                            ; ---------------------------------------------------------------------------
00003CAC                            
00003CAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003CAC                            
00003CAC                            
00003CAC                            LevSelControls:				; XREF: LevelSelect
00003CAC 1238 F605                  		move.b	($FFFFF605).w,d1
00003CB0 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
00003CB4 6600                       		bne.s	LevSel_UpDown	; if yes, branch
00003CB6 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
00003CBA 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
00003CBC                            
00003CBC                            LevSel_UpDown:
00003CBC 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
00003CC2 1238 F604                  		move.b	($FFFFF604).w,d1
00003CC6 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
00003CCA 6700                       		beq.s	LevSel_SndTest	; if not, branch
00003CCC 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003CD0 0801 0000                  		btst	#0,d1		; is up	pressed?
00003CD4 6700                       		beq.s	LevSel_Down	; if not, branch
00003CD6 5340                       		subq.w	#1,d0		; move up 1 selection
00003CD8 6400                       		bcc.s	LevSel_Down
00003CDA 7014                       		moveq	#$14,d0		; if selection moves below 0, jump to selection	$14
00003CDC                            
00003CDC                            LevSel_Down:
00003CDC 0801 0001                  		btst	#1,d1		; is down pressed?
00003CE0 6700                       		beq.s	LevSel_Refresh	; if not, branch
00003CE2 5240                       		addq.w	#1,d0		; move down 1 selection
00003CE4 0C40 0015                  		cmpi.w	#$15,d0
00003CE8 6500                       		bcs.s	LevSel_Refresh
00003CEA 7000                       		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
00003CEC                            
00003CEC                            LevSel_Refresh:
00003CEC 31C0 FF82                  		move.w	d0,($FFFFFF82).w ; set new selection
00003CF0 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
00003CF4 4E75                       		rts	
00003CF6                            ; ===========================================================================
00003CF6                            
00003CF6                            LevSel_SndTest:				; XREF: LevSelControls
00003CF6 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w ; is	item $14 selected?
00003CFC 6600                       		bne.s	LevSel_NoMove	; if not, branch
00003CFE 1238 F605                  		move.b	($FFFFF605).w,d1
00003D02 0201 004C                  		andi.b	#$4C,d1		; is left/right/A pressed?
00003D06 6700                       		beq.s	LevSel_NoMove	; if not, branch
00003D08 3038 FF84                  		move.w	($FFFFFF84).w,d0
00003D0C 0801 0006                  		btst	#6,d1		; is A pressed?
00003D10 6600                       		bne.s	LevSel_A	; if not, branch
00003D12 0801 0002                  		btst	#2,d1		; is left pressed?
00003D16 6700                       		beq.s	LevSel_Right	; if not, branch
00003D18 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
00003D1A 6400                       		bcc.s	LevSel_Right
00003D1C 707F                       		moveq	#$7F,d0		; if sound test	moves below 0, set to $7F used to be 4F
00003D1E                            
00003D1E                            LevSel_A:
00003D1E 0801 0006                  		btst	#6,d1		; is A button pressed?
00003D22 6700                       		beq.s	LevSel_Right	; if not, branch
00003D24 0640 0010                  		add.w	#16,d0		; add $10 to sound test
00003D28                            
00003D28                            LevSel_Right:
00003D28 0801 0003                  		btst	#3,d1		; is right pressed?
00003D2C 6700                       		beq.s	LevSel_Refresh2	; if not, branch
00003D2E 5240                       		addq.w	#1,d0		; add 1	to sound test
00003D30 0C40 0080                  		cmpi.w	#$80,d0 ; used to be 50
00003D34 6500                       		bcs.s	LevSel_Refresh2
00003D36 7000                       		moveq	#0,d0		; if sound test	moves above $4F, set to	0
00003D38                            
00003D38                            LevSel_Refresh2:
00003D38 31C0 FF84                  		move.w	d0,($FFFFFF84).w ; set sound test number
00003D3C 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
00003D40                            
00003D40                            LevSel_NoMove:
00003D40 4E75                       		rts	
00003D42                            ; End of function LevSelControls
00003D42                            
00003D42                            ; ---------------------------------------------------------------------------
00003D42                            ; Subroutine to load level select text
00003D42                            ; ---------------------------------------------------------------------------
00003D42                            
00003D42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003D42                            
00003D42                            
00003D42                            LevSelTextLoad:				; XREF: TitleScreen
00003D42 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00003D48 4DF9 00C0 0000             		lea	($C00000).l,a6
00003D4E 283C 6210 0003             		move.l	#$62100003,d4	; screen position (text)
00003D54 363C E680                  		move.w	#$E680,d3	; VRAM setting
00003D58 7214                       		moveq	#$14,d1		; number of lines of text
00003D5A                            
00003D5A                            loc_34FE:				; XREF: LevSelTextLoad+26j
00003D5A 2D44 0004                  		move.l	d4,4(a6)
00003D5E 6100 0000                  		bsr.w	LevSel_ChgLine
00003D62 0684 0080 0000             		addi.l	#$800000,d4
00003D68 51C9 FFF0                  		dbf	d1,loc_34FE
00003D6C 7000                       		moveq	#0,d0
00003D6E 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003D72 3200                       		move.w	d0,d1
00003D74 283C 6210 0003             		move.l	#$62100003,d4
00003D7A EF48                       		lsl.w	#7,d0
00003D7C 4840                       		swap	d0
00003D7E D880                       		add.l	d0,d4
00003D80 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00003D86 E749                       		lsl.w	#3,d1
00003D88 3001                       		move.w	d1,d0
00003D8A D241                       		add.w	d1,d1
00003D8C D240                       		add.w	d0,d1
00003D8E D2C1                       		adda.w	d1,a1
00003D90 363C C680                  		move.w	#$C680,d3
00003D94 2D44 0004                  		move.l	d4,4(a6)
00003D98 6100 0000                  		bsr.w	LevSel_ChgLine
00003D9C 363C E680                  		move.w	#$E680,d3
00003DA0 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
00003DA6 6600                       		bne.s	loc_3550
00003DA8 363C C680                  		move.w	#$C680,d3
00003DAC                            
00003DAC                            loc_3550:
00003DAC 23FC 6C30 0003 00C0 0004   		move.l	#$6C300003,($C00004).l ; screen	position (sound	test)
00003DB6 3038 FF84                  		move.w	($FFFFFF84).w,d0
00003DBA 0640 0080                  		addi.w	#$80,d0
00003DBE 1400                       		move.b	d0,d2
00003DC0 E808                       		lsr.b	#4,d0
00003DC2 6100 0000                  		bsr.w	LevSel_ChgSnd
00003DC6 1002                       		move.b	d2,d0
00003DC8 6100 0000                  		bsr.w	LevSel_ChgSnd
00003DCC 4E75                       		rts	
00003DCE                            ; End of function LevSelTextLoad
00003DCE                            
00003DCE                            
00003DCE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003DCE                            
00003DCE                            
00003DCE                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
00003DCE 0240 000F                  		andi.w	#$F,d0
00003DD2 0C00 000A                  		cmpi.b	#$A,d0
00003DD6 6500                       		bcs.s	loc_3580
00003DD8 0600 0007                  		addi.b	#7,d0
00003DDC                            
00003DDC                            loc_3580:
00003DDC D043                       		add.w	d3,d0
00003DDE 3C80                       		move.w	d0,(a6)
00003DE0 4E75                       		rts	
00003DE2                            ; End of function LevSel_ChgSnd
00003DE2                            
00003DE2                            
00003DE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003DE2                            
00003DE2                            
00003DE2                            LevSel_ChgLine:				; XREF: LevSelTextLoad
00003DE2 7417                       		moveq	#$17,d2		; number of characters per line
00003DE4                            
00003DE4                            loc_3588:
00003DE4 7000                       		moveq	#0,d0
00003DE6 1019                       		move.b	(a1)+,d0
00003DE8 6A00                       		bpl.s	loc_3598
00003DEA 3CBC 0000                  		move.w	#0,(a6)
00003DEE 51CA FFF4                  		dbf	d2,loc_3588
00003DF2 4E75                       		rts	
00003DF4                            ; ===========================================================================
00003DF4                            
00003DF4                            loc_3598:				; XREF: LevSel_ChgLine
00003DF4 D043                       		add.w	d3,d0
00003DF6 3C80                       		move.w	d0,(a6)
00003DF8 51CA FFEA                  		dbf	d2,loc_3588
00003DFC 4E75                       		rts	
00003DFE                            ; End of function LevSel_ChgLine
00003DFE                            
00003DFE                            ; ===========================================================================
00003DFE                            ; ---------------------------------------------------------------------------
00003DFE                            ; Level	select menu text
00003DFE                            ; ---------------------------------------------------------------------------
00003DFE                            LevelMenuText:	incbin	misc\menutext.bin
00003FF6                            		even
00003FF6                            ; ---------------------------------------------------------------------------
00003FF6                            ; Music	playlist
00003FF6                            ; ---------------------------------------------------------------------------
00003FF6                            MusicList1:	incbin	sound\muslist1.bin
00003FFC                            		even
00003FFC                            MusicList2:	incbin	sound\muslist2.bin
00004002                            		even
00004002                            MusicList3:	incbin	sound\muslist3.bin
00004008                            		even
00004008                            MusicList4:	incbin	sound\muslist4.bin
0000400E                            		even
0000400E                            MusicList5:	incbin	sound\muslist5.bin
00004014                            		even
00004014                            MusicList6:	incbin	sound\muslist6.bin
00004016                            		even
00004016                            MusicList7:	incbin	sound\muslist7.bin
00004018                            		even
00004018                            MusicList8:	incbin	sound\muslist8.bin
0000401E 00                         		even
0000401E                            ; ===========================================================================
0000401E                            
0000401E                            ; ---------------------------------------------------------------------------
0000401E                            ; Level
0000401E                            ; ---------------------------------------------------------------------------
0000401E                            
0000401E                            Level:					; XREF: GameModeArray
0000401E 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
00004024 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004028 6B00                       		bmi.s	loc_37B6
0000402A 103C 00E0                  		move.b	#$E0,d0
0000402E 6100 D2FC                  		bsr.w	PlaySound_Special ; fade out music
00004032                            
00004032                            loc_37B6:
00004032 6100 D55C                  		bsr.w	ClearPLC
00004036 6100 DF5E                  		bsr.w	Pal_FadeFrom
0000403A 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000403E 6B00                       		bmi.s	Level_ClrRam
00004040 46FC 2700                  		move	#$2700,sr
00004044 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
0000404E 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004054 6100 D384                  		bsr.w	NemDec
00004058 46FC 2300                  		move	#$2300,sr
0000405C 7000                       		moveq	#0,d0
0000405E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004062 E948                       		lsl.w	#4,d0
00004064 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
0000406A 45F2 0000                  		lea	(a2,d0.w),a2
0000406E 7000                       		moveq	#0,d0
00004070 1012                       		move.b	(a2),d0
00004072 6700                       		beq.s	loc_37FC
00004074 6100 D4BC                  		bsr.w	LoadPLC		; load level patterns
00004078                            
00004078                            loc_37FC:
00004078 7001                       		moveq	#1,d0
0000407A 6100 D4B6                  		bsr.w	LoadPLC		; load standard	patterns
0000407E                            
0000407E                            Level_ClrRam:
0000407E 43F8 D000                  		lea	($FFFFD000).w,a1
00004082 7000                       		moveq	#0,d0
00004084 323C 07FF                  		move.w	#$7FF,d1
00004088                            
00004088                            Level_ClrObjRam:
00004088 22C0                       		move.l	d0,(a1)+
0000408A 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
0000408E                            
0000408E 43F8 F628                  		lea	($FFFFF628).w,a1
00004092 7000                       		moveq	#0,d0
00004094 323C 0015                  		move.w	#$15,d1
00004098                            
00004098                            Level_ClrVars:
00004098 22C0                       		move.l	d0,(a1)+
0000409A 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
0000409E                            
0000409E 43F8 F700                  		lea	($FFFFF700).w,a1
000040A2 7000                       		moveq	#0,d0
000040A4 323C 003F                  		move.w	#$3F,d1
000040A8                            
000040A8                            Level_ClrVars2:
000040A8 22C0                       		move.l	d0,(a1)+
000040AA 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
000040AE                            
000040AE 43F8 FE60                  		lea	($FFFFFE60).w,a1
000040B2 7000                       		moveq	#0,d0
000040B4 323C 0047                  		move.w	#$47,d1
000040B8                            
000040B8                            Level_ClrVars3:
000040B8 22C0                       		move.l	d0,(a1)+
000040BA 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
000040BE                            
000040BE 46FC 2700                  		move	#$2700,sr
000040C2 6100 D16C                  		bsr.w	ClearScreen
000040C6 4DF9 00C0 0004             		lea	($C00004).l,a6
000040CC 3CBC 8B03                  		move.w	#$8B03,(a6)
000040D0 3CBC 8230                  		move.w	#$8230,(a6)
000040D4 3CBC 8407                  		move.w	#$8407,(a6)
000040D8 3CBC 857C                  		move.w	#$857C,(a6)
000040DC 3CBC 9001                  		move.w	#$9001,(a6)
000040E0 3CBC 8004                  		move.w	#$8004,(a6)
000040E4 3CBC 8720                  		move.w	#$8720,(a6)
000040E8 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
000040EE 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
000040F2 4278 C800                  		clr.w	($FFFFC800).w
000040F6 21FC FFFF C800 C8FC        		move.l	#$FFFFC800,($FFFFC8FC).w 
000040FE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00004104 6600                       		bne.s	Level_LoadPal	; if not, branch
00004106 3CBC 8014                  		move.w	#$8014,(a6)
0000410A 7000                       		moveq	#0,d0
0000410C 1038 FE11                  		move.b	($FFFFFE11).w,d0
00004110 D040                       		add.w	d0,d0
00004112 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00004118 3031 0000                  		move.w	(a1,d0.w),d0
0000411C 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
00004120 31C0 F648                  		move.w	d0,($FFFFF648).w
00004124 31C0 F64A                  		move.w	d0,($FFFFF64A).w
00004128 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
0000412C 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
00004130 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
00004136                            
00004136                            Level_LoadPal:
00004136 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
0000413C 46FC 2300                  		move	#$2300,sr
00004140 7003                       		moveq	#3,d0
00004142 6100 E140                  		bsr.w	PalLoad2	; load Sonic's Palette line
00004146 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
0000414C 6600                       		bne.s	Level_GetBgm	; if not, branch
0000414E 700F                       		moveq	#$F,d0		; Palette number	$0F (LZ)
00004150 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
00004156 6600                       		bne.s	Level_WaterPal	; if not, branch
00004158 7010                       		moveq	#$10,d0		; Palette number	$10 (SBZ3)
0000415A                            
0000415A                            Level_WaterPal:
0000415A 6100 E162                  		bsr.w	PalLoad3_Water	; load underwater Palette (see d0)
0000415E 4A38 FE30                  		tst.b	($FFFFFE30).w
00004162 6700                       		beq.s	Level_GetBgm
00004164 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
0000416A                            
0000416A                            Level_GetBgm:
0000416A 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000416E 6B00 0000                  		bmi.w	loc_3946		; change bmi.s to bmi.w or it won't work!
00004172 7000                       		moveq	#0,d0
00004174 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004178                            
00004178 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
0000417E 6600                       		bne.s	Level_GetBgm2	; if not, branch
00004180 43F9 0000 3FF6             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00004186 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00004188                            
00004188                            Level_GetBgm2:
00004188 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
0000418E 6600                       		bne.s	Level_GetBgm3	; if not, branch
00004190 43F9 0000 3FFC             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00004196 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00004198                            
00004198                            Level_GetBgm3:
00004198 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
0000419E 6600                       		bne.s	Level_GetBgm4	; if not, branch
000041A0 43F9 0000 4002             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
000041A6 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
000041A8                            
000041A8                            Level_GetBgm4:
000041A8 43F9 0000 4008             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
000041AE                            
000041AE                            Level_PlayBgm:
000041AE 1031 0000                  		move.b	(a1,d0.w),d0	; get d0-th entry from the playlist
000041B2 11C0 FFFE                  		move.b	d0,($FFFFFFFE).w	; put music number in RAM for later use
000041B6 6100 D16E                  		bsr.w	PlaySound	; play music
000041BA 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
000041C0                            
000041C0                            Level_TtlCard:
000041C0 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
000041C6 6100 F07A                  		bsr.w	DelayProgram
000041CA 4EB9 0000 0000             		jsr	ObjectsLoad
000041D0 4EB9 0000 0000             		jsr	BuildSprites
000041D6 6100 D3C6                  		bsr.w	RunPLC_RAM
000041DA 3038 D108                  		move.w	($FFFFD108).w,d0
000041DE B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
000041E2 66DC                       		bne.s	Level_TtlCard	; if not, branch
000041E4 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
000041E8 66D6                       		bne.s	Level_TtlCard	; if yes, branch
000041EA 4EB9 0000 0000             		jsr	Hud_Base
000041F0                            
000041F0                            loc_3946:
000041F0 7003                       		moveq	#3,d0
000041F2 6100 E052                  		bsr.w	PalLoad1	; load Sonic's Palette line
000041F6 6100 0000                  		bsr.w	LevelSizeLoad
000041FA 6100 0000                  		bsr.w	DeformBgLayer
000041FE 08F8 0002 F754             		bset	#2,($FFFFF754).w
00004204 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and Palettes
00004208 6100 0000                  		bsr.w	LoadTilesFromStart
0000420C 4EB9 0000 0000             		jsr	FloorLog_Unk
00004212 6100 0000                  		bsr.w	ColIndexLoad
00004216 6100 0000                  		bsr.w	LZWaterEffects
0000421A 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00004220 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004224 6B00                       		bmi.s	Level_ChkDebug
00004226 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
0000422C                            
0000422C                            Level_ChkDebug:
0000422C 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00004230 6700                       		beq.s	Level_ChkWater	; if not, branch
00004232 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00004238 6700                       		beq.s	Level_ChkWater	; if not, branch
0000423A 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00004240                            
00004240                            Level_ChkWater:
00004240 31FC 0000 F602             		move.w	#0,($FFFFF602).w
00004246 31FC 0000 F604             		move.w	#0,($FFFFF604).w
0000424C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00004252 6600                       		bne.s	Level_LoadObj	; if not, branch
00004254 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
0000425A 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
00004260 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
00004266 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
0000426C                            
0000426C                            Level_LoadObj:
0000426C 4EB9 0000 0000             		jsr	ObjPosLoad
00004272 4EB9 0000 0000             		jsr	ObjectsLoad
00004278 4EB9 0000 0000             		jsr	BuildSprites
0000427E 7000                       		moveq	#0,d0
00004280 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
00004284 6600                       		bne.s	loc_39E8	; if yes, branch
00004286 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000428A 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000428E 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
00004292                            
00004292                            loc_39E8:
00004292 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
00004296 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
0000429A 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
0000429E 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
000042A2 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
000042A6 31C0 FE08                  		move.w	d0,($FFFFFE08).w
000042AA 31C0 FE02                  		move.w	d0,($FFFFFE02).w
000042AE 31C0 FE04                  		move.w	d0,($FFFFFE04).w
000042B2 6100 0000                  		bsr.w	OscillateNumInit
000042B6 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
000042BC 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
000042C2 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
000042C8 31FC 0000 F790             		move.w	#0,($FFFFF790).w
000042CE 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
000042D4 7000                       		moveq	#0,d0
000042D6 1038 FE10                  		move.b	($FFFFFE10).w,d0
000042DA E548                       		lsl.w	#2,d0
000042DC 2271 0000                  		movea.l	(a1,d0.w),a1
000042E0 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000042E4 6A00                       		bpl.s	Level_Demo	; if yes, branch
000042E6 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
000042EC 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000042F0 5340                       		subq.w	#1,d0
000042F2 E548                       		lsl.w	#2,d0
000042F4 2271 0000                  		movea.l	(a1,d0.w),a1
000042F8                            
000042F8                            Level_Demo:
000042F8 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
000042FE 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
00004302 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00004308 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000430C 6A00                       		bpl.s	Level_ChkWaterPal
0000430E 31FC 021C F614             		move.w	#540,($FFFFF614).w
00004314 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
0000431A 6600                       		bne.s	Level_ChkWaterPal
0000431C 31FC 01FE F614             		move.w	#510,($FFFFF614).w
00004322                            
00004322                            Level_ChkWaterPal:
00004322 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
00004328 6600                       		bne.s	Level_Delay	; if not, branch
0000432A 700B                       		moveq	#$B,d0		; Palette $0B (LZ underwater)
0000432C 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
00004332 6600                       		bne.s	Level_WaterPal2	; if not, branch
00004334 700D                       		moveq	#$D,d0		; Palette $0D (SBZ3 underwater)
00004336                            
00004336                            Level_WaterPal2:
00004336 6100 DFC4                  		bsr.w	PalLoad4_Water
0000433A                            
0000433A                            Level_Delay:
0000433A 323C 0003                  		move.w	#3,d1
0000433E                            
0000433E                            Level_DelayLoop:
0000433E 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00004344 6100 EEFC                  		bsr.w	DelayProgram
00004348 51C9 FFF4                  		dbf	d1,Level_DelayLoop
0000434C                            
0000434C 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00004352 6100 DB8E                  		bsr.w	Pal_FadeTo2
00004356 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000435A 6B00                       		bmi.s	Level_ClrCardArt
0000435C 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
00004360 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
00004364 5838 D124                  		addq.b	#4,($FFFFD124).w
00004368 5838 D164                  		addq.b	#4,($FFFFD164).w
0000436C 6000                       		bra.s	Level_StartGame
0000436E                            ; ===========================================================================
0000436E                            
0000436E                            Level_ClrCardArt:
0000436E 7002                       		moveq	#2,d0
00004370 4EB9 0000 1532             		jsr	(LoadPLC).l	; load explosion patterns
00004376 7000                       		moveq	#0,d0
00004378 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000437C 0640 0015                  		addi.w	#$15,d0
00004380 4EB9 0000 1532             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
00004386                            
00004386                            Level_StartGame:
00004386 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
0000438C                            
0000438C                            ; ---------------------------------------------------------------------------
0000438C                            ; Main level loop (when	all title card and loading sequences are finished)
0000438C                            ; ---------------------------------------------------------------------------
0000438C                            
0000438C                            Level_MainLoop:
0000438C 6100 CFAA                  		bsr.w	PauseGame
00004390 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00004396 6100 EEAA                  		bsr.w	DelayProgram
0000439A 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
0000439E 6100 0000                  		bsr.w	MoveSonicInDemo
000043A2 6100 0000                  		bsr.w	LZWaterEffects
000043A6 4EB9 0000 0000             		jsr	ObjectsLoad
000043AC 4A78 FE08                  		tst.w	($FFFFFE08).w
000043B0 6600                       		bne.s	loc_3B10
000043B2 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000043B8 6400                       		bcc.s	loc_3B14
000043BA                            
000043BA                            loc_3B10:
000043BA 6100 0000                  		bsr.w	DeformBgLayer
000043BE                            
000043BE                            loc_3B14:
000043BE 4EB9 0000 0000             		jsr	BuildSprites
000043C4 4EB9 0000 0000             		jsr	ObjPosLoad
000043CA 6100 D6A0                  		bsr.w	PalCycle_Load
000043CE 6100 D1CE                  		bsr.w	RunPLC_RAM
000043D2 6100 0000                  		bsr.w	OscillateNumDo
000043D6 6100 0000                  		bsr.w	ChangeRingFrame
000043DA 6100 0000                  		bsr.w	SignpostArtLoad
000043DE 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
000043E4 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
000043E6 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
000043EA 6600 FC32                  		bne.w	Level		; if yes, branch
000043EE 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
000043F4 6700 FF96                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
000043F8 4E75                       		rts	
000043FA                            ; ===========================================================================
000043FA                            
000043FA                            Level_ChkDemo:				; XREF: Level_MainLoop
000043FA 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
000043FE 6600                       		bne.s	Level_EndDemo	; if yes, branch
00004400 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00004404 6700                       		beq.s	Level_EndDemo	; if not, branch
00004406 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
0000440C 6700 FF7E                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
00004410 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00004416 4E75                       		rts	
00004418                            ; ===========================================================================
00004418                            
00004418                            Level_EndDemo:				; XREF: Level_ChkDemo
00004418 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
0000441E 6600                       		bne.s	loc_3B88	; if not, branch
00004420 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00004426 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000442A 6A00                       		bpl.s	loc_3B88	; if yes, branch
0000442C 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
00004432                            
00004432                            loc_3B88:
00004432 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
00004438 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000443E 4278 F794                  		clr.w	($FFFFF794).w
00004442                            
00004442                            loc_3B98:
00004442 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00004448 6100 EDF8                  		bsr.w	DelayProgram
0000444C 6100 0000                  		bsr.w	MoveSonicInDemo
00004450 4EB9 0000 0000             		jsr	ObjectsLoad
00004456 4EB9 0000 0000             		jsr	BuildSprites
0000445C 4EB9 0000 0000             		jsr	ObjPosLoad
00004462 5378 F794                  		subq.w	#1,($FFFFF794).w
00004466 6A00                       		bpl.s	loc_3BC8
00004468 31FC 0002 F794             		move.w	#2,($FFFFF794).w
0000446E 6100 DB4E                  		bsr.w	Pal_FadeOut
00004472                            
00004472                            loc_3BC8:
00004472 4A78 F614                  		tst.w	($FFFFF614).w
00004476 66CA                       		bne.s	loc_3B98
00004478 4E75                       		rts	
0000447A                            ; ===========================================================================
0000447A                            ; ---------------------------------------------------------------------------
0000447A                            ; Subroutine to	do special water effects in Labyrinth Zone
0000447A                            ; ---------------------------------------------------------------------------
0000447A                            
0000447A                            LZWaterEffects:				; XREF: Level
0000447A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00004480 6600                       		bne.s	locret_3C28	; if not, branch
00004482 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004488 6400                       		bcc.s	LZMoveWater
0000448A 6100 0000                  		bsr.w	LZWindTunnels
0000448E 6100 0000                  		bsr.w	LZWaterSlides
00004492 6100 0000                  		bsr.w	LZDynamicWater
00004496                            
00004496                            LZMoveWater:
00004496 4238 F64E                  		clr.b	($FFFFF64E).w
0000449A 7000                       		moveq	#0,d0
0000449C 1038 FE60                  		move.b	($FFFFFE60).w,d0
000044A0 E248                       		lsr.w	#1,d0
000044A2 D078 F648                  		add.w	($FFFFF648).w,d0
000044A6 31C0 F646                  		move.w	d0,($FFFFF646).w
000044AA 3038 F646                  		move.w	($FFFFF646).w,d0
000044AE 9078 F704                  		sub.w	($FFFFF704).w,d0
000044B2 6400                       		bcc.s	loc_3C1A
000044B4 4A40                       		tst.w	d0
000044B6 6A00                       		bpl.s	loc_3C1A
000044B8 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
000044BE 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
000044C4                            
000044C4                            loc_3C1A:
000044C4 0C40 00DF                  		cmpi.w	#$DF,d0
000044C8 6500                       		bcs.s	loc_3C24
000044CA 303C 00DF                  		move.w	#$DF,d0
000044CE                            
000044CE                            loc_3C24:
000044CE 11C0 F625                  		move.b	d0,($FFFFF625).w
000044D2                            
000044D2                            locret_3C28:
000044D2 4E75                       		rts	
000044D4                            ; ===========================================================================
000044D4                            ; ---------------------------------------------------------------------------
000044D4                            ; Labyrinth default water heights
000044D4                            ; ---------------------------------------------------------------------------
000044D4                            WaterHeight:	incbin	misc\lz_heigh.bin
000044DC                            		even
000044DC                            ; ===========================================================================
000044DC                            
000044DC                            ; ---------------------------------------------------------------------------
000044DC                            ; Labyrinth dynamic water routines
000044DC                            ; ---------------------------------------------------------------------------
000044DC                            
000044DC                            LZDynamicWater:				; XREF: LZWaterEffects
000044DC 7000                       		moveq	#0,d0
000044DE 1038 FE11                  		move.b	($FFFFFE11).w,d0
000044E2 D040                       		add.w	d0,d0
000044E4 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
000044E8 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
000044EC 7200                       		moveq	#0,d1
000044EE 1238 F64C                  		move.b	($FFFFF64C).w,d1
000044F2 3038 F64A                  		move.w	($FFFFF64A).w,d0
000044F6 9078 F648                  		sub.w	($FFFFF648).w,d0
000044FA 6700                       		beq.s	locret_3C5A
000044FC 6400                       		bcc.s	loc_3C56
000044FE 4441                       		neg.w	d1
00004500                            
00004500                            loc_3C56:
00004500 D378 F648                  		add.w	d1,($FFFFF648).w
00004504                            
00004504                            locret_3C5A:
00004504 4E75                       		rts	
00004506                            ; ===========================================================================
00004506 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
00004508 0000                       		dc.w DynWater_LZ2-DynWater_Index
0000450A 0000                       		dc.w DynWater_LZ3-DynWater_Index
0000450C 0000                       		dc.w DynWater_SBZ3-DynWater_Index
0000450E                            ; ===========================================================================
0000450E                            
0000450E                            DynWater_LZ1:				; XREF: DynWater_Index
0000450E 3038 F700                  		move.w	($FFFFF700).w,d0
00004512 1438 F64D                  		move.b	($FFFFF64D).w,d2
00004516 6600                       		bne.s	loc_3CD0
00004518 323C 00B8                  		move.w	#$B8,d1
0000451C 0C40 0600                  		cmpi.w	#$600,d0
00004520 6500                       		bcs.s	loc_3CB4
00004522 323C 0108                  		move.w	#$108,d1
00004526 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
0000452C 6500                       		bcs.s	loc_3CBA
0000452E 0C40 0C00                  		cmpi.w	#$C00,d0
00004532 6500                       		bcs.s	loc_3CB4
00004534 323C 0318                  		move.w	#$318,d1
00004538 0C40 1080                  		cmpi.w	#$1080,d0
0000453C 6500                       		bcs.s	loc_3CB4
0000453E 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
00004544 323C 05C8                  		move.w	#$5C8,d1
00004548 0C40 1380                  		cmpi.w	#$1380,d0
0000454C 6500                       		bcs.s	loc_3CB4
0000454E 323C 03A8                  		move.w	#$3A8,d1
00004552 B278 F648                  		cmp.w	($FFFFF648).w,d1
00004556 6600                       		bne.s	loc_3CB4
00004558 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
0000455E                            
0000455E                            loc_3CB4:
0000455E 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004562 4E75                       		rts	
00004564                            ; ===========================================================================
00004564                            
00004564                            loc_3CBA:				; XREF: DynWater_LZ1
00004564 0C40 0C80                  		cmpi.w	#$C80,d0
00004568 65F4                       		bcs.s	loc_3CB4
0000456A 323C 00E8                  		move.w	#$E8,d1
0000456E 0C40 1500                  		cmpi.w	#$1500,d0
00004572 65EA                       		bcs.s	loc_3CB4
00004574 323C 0108                  		move.w	#$108,d1
00004578 60E4                       		bra.s	loc_3CB4
0000457A                            ; ===========================================================================
0000457A                            
0000457A                            loc_3CD0:				; XREF: DynWater_LZ1
0000457A 5302                       		subq.b	#1,d2
0000457C 6600                       		bne.s	locret_3CF4
0000457E 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
00004584 6400                       		bcc.s	locret_3CF4
00004586 323C 03A8                  		move.w	#$3A8,d1
0000458A 0C40 1300                  		cmpi.w	#$1300,d0
0000458E 6500                       		bcs.s	loc_3CF0
00004590 323C 0108                  		move.w	#$108,d1
00004594 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
0000459A                            
0000459A                            loc_3CF0:
0000459A 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000459E                            
0000459E                            locret_3CF4:
0000459E 4E75                       		rts	
000045A0                            ; ===========================================================================
000045A0                            
000045A0                            DynWater_LZ2:				; XREF: DynWater_Index
000045A0 3038 F700                  		move.w	($FFFFF700).w,d0
000045A4 323C 0328                  		move.w	#$328,d1
000045A8 0C40 0500                  		cmpi.w	#$500,d0
000045AC 6500                       		bcs.s	loc_3D12
000045AE 323C 03C8                  		move.w	#$3C8,d1
000045B2 0C40 0B00                  		cmpi.w	#$B00,d0
000045B6 6500                       		bcs.s	loc_3D12
000045B8 323C 0428                  		move.w	#$428,d1
000045BC                            
000045BC                            loc_3D12:
000045BC 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000045C0 4E75                       		rts	
000045C2                            ; ===========================================================================
000045C2                            
000045C2                            DynWater_LZ3:				; XREF: DynWater_Index
000045C2 3038 F700                  		move.w	($FFFFF700).w,d0
000045C6 1438 F64D                  		move.b	($FFFFF64D).w,d2
000045CA 6600                       		bne.s	loc_3D5E
000045CC 323C 0900                  		move.w	#$900,d1
000045D0 0C40 0600                  		cmpi.w	#$600,d0
000045D4 6500                       		bcs.s	loc_3D54
000045D6 0C78 03C0 D00C             		cmpi.w	#$3C0,($FFFFD00C).w
000045DC 6500                       		bcs.s	loc_3D54
000045DE 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
000045E4 6400                       		bcc.s	loc_3D54
000045E6 323C 04C8                  		move.w	#$4C8,d1
000045EA 11FC 004B A506             		move.b	#$4B,($FFFFA506).w ; change level layout
000045F0 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
000045F6 303C 00B7                  		move.w	#$B7,d0
000045FA 6100 CD30                  		bsr.w	PlaySound_Special ; play sound $B7 (rumbling)
000045FE                            
000045FE                            loc_3D54:
000045FE 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004602 31C1 F648                  		move.w	d1,($FFFFF648).w
00004606 4E75                       		rts	
00004608                            ; ===========================================================================
00004608                            
00004608                            loc_3D5E:				; XREF: DynWater_LZ3
00004608 5302                       		subq.b	#1,d2
0000460A 6600                       		bne.s	loc_3DA8
0000460C 323C 04C8                  		move.w	#$4C8,d1
00004610 0C40 0770                  		cmpi.w	#$770,d0
00004614 6500                       		bcs.s	loc_3DA2
00004616 323C 0308                  		move.w	#$308,d1
0000461A 0C40 1400                  		cmpi.w	#$1400,d0
0000461E 6500                       		bcs.s	loc_3DA2
00004620 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
00004626 6700                       		beq.s	loc_3D8E
00004628 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
0000462E 6400                       		bcc.s	loc_3D8E
00004630 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
00004636 6400                       		bcc.s	loc_3DA2
00004638                            
00004638                            loc_3D8E:
00004638 323C 0508                  		move.w	#$508,d1
0000463C 31C1 F648                  		move.w	d1,($FFFFF648).w
00004640 0C40 1770                  		cmpi.w	#$1770,d0
00004644 6500                       		bcs.s	loc_3DA2
00004646 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
0000464C                            
0000464C                            loc_3DA2:
0000464C 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004650 4E75                       		rts	
00004652                            ; ===========================================================================
00004652                            
00004652                            loc_3DA8:
00004652 5302                       		subq.b	#1,d2
00004654 6600                       		bne.s	loc_3DD2
00004656 323C 0508                  		move.w	#$508,d1
0000465A 0C40 1860                  		cmpi.w	#$1860,d0
0000465E 6500                       		bcs.s	loc_3DCC
00004660 323C 0188                  		move.w	#$188,d1
00004664 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004668 6400                       		bcc.s	loc_3DC6
0000466A B278 F648                  		cmp.w	($FFFFF648).w,d1
0000466E 6600                       		bne.s	loc_3DCC
00004670                            
00004670                            loc_3DC6:
00004670 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
00004676                            
00004676                            loc_3DCC:
00004676 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000467A 4E75                       		rts	
0000467C                            ; ===========================================================================
0000467C                            
0000467C                            loc_3DD2:
0000467C 5302                       		subq.b	#1,d2
0000467E 6600                       		bne.s	loc_3E0E
00004680 323C 0188                  		move.w	#$188,d1
00004684 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004688 6500                       		bcs.s	loc_3E04
0000468A 323C 0900                  		move.w	#$900,d1
0000468E 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00004692 6500                       		bcs.s	loc_3E04
00004694 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
0000469A 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
000046A0 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
000046A6 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
000046AC 4E75                       		rts	
000046AE                            ; ===========================================================================
000046AE                            
000046AE                            loc_3E04:
000046AE 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000046B2 31C1 F648                  		move.w	d1,($FFFFF648).w
000046B6 4E75                       		rts	
000046B8                            ; ===========================================================================
000046B8                            
000046B8                            loc_3E0E:
000046B8 0C40 1E00                  		cmpi.w	#$1E00,d0
000046BC 6500                       		bcs.s	locret_3E1A
000046BE 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
000046C4                            
000046C4                            locret_3E1A:
000046C4 4E75                       		rts	
000046C6                            ; ===========================================================================
000046C6                            
000046C6                            DynWater_SBZ3:				; XREF: DynWater_Index
000046C6 323C 0228                  		move.w	#$228,d1
000046CA 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
000046D0 6500                       		bcs.s	loc_3E2C
000046D2 323C 04C8                  		move.w	#$4C8,d1
000046D6                            
000046D6                            loc_3E2C:
000046D6 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000046DA 4E75                       		rts
000046DC                            
000046DC                            ; ---------------------------------------------------------------------------
000046DC                            ; Labyrinth Zone "wind tunnels"	subroutine
000046DC                            ; ---------------------------------------------------------------------------
000046DC                            
000046DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000046DC                            
000046DC                            
000046DC                            LZWindTunnels:				; XREF: LZWaterEffects
000046DC 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000046E0 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
000046E4 45F9 0000 0000             		lea	(LZWind_Data).l,a2
000046EA 7000                       		moveq	#0,d0
000046EC 1038 FE11                  		move.b	($FFFFFE11).w,d0
000046F0 E748                       		lsl.w	#3,d0
000046F2 D4C0                       		adda.w	d0,a2
000046F4 7200                       		moveq	#0,d1
000046F6 4A38 FE11                  		tst.b	($FFFFFE11).w
000046FA 6600                       		bne.s	loc_3E56
000046FC 7201                       		moveq	#1,d1
000046FE 514A                       		subq.w	#8,a2
00004700                            
00004700                            loc_3E56:
00004700 43F8 D000                  		lea	($FFFFD000).w,a1
00004704                            
00004704                            LZWind_Loop:
00004704 3029 0008                  		move.w	8(a1),d0
00004708 B052                       		cmp.w	(a2),d0
0000470A 6500 0000                  		bcs.w	loc_3EF4
0000470E B06A 0004                  		cmp.w	4(a2),d0
00004712 6400 0000                  		bcc.w	loc_3EF4
00004716 3429 000C                  		move.w	$C(a1),d2
0000471A B46A 0002                  		cmp.w	2(a2),d2
0000471E 6500                       		bcs.s	loc_3EF4
00004720 B46A 0006                  		cmp.w	6(a2),d2
00004724 6400                       		bcc.s	loc_3EF4
00004726 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000472A 0200 003F                  		andi.b	#$3F,d0
0000472E 6600                       		bne.s	loc_3E90
00004730 303C 00D0                  		move.w	#$D0,d0
00004734 4EB9 0000 132C             		jsr	(PlaySound_Special).l ;	play rushing water sound
0000473A                            
0000473A                            loc_3E90:
0000473A 4A38 F7C9                  		tst.b	($FFFFF7C9).w
0000473E 6600 0000                  		bne.w	locret_3F0A
00004742 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00004748 6400                       		bcc.s	loc_3F06
0000474A 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
00004750 0440 0080                  		subi.w	#$80,d0
00004754 B052                       		cmp.w	(a2),d0
00004756 6400                       		bcc.s	LZWind_Move
00004758 7002                       		moveq	#2,d0
0000475A 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
00004760 6600                       		bne.s	loc_3EBA
00004762 4440                       		neg.w	d0
00004764                            
00004764                            loc_3EBA:
00004764 D169 000C                  		add.w	d0,$C(a1)
00004768                            
00004768                            LZWind_Move:
00004768 5869 0008                  		addq.w	#4,8(a1)
0000476C 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
00004772 337C 0000 0012             		move.w	#0,$12(a1)
00004778 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
0000477E 08E9 0001 0022             		bset	#1,$22(a1)
00004784 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
0000478A 6700                       		beq.s	LZWind_MoveDown	; if not, branch
0000478C 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00004790                            
00004790                            LZWind_MoveDown:
00004790 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00004796 6700                       		beq.s	locret_3EF2	; if not, branch
00004798 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
0000479C                            
0000479C                            locret_3EF2:
0000479C 4E75                       		rts	
0000479E                            ; ===========================================================================
0000479E                            
0000479E                            loc_3EF4:				; XREF: LZWindTunnels
0000479E 504A                       		addq.w	#8,a2
000047A0 51C9 FF62                  		dbf	d1,LZWind_Loop
000047A4 4A38 F7C7                  		tst.b	($FFFFF7C7).w
000047A8 6700                       		beq.s	locret_3F0A
000047AA 137C 0000 001C             		move.b	#0,$1C(a1)
000047B0                            
000047B0                            loc_3F06:
000047B0 4238 F7C7                  		clr.b	($FFFFF7C7).w
000047B4                            
000047B4                            locret_3F0A:
000047B4 4E75                       		rts	
000047B6                            ; End of function LZWindTunnels
000047B6                            
000047B6                            ; ===========================================================================
000047B6 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
000047BE 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
000047D0 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
000047DE                            					; XREF: LZWindTunnels
000047DE                            		even
000047DE                            
000047DE                            ; ---------------------------------------------------------------------------
000047DE                            ; Labyrinth Zone water slide subroutine
000047DE                            ; ---------------------------------------------------------------------------
000047DE                            
000047DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000047DE                            
000047DE                            
000047DE                            LZWaterSlides:				; XREF: LZWaterEffects
000047DE 43F8 D000                  		lea	($FFFFD000).w,a1
000047E2 0829 0001 0022             		btst	#1,$22(a1)
000047E8 6600                       		bne.s	loc_3F6A
000047EA 3029 000C                  		move.w	$C(a1),d0
000047EE E248                       		lsr.w	#1,d0
000047F0 0240 0380                  		andi.w	#$380,d0
000047F4 1229 0008                  		move.b	8(a1),d1
000047F8 0241 007F                  		andi.w	#$7F,d1
000047FC D041                       		add.w	d1,d0
000047FE 45F8 A400                  		lea	($FFFFA400).w,a2
00004802 1032 0000                  		move.b	(a2,d0.w),d0
00004806 45FA 0000                  		lea	byte_3FCF(pc),a2
0000480A 7206                       		moveq	#6,d1
0000480C                            
0000480C                            loc_3F62:
0000480C B022                       		cmp.b	-(a2),d0
0000480E 57C9 FFFC                  		dbeq	d1,loc_3F62
00004812 6700                       		beq.s	LZSlide_Move
00004814                            
00004814                            loc_3F6A:
00004814 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00004818 6700                       		beq.s	locret_3F7A
0000481A 337C 0005 003E             		move.w	#5,$3E(a1)
00004820 4238 F7CA                  		clr.b	($FFFFF7CA).w
00004824                            
00004824                            locret_3F7A:
00004824 4E75                       		rts	
00004826                            ; ===========================================================================
00004826                            
00004826                            LZSlide_Move:				; XREF: LZWaterSlides
00004826 0C41 0003                  		cmpi.w	#3,d1
0000482A 6400                       		bcc.s	loc_3F84
0000482C 4E71                       		nop	
0000482E                            
0000482E                            loc_3F84:
0000482E 08A9 0000 0022             		bclr	#0,$22(a1)
00004834 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
00004838 1340 0014                  		move.b	d0,$14(a1)
0000483C 6A00                       		bpl.s	loc_3F9A
0000483E 08E9 0000 0022             		bset	#0,$22(a1)
00004844                            
00004844                            loc_3F9A:
00004844 4229 0015                  		clr.b	$15(a1)
00004848 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
0000484E 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
00004854 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00004858 0200 001F                  		andi.b	#$1F,d0
0000485C 6600                       		bne.s	locret_3FBE
0000485E 303C 00D0                  		move.w	#$D0,d0
00004862 4EB9 0000 132C             		jsr	(PlaySound_Special).l ;	play water sound
00004868                            
00004868                            locret_3FBE:
00004868 4E75                       		rts	
0000486A                            ; End of function LZWaterSlides
0000486A                            
0000486A                            ; ===========================================================================
0000486A 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
00004879 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
0000487A                            		even
0000487A                            
0000487A                            ; ---------------------------------------------------------------------------
0000487A                            ; Subroutine to	move Sonic in demo mode
0000487A                            ; ---------------------------------------------------------------------------
0000487A                            
0000487A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000487A                            
0000487A                            
0000487A                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
0000487A 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000487E 6600                       		bne.s	MoveDemo_On	; if yes, branch
00004880 4E75                       		rts	
00004882                            ; ===========================================================================
00004882                            
00004882                            ; This is an unused subroutine for recording a demo
00004882                            
00004882                            MoveDemo_Record:
00004882 43F9 0008 0000             		lea	($80000).l,a1
00004888 3038 F790                  		move.w	($FFFFF790).w,d0
0000488C D2C0                       		adda.w	d0,a1
0000488E 1038 F604                  		move.b	($FFFFF604).w,d0
00004892 B011                       		cmp.b	(a1),d0
00004894 6600                       		bne.s	loc_3FFA
00004896 5229 0001                  		addq.b	#1,1(a1)
0000489A 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
000048A0 6700                       		beq.s	loc_3FFA
000048A2 4E75                       		rts	
000048A4                            ; ===========================================================================
000048A4                            
000048A4                            loc_3FFA:				; XREF: MoveDemo_Record
000048A4 1340 0002                  		move.b	d0,2(a1)
000048A8 137C 0000 0003             		move.b	#0,3(a1)
000048AE 5478 F790                  		addq.w	#2,($FFFFF790).w
000048B2 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
000048B8 4E75                       		rts	
000048BA                            ; ===========================================================================
000048BA                            
000048BA                            MoveDemo_On:				; XREF: MoveSonicInDemo
000048BA 4A38 F604                  		tst.b	($FFFFF604).w
000048BE 6A00                       		bpl.s	loc_4022
000048C0 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000048C4 6B00                       		bmi.s	loc_4022
000048C6 11FC 0004 F600             		move.b	#4,($FFFFF600).w
000048CC                            
000048CC                            loc_4022:
000048CC 43F9 0000 0000             		lea	(Demo_Index).l,a1
000048D2 7000                       		moveq	#0,d0
000048D4 1038 FE10                  		move.b	($FFFFFE10).w,d0
000048D8 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
000048DE 6600                       		bne.s	loc_4038
000048E0 7006                       		moveq	#6,d0
000048E2                            
000048E2                            loc_4038:
000048E2 E548                       		lsl.w	#2,d0
000048E4 2271 0000                  		movea.l	(a1,d0.w),a1
000048E8 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000048EC 6A00                       		bpl.s	loc_4056
000048EE 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
000048F4 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000048F8 5340                       		subq.w	#1,d0
000048FA E548                       		lsl.w	#2,d0
000048FC 2271 0000                  		movea.l	(a1,d0.w),a1
00004900                            
00004900                            loc_4056:
00004900 3038 F790                  		move.w	($FFFFF790).w,d0
00004904 D2C0                       		adda.w	d0,a1
00004906 1011                       		move.b	(a1),d0
00004908 41F8 F604                  		lea	($FFFFF604).w,a0
0000490C 1200                       		move.b	d0,d1
0000490E 1428 FFFE                  		move.b	-2(a0),d2
00004912 B500                       		eor.b	d2,d0
00004914 10C1                       		move.b	d1,(a0)+
00004916 C001                       		and.b	d1,d0
00004918 10C0                       		move.b	d0,(a0)+
0000491A 5338 F792                  		subq.b	#1,($FFFFF792).w
0000491E 6400                       		bcc.s	locret_407E
00004920 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
00004926 5478 F790                  		addq.w	#2,($FFFFF790).w
0000492A                            
0000492A                            locret_407E:
0000492A 4E75                       		rts	
0000492C                            ; End of function MoveSonicInDemo
0000492C                            
0000492C                            ; ===========================================================================
0000492C                            ; ---------------------------------------------------------------------------
0000492C                            ; Demo sequence	pointers
0000492C                            ; ---------------------------------------------------------------------------
0000492C                            Demo_Index:
0000492C                            	include "_inc\Demo pointers for intro.asm"
0000492C                            ; ---------------------------------------------------------------------------
0000492C                            ; Demo sequence	pointers
0000492C                            ; ---------------------------------------------------------------------------
0000492C 0000 0000                  	dc.l Demo_GHZ
00004930 0000 0000                  	dc.l Demo_GHZ
00004934 0000 0000                  	dc.l Demo_MZ
00004938 0000 0000                  	dc.l Demo_MZ
0000493C 0000 0000                  	dc.l Demo_SYZ
00004940 0000 0000                  	dc.l Demo_SYZ
00004944 0000 0000                  	dc.l Demo_SS
00004948 0000 0000                  	dc.l Demo_SS
00004948 0000 0000                  	dc.l Demo_SS
0000494C                            
0000494C                            Demo_EndIndex:
0000494C                            	include "_inc\Demo pointers for ending.asm"
0000494C                            ; ---------------------------------------------------------------------------
0000494C                            ; Demo (ending) sequence pointers
0000494C                            ; ---------------------------------------------------------------------------
0000494C 0000 0000                  	dc.l Demo_EndGHZ1
00004950 0000 0000                  	dc.l Demo_EndMZ
00004954 0000 0000                  	dc.l Demo_EndSYZ
00004958 0000 0000                  	dc.l Demo_EndLZ
0000495C 0000 0000                  	dc.l Demo_EndSLZ
00004960 0000 0000                  	dc.l Demo_EndSBZ1
00004964 0000 0000                  	dc.l Demo_EndSBZ2
00004968 0000 0000                  	dc.l Demo_EndGHZ2
00004968 0000 0000                  	dc.l Demo_EndGHZ2
0000496C                            
0000496C 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
0000497C 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
0000498C 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
0000499C                            		even
0000499C                            
0000499C                            ; ---------------------------------------------------------------------------
0000499C                            ; Collision index loading subroutine
0000499C                            ; ---------------------------------------------------------------------------
0000499C                            
0000499C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000499C                            
0000499C                            
0000499C                            ColIndexLoad:				; XREF: Level
0000499C 7000                       		moveq	#0,d0
0000499E 1038 FE10                  		move.b	($FFFFFE10).w,d0
000049A2 E548                       		lsl.w	#2,d0
000049A4 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
000049AA 4E75                       		rts	
000049AC                            ; End of function ColIndexLoad
000049AC                            
000049AC                            ; ===========================================================================
000049AC                            ; ---------------------------------------------------------------------------
000049AC                            ; Collision index pointers
000049AC                            ; ---------------------------------------------------------------------------
000049AC                            ColPointers:
000049AC                            	include "_inc\Collision index pointers.asm"
000049AC                            ; ---------------------------------------------------------------------------
000049AC                            ; Collision index pointers
000049AC                            ; ---------------------------------------------------------------------------
000049AC 0000 0000                  	dc.l Col_GHZ
000049B0 0000 0000                  	dc.l Col_LZ
000049B4 0000 0000                  	dc.l Col_MZ
000049B8 0000 0000                  	dc.l Col_SLZ
000049BC 0000 0000                  	dc.l Col_SYZ
000049C0 0000 0000                  	dc.l Col_SBZ
000049C0 0000 0000                  	dc.l Col_SBZ
000049C4                            
000049C4                            ; ---------------------------------------------------------------------------
000049C4                            ; Oscillating number subroutine
000049C4                            ; ---------------------------------------------------------------------------
000049C4                            
000049C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000049C4                            
000049C4                            
000049C4                            OscillateNumInit:			; XREF: Level
000049C4 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
000049C8 45F9 0000 0000             		lea	(Osc_Data).l,a2
000049CE 7220                       		moveq	#$20,d1
000049D0                            
000049D0                            Osc_Loop:
000049D0 32DA                       		move.w	(a2)+,(a1)+
000049D2 51C9 FFFC                  		dbf	d1,Osc_Loop
000049D6 4E75                       		rts	
000049D8                            ; End of function OscillateNumInit
000049D8                            
000049D8                            ; ===========================================================================
000049D8 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
000049DC 0000 0080                  		dc.w 0,	$80
000049E0 0000 0080                  		dc.w 0,	$80
000049E4 0000 0080                  		dc.w 0,	$80
000049E8 0000 0080                  		dc.w 0,	$80
000049EC 0000 0080                  		dc.w 0,	$80
000049F0 0000 0080                  		dc.w 0,	$80
000049F4 0000 0080                  		dc.w 0,	$80
000049F8 0000 0080                  		dc.w 0,	$80
000049FC 0000 50F0                  		dc.w 0,	$50F0
00004A00 011E 2080                  		dc.w $11E, $2080
00004A04 00B4 3080                  		dc.w $B4, $3080
00004A08 010E 5080                  		dc.w $10E, $5080
00004A0C 01C2 7080                  		dc.w $1C2, $7080
00004A10 0276 0080                  		dc.w $276, $80
00004A14 0000 0080                  		dc.w 0,	$80
00004A18 0000                       		dc.w 0
00004A1A                            		even
00004A1A                            
00004A1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004A1A                            
00004A1A                            
00004A1A                            OscillateNumDo:				; XREF: Level
00004A1A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004A20 6400                       		bcc.s	locret_41C4
00004A22 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00004A26 45F9 0000 0000             		lea	(Osc_Data2).l,a2
00004A2C 3619                       		move.w	(a1)+,d3
00004A2E 720F                       		moveq	#$F,d1
00004A30                            
00004A30                            loc_4184:
00004A30 341A                       		move.w	(a2)+,d2
00004A32 381A                       		move.w	(a2)+,d4
00004A34 0303                       		btst	d1,d3
00004A36 6600                       		bne.s	loc_41A4
00004A38 3029 0002                  		move.w	2(a1),d0
00004A3C D042                       		add.w	d2,d0
00004A3E 3340 0002                  		move.w	d0,2(a1)
00004A42 D169 0000                  		add.w	d0,0(a1)
00004A46 B829 0000                  		cmp.b	0(a1),d4
00004A4A 6200                       		bhi.s	loc_41BA
00004A4C 03C3                       		bset	d1,d3
00004A4E 6000                       		bra.s	loc_41BA
00004A50                            ; ===========================================================================
00004A50                            
00004A50                            loc_41A4:				; XREF: OscillateNumDo
00004A50 3029 0002                  		move.w	2(a1),d0
00004A54 9042                       		sub.w	d2,d0
00004A56 3340 0002                  		move.w	d0,2(a1)
00004A5A D169 0000                  		add.w	d0,0(a1)
00004A5E B829 0000                  		cmp.b	0(a1),d4
00004A62 6300                       		bls.s	loc_41BA
00004A64 0383                       		bclr	d1,d3
00004A66                            
00004A66                            loc_41BA:
00004A66 5849                       		addq.w	#4,a1
00004A68 51C9 FFC6                  		dbf	d1,loc_4184
00004A6C 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
00004A70                            
00004A70                            locret_41C4:
00004A70 4E75                       		rts	
00004A72                            ; End of function OscillateNumDo
00004A72                            
00004A72                            ; ===========================================================================
00004A72 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
00004A76 0002 0018                  		dc.w 2,	$18
00004A7A 0002 0020                  		dc.w 2,	$20
00004A7E 0002 0030                  		dc.w 2,	$30
00004A82 0004 0020                  		dc.w 4,	$20
00004A86 0008 0008                  		dc.w 8,	8
00004A8A 0008 0040                  		dc.w 8,	$40
00004A8E 0004 0040                  		dc.w 4,	$40
00004A92 0002 0050                  		dc.w 2,	$50
00004A96 0002 0050                  		dc.w 2,	$50
00004A9A 0002 0020                  		dc.w 2,	$20
00004A9E 0003 0030                  		dc.w 3,	$30
00004AA2 0005 0050                  		dc.w 5,	$50
00004AA6 0007 0070                  		dc.w 7,	$70
00004AAA 0002 0010                  		dc.w 2,	$10
00004AAE 0002 0010                  		dc.w 2,	$10
00004AB2                            		even
00004AB2                            
00004AB2                            ; ---------------------------------------------------------------------------
00004AB2                            ; Subroutine to	change object animation	variables (rings, giant	rings)
00004AB2                            ; ---------------------------------------------------------------------------
00004AB2                            
00004AB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004AB2                            
00004AB2                            
00004AB2                            ChangeRingFrame:			; XREF: Level
00004AB2 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
00004AB6 6A00                       		bpl.s	loc_421C
00004AB8 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
00004ABE 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
00004AC2 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
00004AC8                            
00004AC8                            loc_421C:
00004AC8 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
00004ACC 6A00                       		bpl.s	loc_4232
00004ACE 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
00004AD4 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
00004AD8 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
00004ADE                            
00004ADE                            loc_4232:
00004ADE 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
00004AE2 6A00                       		bpl.s	loc_4250
00004AE4 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
00004AEA 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
00004AEE 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
00004AF4 6500                       		bcs.s	loc_4250
00004AF6 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
00004AFC                            
00004AFC                            loc_4250:
00004AFC 4A38 FEC6                  		tst.b	($FFFFFEC6).w
00004B00 6700                       		beq.s	locret_4272
00004B02 7000                       		moveq	#0,d0
00004B04 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
00004B08 D078 FEC8                  		add.w	($FFFFFEC8).w,d0
00004B0C 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
00004B10 EF58                       		rol.w	#7,d0
00004B12 0240 0003                  		andi.w	#3,d0
00004B16 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
00004B1A 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
00004B1E                            
00004B1E                            locret_4272:
00004B1E 4E75                       		rts	
00004B20                            ; End of function ChangeRingFrame
00004B20                            
00004B20                            ; ---------------------------------------------------------------------------
00004B20                            ; End-of-act signpost pattern loading subroutine
00004B20                            ; ---------------------------------------------------------------------------
00004B20                            
00004B20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004B20                            
00004B20                            
00004B20                            SignpostArtLoad:			; XREF: Level
00004B20 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00004B24 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
00004B28 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
00004B2E 6700                       		beq.s	Signpost_Exit	; if yes, branch
00004B30 3038 F700                  		move.w	($FFFFF700).w,d0
00004B34 3238 F72A                  		move.w	($FFFFF72A).w,d1
00004B38 0441 0100                  		subi.w	#$100,d1
00004B3C B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
00004B3E 6D00                       		blt.s	Signpost_Exit	; if not, branch
00004B40 4A38 FE1E                  		tst.b	($FFFFFE1E).w
00004B44 6700                       		beq.s	Signpost_Exit
00004B46 B278 F728                  		cmp.w	($FFFFF728).w,d1
00004B4A 6700                       		beq.s	Signpost_Exit
00004B4C 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
00004B50 7012                       		moveq	#$12,d0
00004B52 6000 CA10                  		bra.w	LoadPLC2	; load signpost	patterns
00004B56                            ; ===========================================================================
00004B56                            
00004B56                            Signpost_Exit:
00004B56 4E75                       		rts	
00004B58                            ; End of function SignpostArtLoad
00004B58                            
00004B58                            ; ===========================================================================
00004B58                            Demo_GHZ:	incbin	demodata\i_ghz.bin
00004BD8                            Demo_MZ:	incbin	demodata\i_mz.bin
00004D08                            Demo_SYZ:	incbin	demodata\i_syz.bin
00004D88                            Demo_SS:	incbin	demodata\i_ss.bin
00004E88                            ; ===========================================================================
00004E88                            
00004E88                            ; ---------------------------------------------------------------------------
00004E88                            ; Special Stage
00004E88                            ; ---------------------------------------------------------------------------
00004E88                            
00004E88                            SpecialStage:				; XREF: GameModeArray
00004E88 303C 00CA                  		move.w	#$CA,d0
00004E8C 6100 C49E                  		bsr.w	PlaySound_Special ; play special stage entry sound
00004E90 6100 D234                  		bsr.w	Pal_MakeFlash
00004E94 46FC 2700                  		move	#$2700,sr
00004E98 4DF9 00C0 0004             		lea	($C00004).l,a6
00004E9E 3CBC 8B03                  		move.w	#$8B03,(a6)
00004EA2 3CBC 8004                  		move.w	#$8004,(a6)
00004EA6 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
00004EAC 3CBC 9011                  		move.w	#$9011,(a6)
00004EB0 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004EB4 0200 00BF                  		andi.b	#$BF,d0
00004EB8 33C0 00C0 0004             		move.w	d0,($C00004).l
00004EBE 6100 C370                  		bsr.w	ClearScreen
00004EC2 46FC 2300                  		move	#$2300,sr
00004EC6 4BF9 00C0 0004             		lea	($C00004).l,a5
00004ECC 3ABC 8F01                  		move.w	#$8F01,(a5)
00004ED0 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
00004ED6 3ABC 9780                  		move.w	#$9780,(a5)
00004EDA 2ABC 5000 0081             		move.l	#$50000081,(a5)
00004EE0 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00004EE8                            
00004EE8                            loc_463C:
00004EE8 3215                       		move.w	(a5),d1
00004EEA 0801 0001                  		btst	#1,d1
00004EEE 66F8                       		bne.s	loc_463C
00004EF0 3ABC 8F02                  		move.w	#$8F02,(a5)
00004EF4 6100 0000                  		bsr.w	SS_BGLoad
00004EF8 7014                       		moveq	#$14,d0
00004EFA 6100 C7A2                  		bsr.w	RunPLC_ROM	; load special stage patterns
00004EFE 43F8 D000                  		lea	($FFFFD000).w,a1
00004F02 7000                       		moveq	#0,d0
00004F04 323C 07FF                  		move.w	#$7FF,d1
00004F08                            
00004F08                            SS_ClrObjRam:
00004F08 22C0                       		move.l	d0,(a1)+
00004F0A 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
00004F0E                            
00004F0E 43F8 F700                  		lea	($FFFFF700).w,a1
00004F12 7000                       		moveq	#0,d0
00004F14 323C 003F                  		move.w	#$3F,d1
00004F18                            
00004F18                            SS_ClrRam:
00004F18 22C0                       		move.l	d0,(a1)+
00004F1A 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
00004F1E                            
00004F1E 43F8 FE60                  		lea	($FFFFFE60).w,a1
00004F22 7000                       		moveq	#0,d0
00004F24 323C 0027                  		move.w	#$27,d1
00004F28                            
00004F28                            SS_ClrRam2:
00004F28 22C0                       		move.l	d0,(a1)+
00004F2A 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
00004F2E                            
00004F2E 43F8 AA00                  		lea	($FFFFAA00).w,a1
00004F32 7000                       		moveq	#0,d0
00004F34 323C 007F                  		move.w	#$7F,d1
00004F38                            
00004F38                            SS_ClrNemRam:
00004F38 22C0                       		move.l	d0,(a1)+
00004F3A 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
00004F3E                            
00004F3E 4238 F64E                  		clr.b	($FFFFF64E).w
00004F42 4278 FE02                  		clr.w	($FFFFFE02).w
00004F46 700A                       		moveq	#$A,d0
00004F48 6100 D2FC                  		bsr.w	PalLoad1	; load special stage Palette
00004F4C 4EB9 0000 0000             		jsr	SS_Load
00004F52 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
00004F5A 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
00004F62 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
00004F68 6100 0000                  		bsr.w	PalCycle_SS
00004F6C 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
00004F70 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set stage rotation	speed 40
00004F76 7000                       		moveq	#0,d0
00004F78 1038 FE16                  		move.b	($FFFFFE16).w,d0
00004F7C 0C00 0000                  		cmpi.b	#$0,d0
00004F80 6600                       		bne.b SS_Num_Not_Zero
00004F82 103C 0006                  		move.b	#$6,d0
00004F86                            
00004F86                            SS_Num_Not_Zero:
00004F86 0440 0001                  		subi.w	#$1,d0
00004F8A                            
00004F8A 43F9 0000 400E             		lea	(MusicList5).l,a1 ; load Music Playlist for Special Stages
00004F90 1031 0000                  		move.b	(a1,d0.w),d0 ; get d0-th entry from the playlist
00004F94 6100 C390                  		bsr.w	PlaySound	; play special stage BG	music
00004F98 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00004F9E 43F9 0000 492C             		lea	(Demo_Index).l,a1
00004FA4 7006                       		moveq	#6,d0
00004FA6 E548                       		lsl.w	#2,d0
00004FA8 2271 0000                  		movea.l	(a1,d0.w),a1
00004FAC 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
00004FB2 5338 F792                  		subq.b	#1,($FFFFF792).w
00004FB6 4278 FE20                  		clr.w	($FFFFFE20).w
00004FBA 4238 FE1B                  		clr.b	($FFFFFE1B).w
00004FBE 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
00004FC4 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00004FCA 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00004FCE 6700                       		beq.s	SS_NoDebug	; if not, branch
00004FD0 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00004FD6 6700                       		beq.s	SS_NoDebug	; if not, branch
00004FD8 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00004FDE                            
00004FDE                            SS_NoDebug:
00004FDE 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004FE2 0000 0040                  		ori.b	#$40,d0
00004FE6 33C0 00C0 0004             		move.w	d0,($C00004).l
00004FEC 6100 D02C                  		bsr.w	Pal_MakeWhite
00004FF0                            
00004FF0                            ; ---------------------------------------------------------------------------
00004FF0                            ; Main Special Stage loop
00004FF0                            ; ---------------------------------------------------------------------------
00004FF0                            
00004FF0                            SS_MainLoop:
00004FF0 6100 C346                  		bsr.w	PauseGame
00004FF4 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
00004FFA 6100 E246                  		bsr.w	DelayProgram
00004FFE 6100 F87A                  		bsr.w	MoveSonicInDemo
00005002 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00005008 4EB9 0000 0000             		jsr	ObjectsLoad
0000500E 4EB9 0000 0000             		jsr	BuildSprites
00005014 4EB9 0000 0000             		jsr	SS_ShowLayout
0000501A 6100 0000                  		bsr.w	SS_BGAnimate
0000501E 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00005022 6700                       		beq.s	SS_ChkEnd	; if not, branch
00005024 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00005028 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
0000502C                            
0000502C                            SS_ChkEnd:
0000502C 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
00005032 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
00005036                            
00005036 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000503A 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
0000503E 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00005044 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
0000504A 6500                       		bcs.s	SS_End		; if not, branch
0000504C 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
00005050                            
00005050                            SS_End:
00005050 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
00005056 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000505C 4278 F794                  		clr.w	($FFFFF794).w
00005060                            
00005060                            SS_EndLoop:
00005060 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00005066 6100 E1DA                  		bsr.w	DelayProgram
0000506A 6100 F80E                  		bsr.w	MoveSonicInDemo
0000506E 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00005074 4EB9 0000 0000             		jsr	ObjectsLoad
0000507A 4EB9 0000 0000             		jsr	BuildSprites
00005080 4EB9 0000 0000             		jsr	SS_ShowLayout
00005086 6100 0000                  		bsr.w	SS_BGAnimate
0000508A 5378 F794                  		subq.w	#1,($FFFFF794).w
0000508E 6A00                       		bpl.s	loc_47D4
00005090 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00005096 6100 D04E                  		bsr.w	Pal_ToWhite
0000509A                            
0000509A                            loc_47D4:
0000509A 4A78 F614                  		tst.w	($FFFFF614).w
0000509E 66C0                       		bne.s	SS_EndLoop
000050A0                            
000050A0 46FC 2700                  		move	#$2700,sr
000050A4 4DF9 00C0 0004             		lea	($C00004).l,a6
000050AA 3CBC 8230                  		move.w	#$8230,(a6)
000050AE 3CBC 8407                  		move.w	#$8407,(a6)
000050B2 3CBC 9001                  		move.w	#$9001,(a6)
000050B6 6100 C178                  		bsr.w	ClearScreen
000050BA 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
000050C4 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
000050CA 6100 C30E                  		bsr.w	NemDec
000050CE 4EB9 0000 0000             		jsr	Hud_Base
000050D4 4278 C800                          clr.w	($FFFFC800).w
000050D8 21FC FFFF C800 C8FC        		move.l	#$FFFFC800,($FFFFC8FC).w 
000050E0 46FC 2300                  		move	#$2300,sr
000050E4 7011                       		moveq	#$11,d0
000050E6 6100 D19C                  		bsr.w	PalLoad2	; load results screen Palette
000050EA 7000                       		moveq	#0,d0
000050EC 6100 C476                  		bsr.w	LoadPLC2
000050F0 701B                       		moveq	#$1B,d0
000050F2 6100 C43E                  		bsr.w	LoadPLC		; load results screen patterns
000050F6 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
000050FC 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
00005102 3038 FE20                  		move.w	($FFFFFE20).w,d0
00005106 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
0000510A 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
0000510E 303C 008E                  		move.w	#$8E,d0
00005112 4EB9 0000 132C             		jsr	(PlaySound_Special).l ;	play end-of-level music
00005118 43F8 D000                  		lea	($FFFFD000).w,a1
0000511C 7000                       		moveq	#0,d0
0000511E 323C 07FF                  		move.w	#$7FF,d1
00005122                            
00005122                            SS_EndClrObjRam:
00005122 22C0                       		move.l	d0,(a1)+
00005124 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00005128                            
00005128 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
0000512E                            
0000512E                            SS_NormalExit:
0000512E 6100 C208                  		bsr.w	PauseGame
00005132 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00005138 6100 E108                  		bsr.w	DelayProgram
0000513C 4EB9 0000 0000             		jsr	ObjectsLoad
00005142 4EB9 0000 0000             		jsr	BuildSprites
00005148 6100 C454                  		bsr.w	RunPLC_RAM
0000514C 4A78 FE02                  		tst.w	($FFFFFE02).w
00005150 67DC                       		beq.s	SS_NormalExit
00005152 4AB8 F680                  		tst.l	($FFFFF680).w
00005156 66D6                       		bne.s	SS_NormalExit
00005158 303C 00CA                  		move.w	#$CA,d0
0000515C 6100 C1CE                  		bsr.w	PlaySound_Special ; play special stage exit sound
00005160 6100 CF64                  		bsr.w	Pal_MakeFlash
00005164 4E75                       		rts	
00005166                            ; ===========================================================================
00005166                            
00005166                            SS_ToSegaScreen:
00005166 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
0000516C 4E75                       		rts
0000516E                            
0000516E                            ; ---------------------------------------------------------------------------
0000516E                            ; Special stage	background loading subroutine
0000516E                            ; ---------------------------------------------------------------------------
0000516E                            
0000516E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000516E                            
0000516E                            
0000516E                            SS_BGLoad:				; XREF: SpecialStage
0000516E 43F9 00FF 0000             		lea	($FF0000).l,a1
00005174 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
0000517A 303C 4051                  		move.w	#$4051,d0
0000517E 6100 C550                  		bsr.w	EniDec
00005182 263C 5000 0001             		move.l	#$50000001,d3
00005188 45F9 00FF 0080             		lea	($FF0080).l,a2
0000518E 7E06                       		moveq	#6,d7
00005190                            
00005190                            loc_48BE:
00005190 2003                       		move.l	d3,d0
00005192 7C03                       		moveq	#3,d6
00005194 7800                       		moveq	#0,d4
00005196 0C47 0003                  		cmpi.w	#3,d7
0000519A 6400                       		bcc.s	loc_48CC
0000519C 7801                       		moveq	#1,d4
0000519E                            
0000519E                            loc_48CC:
0000519E 7A07                       		moveq	#7,d5
000051A0                            
000051A0                            loc_48CE:
000051A0 224A                       		movea.l	a2,a1
000051A2 0A04 0001                  		eori.b	#1,d4
000051A6 6600                       		bne.s	loc_48E2
000051A8 0C47 0006                  		cmpi.w	#6,d7
000051AC 6600                       		bne.s	loc_48F2
000051AE 43F9 00FF 0000             		lea	($FF0000).l,a1
000051B4                            
000051B4                            loc_48E2:
000051B4 48E7 F800                  		movem.l	d0-d4,-(sp)
000051B8 7207                       		moveq	#7,d1
000051BA 7407                       		moveq	#7,d2
000051BC 6100 C1F2                  		bsr.w	ShowVDPGraphics
000051C0 4CDF 001F                  		movem.l	(sp)+,d0-d4
000051C4                            
000051C4                            loc_48F2:
000051C4 0680 0010 0000             		addi.l	#$100000,d0
000051CA 51CD FFD4                  		dbf	d5,loc_48CE
000051CE 0680 0380 0000             		addi.l	#$3800000,d0
000051D4 0A04 0001                  		eori.b	#1,d4
000051D8 51CE FFC4                  		dbf	d6,loc_48CC
000051DC 0683 1000 0000             		addi.l	#$10000000,d3
000051E2 6A00                       		bpl.s	loc_491C
000051E4 4843                       		swap	d3
000051E6 0683 0000 C000             		addi.l	#$C000,d3
000051EC 4843                       		swap	d3
000051EE                            
000051EE                            loc_491C:
000051EE D4FC 0080                  		adda.w	#$80,a2
000051F2 51CF FF9C                  		dbf	d7,loc_48BE
000051F6 43F9 00FF 0000             		lea	($FF0000).l,a1
000051FC 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00005202 303C 4000                  		move.w	#$4000,d0
00005206 6100 C4C8                  		bsr.w	EniDec
0000520A 43F9 00FF 0000             		lea	($FF0000).l,a1
00005210 203C 4000 0003             		move.l	#$40000003,d0
00005216 723F                       		moveq	#$3F,d1
00005218 741F                       		moveq	#$1F,d2
0000521A 6100 C194                  		bsr.w	ShowVDPGraphics
0000521E 43F9 00FF 0000             		lea	($FF0000).l,a1
00005224 203C 5000 0003             		move.l	#$50000003,d0
0000522A 723F                       		moveq	#$3F,d1
0000522C 743F                       		moveq	#$3F,d2
0000522E 6100 C180                  		bsr.w	ShowVDPGraphics
00005232 4E75                       		rts	
00005234                            ; End of function SS_BGLoad
00005234                            
00005234                            ; ---------------------------------------------------------------------------
00005234                            ; Subroutine for queueing VDP commands (seems to only queue transfers to VRAM),
00005234                            ; to be issued the next time ProcessDMAQueue is called.
00005234                            ; Can be called a maximum of 18 times before the buffer needs to be cleared
00005234                            ; by issuing the commands (this subroutine DOES check for overflow)
00005234                            ; ---------------------------------------------------------------------------
00005234                            ; In case you wish to use this queue system outside of the spin dash, this is the
00005234                            ; registers in which it expects data in:
00005234                            ; d1.l: Address to data (In 68k address space)
00005234                            ; d2.w: Destination in VRAM
00005234                            ; d3.w: Length of data
00005234                            ; ---------------------------------------------------------------------------
00005234                             
00005234                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00005234                             
00005234                            ; sub_144E: DMA_68KtoVRAM: QueueCopyToVRAM: QueueVDPCommand: Add_To_DMA_Queue:
00005234                            QueueDMATransfer:
00005234 2278 C8FC                  		movea.l	($FFFFC8FC).w,a1
00005238 B2FC C8FC                  		cmpa.w	#$C8FC,a1
0000523C 6700                       		beq.s	QueueDMATransfer_Done ; return if there's no more room in the buffer
0000523E                             
0000523E                            		; piece together some VDP commands and store them for later...
0000523E 303C 9300                  		move.w	#$9300,d0 ; command to specify DMA transfer length & $00FF
00005242 1003                       		move.b	d3,d0
00005244 32C0                       		move.w	d0,(a1)+ ; store command
00005246                             
00005246 303C 9400                  		move.w	#$9400,d0 ; command to specify DMA transfer length & $FF00
0000524A E04B                       		lsr.w	#8,d3
0000524C 1003                       		move.b	d3,d0
0000524E 32C0                       		move.w	d0,(a1)+ ; store command
00005250                             
00005250 303C 9500                  		move.w	#$9500,d0 ; command to specify source address & $0001FE
00005254 E289                       		lsr.l	#1,d1
00005256 1001                       		move.b	d1,d0
00005258 32C0                       		move.w	d0,(a1)+ ; store command
0000525A                             
0000525A 303C 9600                  		move.w	#$9600,d0 ; command to specify source address & $01FE00
0000525E E089                       		lsr.l	#8,d1
00005260 1001                       		move.b	d1,d0
00005262 32C0                       		move.w	d0,(a1)+ ; store command
00005264                             
00005264 303C 9700                  		move.w	#$9700,d0 ; command to specify source address & $FE0000
00005268 E089                       		lsr.l	#8,d1
0000526A 1001                       		move.b	d1,d0
0000526C 32C0                       		move.w	d0,(a1)+ ; store command
0000526E                             
0000526E 0282 0000 FFFF             		andi.l	#$FFFF,d2 ; command to specify destination address and begin DMA
00005274 E58A                       		lsl.l	#2,d2
00005276 E44A                       		lsr.w	#2,d2
00005278 4842                       		swap	d2
0000527A 0082 4000 0080             		ori.l	#$40000080,d2 ; set bits to specify VRAM transfer
00005280 22C2                       		move.l	d2,(a1)+ ; store command
00005282                             
00005282 21C9 C8FC                  		move.l	a1,($FFFFC8FC).w ; set the next free slot address
00005286 B2FC C8FC                  		cmpa.w	#$C8FC,a1
0000528A 6700                       		beq.s	QueueDMATransfer_Done ; return if there's no more room in the buffer
0000528C 32BC 0000                  		move.w	#0,(a1) ; put a stop token at the end of the used part of the buffer
00005290                            ; return_14AA:
00005290                            QueueDMATransfer_Done:
00005290 4E75                       		rts
00005292                            ; End of function QueueDMATransfer
00005292                             
00005292                             
00005292                            ; ---------------------------------------------------------------------------
00005292                            ; Subroutine for issuing all VDP commands that were queued
00005292                            ; (by earlier calls to QueueDMATransfer)
00005292                            ; Resets the queue when it's done
00005292                            ; ---------------------------------------------------------------------------
00005292                             
00005292                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00005292                             
00005292                            ; sub_14AC: CopyToVRAM: IssueVDPCommands: Process_DMA: Process_DMA_Queue:
00005292                            ProcessDMAQueue:
00005292 4BF9 00C0 0004             		lea	($C00004).l,a5
00005298 43F8 C800                  		lea	($FFFFC800).w,a1
0000529C                            ; loc_14B6:
0000529C                            ProcessDMAQueue_Loop:
0000529C 3019                       		move.w	(a1)+,d0
0000529E 6700                       		beq.s	ProcessDMAQueue_Done ; branch if we reached a stop token
000052A0                            		; issue a set of VDP commands...
000052A0 3A80                       		move.w	d0,(a5)		; transfer length
000052A2 3A99                       		move.w	(a1)+,(a5)	; transfer length
000052A4 3A99                       		move.w	(a1)+,(a5)	; source address
000052A6 3A99                       		move.w	(a1)+,(a5)	; source address
000052A8 3A99                       		move.w	(a1)+,(a5)	; source address
000052AA 3A99                       		move.w	(a1)+,(a5)	; destination
000052AC 3A99                       		move.w	(a1)+,(a5)	; destination
000052AE B2FC C8FC                  		cmpa.w	#$C8FC,a1
000052B2 66E8                       		bne.s	ProcessDMAQueue_Loop ; loop if we haven't reached the end of the buffer
000052B4                            ; loc_14CE:
000052B4                            ProcessDMAQueue_Done:
000052B4 31FC 0000 C800             		move.w	#0,($FFFFC800).w
000052BA 21FC FFFF C800 C8FC        		move.l	#$FFFFC800,($FFFFC8FC).w
000052C2 4E75                       		rts
000052C4                            ; End of function ProcessDMAQueue
000052C4                            
000052C4                            ; ---------------------------------------------------------------------------
000052C4                            ; Palette cycling routine - special stage
000052C4                            ; ---------------------------------------------------------------------------
000052C4                            
000052C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000052C4                            
000052C4                            
000052C4                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
000052C4 4A78 F63A                  		tst.w	($FFFFF63A).w
000052C8 6600                       		bne.s	locret_49E6
000052CA 5378 F79C                  		subq.w	#1,($FFFFF79C).w
000052CE 6A00                       		bpl.s	locret_49E6
000052D0 4DF9 00C0 0004             		lea	($C00004).l,a6
000052D6 3038 F79A                  		move.w	($FFFFF79A).w,d0
000052DA 5278 F79A                  		addq.w	#1,($FFFFF79A).w
000052DE 0240 001F                  		andi.w	#$1F,d0
000052E2 E548                       		lsl.w	#2,d0
000052E4 41F9 0000 0000             		lea	(byte_4A3C).l,a0
000052EA D0C0                       		adda.w	d0,a0
000052EC 1018                       		move.b	(a0)+,d0
000052EE 6A00                       		bpl.s	loc_4992
000052F0 303C 01FF                  		move.w	#$1FF,d0
000052F4                            
000052F4                            loc_4992:
000052F4 31C0 F79C                  		move.w	d0,($FFFFF79C).w
000052F8 7000                       		moveq	#0,d0
000052FA 1018                       		move.b	(a0)+,d0
000052FC 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00005300 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00005306 43F1 0000                  		lea	(a1,d0.w),a1
0000530A 303C 8200                  		move.w	#-$7E00,d0
0000530E 1019                       		move.b	(a1)+,d0
00005310 3C80                       		move.w	d0,(a6)
00005312 11D1 F616                  		move.b	(a1),($FFFFF616).w
00005316 303C 8400                  		move.w	#-$7C00,d0
0000531A 1018                       		move.b	(a0)+,d0
0000531C 3C80                       		move.w	d0,(a6)
0000531E 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00005328 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00005330 7000                       		moveq	#0,d0
00005332 1018                       		move.b	(a0)+,d0
00005334 6B00                       		bmi.s	loc_49E8
00005336 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
0000533C D2C0                       		adda.w	d0,a1
0000533E 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
00005342 24D9                       		move.l	(a1)+,(a2)+
00005344 24D9                       		move.l	(a1)+,(a2)+
00005346 24D9                       		move.l	(a1)+,(a2)+
00005348                            
00005348                            locret_49E6:
00005348 4E75                       		rts	
0000534A                            ; ===========================================================================
0000534A                            
0000534A                            loc_49E8:				; XREF: PalCycle_SS
0000534A 3238 F79E                  		move.w	($FFFFF79E).w,d1
0000534E 0C40 008A                  		cmpi.w	#$8A,d0
00005352 6500                       		bcs.s	loc_49F4
00005354 5241                       		addq.w	#1,d1
00005356                            
00005356                            loc_49F4:
00005356 C2FC 002A                  		mulu.w	#$2A,d1
0000535A 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00005360 D2C1                       		adda.w	d1,a1
00005362 0240 007F                  		andi.w	#$7F,d0
00005366 0880 0000                  		bclr	#0,d0
0000536A 6700                       		beq.s	loc_4A18
0000536C 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
00005370 24D1                       		move.l	(a1),(a2)+
00005372 24E9 0004                  		move.l	4(a1),(a2)+
00005376 24E9 0008                  		move.l	8(a1),(a2)+
0000537A                            
0000537A                            loc_4A18:
0000537A D2FC 000C                  		adda.w	#$C,a1
0000537E 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
00005382 0C40 000A                  		cmpi.w	#$A,d0
00005386 6500                       		bcs.s	loc_4A2E
00005388 0440 000A                  		subi.w	#$A,d0
0000538C 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
00005390                            
00005390                            loc_4A2E:
00005390 3200                       		move.w	d0,d1
00005392 D040                       		add.w	d0,d0
00005394 D041                       		add.w	d1,d0
00005396 D2C0                       		adda.w	d0,a1
00005398 24D9                       		move.l	(a1)+,(a2)+
0000539A 34D9                       		move.w	(a1)+,(a2)+
0000539C 4E75                       		rts	
0000539E                            ; End of function PalCycle_SS
0000539E                            
0000539E                            ; ===========================================================================
0000539E 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
000053AE                            					; XREF: PalCycle_SS
000053AE 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
000053BE 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
000053CE FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
000053DE 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
000053EE 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
000053FE 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
0000540E FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
0000541E                            		even
0000541E 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
0000542C                            					; XREF: PalCycle_SS
0000542C                            		even
0000542C                            
0000542C                            Pal_SSCyc1:	incbin	Palette\c_ss_1.bin
00005474                            		even
00005474                            Pal_SSCyc2:	incbin	Palette\c_ss_2.bin
00005546                            		even
00005546                            
00005546                            ; ---------------------------------------------------------------------------
00005546                            ; Subroutine to	make the special stage background animated
00005546                            ; ---------------------------------------------------------------------------
00005546                            
00005546                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005546                            
00005546                            
00005546                            SS_BGAnimate:				; XREF: SpecialStage
00005546 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
0000554A 6600                       		bne.s	loc_4BF6
0000554C 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
00005552 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00005558                            
00005558                            loc_4BF6:
00005558 0C40 0008                  		cmpi.w	#8,d0
0000555C 6400                       		bcc.s	loc_4C4E
0000555E 0C40 0006                  		cmpi.w	#6,d0
00005562 6600                       		bne.s	loc_4C10
00005564 5278 F718                  		addq.w	#1,($FFFFF718).w
00005568 5278 F70C                  		addq.w	#1,($FFFFF70C).w
0000556C 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00005572                            
00005572                            loc_4C10:
00005572 7000                       		moveq	#0,d0
00005574 3038 F708                  		move.w	($FFFFF708).w,d0
00005578 4440                       		neg.w	d0
0000557A 4840                       		swap	d0
0000557C 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00005582 47F8 AA00                  		lea	($FFFFAA00).w,a3
00005586 7609                       		moveq	#9,d3
00005588                            
00005588                            loc_4C26:
00005588 302B 0002                  		move.w	2(a3),d0
0000558C 6100 DCE6                  		bsr.w	CalcSine
00005590 7400                       		moveq	#0,d2
00005592 1419                       		move.b	(a1)+,d2
00005594 C1C2                       		muls.w	d2,d0
00005596 E080                       		asr.l	#8,d0
00005598 36C0                       		move.w	d0,(a3)+
0000559A 1419                       		move.b	(a1)+,d2
0000559C 4882                       		ext.w	d2
0000559E D55B                       		add.w	d2,(a3)+
000055A0 51CB FFE6                  		dbf	d3,loc_4C26
000055A4 47F8 AA00                  		lea	($FFFFAA00).w,a3
000055A8 45F9 0000 0000             		lea	(byte_4CB8).l,a2
000055AE 6000                       		bra.s	loc_4C7E
000055B0                            ; ===========================================================================
000055B0                            
000055B0                            loc_4C4E:				; XREF: SS_BGAnimate
000055B0 0C40 000C                  		cmpi.w	#$C,d0
000055B4 6600                       		bne.s	loc_4C74
000055B6 5378 F718                  		subq.w	#1,($FFFFF718).w
000055BA 47F8 AB00                  		lea	($FFFFAB00).w,a3
000055BE 243C 0001 8000             		move.l	#$18000,d2
000055C4 7206                       		moveq	#6,d1
000055C6                            
000055C6                            loc_4C64:
000055C6 2013                       		move.l	(a3),d0
000055C8 9082                       		sub.l	d2,d0
000055CA 26C0                       		move.l	d0,(a3)+
000055CC 0482 0000 2000             		subi.l	#$2000,d2
000055D2 51C9 FFF2                  		dbf	d1,loc_4C64
000055D6                            
000055D6                            loc_4C74:
000055D6 47F8 AB00                  		lea	($FFFFAB00).w,a3
000055DA 45F9 0000 0000             		lea	(byte_4CC4).l,a2
000055E0                            
000055E0                            loc_4C7E:
000055E0 43F8 CC00                  		lea	($FFFFCC00).w,a1
000055E4 3038 F718                  		move.w	($FFFFF718).w,d0
000055E8 4440                       		neg.w	d0
000055EA 4840                       		swap	d0
000055EC 7600                       		moveq	#0,d3
000055EE 161A                       		move.b	(a2)+,d3
000055F0 3438 F70C                  		move.w	($FFFFF70C).w,d2
000055F4 4442                       		neg.w	d2
000055F6 0242 00FF                  		andi.w	#$FF,d2
000055FA E54A                       		lsl.w	#2,d2
000055FC                            
000055FC                            loc_4C9A:
000055FC 301B                       		move.w	(a3)+,d0
000055FE 544B                       		addq.w	#2,a3
00005600 7200                       		moveq	#0,d1
00005602 121A                       		move.b	(a2)+,d1
00005604 5341                       		subq.w	#1,d1
00005606                            
00005606                            loc_4CA4:
00005606 2380 2000                  		move.l	d0,(a1,d2.w)
0000560A 5842                       		addq.w	#4,d2
0000560C 0242 03FC                  		andi.w	#$3FC,d2
00005610 51C9 FFF4                  		dbf	d1,loc_4CA4
00005614 51CB FFE6                  		dbf	d3,loc_4C9A
00005618 4E75                       		rts	
0000561A                            ; End of function SS_BGAnimate
0000561A                            
0000561A                            ; ===========================================================================
0000561A 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00005626                            		even
00005626 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
0000562E                            		even
0000562E 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00005642                            		even
00005642                            					; XREF: SS_BGAnimate
00005642                            ; ===========================================================================
00005642                            
00005642                            ; ---------------------------------------------------------------------------
00005642                            ; Continue screen
00005642                            ; ---------------------------------------------------------------------------
00005642                            
00005642                            ContinueScreen:				; XREF: GameModeArray
00005642 6100 C952                  		bsr.w	Pal_FadeFrom
00005646 46FC 2700                  		move	#$2700,sr
0000564A 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000564E 0200 00BF                  		andi.b	#$BF,d0
00005652 33C0 00C0 0004             		move.w	d0,($C00004).l
00005658 4DF9 00C0 0004             		lea	($C00004).l,a6
0000565E 3CBC 8004                  		move.w	#$8004,(a6)
00005662 3CBC 8700                  		move.w	#$8700,(a6)
00005666 6100 BBC8                  		bsr.w	ClearScreen
0000566A 43F8 D000                  		lea	($FFFFD000).w,a1
0000566E 7000                       		moveq	#0,d0
00005670 323C 07FF                  		move.w	#$7FF,d1
00005674                            
00005674                            Cont_ClrObjRam:
00005674 22C0                       		move.l	d0,(a1)+
00005676 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
0000567A                            
0000567A 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00005684 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
0000568A 6100 BD4E                  		bsr.w	NemDec
0000568E 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
00005698 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
0000569E 6100 BD3A                  		bsr.w	NemDec
000056A2 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
000056AC 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
000056B2 6100 BD26                  		bsr.w	NemDec
000056B6 720A                       		moveq	#10,d1
000056B8 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
000056BE 7012                       		moveq	#$12,d0
000056C0 6100 CB84                  		bsr.w	PalLoad1	; load continue	screen Palette
000056C4 103C 0090                  		move.b	#$90,d0
000056C8 6100 BC5C                  		bsr.w	PlaySound	; play continue	music
000056CC 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
000056D2 42B8 F700                  		clr.l	($FFFFF700).w
000056D6 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
000056DE 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
000056E4 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
000056EA 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
000056F0 11FC 0003 D098             		move.b	#3,($FFFFD098).w
000056F6 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
000056FC 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
00005702 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
00005708 4EB9 0000 0000             		jsr	ObjectsLoad
0000570E 4EB9 0000 0000             		jsr	BuildSprites
00005714 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005718 0000 0040                  		ori.b	#$40,d0
0000571C 33C0 00C0 0004             		move.w	d0,($C00004).l
00005722 6100 C7B8                  		bsr.w	Pal_FadeTo
00005726                            
00005726                            ; ---------------------------------------------------------------------------
00005726                            ; Continue screen main loop
00005726                            ; ---------------------------------------------------------------------------
00005726                            
00005726                            Cont_MainLoop:
00005726 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
0000572C 6100 DB14                  		bsr.w	DelayProgram
00005730 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005736 6400                       		bcc.s	loc_4DF2
00005738 46FC 2700                  		move	#$2700,sr
0000573C 3238 F614                  		move.w	($FFFFF614).w,d1
00005740 82FC 003C                  		divu.w	#$3C,d1
00005744 0281 0000 000F             		andi.l	#$F,d1
0000574A 4EB9 0000 0000             		jsr	ContScrCounter
00005750 46FC 2300                  		move	#$2300,sr
00005754                            
00005754                            loc_4DF2:
00005754 4EB9 0000 0000             		jsr	ObjectsLoad
0000575A 4EB9 0000 0000             		jsr	BuildSprites
00005760 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
00005766 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
00005768 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000576E 64B6                       		bcc.s	Cont_MainLoop
00005770 4A78 F614                  		tst.w	($FFFFF614).w
00005774 6600 FFB0                  		bne.w	Cont_MainLoop
00005778 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
0000577E 4E75                       		rts	
00005780                            ; ===========================================================================
00005780                            
00005780                            Cont_GotoLevel:				; XREF: Cont_MainLoop
00005780 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00005786 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
0000578C 7000                       		moveq	#0,d0
0000578E 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005792 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005796 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000579A 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
0000579E 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
000057A2 4E75                       		rts	
000057A4                            ; ===========================================================================
000057A4                            
000057A4                            ; ---------------------------------------------------------------------------
000057A4                            ; Object 80 - Continue screen elements
000057A4                            ; ---------------------------------------------------------------------------
000057A4                            
000057A4                            Obj80:					; XREF: Obj_Index
000057A4 7000                       		moveq	#0,d0
000057A6 1028 0024                  		move.b	$24(a0),d0
000057AA 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
000057AE 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
000057B2                            ; ===========================================================================
000057B2 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
000057B4 0000                       		dc.w Obj80_Display-Obj80_Index
000057B6 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
000057B8 0000                       		dc.w Obj80_ChkType-Obj80_Index
000057BA                            ; ===========================================================================
000057BA                            
000057BA                            Obj80_Main:				; XREF: Obj80_Index
000057BA 5428 0024                  		addq.b	#2,$24(a0)
000057BE 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
000057C6 317C 8500 0002             		move.w	#$8500,2(a0)
000057CC 117C 0000 0001             		move.b	#0,1(a0)
000057D2 117C 003C 0019             		move.b	#$3C,$19(a0)
000057D8 317C 0120 0008             		move.w	#$120,8(a0)
000057DE 317C 00C0 000A             		move.w	#$C0,$A(a0)
000057E4 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
000057EA                            
000057EA                            Obj80_Display:				; XREF: Obj80_Index
000057EA 4EF9 0000 0000             		jmp	DisplaySprite
000057F0                            ; ===========================================================================
000057F0                            Obj80_MiniSonicPos:
000057F0 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
00005802 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
0000580E                            ; ===========================================================================
0000580E                            
0000580E                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
0000580E 2248                       		movea.l	a0,a1
00005810 45F9 0000 57F0             		lea	(Obj80_MiniSonicPos).l,a2
00005816 7200                       		moveq	#0,d1
00005818 1238 FE18                  		move.b	($FFFFFE18).w,d1
0000581C 5501                       		subq.b	#2,d1
0000581E 6400                       		bcc.s	loc_4EC4
00005820 4EF9 0000 0000             		jmp	DeleteObject
00005826                            ; ===========================================================================
00005826                            
00005826                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
00005826 7601                       		moveq	#1,d3
00005828 0C01 000E                  		cmpi.b	#$E,d1
0000582C 6500                       		bcs.s	loc_4ED0
0000582E 7600                       		moveq	#0,d3
00005830 720E                       		moveq	#$E,d1
00005832                            
00005832                            loc_4ED0:
00005832 1401                       		move.b	d1,d2
00005834 0202 0001                  		andi.b	#1,d2
00005838                            
00005838                            Obj80_MiniSonLoop:
00005838 137C 0080 0000             		move.b	#$80,0(a1)	; load mini Sonic object
0000583E 335A 0008                  		move.w	(a2)+,8(a1)
00005842 4A02                       		tst.b	d2
00005844 6700                       		beq.s	loc_4EEA
00005846 0469 000A 0008             		subi.w	#$A,8(a1)
0000584C                            
0000584C                            loc_4EEA:
0000584C 337C 00D0 000A             		move.w	#$D0,$A(a1)
00005852 137C 0006 001A             		move.b	#6,$1A(a1)
00005858 137C 0006 0024             		move.b	#6,$24(a1)
0000585E 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
00005866 337C 8551 0002             		move.w	#$8551,2(a1)
0000586C 137C 0000 0001             		move.b	#0,1(a1)
00005872 43E9 0040                  		lea	$40(a1),a1
00005876 51C9 FFC0                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
0000587A 43E9 FFC0                  		lea	-$40(a1),a1
0000587E 1343 0028                  		move.b	d3,$28(a1)
00005882                            
00005882                            Obj80_ChkType:				; XREF: Obj80_Index
00005882 4A28 0028                  		tst.b	$28(a0)
00005886 6700                       		beq.s	loc_4F40
00005888 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000588E 6500                       		bcs.s	loc_4F40
00005890 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00005894 0200 0001                  		andi.b	#1,d0
00005898 6600                       		bne.s	loc_4F40
0000589A 4A78 D010                  		tst.w	($FFFFD010).w
0000589E 6600                       		bne.s	Obj80_Delete
000058A0 4E75                       		rts	
000058A2                            ; ===========================================================================
000058A2                            
000058A2                            loc_4F40:				; XREF: Obj80_ChkType
000058A2 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000058A6 0200 000F                  		andi.b	#$F,d0
000058AA 6600                       		bne.s	Obj80_Display2
000058AC 0868 0000 001A             		bchg	#0,$1A(a0)
000058B2                            
000058B2                            Obj80_Display2:
000058B2 4EF9 0000 0000             		jmp	DisplaySprite
000058B8                            ; ===========================================================================
000058B8                            
000058B8                            Obj80_Delete:				; XREF: Obj80_ChkType
000058B8 4EF9 0000 0000             		jmp	DeleteObject
000058BE                            ; ===========================================================================
000058BE                            
000058BE                            ; ---------------------------------------------------------------------------
000058BE                            ; Object 81 - Sonic on the continue screen
000058BE                            ; ---------------------------------------------------------------------------
000058BE                            
000058BE                            Obj81:					; XREF: Obj_Index
000058BE 7000                       		moveq	#0,d0
000058C0 1028 0024                  		move.b	$24(a0),d0
000058C4 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
000058C8 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
000058CC 4EF9 0000 0000             		jmp	DisplaySprite
000058D2                            ; ===========================================================================
000058D2 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
000058D4 0000                       		dc.w Obj81_ChkLand-Obj81_Index
000058D6 0000                       		dc.w Obj81_Animate-Obj81_Index
000058D8 0000                       		dc.w Obj81_Run-Obj81_Index
000058DA                            ; ===========================================================================
000058DA                            
000058DA                            Obj81_Main:				; XREF: Obj81_Index
000058DA 5428 0024                  		addq.b	#2,$24(a0)
000058DE 317C 00A0 0008             		move.w	#$A0,8(a0)
000058E4 317C 00C0 000C             		move.w	#$C0,$C(a0)
000058EA 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
000058F2 317C 0780 0002             		move.w	#$780,2(a0)
000058F8 117C 0004 0001             		move.b	#4,1(a0)
000058FE 117C 0002 0018             		move.b	#2,$18(a0)
00005904 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
0000590A 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
00005910                            
00005910                            Obj81_ChkLand:				; XREF: Obj81_Index
00005910 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
00005916 6600                       		bne.s	Obj81_ShowFall	; if not, branch
00005918 5428 0024                  		addq.b	#2,$24(a0)
0000591C 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
00005920 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00005928 317C 8500 0002             		move.w	#$8500,2(a0)
0000592E 117C 0000 001C             		move.b	#0,$1C(a0)
00005934 6000                       		bra.s	Obj81_Animate
00005936                            ; ===========================================================================
00005936                            
00005936                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
00005936 4EB9 0000 0000             		jsr	SpeedToPos
0000593C 4EB9 0000 0000             		jsr	Sonic_Animate
00005942 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00005948                            ; ===========================================================================
00005948                            
00005948                            Obj81_Animate:				; XREF: Obj81_Index
00005948 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
0000594C 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
0000594E 43F9 0000 0000             		lea	(Ani_obj81).l,a1
00005954 4EF9 0000 0000             		jmp	AnimateSprite
0000595A                            ; ===========================================================================
0000595A                            
0000595A                            Obj81_GetUp:				; XREF: Obj81_Animate
0000595A 5428 0024                  		addq.b	#2,$24(a0)
0000595E 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00005966 317C 0780 0002             		move.w	#$780,2(a0)
0000596C 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
00005972 4268 0014                  		clr.w	$14(a0)
00005976 5168 000C                  		subq.w	#8,$C(a0)
0000597A 103C 00E0                  		move.b	#$E0,d0
0000597E 6100 B9AC                  		bsr.w	PlaySound_Special ; fade out music
00005982                            
00005982                            Obj81_Run:				; XREF: Obj81_Index
00005982 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
00005988 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
0000598A 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
00005990 6000                       		bra.s	Obj81_ShowRun
00005992                            ; ===========================================================================
00005992                            
00005992                            Obj81_AddSpeed:				; XREF: Obj81_Run
00005992 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
00005998                            
00005998                            Obj81_ShowRun:				; XREF: Obj81_Run
00005998 4EB9 0000 0000             		jsr	SpeedToPos
0000599E 4EB9 0000 0000             		jsr	Sonic_Animate
000059A4 4EF9 0000 0000             		jmp	LoadSonicDynPLC
000059AA                            ; ===========================================================================
000059AA                            Ani_obj81:
000059AA                            	include "_anim\obj81.asm"
000059AA                            ; ---------------------------------------------------------------------------
000059AA                            ; Animation script - Sonic on the continue screen
000059AA                            ; ---------------------------------------------------------------------------
000059AA 0000                       		dc.w byte_504A-Ani_obj81
000059AC 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
000059B8 00                         		even
000059B8 00                         		even
000059B8                            
000059B8                            ; ---------------------------------------------------------------------------
000059B8                            ; Sprite mappings - Continue screen
000059B8                            ; ---------------------------------------------------------------------------
000059B8                            Map_obj80:
000059B8                            	include "_maps\obj80.asm"
000059B8                            ; ---------------------------------------------------------------------------
000059B8                            ; Sprite mappings - Continue screen
000059B8                            ; ---------------------------------------------------------------------------
000059B8 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
000059BC 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
000059C0 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
000059C4 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
000059C8 0B                         byte_5066:	dc.b $B
000059C9 F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
000059CE F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
000059D3 F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
000059D8 F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
000059DD F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
000059E2 F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
000059E7 F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
000059EC F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
000059F1 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
000059F6 3805 2021 08               		dc.b $38, 5, $20, $21, 8
000059FB 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
00005A00 03                         byte_509E:	dc.b 3
00005A01 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
00005A06 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005A0B F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005A10 03                         byte_50AE:	dc.b 3
00005A11 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
00005A16 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005A1B F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005A20 03                         byte_50BE:	dc.b 3
00005A21 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
00005A26 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005A2B F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005A30 02                         byte_50CE:	dc.b 2
00005A31 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
00005A36 6009 2800 00               		dc.b $60, 9, $28, 0, 0
00005A3B 01                         byte_50D9:	dc.b 1
00005A3C 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
00005A41 01                         byte_50DF:	dc.b 1
00005A42 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
00005A48 00                         		even
00005A48 00                         		even
00005A48                            
00005A48                            ; ===========================================================================
00005A48                            ; ---------------------------------------------------------------------------
00005A48                            ; Ending sequence in Green Hill	Zone
00005A48                            ; ---------------------------------------------------------------------------
00005A48                            
00005A48                            EndingSequence:				; XREF: GameModeArray
00005A48 103C 00E4                  		move.b	#$E4,d0
00005A4C 6100 B8DE                  		bsr.w	PlaySound_Special ; stop music
00005A50 6100 C544                  		bsr.w	Pal_FadeFrom
00005A54 43F8 D000                  		lea	($FFFFD000).w,a1
00005A58 7000                       		moveq	#0,d0
00005A5A 323C 07FF                  		move.w	#$7FF,d1
00005A5E                            
00005A5E                            End_ClrObjRam:
00005A5E 22C0                       		move.l	d0,(a1)+
00005A60 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
00005A64                            
00005A64 43F8 F628                  		lea	($FFFFF628).w,a1
00005A68 7000                       		moveq	#0,d0
00005A6A 323C 0015                  		move.w	#$15,d1
00005A6E                            
00005A6E                            End_ClrRam:
00005A6E 22C0                       		move.l	d0,(a1)+
00005A70 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
00005A74                            
00005A74 43F8 F700                  		lea	($FFFFF700).w,a1
00005A78 7000                       		moveq	#0,d0
00005A7A 323C 003F                  		move.w	#$3F,d1
00005A7E                            
00005A7E                            End_ClrRam2:
00005A7E 22C0                       		move.l	d0,(a1)+
00005A80 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
00005A84                            
00005A84 43F8 FE60                  		lea	($FFFFFE60).w,a1
00005A88 7000                       		moveq	#0,d0
00005A8A 323C 0047                  		move.w	#$47,d1
00005A8E                            
00005A8E                            End_ClrRam3:
00005A8E 22C0                       		move.l	d0,(a1)+
00005A90 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
00005A94                            
00005A94 46FC 2700                  		move	#$2700,sr
00005A98 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005A9C 0200 00BF                  		andi.b	#$BF,d0
00005AA0 33C0 00C0 0004             		move.w	d0,($C00004).l
00005AA6 6100 B788                  		bsr.w	ClearScreen
00005AAA 4DF9 00C0 0004             		lea	($C00004).l,a6
00005AB0 3CBC 8B03                  		move.w	#$8B03,(a6)
00005AB4 3CBC 8230                  		move.w	#$8230,(a6)
00005AB8 3CBC 8407                  		move.w	#$8407,(a6)
00005ABC 3CBC 857C                  		move.w	#$857C,(a6)
00005AC0 3CBC 9001                  		move.w	#$9001,(a6)
00005AC4 3CBC 8004                  		move.w	#$8004,(a6)
00005AC8 3CBC 8720                  		move.w	#$8720,(a6)
00005ACC 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00005AD2 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00005AD6 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00005ADC 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
00005AE2 11FC 0000 FFFD             		move.b	#$0,($FFFFFFFD).w	; puts a 0 in this flag
00005AE8 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005AEE 6700                       		beq.s	End_LoadData	; if yes, branch
00005AF0 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
00005AF6 11FC 0001 FFFD             		move.b	#$1,($FFFFFFFD).w	; puts a 1 in this flag
00005AFC                            
00005AFC                            End_LoadData:
00005AFC 701C                       		moveq	#$1C,d0
00005AFE 6100 BB9E                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
00005B02 4EB9 0000 0000             		jsr	Hud_Base
00005B08 6100 0000                  		bsr.w	LevelSizeLoad
00005B0C 6100 0000                  		bsr.w	DeformBgLayer
00005B10 08F8 0002 F754             		bset	#2,($FFFFF754).w
00005B16 6100 0000                  		bsr.w	MainLoadBlockLoad
00005B1A 6100 0000                  		bsr.w	LoadTilesFromStart
00005B1E 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
00005B26 46FC 2300                  		move	#$2300,sr
00005B2A 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
00005B30 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
00005B34 6100 BD18                  		bsr.w	KosDec
00005B38 7003                       		moveq	#3,d0
00005B3A 6100 C70A                  		bsr.w	PalLoad1	; load Sonic's Palette
00005B3E 1038 FFFD                  		move.b	($FFFFFFFD).w,d0
00005B42 43F9 0000 4016             		lea	(MusicList7).l,a1 ; load Music Playlist for Endings
00005B48 1031 0000                  		move.b	(a1,d0.w),d0 ; get d0-th entry from the playlist
00005B4C 6100 B7D8                  		bsr.w	PlaySound	; play ending sequence music
00005B50 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
00005B56 6700                       		beq.s	End_LoadSonic	; if not, branch
00005B58 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00005B5E                            
00005B5E                            End_LoadSonic:
00005B5E 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00005B64 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
00005B6A 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
00005B70 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
00005B76 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
00005B7C 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00005B82 4EB9 0000 0000             		jsr	ObjPosLoad
00005B88 4EB9 0000 0000             		jsr	ObjectsLoad
00005B8E 4EB9 0000 0000             		jsr	BuildSprites
00005B94 7000                       		moveq	#0,d0
00005B96 31C0 FE20                  		move.w	d0,($FFFFFE20).w
00005B9A 21C0 FE22                  		move.l	d0,($FFFFFE22).w
00005B9E 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
00005BA2 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
00005BA6 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
00005BAA 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
00005BAE 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00005BB2 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00005BB6 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00005BBA 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00005BBE 6100 EE04                  		bsr.w	OscillateNumInit
00005BC2 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
00005BC8 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
00005BCE 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
00005BD4 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00005BDA 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005BE0 6100 D660                  		bsr.w	DelayProgram
00005BE4 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005BE8 0000 0040                  		ori.b	#$40,d0
00005BEC 33C0 00C0 0004             		move.w	d0,($C00004).l
00005BF2 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00005BF8 6100 C2E2                  		bsr.w	Pal_FadeTo
00005BFC                            
00005BFC                            ; ---------------------------------------------------------------------------
00005BFC                            ; Main ending sequence loop
00005BFC                            ; ---------------------------------------------------------------------------
00005BFC                            
00005BFC                            End_MainLoop:
00005BFC 6100 B73A                  		bsr.w	PauseGame
00005C00 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005C06 6100 D63A                  		bsr.w	DelayProgram
00005C0A 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00005C0E 6100 0000                  		bsr.w	End_MoveSonic
00005C12 4EB9 0000 0000             		jsr	ObjectsLoad
00005C18 6100 0000                  		bsr.w	DeformBgLayer
00005C1C 4EB9 0000 0000             		jsr	BuildSprites
00005C22 4EB9 0000 0000             		jsr	ObjPosLoad
00005C28 6100 BE42                  		bsr.w	PalCycle_Load
00005C2C 6100 EDEC                  		bsr.w	OscillateNumDo
00005C30 6100 EE80                  		bsr.w	ChangeRingFrame
00005C34 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
00005C3A 6700                       		beq.s	loc_52DA	; if yes, branch
00005C3C 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
00005C42 4240                       		clr.w	d0
00005C44 1038 FFFD                  		move.b	($FFFFFFFD).w,d0	; get kind of ending (0 = good, 1 = bad)
00005C48 43F9 0000 4014             		lea	(MusicList6).l,a1	; load Music Playlist for credits
00005C4E 1031 0000                  		move.b	(a1,d0.w),d0	; get d0-th entry from the playlist
00005C52                            
00005C52 6100 B6D8                  		bsr.w	PlaySound_Special ; play credits music
00005C56 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
00005C5C 4E75                       		rts
00005C5E 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
00005C64 4E75                       		rts	
00005C66                            ; ===========================================================================
00005C66                            
00005C66                            loc_52DA:
00005C66 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00005C6A 6700 FF90                  		beq.w	End_MainLoop	; if not, branch
00005C6E                            
00005C6E 4278 FE02                  		clr.w	($FFFFFE02).w
00005C72 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00005C78 4278 F794                  		clr.w	($FFFFF794).w
00005C7C                            
00005C7C                            End_AllEmlds:				; XREF: loc_5334
00005C7C 6100 B6BA                  		bsr.w	PauseGame
00005C80 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005C86 6100 D5BA                  		bsr.w	DelayProgram
00005C8A 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00005C8E 6100 0000                  		bsr.w	End_MoveSonic
00005C92 4EB9 0000 0000             		jsr	ObjectsLoad
00005C98 6100 0000                  		bsr.w	DeformBgLayer
00005C9C 4EB9 0000 0000             		jsr	BuildSprites
00005CA2 4EB9 0000 0000             		jsr	ObjPosLoad
00005CA8 6100 ED70                  		bsr.w	OscillateNumDo
00005CAC 6100 EE04                  		bsr.w	ChangeRingFrame
00005CB0 5378 F794                  		subq.w	#1,($FFFFF794).w
00005CB4 6A00                       		bpl.s	loc_5334
00005CB6 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00005CBC 6100 C428                  		bsr.w	Pal_ToWhite
00005CC0                            
00005CC0                            loc_5334:
00005CC0 4A78 FE02                  		tst.w	($FFFFFE02).w
00005CC4 6700 FFB6                  		beq.w	End_AllEmlds
00005CC8 4278 FE02                  		clr.w	($FFFFFE02).w
00005CCC 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
00005CD2 4BF9 00C0 0004             		lea	($C00004).l,a5
00005CD8 4DF9 00C0 0000             		lea	($C00000).l,a6
00005CDE 47F8 F700                  		lea	($FFFFF700).w,a3
00005CE2 49F8 A400                  		lea	($FFFFA400).w,a4
00005CE6 343C 4000                  		move.w	#$4000,d2
00005CEA 6100 0000                  		bsr.w	LoadTilesFromStart2
00005CEE 7013                       		moveq	#$13,d0
00005CF0 6100 C554                  		bsr.w	PalLoad1	; load ending Palette
00005CF4 6100 C324                  		bsr.w	Pal_MakeWhite
00005CF8 6000 FF02                  		bra.w	End_MainLoop
00005CFC                            
00005CFC                            ; ---------------------------------------------------------------------------
00005CFC                            ; Subroutine controlling Sonic on the ending sequence
00005CFC                            ; ---------------------------------------------------------------------------
00005CFC                            
00005CFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005CFC                            
00005CFC                            
00005CFC                            End_MoveSonic:				; XREF: End_MainLoop
00005CFC 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
00005D00 6600                       		bne.s	End_MoveSonic2
00005D02 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
00005D08 6400                       		bcc.s	End_MoveSonExit	; if not, branch
00005D0A 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005D0E 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
00005D14 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
00005D1A 4E75                       		rts	
00005D1C                            ; ===========================================================================
00005D1C                            
00005D1C                            End_MoveSonic2:				; XREF: End_MoveSonic
00005D1C 5500                       		subq.b	#2,d0
00005D1E 6600                       		bne.s	End_MoveSonic3
00005D20 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
00005D26 6500                       		bcs.s	End_MoveSonExit	; if not, branch
00005D28 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005D2C 7000                       		moveq	#0,d0
00005D2E 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
00005D32 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
00005D36 31C0 D014                  		move.w	d0,($FFFFD014).w
00005D3A 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
00005D40 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
00005D46 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
00005D4C 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
00005D52 4E75                       		rts	
00005D54                            ; ===========================================================================
00005D54                            
00005D54                            End_MoveSonic3:				; XREF: End_MoveSonic
00005D54 5500                       		subq.b	#2,d0
00005D56 6600                       		bne.s	End_MoveSonExit
00005D58 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005D5C 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
00005D62 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
00005D68 4278 D024                  		clr.w	($FFFFD024).w
00005D6C                            
00005D6C                            End_MoveSonExit:
00005D6C 4E75                       		rts	
00005D6E                            ; End of function End_MoveSonic
00005D6E                            
00005D6E                            ; ===========================================================================
00005D6E                            ; ---------------------------------------------------------------------------
00005D6E                            ; Object 87 - Sonic on ending sequence
00005D6E                            ; ---------------------------------------------------------------------------
00005D6E                            
00005D6E                            Obj87:					; XREF: Obj_Index
00005D6E 7000                       		moveq	#0,d0
00005D70 1028 0025                  		move.b	$25(a0),d0
00005D74 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
00005D78 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
00005D7C 4EF9 0000 0000             		jmp	DisplaySprite
00005D82                            ; ===========================================================================
00005D82 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
00005D86 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
00005D8A 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
00005D8E 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
00005D92 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
00005D96                            ; ===========================================================================
00005D96                            
00005D96                            Obj87_Main:				; XREF: Obj87_Index
00005D96 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005D9C 6700                       		beq.s	Obj87_Main2	; if yes, branch
00005D9E 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
00005DA4 317C 00D8 0030             		move.w	#$D8,$30(a0)
00005DAA 4E75                       		rts	
00005DAC                            ; ===========================================================================
00005DAC                            
00005DAC                            Obj87_Main2:				; XREF: Obj87_Main
00005DAC 5428 0025                  		addq.b	#2,$25(a0)
00005DB0 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005DB8 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005DBE 117C 0004 0001             		move.b	#4,1(a0)
00005DC4 4228 0022                  		clr.b	$22(a0)
00005DC8 117C 0002 0018             		move.b	#2,$18(a0)
00005DCE 117C 0000 001A             		move.b	#0,$1A(a0)
00005DD4 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
00005DDA                            
00005DDA                            Obj87_MakeEmlds:			; XREF: Obj87_Index
00005DDA 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005DDE 6600                       		bne.s	Obj87_Wait
00005DE0 5428 0025                  		addq.b	#2,$25(a0)
00005DE4 317C 0001 001C             		move.w	#1,$1C(a0)
00005DEA 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
00005DF0                            
00005DF0                            Obj87_Wait:
00005DF0 4E75                       		rts	
00005DF2                            ; ===========================================================================
00005DF2                            
00005DF2                            Obj87_LookUp:				; XREF: Obj87_Index
00005DF2 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
00005DFA 6600                       		bne.s	locret_5480
00005DFC 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
00005E02 317C 005A 0030             		move.w	#$5A,$30(a0)
00005E08 5428 0025                  		addq.b	#2,$25(a0)
00005E0C                            
00005E0C                            locret_5480:
00005E0C 4E75                       		rts	
00005E0E                            ; ===========================================================================
00005E0E                            
00005E0E                            Obj87_ClrObjRam:			; XREF: Obj87_Index
00005E0E 5368 0030                  		subq.w	#1,$30(a0)
00005E12 6600                       		bne.s	Obj87_Wait2
00005E14 43F8 D400                  		lea	($FFFFD400).w,a1
00005E18 323C 00FF                  		move.w	#$FF,d1
00005E1C                            
00005E1C                            Obj87_ClrLoop:
00005E1C 4299                       		clr.l	(a1)+
00005E1E 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
00005E22 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
00005E28 5428 0025                  		addq.b	#2,$25(a0)
00005E2C 117C 0001 001C             		move.b	#1,$1C(a0)
00005E32 317C 003C 0030             		move.w	#$3C,$30(a0)
00005E38                            
00005E38                            Obj87_Wait2:
00005E38 4E75                       		rts	
00005E3A                            ; ===========================================================================
00005E3A                            
00005E3A                            Obj87_MakeLogo:				; XREF: Obj87_Index
00005E3A 5368 0030                  		subq.w	#1,$30(a0)
00005E3E 6600                       		bne.s	Obj87_Wait3
00005E40 5428 0025                  		addq.b	#2,$25(a0)
00005E44 317C 00B4 0030             		move.w	#$B4,$30(a0)
00005E4A 117C 0002 001C             		move.b	#2,$1C(a0)
00005E50 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005E56                            
00005E56                            Obj87_Wait3:
00005E56 4E75                       		rts	
00005E58                            ; ===========================================================================
00005E58                            
00005E58                            Obj87_Animate:				; XREF: Obj87_Index
00005E58 43F9 0000 0000             		lea	(Ani_obj87).l,a1
00005E5E 4EF9 0000 0000             		jmp	AnimateSprite
00005E64                            ; ===========================================================================
00005E64                            
00005E64                            Obj87_Leap:				; XREF: Obj87_Index
00005E64 5368 0030                  		subq.w	#1,$30(a0)
00005E68 6600                       		bne.s	Obj87_Wait4
00005E6A 5428 0025                  		addq.b	#2,$25(a0)
00005E6E 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005E76 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005E7C 117C 0004 0001             		move.b	#4,1(a0)
00005E82 4228 0022                  		clr.b	$22(a0)
00005E86 117C 0002 0018             		move.b	#2,$18(a0)
00005E8C 117C 0005 001A             		move.b	#5,$1A(a0)
00005E92 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
00005E98 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005E9E 60B8                       		bra.s	Obj87_Animate
00005EA0                            ; ===========================================================================
00005EA0                            
00005EA0                            Obj87_Wait4:				; XREF: Obj87_Leap
00005EA0 4E75                       		rts	
00005EA2                            ; ===========================================================================
00005EA2                            Ani_obj87:
00005EA2                            	include "_anim\obj87.asm"
00005EA2                            ; ---------------------------------------------------------------------------
00005EA2                            ; Animation script - Sonic on the ending sequence
00005EA2                            ; ---------------------------------------------------------------------------
00005EA2 0000                       		dc.w byte_551C-Ani_obj87
00005EA4 0000                       		dc.w byte_552A-Ani_obj87
00005EA6 0000                       		dc.w byte_5534-Ani_obj87
00005EA8 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
00005EB6 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
00005EC0 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00005EC8                            		even
00005EC8                            		even
00005EC8                            
00005EC8                            ; ===========================================================================
00005EC8                            ; ---------------------------------------------------------------------------
00005EC8                            ; Object 88 - chaos emeralds on	the ending sequence
00005EC8                            ; ---------------------------------------------------------------------------
00005EC8                            
00005EC8                            Obj88:					; XREF: Obj_Index
00005EC8 7000                       		moveq	#0,d0
00005ECA 1028 0024                  		move.b	$24(a0),d0
00005ECE 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
00005ED2 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
00005ED6 4EF9 0000 0000             		jmp	DisplaySprite
00005EDC                            ; ===========================================================================
00005EDC 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
00005EDE 0000                       		dc.w Obj88_Move-Obj88_Index
00005EE0                            ; ===========================================================================
00005EE0                            
00005EE0                            Obj88_Main:				; XREF: Obj88_Index
00005EE0 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
00005EE6 6700                       		beq.s	Obj88_Main2
00005EE8 588F                       		addq.l	#4,sp
00005EEA 4E75                       		rts	
00005EEC                            ; ===========================================================================
00005EEC                            
00005EEC                            Obj88_Main2:				; XREF: Obj88_Main
00005EEC 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
00005EF2 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
00005EF8 2248                       		movea.l	a0,a1
00005EFA 7600                       		moveq	#0,d3
00005EFC 7401                       		moveq	#1,d2
00005EFE 7205                       		moveq	#5,d1
00005F00                            
00005F00                            Obj88_MainLoop:
00005F00 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
00005F04 5429 0024                  		addq.b	#2,$24(a1)
00005F08 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
00005F10 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005F16 137C 0004 0001             		move.b	#4,1(a1)
00005F1C 137C 0001 0018             		move.b	#1,$18(a1)
00005F22 3368 0008 0038             		move.w	8(a0),$38(a1)
00005F28 3368 000C 003A             		move.w	$C(a0),$3A(a1)
00005F2E 1342 001C                  		move.b	d2,$1C(a1)
00005F32 1342 001A                  		move.b	d2,$1A(a1)
00005F36 5202                       		addq.b	#1,d2
00005F38 1343 0026                  		move.b	d3,$26(a1)
00005F3C 0603 002A                  		addi.b	#$2A,d3
00005F40 43E9 0040                  		lea	$40(a1),a1
00005F44 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
00005F48                            
00005F48                            Obj88_Move:				; XREF: Obj88_Index
00005F48 3028 003E                  		move.w	$3E(a0),d0
00005F4C D168 0026                  		add.w	d0,$26(a0)
00005F50 1028 0026                  		move.b	$26(a0),d0
00005F54 4EB9 0000 3274             		jsr	(CalcSine).l
00005F5A 7800                       		moveq	#0,d4
00005F5C 1828 003C                  		move.b	$3C(a0),d4
00005F60 C3C4                       		muls.w	d4,d1
00005F62 E081                       		asr.l	#8,d1
00005F64 C1C4                       		muls.w	d4,d0
00005F66 E080                       		asr.l	#8,d0
00005F68 D268 0038                  		add.w	$38(a0),d1
00005F6C D068 003A                  		add.w	$3A(a0),d0
00005F70 3141 0008                  		move.w	d1,8(a0)
00005F74 3140 000C                  		move.w	d0,$C(a0)
00005F78 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
00005F7E 6700                       		beq.s	loc_55FA
00005F80 0668 0020 003C             		addi.w	#$20,$3C(a0)
00005F86                            
00005F86                            loc_55FA:
00005F86 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
00005F8C 6700                       		beq.s	loc_5608
00005F8E 0668 0020 003E             		addi.w	#$20,$3E(a0)
00005F94                            
00005F94                            loc_5608:
00005F94 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
00005F9A 6700                       		beq.s	locret_5614
00005F9C 5368 003A                  		subq.w	#1,$3A(a0)
00005FA0                            
00005FA0                            locret_5614:
00005FA0 4E75                       		rts	
00005FA2                            ; ===========================================================================
00005FA2                            ; ---------------------------------------------------------------------------
00005FA2                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
00005FA2                            ; ---------------------------------------------------------------------------
00005FA2                            
00005FA2                            Obj89:					; XREF: Obj_Index
00005FA2 7000                       		moveq	#0,d0
00005FA4 1028 0024                  		move.b	$24(a0),d0
00005FA8 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
00005FAC 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
00005FB0                            ; ===========================================================================
00005FB0 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
00005FB2 0000                       		dc.w Obj89_Move-Obj89_Index
00005FB4 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
00005FB6                            ; ===========================================================================
00005FB6                            
00005FB6                            Obj89_Main:				; XREF: Obj89_Index
00005FB6 5428 0024                  		addq.b	#2,$24(a0)
00005FBA 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
00005FC0 317C 00D8 000A             		move.w	#$D8,$A(a0)
00005FC6 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
00005FCE 317C 05C5 0002             		move.w	#$5C5,2(a0)
00005FD4 117C 0000 0001             		move.b	#0,1(a0)
00005FDA 117C 0000 0018             		move.b	#0,$18(a0)
00005FE0                            
00005FE0                            Obj89_Move:				; XREF: Obj89_Index
00005FE0 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
00005FE6 6700                       		beq.s	Obj89_Delay	; if yes, branch
00005FE8 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
00005FEE 4EF9 0000 0000                     jmp	DisplaySprite
00005FF4                            ; ===========================================================================
00005FF4                            
00005FF4                            Obj89_Delay:				; XREF: Obj89_Move
00005FF4 5428 0024                  		addq.b	#2,$24(a0)
00005FF8 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
00005FFE                            
00005FFE                            Obj89_GotoCredits:			; XREF: Obj89_Index
00005FFE 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00006002 6A00                       		bpl.s	Obj89_Display
00006004 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
0000600A                            
0000600A                            Obj89_Display:
0000600A 4EF9 0000 0000                     jmp	DisplaySprite
00006010                            ; ===========================================================================
00006010                            ; ---------------------------------------------------------------------------
00006010                            ; Sprite mappings - Sonic on the ending	sequence
00006010                            ; ---------------------------------------------------------------------------
00006010                            Map_obj87:
00006010                            	include "_maps\obj87.asm"
00006010                            ; ---------------------------------------------------------------------------
00006010                            ; Sprite mappings - Sonic on the ending	sequence
00006010                            ; ---------------------------------------------------------------------------
00006010 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
00006014 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
00006018 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
0000601C 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
00006020 02                         byte_5690:	dc.b 2
00006021 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
00006026 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
0000602B 03                         byte_569B:	dc.b 3
0000602C FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
00006031 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
00006036 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
0000603B 02                         byte_56AB:	dc.b 2
0000603C EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
00006041 FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
00006046 02                         byte_56B6:	dc.b 2
00006047 EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
0000604C FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
00006051 02                         byte_56C1:	dc.b 2
00006052 EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
00006057 FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
0000605C 03                         byte_56CC:	dc.b 3
0000605D EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
00006062 EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
00006067 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
0000606C 07                         byte_56DC:	dc.b 7
0000606D B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
00006072 BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
00006077 BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
0000607C CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
00006081 DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
00006086 E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
0000608B EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
00006090 18                         byte_5700:	dc.b $18
00006091 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
00006096 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
0000609B 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
000060A0 980B 0098 30               		dc.b $98, $B, 0, $98, $30
000060A5 A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
000060AA 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
000060AF 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
000060B4 A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
000060B9 B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
000060BE B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
000060C3 A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
000060C8 C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
000060CD C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
000060D2 B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
000060D7 B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
000060DC D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
000060E1 D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
000060E6 D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
000060EB E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
000060F0 E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
000060F5 D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
000060FA E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
000060FF F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
00006104 F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
0000610A 00                         		even
0000610A 00                         		even
0000610A                            
0000610A                            ; ---------------------------------------------------------------------------
0000610A                            ; Sprite mappings - chaos emeralds on the ending sequence
0000610A                            ; ---------------------------------------------------------------------------
0000610A                            Map_obj88:
0000610A                            	include "_maps\obj88.asm"
0000610A                            ; ---------------------------------------------------------------------------
0000610A                            ; Sprite mappings - chaos emeralds on the ending sequence
0000610A                            ; ---------------------------------------------------------------------------
0000610A 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
0000610E 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
00006112 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
00006116 0000                       		dc.w byte_57AC-Map_obj88
00006118 01                         byte_5788:	dc.b 1
00006119 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000611E 01                         byte_578E:	dc.b 1
0000611F F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00006124 01                         byte_5794:	dc.b 1
00006125 F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
0000612A 01                         byte_579A:	dc.b 1
0000612B F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
00006130 01                         byte_57A0:	dc.b 1
00006131 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
00006136 01                         byte_57A6:	dc.b 1
00006137 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0000613C 01                         byte_57AC:	dc.b 1
0000613D F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00006142                            		even
00006142                            		even
00006142                            
00006142                            ; ---------------------------------------------------------------------------
00006142                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00006142                            ; ---------------------------------------------------------------------------
00006142                            Map_obj89:
00006142                            	include "_maps\obj89.asm"
00006142                            ; ---------------------------------------------------------------------------
00006142                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00006142                            ; ---------------------------------------------------------------------------
00006142 0000                       		dc.w byte_57B4-Map_obj89
00006144 03                         byte_57B4:	dc.b 3
00006145 F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
0000614A F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000614F F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
00006154                            		even
00006154                            		even
00006154                            
00006154                            ; ===========================================================================
00006154                            ; ---------------------------------------------------------------------------
00006154                            ; Credits ending sequence
00006154                            ; ---------------------------------------------------------------------------
00006154                            
00006154                            Credits:				; XREF: GameModeArray
00006154 6100 B43A                  		bsr.w	ClearPLC
00006158 6100 BE3C                  		bsr.w	Pal_FadeFrom
0000615C 4DF9 00C0 0004             		lea	($C00004).l,a6
00006162 3CBC 8004                  		move.w	#$8004,(a6)
00006166 3CBC 8230                  		move.w	#$8230,(a6)
0000616A 3CBC 8407                  		move.w	#$8407,(a6)
0000616E 3CBC 9001                  		move.w	#$9001,(a6)
00006172 3CBC 9200                  		move.w	#$9200,(a6)
00006176 3CBC 8B03                  		move.w	#$8B03,(a6)
0000617A 3CBC 8720                  		move.w	#$8720,(a6)
0000617E 4238 F64E                  		clr.b	($FFFFF64E).w
00006182 6100 B0AC                  		bsr.w	ClearScreen
00006186 43F8 D000                  		lea	($FFFFD000).w,a1
0000618A 7000                       		moveq	#0,d0
0000618C 323C 07FF                  		move.w	#$7FF,d1
00006190                            
00006190                            Cred_ClrObjRam:
00006190 22C0                       		move.l	d0,(a1)+
00006192 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
00006196                            
00006196 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
000061A0 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
000061A6 6100 B232                  		bsr.w	NemDec
000061AA 43F8 FB80                  		lea	($FFFFFB80).w,a1
000061AE 7000                       		moveq	#0,d0
000061B0 323C 001F                  		move.w	#$1F,d1
000061B4                            
000061B4                            Cred_ClrPalette:
000061B4 22C0                       		move.l	d0,(a1)+
000061B6 51C9 FFFC                  		dbf	d1,Cred_ClrPalette ; fill Palette	with black ($0000)
000061BA                            
000061BA 7003                       		moveq	#3,d0
000061BC 6100 C088                  		bsr.w	PalLoad1	; load Sonic's Palette
000061C0 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
000061C6 4EB9 0000 0000             		jsr	ObjectsLoad
000061CC 4EB9 0000 0000             		jsr	BuildSprites
000061D2 6100 0000                  		bsr.w	EndingDemoLoad
000061D6 7000                       		moveq	#0,d0
000061D8 1038 FE10                  		move.b	($FFFFFE10).w,d0
000061DC E948                       		lsl.w	#4,d0
000061DE 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
000061E4 45F2 0000                  		lea	(a2,d0.w),a2
000061E8 7000                       		moveq	#0,d0
000061EA 1012                       		move.b	(a2),d0
000061EC 6700                       		beq.s	loc_5862
000061EE 6100 B342                  		bsr.w	LoadPLC		; load level patterns
000061F2                            
000061F2                            loc_5862:
000061F2 7001                       		moveq	#1,d0
000061F4 6100 B33C                  		bsr.w	LoadPLC		; load standard	level patterns
000061F8 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
000061FE 6100 BCDC                  		bsr.w	Pal_FadeTo
00006202                            
00006202                            Cred_WaitLoop:
00006202 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00006208 6100 D038                  		bsr.w	DelayProgram
0000620C 6100 B390                  		bsr.w	RunPLC_RAM
00006210 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
00006214 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
00006216 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
0000621A 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
0000621C 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
00006222 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
00006226 4E75                       		rts	
00006228                            
00006228                            ; ---------------------------------------------------------------------------
00006228                            ; Ending sequence demo loading subroutine
00006228                            ; ---------------------------------------------------------------------------
00006228                            
00006228                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006228                            
00006228                            
00006228                            EndingDemoLoad:				; XREF: Credits
00006228 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
0000622C 0240 000F                  		andi.w	#$F,d0
00006230 D040                       		add.w	d0,d0
00006232 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
00006236 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
0000623A 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
0000623E 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
00006244 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
00006246 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
0000624C 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
00006252 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00006258 7000                       		moveq	#0,d0
0000625A 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000625E 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00006262 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00006266 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
0000626A 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
00006270 6600                       		bne.s	EndDemo_Exit	; if not, branch
00006272 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
00006278 45F8 FE30                  		lea	($FFFFFE30).w,a2
0000627C 303C 0008                  		move.w	#8,d0
00006280                            
00006280                            EndDemo_LampLoad:
00006280 24D9                       		move.l	(a1)+,(a2)+
00006282 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
00006286                            
00006286                            EndDemo_Exit:
00006286 4E75                       		rts	
00006288                            ; End of function EndingDemoLoad
00006288                            
00006288                            ; ===========================================================================
00006288                            ; ---------------------------------------------------------------------------
00006288                            ; Levels used in the end sequence demos
00006288                            ; ---------------------------------------------------------------------------
00006288                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00006298                            
00006298                            ; ---------------------------------------------------------------------------
00006298                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00006298                            ; ---------------------------------------------------------------------------
00006298                            EndDemo_LampVar:
00006298 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
0000629A 0A00 062C 000D             		dc.w $A00, $62C, $D
000062A0 0000 0000                  		dc.l 0
000062A4 0000                       		dc.b 0,	0
000062A6 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
000062BA 0101                       		dc.b 1,	1
000062BC                            ; ===========================================================================
000062BC                            ; ---------------------------------------------------------------------------
000062BC                            ; "TRY AGAIN" and "END"	screens
000062BC                            ; ---------------------------------------------------------------------------
000062BC                            
000062BC                            TryAgainEnd:				; XREF: Credits
000062BC 6100 B2D2                  		bsr.w	ClearPLC
000062C0 6100 BCD4                  		bsr.w	Pal_FadeFrom
000062C4 4DF9 00C0 0004             		lea	($C00004).l,a6
000062CA 3CBC 8004                  		move.w	#$8004,(a6)
000062CE 3CBC 8230                  		move.w	#$8230,(a6)
000062D2 3CBC 8407                  		move.w	#$8407,(a6)
000062D6 3CBC 9001                  		move.w	#$9001,(a6)
000062DA 3CBC 9200                  		move.w	#$9200,(a6)
000062DE 3CBC 8B03                  		move.w	#$8B03,(a6)
000062E2 3CBC 8720                  		move.w	#$8720,(a6)
000062E6 4238 F64E                  		clr.b	($FFFFF64E).w
000062EA 6100 AF44                  		bsr.w	ClearScreen
000062EE 43F8 D000                  		lea	($FFFFD000).w,a1
000062F2 7000                       		moveq	#0,d0
000062F4 323C 07FF                  		move.w	#$7FF,d1
000062F8                            
000062F8                            TryAg_ClrObjRam:
000062F8 22C0                       		move.l	d0,(a1)+
000062FA 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
000062FE                            
000062FE 701D                       		moveq	#$1D,d0
00006300 6100 B39C                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
00006304 43F8 FB80                  		lea	($FFFFFB80).w,a1
00006308 7000                       		moveq	#0,d0
0000630A 323C 001F                  		move.w	#$1F,d1
0000630E                            
0000630E                            TryAg_ClrPalette:
0000630E 22C0                       		move.l	d0,(a1)+
00006310 51C9 FFFC                  		dbf	d1,TryAg_ClrPalette ; fill Palette with black ($0000)
00006314                            
00006314 7013                       		moveq	#$13,d0
00006316 6100 BF2E                  		bsr.w	PalLoad1	; load ending Palette
0000631A 4278 FBC0                  		clr.w	($FFFFFBC0).w
0000631E 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
00006324 4EB9 0000 0000             		jsr	ObjectsLoad
0000632A 4EB9 0000 0000             		jsr	BuildSprites
00006330 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
00006336 6100 BBA4                  		bsr.w	Pal_FadeTo
0000633A                            
0000633A                            ; ---------------------------------------------------------------------------
0000633A                            ; "TRY AGAIN" and "END"	screen main loop
0000633A                            ; ---------------------------------------------------------------------------
0000633A                            TryAg_MainLoop:
0000633A 6100 AFFC                  		bsr.w	PauseGame
0000633E 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00006344 6100 CEFC                  		bsr.w	DelayProgram
00006348 4EB9 0000 0000             		jsr	ObjectsLoad
0000634E 4EB9 0000 0000             		jsr	BuildSprites
00006354 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
0000635A 6600                       		bne.s	TryAg_Exit	; if yes, branch
0000635C 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
00006360 6700                       		beq.s	TryAg_Exit	; if yes, branch
00006362 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
00006368 67D0                       		beq.s	TryAg_MainLoop
0000636A                            
0000636A                            TryAg_Exit:
0000636A 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00006370 4E75                       		rts	
00006372                            
00006372                            ; ===========================================================================
00006372                            ; ---------------------------------------------------------------------------
00006372                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00006372                            ; ---------------------------------------------------------------------------
00006372                            
00006372                            Obj8B:					; XREF: Obj_Index
00006372 7000                       		moveq	#0,d0
00006374 1028 0024                  		move.b	$24(a0),d0
00006378 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
0000637C 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
00006380 4EF9 0000 0000             		jmp	DisplaySprite
00006386                            ; ===========================================================================
00006386 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
00006388 0000                       		dc.w Obj8B_Animate-Obj8B_Index
0000638A 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
0000638C 0000                       		dc.w loc_5A8E-Obj8B_Index
0000638E                            ; ===========================================================================
0000638E                            
0000638E                            Obj8B_Main:				; XREF: Obj8B_Index
0000638E 5428 0024                  		addq.b	#2,$24(a0)
00006392 317C 0120 0008             		move.w	#$120,8(a0)
00006398 317C 00F4 000A             		move.w	#$F4,$A(a0)
0000639E 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
000063A6 317C 03E1 0002             		move.w	#$3E1,2(a0)
000063AC 117C 0000 0001             		move.b	#0,1(a0)
000063B2 117C 0002 0018             		move.b	#2,$18(a0)
000063B8 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
000063BE 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
000063C4 6700                       		beq.s	Obj8B_Animate	; if yes, branch
000063C6 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
000063CC 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
000063D2 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
000063D8 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
000063DE                            
000063DE                            Obj8B_Animate:				; XREF: Obj8B_Index
000063DE 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
000063E4 4EF9 0000 0000             		jmp	AnimateSprite
000063EA                            ; ===========================================================================
000063EA                            
000063EA                            Obj8B_Juggle:				; XREF: Obj8B_Index
000063EA 5428 0024                  		addq.b	#2,$24(a0)
000063EE 7002                       		moveq	#2,d0
000063F0 0828 0000 001C             		btst	#0,$1C(a0)
000063F6 6700                       		beq.s	loc_5A6A
000063F8 4440                       		neg.w	d0
000063FA                            
000063FA                            loc_5A6A:
000063FA 43F8 D800                  		lea	($FFFFD800).w,a1
000063FE 7205                       		moveq	#5,d1
00006400                            
00006400                            loc_5A70:
00006400 1340 003E                  		move.b	d0,$3E(a1)
00006404 3400                       		move.w	d0,d2
00006406 E742                       		asl.w	#3,d2
00006408 D529 0026                  		add.b	d2,$26(a1)
0000640C 43E9 0040                  		lea	$40(a1),a1
00006410 51C9 FFEE                  		dbf	d1,loc_5A70
00006414 5228 001A                  		addq.b	#1,$1A(a0)
00006418 317C 0070 0030             		move.w	#112,$30(a0)
0000641E                            
0000641E                            loc_5A8E:				; XREF: Obj8B_Index
0000641E 5368 0030                  		subq.w	#1,$30(a0)
00006422 6A00                       		bpl.s	locret_5AA0
00006424 0868 0000 001C             		bchg	#0,$1C(a0)
0000642A 117C 0002 0024             		move.b	#2,$24(a0)
00006430                            
00006430                            locret_5AA0:
00006430 4E75                       		rts	
00006432                            ; ===========================================================================
00006432                            Ani_obj8B:
00006432                            	include "_anim\obj8B.asm"
00006432                            ; ---------------------------------------------------------------------------
00006432                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00006432                            ; ---------------------------------------------------------------------------
00006432 0000                       		dc.w byte_5AA8-Ani_obj8B
00006434 0000                       		dc.w byte_5AAC-Ani_obj8B
00006436 0000                       		dc.w byte_5AB0-Ani_obj8B
00006438 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
0000643C 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
00006440 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
00006452                            		even
00006452                            		even
00006452                            
00006452                            ; ===========================================================================
00006452                            ; ---------------------------------------------------------------------------
00006452                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00006452                            ; ---------------------------------------------------------------------------
00006452                            
00006452                            Obj8C:					; XREF: Obj_Index
00006452 7000                       		moveq	#0,d0
00006454 1028 0024                  		move.b	$24(a0),d0
00006458 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
0000645C 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
00006460 4EF9 0000 0000             		jmp	DisplaySprite
00006466                            ; ===========================================================================
00006466 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
00006468 0000                       		dc.w Obj8C_Move-Obj8C_Index
0000646A                            ; ===========================================================================
0000646A                            
0000646A                            Obj8C_Main:				; XREF: Obj8C_Index
0000646A 2248                       		movea.l	a0,a1
0000646C 7400                       		moveq	#0,d2
0000646E 7600                       		moveq	#0,d3
00006470 7205                       		moveq	#5,d1
00006472 9238 FE57                  		sub.b	($FFFFFE57).w,d1
00006476                            
00006476                            Obj8C_MakeEms:				; XREF: loc_5B42
00006476 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
0000647A 5429 0024                  		addq.b	#2,$24(a1)
0000647E 237C 0000 610A 0004        		move.l	#Map_obj88,4(a1)
00006486 337C 03C5 0002             		move.w	#$3C5,2(a1)
0000648C 137C 0000 0001             		move.b	#0,1(a1)
00006492 137C 0001 0018             		move.b	#1,$18(a1)
00006498 337C 0104 0008             		move.w	#$104,8(a1)
0000649E 337C 0120 0038             		move.w	#$120,$38(a1)
000064A4 337C 00EC 000A             		move.w	#$EC,$A(a1)
000064AA 3369 000A 003A             		move.w	$A(a1),$3A(a1)
000064B0 137C 001C 003C             		move.b	#$1C,$3C(a1)
000064B6 47F8 FE58                  		lea	($FFFFFE58).w,a3
000064BA                            
000064BA                            Obj8C_ChkEms:
000064BA 7000                       		moveq	#0,d0
000064BC 1038 FE57                  		move.b	($FFFFFE57).w,d0
000064C0 5340                       		subq.w	#1,d0
000064C2 6500                       		bcs.s	loc_5B42
000064C4                            
000064C4                            Obj8C_ChkEmLoop:
000064C4 B433 0000                  		cmp.b	(a3,d0.w),d2
000064C8 6600                       		bne.s	loc_5B3E
000064CA 5202                       		addq.b	#1,d2
000064CC 60EC                       		bra.s	Obj8C_ChkEms
000064CE                            ; ===========================================================================
000064CE                            
000064CE                            loc_5B3E:
000064CE 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
000064D2                            
000064D2                            loc_5B42:
000064D2 1342 001A                  		move.b	d2,$1A(a1)
000064D6 5229 001A                  		addq.b	#1,$1A(a1)
000064DA 5202                       		addq.b	#1,d2
000064DC 137C 0080 0026             		move.b	#$80,$26(a1)
000064E2 1343 001E                  		move.b	d3,$1E(a1)
000064E6 1343 001F                  		move.b	d3,$1F(a1)
000064EA 0643 000A                  		addi.w	#$A,d3
000064EE 43E9 0040                  		lea	$40(a1),a1
000064F2 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
000064F6                            
000064F6                            Obj8C_Move:				; XREF: Obj8C_Index
000064F6 4A68 003E                  		tst.w	$3E(a0)
000064FA 6700                       		beq.s	locret_5BBA
000064FC 4A28 001E                  		tst.b	$1E(a0)
00006500 6700                       		beq.s	loc_5B78
00006502 5328 001E                  		subq.b	#1,$1E(a0)
00006506 6600                       		bne.s	loc_5B80
00006508                            
00006508                            loc_5B78:
00006508 3028 003E                  		move.w	$3E(a0),d0
0000650C D168 0026                  		add.w	d0,$26(a0)
00006510                            
00006510                            loc_5B80:
00006510 1028 0026                  		move.b	$26(a0),d0
00006514 6700                       		beq.s	loc_5B8C
00006516 0C00 0080                  		cmpi.b	#$80,d0
0000651A 6600                       		bne.s	loc_5B96
0000651C                            
0000651C                            loc_5B8C:
0000651C 4268 003E                  		clr.w	$3E(a0)
00006520 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00006526                            
00006526                            loc_5B96:
00006526 4EB9 0000 3274             		jsr	(CalcSine).l
0000652C 7800                       		moveq	#0,d4
0000652E 1828 003C                  		move.b	$3C(a0),d4
00006532 C3C4                       		muls.w	d4,d1
00006534 E081                       		asr.l	#8,d1
00006536 C1C4                       		muls.w	d4,d0
00006538 E080                       		asr.l	#8,d0
0000653A D268 0038                  		add.w	$38(a0),d1
0000653E D068 003A                  		add.w	$3A(a0),d0
00006542 3141 0008                  		move.w	d1,8(a0)
00006546 3140 000A                  		move.w	d0,$A(a0)
0000654A                            
0000654A                            locret_5BBA:
0000654A 4E75                       		rts	
0000654C                            ; ===========================================================================
0000654C                            ; ---------------------------------------------------------------------------
0000654C                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
0000654C                            ; ---------------------------------------------------------------------------
0000654C                            Map_obj8B:
0000654C                            	include "_maps\obj8B.asm"
0000654C                            ; ---------------------------------------------------------------------------
0000654C                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
0000654C                            ; ---------------------------------------------------------------------------
0000654C 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
00006550 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
00006554 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
00006558 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
0000655C 08                         byte_5BCC:	dc.b 8
0000655D E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00006562 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00006567 E904 0008 00               		dc.b $E9, 4, 0,	8, 0
0000656C F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00006571 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006576 0106 0823 00               		dc.b 1,	6, 8, $23, 0
0000657B 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006580 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006585 08                         byte_5BF5:	dc.b 8
00006586 E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
0000658B F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00006590 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00006595 F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
0000659A 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
0000659F 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
000065A4 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
000065A9 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
000065AE 08                         byte_5C1E:	dc.b 8
000065AF E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
000065B4 F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
000065B9 E905 0800 00               		dc.b $E9, 5, 8,	0, 0
000065BE F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
000065C3 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
000065C8 0106 0823 00               		dc.b 1,	6, 8, $23, 0
000065CD 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
000065D2 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
000065D7 08                         byte_5C47:	dc.b 8
000065D8 E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
000065DD F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
000065E2 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
000065E7 F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
000065EC 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
000065F1 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
000065F6 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
000065FB 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006600 0C                         byte_5C70:	dc.b $C
00006601 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
00006606 F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
0000660B 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
00006610 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
00006615 ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
0000661A F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
0000661F 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00006624 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
00006629 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
0000662E 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
00006633 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006638 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
0000663D 0A                         byte_5CAD:	dc.b $A
0000663E D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00006643 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00006648 F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
0000664D D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00006652 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
00006657 F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
0000665C 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006661 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006666 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
0000666B 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00006670 0A                         byte_5CE0:	dc.b $A
00006671 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00006676 E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
0000667B EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00006680 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00006685 E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
0000668A EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
0000668F 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006694 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006699 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
0000669E 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
000066A3 0C                         byte_5D13:	dc.b $C
000066A4 F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
000066A9 FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
000066AE 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
000066B3 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
000066B8 F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
000066BD FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
000066C2 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
000066C7 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
000066CC 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
000066D1 180C 0087 00               		dc.b $18, $C, 0, $87, 0
000066D6 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
000066DB 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
000066E0                            		even
000066E0                            		even
000066E0                            
000066E0                            ; ---------------------------------------------------------------------------
000066E0                            ; Ending sequence demos
000066E0                            ; ---------------------------------------------------------------------------
000066E0                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
0000670E                            		even
0000670E                            Demo_EndMZ:	incbin	demodata\e_mz.bin
0000674E                            		even
0000674E                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
0000677E                            		even
0000677E                            Demo_EndLZ:	incbin	demodata\e_lz.bin
000067AE                            		even
000067AE                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
000067CE                            		even
000067CE                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
000067EE                            		even
000067EE                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
0000681E                            		even
0000681E                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
0000684E                            		even
0000684E                            
0000684E                            ; ---------------------------------------------------------------------------
0000684E                            ; Subroutine to	load level boundaries and start	locations
0000684E                            ; ---------------------------------------------------------------------------
0000684E                            
0000684E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000684E                            
0000684E                            
0000684E                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
0000684E 7000                       		moveq	#0,d0
00006850 11C0 F740                  		move.b	d0,($FFFFF740).w
00006854 11C0 F741                  		move.b	d0,($FFFFF741).w
00006858 11C0 F746                  		move.b	d0,($FFFFF746).w
0000685C 11C0 F748                  		move.b	d0,($FFFFF748).w
00006860 11C0 F742                  		move.b	d0,($FFFFF742).w
00006864 3038 FE10                  		move.w	($FFFFFE10).w,d0
00006868 ED08                       		lsl.b	#6,d0
0000686A E848                       		lsr.w	#4,d0
0000686C 3200                       		move.w	d0,d1
0000686E D040                       		add.w	d0,d0
00006870 D041                       		add.w	d1,d0
00006872 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00006876 3018                       		move.w	(a0)+,d0
00006878 31C0 F730                  		move.w	d0,($FFFFF730).w
0000687C 2018                       		move.l	(a0)+,d0
0000687E 21C0 F728                  		move.l	d0,($FFFFF728).w
00006882 21C0 F720                  		move.l	d0,($FFFFF720).w
00006886 2018                       		move.l	(a0)+,d0
00006888 21C0 F72C                  		move.l	d0,($FFFFF72C).w
0000688C 21C0 F724                  		move.l	d0,($FFFFF724).w
00006890 3038 F728                  		move.w	($FFFFF728).w,d0
00006894 0640 0240                  		addi.w	#$240,d0
00006898 31C0 F732                  		move.w	d0,($FFFFF732).w
0000689C 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
000068A2 3018                       		move.w	(a0)+,d0
000068A4 31C0 F73E                  		move.w	d0,($FFFFF73E).w
000068A8 6000 0000                  		bra.w	LevSz_ChkLamp
000068AC                            ; ===========================================================================
000068AC                            ; ---------------------------------------------------------------------------
000068AC                            ; Level size array and ending start location array
000068AC                            ; ---------------------------------------------------------------------------
000068AC                            LevelSizeArray:	incbin	misc\lvl_size.bin
000069FC                            		even
000069FC                            
000069FC                            EndingStLocArray:
000069FC                            		incbin	misc\sloc_end.bin
00006A1C                            		even
00006A1C                            
00006A1C                            ; ===========================================================================
00006A1C                            
00006A1C                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
00006A1C 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
00006A20 6700                       		beq.s	LevSz_StartLoc	; if not, branch
00006A22 4EB9 0000 0000             		jsr	Obj79_LoadInfo
00006A28 3238 D008                  		move.w	($FFFFD008).w,d1
00006A2C 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006A30 6000                       		bra.s	loc_60D0
00006A32                            ; ===========================================================================
00006A32                            
00006A32                            LevSz_StartLoc:				; XREF: LevelSizeLoad
00006A32 3038 FE10                  		move.w	($FFFFFE10).w,d0
00006A36 ED08                       		lsl.b	#6,d0
00006A38 E848                       		lsr.w	#4,d0
00006A3A 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
00006A3E 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00006A42 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
00006A44 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00006A48 5340                       		subq.w	#1,d0
00006A4A E548                       		lsl.w	#2,d0
00006A4C 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
00006A50                            
00006A50                            LevSz_SonicPos:
00006A50 7200                       		moveq	#0,d1
00006A52 3219                       		move.w	(a1)+,d1
00006A54 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
00006A58 7000                       		moveq	#0,d0
00006A5A 3011                       		move.w	(a1),d0
00006A5C 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
00006A60                            
00006A60                            loc_60D0:				; XREF: LevSz_ChkLamp
00006A60 0441 00A0                  		subi.w	#$A0,d1
00006A64 6400                       		bcc.s	loc_60D8
00006A66 7200                       		moveq	#0,d1
00006A68                            
00006A68                            loc_60D8:
00006A68 3438 F72A                  		move.w	($FFFFF72A).w,d2
00006A6C B242                       		cmp.w	d2,d1
00006A6E 6500                       		bcs.s	loc_60E2
00006A70 3202                       		move.w	d2,d1
00006A72                            
00006A72                            loc_60E2:
00006A72 31C1 F700                  		move.w	d1,($FFFFF700).w
00006A76 0440 0060                  		subi.w	#$60,d0
00006A7A 6400                       		bcc.s	loc_60EE
00006A7C 7000                       		moveq	#0,d0
00006A7E                            
00006A7E                            loc_60EE:
00006A7E B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00006A82 6D00                       		blt.s	loc_60F8
00006A84 3038 F72E                  		move.w	($FFFFF72E).w,d0
00006A88                            
00006A88                            loc_60F8:
00006A88 31C0 F704                  		move.w	d0,($FFFFF704).w
00006A8C 6100 0000                  		bsr.w	BgScrollSpeed
00006A90 7000                       		moveq	#0,d0
00006A92 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006A96 E508                       		lsl.b	#2,d0
00006A98 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
00006A9E 6000 0000                  		bra.w	LevSz_Unk
00006AA2                            ; ===========================================================================
00006AA2                            ; ---------------------------------------------------------------------------
00006AA2                            ; Sonic	start location array
00006AA2                            ; ---------------------------------------------------------------------------
00006AA2                            StartLocArray: ; Offset_0x00611E:                 
00006AA2                            
00006AA2 0050 03B0 0050 00FC 0050+                  dc.l    $005003B0, $005000FC, $005003B0, $008000A8  ; GHz
00006AB2                            
00006AB2 0060 006C 0050 00EC 0050+                  dc.l    $0060006C, $005000EC, $005002EC, $0B800000  ; Lz
00006AC2                            
00006AC2 0030 0266 0030 0266 0030+                  dc.l    $00300266, $00300266, $00300166, $008000A8  ; Mz
00006AD2                            
00006AD2 0040 02CC 0040 014C 0040+                  dc.l    $004002CC, $0040014C, $0040014C, $008000A8  ; SLz
00006AE2                            
00006AE2 0030 03BD 0030 01BD 0030+                  dc.l    $003003BD, $003001BD, $003000EC, $008000A8  ; SYz 
00006AF2                            
00006AF2 0030 048C 0030 074C 2140+                  dc.l    $0030048C, $0030074C, $214005AC, $008000A8  ; SBz
00006B02                            
00006B02 0620 016B 0EE0 016C 0080+                  dc.l    $0620016B, $0EE0016C, $008000A8, $008000A8  ; GHz Ending
00006B12                            
00006B12                            ; ---------------------------------------------------------------------------
00006B12                            ; Which	256x256	tiles contain loops or roll-tunnels
00006B12                            ; ---------------------------------------------------------------------------
00006B12                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
00006B12                            ; loop,	loop, tunnel, tunnel
00006B12                            ; ---------------------------------------------------------------------------
00006B12                            LoopTileNums:	incbin	misc\loopnums.bin
00006B2E                            		even
00006B2E                            
00006B2E                            ; ===========================================================================
00006B2E                            
00006B2E                            LevSz_Unk:				; XREF: LevelSizeLoad
00006B2E 7000                       		moveq	#0,d0
00006B30 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006B34 E748                       		lsl.w	#3,d0
00006B36 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
00006B3A 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
00006B3E 24D9                       		move.l	(a1)+,(a2)+
00006B40 24D9                       		move.l	(a1)+,(a2)+
00006B42 4E75                       		rts	
00006B44                            ; End of function LevelSizeLoad
00006B44                            
00006B44                            ; ===========================================================================
00006B44 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
00006B4C 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006B54 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006B5C 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006B64 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006B6C 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006B74 0070 0100 0100 0100        		dc.l $700100, $1000100
00006B7C                            
00006B7C                            ; ---------------------------------------------------------------------------
00006B7C                            ; Subroutine to	set scroll speed of some backgrounds
00006B7C                            ; ---------------------------------------------------------------------------
00006B7C                            
00006B7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006B7C                            
00006B7C                            
00006B7C                            BgScrollSpeed:				; XREF: LevelSizeLoad
00006B7C 4A38 FE30                  		tst.b	($FFFFFE30).w
00006B80 6600                       		bne.s	loc_6206
00006B82 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006B86 31C0 F714                  		move.w	d0,($FFFFF714).w
00006B8A 31C1 F708                  		move.w	d1,($FFFFF708).w
00006B8E 31C1 F710                  		move.w	d1,($FFFFF710).w
00006B92 31C1 F718                  		move.w	d1,($FFFFF718).w
00006B96                            
00006B96                            loc_6206:
00006B96 7400                       		moveq	#0,d2
00006B98 1438 FE10                  		move.b	($FFFFFE10).w,d2
00006B9C D442                       		add.w	d2,d2
00006B9E 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
00006BA2 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
00006BA6                            ; End of function BgScrollSpeed
00006BA6                            
00006BA6                            ; ===========================================================================
00006BA6 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
00006BAA 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
00006BAE 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
00006BB2 0000                       		dc.w BgScroll_End-BgScroll_Index
00006BB4                            ; ===========================================================================
00006BB4                            
00006BB4                            BgScroll_GHZ:				; XREF: BgScroll_Index
00006BB4 42B8 F708                  		clr.l	($FFFFF708).w
00006BB8 42B8 F70C                  		clr.l	($FFFFF70C).w
00006BBC 42B8 F714                  		clr.l	($FFFFF714).w
00006BC0 42B8 F71C                  		clr.l	($FFFFF71C).w
00006BC4 45F8 A800                  		lea	($FFFFA800).w,a2
00006BC8 429A                       		clr.l	(a2)+
00006BCA 429A                       		clr.l	(a2)+
00006BCC 429A                       		clr.l	(a2)+
00006BCE 4E75                       		rts 
00006BD0                            ; ===========================================================================
00006BD0                             
00006BD0                            BgScroll_LZ:				; XREF: BgScroll_Index
00006BD0 E280                       		asr.l	#1,d0
00006BD2 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006BD6 4E75                       		rts	
00006BD8                            ; ===========================================================================
00006BD8                             
00006BD8                            BgScroll_MZ:				; XREF: BgScroll_Index
00006BD8 4E75                       		rts	
00006BDA                            ; ===========================================================================
00006BDA                             
00006BDA                            BgScroll_SLZ:				; XREF: BgScroll_Index
00006BDA E280                       		asr.l	#1,d0
00006BDC 0640 00C0                  		addi.w	#$C0,d0
00006BE0 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006BE4 42B8 F708                  		clr.l	($FFFFF708).w
00006BE8 4E75                       		rts	
00006BEA                            ; ===========================================================================
00006BEA                             
00006BEA                            BgScroll_SYZ:				; XREF: BgScroll_Index
00006BEA E980                       		asl.l	#4,d0
00006BEC 2400                       		move.l	d0,d2
00006BEE E380                       		asl.l	#1,d0
00006BF0 D082                       		add.l	d2,d0
00006BF2 E080                       		asr.l	#8,d0
00006BF4 5240                       		addq.w	#1,d0
00006BF6 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006BFA 42B8 F708                  		clr.l	($FFFFF708).w
00006BFE 4E75                       		rts	
00006C00                            ; ===========================================================================
00006C00                             
00006C00                            BgScroll_SBZ:				; XREF: BgScroll_Index
00006C00 0240 07F8                  		andi.w	#$7F8,d0
00006C04 E640                       		asr.w	#3,d0
00006C06 5240                       		addq.w	#1,d0
00006C08 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006C0C 4E75                       		rts	
00006C0E                            ; ===========================================================================
00006C0E                             
00006C0E                            BgScroll_End:				; XREF: BgScroll_Index
00006C0E 3038 F700                  		move.w	($FFFFF700).w,d0
00006C12 E240                       		asr.w	#1,d0
00006C14 31C0 F708                  		move.w	d0,($FFFFF708).w
00006C18 31C0 F710                  		move.w	d0,($FFFFF710).w
00006C1C E440                       		asr.w	#2,d0
00006C1E 3200                       		move.w	d0,d1
00006C20 D040                       		add.w	d0,d0
00006C22 D041                       		add.w	d1,d0
00006C24 31C0 F718                  		move.w	d0,($FFFFF718).w
00006C28 42B8 F70C                  		clr.l	($FFFFF70C).w
00006C2C 42B8 F714                  		clr.l	($FFFFF714).w
00006C30 42B8 F71C                  		clr.l	($FFFFF71C).w
00006C34 45F8 A800                  		lea	($FFFFA800).w,a2
00006C38 429A                       		clr.l	(a2)+
00006C3A 429A                       		clr.l	(a2)+
00006C3C 429A                       		clr.l	(a2)+
00006C3E 4E75                       		rts   
00006C40                            
00006C40                            ; ---------------------------------------------------------------------------
00006C40                            ; Background layer deformation subroutines
00006C40                            ; ---------------------------------------------------------------------------
00006C40                            
00006C40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C40                            
00006C40                            
00006C40                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
00006C40 4A38 F744                  		tst.b	($FFFFF744).w
00006C44 6700                       		beq.s	loc_628E
00006C46 4E75                       		rts	
00006C48                            ; ===========================================================================
00006C48                            
00006C48                            loc_628E:
00006C48 4278 F754                  		clr.w	($FFFFF754).w
00006C4C 4278 F756                  		clr.w	($FFFFF756).w
00006C50 4278 F758                  		clr.w	($FFFFF758).w
00006C54 4278 F75A                  		clr.w	($FFFFF75A).w
00006C58 6100 0000                  		bsr.w	ScrollHoriz
00006C5C 6100 0000                  		bsr.w	ScrollVertical
00006C60 6100 0000                  		bsr.w	DynScrResizeLoad
00006C64 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
00006C6A 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
00006C70 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
00006C76 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006C7C 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
00006C82 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
00006C88 7000                       		moveq	#0,d0
00006C8A 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006C8E D040                       		add.w	d0,d0
00006C90 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
00006C94 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
00006C98                            ; End of function DeformBgLayer
00006C98                            
00006C98                            ; ===========================================================================
00006C98                            ; ---------------------------------------------------------------------------
00006C98                            ; Offset index for background layer deformation	code
00006C98                            ; ---------------------------------------------------------------------------
00006C98 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
00006C9C 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
00006CA0 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
00006CA4 0000                       		dc.w Deform_GHZ-Deform_Index
00006CA6                            ; ---------------------------------------------------------------------------
00006CA6                            ; Green	Hill Zone background layer deformation code
00006CA6                            ; ---------------------------------------------------------------------------
00006CA6                            
00006CA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006CA6                            
00006CA6                            
00006CA6                            Deform_GHZ:
00006CA6 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006CAA 48C4                       		ext.l	d4
00006CAC EB84                       		asl.l	#5,d4
00006CAE 2204                       		move.l	d4,d1
00006CB0 E384                       		asl.l	#1,d4
00006CB2 D881                       		add.l	d1,d4
00006CB4 7C00                       		moveq	#0,d6
00006CB6 6100 0000                  		bsr.w	ScrollBlock6
00006CBA 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006CBE 48C4                       		ext.l	d4
00006CC0 EF84                       		asl.l	#7,d4
00006CC2 7C00                       		moveq	#0,d6
00006CC4 6100 0000                  		bsr.w	ScrollBlock5
00006CC8 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006CCC 3038 F704                  		move.w	($FFFFF704).w,d0
00006CD0 0240 07FF                  		andi.w	#$7FF,d0
00006CD4 EA48                       		lsr.w	#5,d0
00006CD6 4440                       		neg.w	d0
00006CD8 0640 0020                  		addi.w	#$20,d0	; ' '
00006CDC 6A00                       		bpl.s	Deform_GHZ_1
00006CDE 7000                       		moveq	#0,d0
00006CE0                             
00006CE0                            Deform_GHZ_1:				; XREF: Deform_GHZ
00006CE0 3800                       		move.w	d0,d4
00006CE2 31C0 F618                  		move.w	d0,($FFFFF618).w
00006CE6 3038 F700                  		move.w	($FFFFF700).w,d0
00006CEA 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
00006CF0 6600                       		bne.s	Deform_GHZ_2
00006CF2 7000                       		moveq	#0,d0
00006CF4                             
00006CF4                            Deform_GHZ_2:				; XREF: Deform_GHZ
00006CF4 4440                       		neg.w	d0
00006CF6 4840                       		swap	d0
00006CF8 45F8 A800                  		lea	($FFFFA800).w,a2
00006CFC 069A 0001 0000             		addi.l	#$10000,(a2)+
00006D02 069A 0000 C000             		addi.l	#$C000,(a2)+
00006D08 069A 0000 8000             		addi.l	#$8000,(a2)+
00006D0E 3038 A800                  		move.w	($FFFFA800).w,d0
00006D12 D078 F718                  		add.w	($FFFFF718).w,d0
00006D16 4440                       		neg.w	d0
00006D18 323C 001F                  		move.w	#$1F,d1
00006D1C 9244                       		sub.w	d4,d1
00006D1E 6500                       		bcs.s	Deform_GHZ_4
00006D20                             
00006D20                            Deform_GHZ_3:				; XREF: Deform_GHZ
00006D20 22C0                       		move.l	d0,(a1)+
00006D22 51C9 FFFC                  		dbf	d1,Deform_GHZ_3
00006D26                             
00006D26                            Deform_GHZ_4:				; XREF: Deform_GHZ
00006D26 3038 A804                  		move.w	($FFFFA804).w,d0
00006D2A D078 F718                  		add.w	($FFFFF718).w,d0
00006D2E 4440                       		neg.w	d0
00006D30 323C 000F                  		move.w	#$F,d1
00006D34                             
00006D34                            Deform_GHZ_5:				; XREF: Deform_GHZ
00006D34 22C0                       		move.l	d0,(a1)+
00006D36 51C9 FFFC                  		dbf	d1,Deform_GHZ_5
00006D3A 3038 A808                  		move.w	($FFFFA808).w,d0
00006D3E D078 F718                  		add.w	($FFFFF718).w,d0
00006D42 4440                       		neg.w	d0
00006D44 323C 000F                  		move.w	#$F,d1
00006D48                             
00006D48                            Deform_GHZ_6:				; XREF: Deform_GHZ
00006D48 22C0                       		move.l	d0,(a1)+
00006D4A 51C9 FFFC                  		dbf	d1,Deform_GHZ_6
00006D4E 323C 002F                  		move.w	#$2F,d1	; '/'
00006D52 3038 F718                  		move.w	($FFFFF718).w,d0
00006D56 4440                       		neg.w	d0
00006D58                             
00006D58                            Deform_GHZ_7:				; XREF: Deform_GHZ
00006D58 22C0                       		move.l	d0,(a1)+
00006D5A 51C9 FFFC                  		dbf	d1,Deform_GHZ_7
00006D5E 323C 0027                  		move.w	#$27,d1	; '''
00006D62 3038 F710                  		move.w	($FFFFF710).w,d0
00006D66 4440                       		neg.w	d0
00006D68                             
00006D68                            Deform_GHZ_8:				; XREF: Deform_GHZ
00006D68 22C0                       		move.l	d0,(a1)+
00006D6A 51C9 FFFC                  		dbf	d1,Deform_GHZ_8
00006D6E 3038 F710                  		move.w	($FFFFF710).w,d0
00006D72 3438 F700                  		move.w	($FFFFF700).w,d2
00006D76 9440                       		sub.w	d0,d2
00006D78 48C2                       		ext.l	d2
00006D7A E182                       		asl.l	#8,d2
00006D7C 85FC 0068                  		divs.w	#$68,d2	; 'h'
00006D80 48C2                       		ext.l	d2
00006D82 E182                       		asl.l	#8,d2
00006D84 7600                       		moveq	#0,d3
00006D86 3600                       		move.w	d0,d3
00006D88 323C 0047                  		move.w	#$47,d1	; 'G'
00006D8C D244                       		add.w	d4,d1
00006D8E                             
00006D8E                            Deform_GHZ_9:				; XREF: Deform_GHZ
00006D8E 3003                       		move.w	d3,d0
00006D90 4440                       		neg.w	d0
00006D92 22C0                       		move.l	d0,(a1)+
00006D94 4843                       		swap	d3
00006D96 D682                       		add.l	d2,d3
00006D98 4843                       		swap	d3
00006D9A 51C9 FFF2                  		dbf	d1,Deform_GHZ_9
00006D9E 4E75                       		rts	
00006DA0                            ; End of function Deform_GHZ
00006DA0                             
00006DA0                             
00006DA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006DA0                             
00006DA0                             
00006DA0                            Deform_LZ:
00006DA0 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006DA4 48C4                       		ext.l	d4
00006DA6 EF84                       		asl.l	#7,d4
00006DA8 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006DAC 48C5                       		ext.l	d5
00006DAE EF85                       		asl.l	#7,d5
00006DB0 6100 0000                  		bsr.w	ScrollBlock1
00006DB4 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006DBA 47F9 0000 0000             		lea	(LZ_Wave_Data).l,a3
00006DC0 45F9 0000 0000             		lea	(Obj0A_WobbleData).l,a2
00006DC6 1438 F7D8                  		move.b	($FFFFF7D8).w,d2
00006DCA 1602                       		move.b	d2,d3
00006DCC 0678 0080 F7D8             		addi.w	#$80,($FFFFF7D8).w ; ''
00006DD2 D478 F70C                  		add.w	($FFFFF70C).w,d2
00006DD6 0242 00FF                  		andi.w	#$FF,d2
00006DDA D678 F704                  		add.w	($FFFFF704).w,d3
00006DDE 0243 00FF                  		andi.w	#$FF,d3
00006DE2 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006DE6 323C 00DF                  		move.w	#$DF,d1	; 'ß'
00006DEA 3038 F700                  		move.w	($FFFFF700).w,d0
00006DEE 4440                       		neg.w	d0
00006DF0 3C00                       		move.w	d0,d6
00006DF2 4840                       		swap	d0
00006DF4 3038 F708                  		move.w	($FFFFF708).w,d0
00006DF8 4440                       		neg.w	d0
00006DFA 3838 F646                  		move.w	($FFFFF646).w,d4
00006DFE 3A38 F704                  		move.w	($FFFFF704).w,d5
00006E02                             
00006E02                            Deform_LZ_1:				; XREF: Deform_LZ
00006E02 BA44                       		cmp.w	d4,d5
00006E04 6C00                       		bge.s	Deform_LZ_2
00006E06 22C0                       		move.l	d0,(a1)+
00006E08 5245                       		addq.w	#1,d5
00006E0A 5202                       		addq.b	#1,d2
00006E0C 5203                       		addq.b	#1,d3
00006E0E 51C9 FFF2                  		dbf	d1,Deform_LZ_1
00006E12 4E75                       		rts	
00006E14                            ; ===========================================================================
00006E14                             
00006E14                            Deform_LZ_2:				; XREF: Deform_LZ
00006E14 1833 3000                  		move.b	(a3,d3.w),d4
00006E18 4884                       		ext.w	d4
00006E1A D846                       		add.w	d6,d4
00006E1C 32C4                       		move.w	d4,(a1)+
00006E1E 1832 2000                  		move.b	(a2,d2.w),d4
00006E22 4884                       		ext.w	d4
00006E24 D840                       		add.w	d0,d4
00006E26 32C4                       		move.w	d4,(a1)+
00006E28 5202                       		addq.b	#1,d2
00006E2A 5203                       		addq.b	#1,d3
00006E2C 51C9 FFE6                  		dbf	d1,Deform_LZ_2
00006E30 4E75                       		rts	
00006E32                            ; End of function Deform_LZ
00006E32                             
00006E32                            ; ===========================================================================
00006E32 0101 0202 0303 0303 0202+  LZ_Wave_Data:	dc.b   1,  1,  2,  2,  3,  3,  3,  3,  2,  2,  1,  1,  0,  0,  0,  0
00006E42 0000 0000 0000 0000 0000+  		dc.b   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
00006E52 0000 0000 0000 0000 0000+  		dc.b   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
00006E62 0000 0000 0000 0000 0000+  		dc.b   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
00006E72 0000 0000 0000 0000 0000+  		dc.b   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
00006E82 0000 0000 0000 0000 0000+  		dc.b   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
00006E92 0000 0000 0000 0000 0000+  		dc.b   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
00006EA2 0000 0000 0000 0000 0000+  		dc.b   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
00006EB2 FFFF FEFE FDFD FDFD FEFE+  		dc.b $FF,$FF,$FE,$FE,$FD,$FD,$FD,$FD,$FE,$FE,$FF,$FF,  0,  0,  0,  0
00006EC2 0000 0000 0000 0000 0000+  		dc.b   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
00006ED2 0101 0202 0303 0303 0202+  		dc.b   1,  1,  2,  2,  3,  3,  3,  3,  2,  2,  1,  1,  0,  0,  0,  0
00006EE2 0000 0000 0000 0000 0000+  		dc.b   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
00006EF2 0000 0000 0000 0000 0000+  		dc.b   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
00006F02 0000 0000 0000 0000 0000+  		dc.b   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
00006F12 0000 0000 0000 0000 0000+  		dc.b   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
00006F22 0000 0000 0000 0000 0000+  		dc.b   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
00006F32                             
00006F32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F32                             
00006F32                             
00006F32                            Deform_MZ:
00006F32 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006F36 48C4                       		ext.l	d4
00006F38 ED84                       		asl.l	#6,d4
00006F3A 2204                       		move.l	d4,d1
00006F3C E384                       		asl.l	#1,d4
00006F3E D881                       		add.l	d1,d4
00006F40 7C02                       		moveq	#2,d6
00006F42 6100 0000                  		bsr.w	ScrollBlock4
00006F46 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006F4A 48C4                       		ext.l	d4
00006F4C ED84                       		asl.l	#6,d4
00006F4E 7C06                       		moveq	#6,d6
00006F50 6100 0000                  		bsr.w	ScrollBlock6
00006F54 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006F58 48C4                       		ext.l	d4
00006F5A EF84                       		asl.l	#7,d4
00006F5C 7C04                       		moveq	#4,d6
00006F5E 6100 0000                  		bsr.w	ScrollBlock5
00006F62 303C 0200                  		move.w	#$200,d0
00006F66 3238 F704                  		move.w	($FFFFF704).w,d1
00006F6A 0441 01C8                  		subi.w	#$1C8,d1
00006F6E 6500                       		bcs.s	Deform_MZ_1
00006F70 3401                       		move.w	d1,d2
00006F72 D241                       		add.w	d1,d1
00006F74 D242                       		add.w	d2,d1
00006F76 E441                       		asr.w	#2,d1
00006F78 D041                       		add.w	d1,d0
00006F7A                             
00006F7A                            Deform_MZ_1:				; XREF: Deform_MZ
00006F7A 31C0 F714                  		move.w	d0,($FFFFF714).w
00006F7E 31C0 F71C                  		move.w	d0,($FFFFF71C).w
00006F82 6100 0000                  		bsr.w	ScrollBlock3
00006F86 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006F8C 1038 F756                  		move.b	($FFFFF756).w,d0
00006F90 8038 F758                  		or.b	($FFFFF758).w,d0
00006F94 8138 F75A                  		or.b	d0,($FFFFF75A).w
00006F98 4238 F756                  		clr.b	($FFFFF756).w
00006F9C 4238 F758                  		clr.b	($FFFFF758).w
00006FA0 43F8 A800                  		lea	($FFFFA800).w,a1
00006FA4 3438 F700                  		move.w	($FFFFF700).w,d2
00006FA8 4442                       		neg.w	d2
00006FAA 3002                       		move.w	d2,d0
00006FAC E440                       		asr.w	#2,d0
00006FAE 9042                       		sub.w	d2,d0
00006FB0 48C0                       		ext.l	d0
00006FB2 E780                       		asl.l	#3,d0
00006FB4 81FC 0005                  		divs.w	#5,d0
00006FB8 48C0                       		ext.l	d0
00006FBA E980                       		asl.l	#4,d0
00006FBC E180                       		asl.l	#8,d0
00006FBE 7600                       		moveq	#0,d3
00006FC0 3602                       		move.w	d2,d3
00006FC2 E243                       		asr.w	#1,d3
00006FC4 323C 0004                  		move.w	#4,d1
00006FC8                             
00006FC8                            Deform_MZ_2:				; XREF: Deform_MZ
00006FC8 32C3                       		move.w	d3,(a1)+
00006FCA 4843                       		swap	d3
00006FCC D680                       		add.l	d0,d3
00006FCE 4843                       		swap	d3
00006FD0 51C9 FFF6                  		dbf	d1,Deform_MZ_2
00006FD4 3038 F718                  		move.w	($FFFFF718).w,d0
00006FD8 4440                       		neg.w	d0
00006FDA 323C 0001                  		move.w	#1,d1
00006FDE                             
00006FDE                            Deform_MZ_3:				; XREF: Deform_MZ
00006FDE 32C0                       		move.w	d0,(a1)+
00006FE0 51C9 FFFC                  		dbf	d1,Deform_MZ_3
00006FE4 3038 F710                  		move.w	($FFFFF710).w,d0
00006FE8 4440                       		neg.w	d0
00006FEA 323C 0008                  		move.w	#8,d1
00006FEE                             
00006FEE                            Deform_MZ_4:				; XREF: Deform_MZ
00006FEE 32C0                       		move.w	d0,(a1)+
00006FF0 51C9 FFFC                  		dbf	d1,Deform_MZ_4
00006FF4 3038 F708                  		move.w	($FFFFF708).w,d0
00006FF8 4440                       		neg.w	d0
00006FFA 323C 000F                  		move.w	#$F,d1
00006FFE                             
00006FFE                            Deform_MZ_5:				; XREF: Deform_MZ
00006FFE 32C0                       		move.w	d0,(a1)+
00007000 51C9 FFFC                  		dbf	d1,Deform_MZ_5
00007004 45F8 A800                  		lea	($FFFFA800).w,a2
00007008 3038 F70C                  		move.w	($FFFFF70C).w,d0
0000700C 0440 0200                  		subi.w	#$200,d0
00007010 3400                       		move.w	d0,d2
00007012 0C40 0100                  		cmpi.w	#$100,d0
00007016 6500                       		bcs.s	Deform_MZ_6
00007018 303C 0100                  		move.w	#$100,d0
0000701C                             
0000701C                            Deform_MZ_6:				; XREF: Deform_MZ
0000701C 0240 01F0                  		andi.w	#$1F0,d0
00007020 E648                       		lsr.w	#3,d0
00007022 45F2 0000                  		lea	(a2,d0.w),a2
00007026 6000 0000                  		bra.w	Deform_All
0000702A                            ; ===========================================================================
0000702A                             
0000702A                            Deform_SLZ:
0000702A 3A38 F73C                  		move.w	($FFFFF73C).w,d5
0000702E 48C5                       		ext.l	d5
00007030 EF85                       		asl.l	#7,d5
00007032 6100 0000                  		bsr.w	ScrollBlock2
00007036 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000703C 43F8 A800                  		lea	($FFFFA800).w,a1
00007040 3438 F700                  		move.w	($FFFFF700).w,d2
00007044 4442                       		neg.w	d2
00007046 3002                       		move.w	d2,d0
00007048 E640                       		asr.w	#3,d0
0000704A 9042                       		sub.w	d2,d0
0000704C 48C0                       		ext.l	d0
0000704E E980                       		asl.l	#4,d0
00007050 81FC 001C                  		divs.w	#$1C,d0
00007054 48C0                       		ext.l	d0
00007056 E980                       		asl.l	#4,d0
00007058 E180                       		asl.l	#8,d0
0000705A 7600                       		moveq	#0,d3
0000705C 3602                       		move.w	d2,d3
0000705E 323C 001B                  		move.w	#$1B,d1
00007062                             
00007062                            Deform_SLZ_1:				; XREF: Deform_MZ
00007062 32C3                       		move.w	d3,(a1)+
00007064 4843                       		swap	d3
00007066 D680                       		add.l	d0,d3
00007068 4843                       		swap	d3
0000706A 51C9 FFF6                  		dbf	d1,Deform_SLZ_1
0000706E 3002                       		move.w	d2,d0
00007070 E640                       		asr.w	#3,d0
00007072 3200                       		move.w	d0,d1
00007074 E241                       		asr.w	#1,d1
00007076 D041                       		add.w	d1,d0
00007078 323C 0004                  		move.w	#4,d1
0000707C                             
0000707C                            Deform_SLZ_2:				; XREF: Deform_MZ
0000707C 32C0                       		move.w	d0,(a1)+
0000707E 51C9 FFFC                  		dbf	d1,Deform_SLZ_2
00007082 3002                       		move.w	d2,d0
00007084 E440                       		asr.w	#2,d0
00007086 323C 0004                  		move.w	#4,d1
0000708A                             
0000708A                            Deform_SLZ_3:				; XREF: Deform_MZ
0000708A 32C0                       		move.w	d0,(a1)+
0000708C 51C9 FFFC                  		dbf	d1,Deform_SLZ_3
00007090 3002                       		move.w	d2,d0
00007092 E240                       		asr.w	#1,d0
00007094 323C 001D                  		move.w	#$1D,d1
00007098                             
00007098                            Deform_SLZ_4:				; XREF: Deform_MZ
00007098 32C0                       		move.w	d0,(a1)+
0000709A 51C9 FFFC                  		dbf	d1,Deform_SLZ_4
0000709E 45F8 A800                  		lea	($FFFFA800).w,a2
000070A2 3038 F70C                  		move.w	($FFFFF70C).w,d0
000070A6 3400                       		move.w	d0,d2
000070A8 0440 00C0                  		subi.w	#$C0,d0	; 'À'
000070AC 0240 03F0                  		andi.w	#$3F0,d0
000070B0 E648                       		lsr.w	#3,d0
000070B2 45F2 0000                  		lea	(a2,d0.w),a2
000070B6                             
000070B6                            Deform_All:				; XREF: Deform_MZ, Deform_SYZ, ...
000070B6 43F8 CC00                  		lea	($FFFFCC00).w,a1
000070BA 323C 000E                  		move.w	#$E,d1
000070BE 3038 F700                  		move.w	($FFFFF700).w,d0
000070C2 4440                       		neg.w	d0
000070C4 4840                       		swap	d0
000070C6 0242 000F                  		andi.w	#$F,d2
000070CA D442                       		add.w	d2,d2
000070CC 301A                       		move.w	(a2)+,d0
000070CE 4EFB 2000                  		jmp	Deform_All_2(pc,d2.w)
000070D2                            ; End of function Deform_MZ
000070D2                             
000070D2                            ; ===========================================================================
000070D2                             
000070D2                            Deform_All_1:				; XREF: Deform_All
000070D2 301A                       		move.w	(a2)+,d0
000070D4                             
000070D4                            Deform_All_2:
000070D4 22C0                       		move.l	d0,(a1)+
000070D6 22C0                       		move.l	d0,(a1)+
000070D8 22C0                       		move.l	d0,(a1)+
000070DA 22C0                       		move.l	d0,(a1)+
000070DC 22C0                       		move.l	d0,(a1)+
000070DE 22C0                       		move.l	d0,(a1)+
000070E0 22C0                       		move.l	d0,(a1)+
000070E2 22C0                       		move.l	d0,(a1)+
000070E4 22C0                       		move.l	d0,(a1)+
000070E6 22C0                       		move.l	d0,(a1)+
000070E8 22C0                       		move.l	d0,(a1)+
000070EA 22C0                       		move.l	d0,(a1)+
000070EC 22C0                       		move.l	d0,(a1)+
000070EE 22C0                       		move.l	d0,(a1)+
000070F0 22C0                       		move.l	d0,(a1)+
000070F2 22C0                       		move.l	d0,(a1)+
000070F4 51C9 FFDC                  		dbf	d1,Deform_All_1
000070F8 4E75                       		rts	
000070FA                             
000070FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000070FA                             
000070FA                             
000070FA                            Deform_SYZ:
000070FA 3A38 F73C                  		move.w	($FFFFF73C).w,d5
000070FE 48C5                       		ext.l	d5
00007100 E985                       		asl.l	#4,d5
00007102 2205                       		move.l	d5,d1
00007104 E385                       		asl.l	#1,d5
00007106 DA81                       		add.l	d1,d5
00007108 6100 0000                  		bsr.w	ScrollBlock2
0000710C 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007112 43F8 A800                  		lea	($FFFFA800).w,a1
00007116 3438 F700                  		move.w	($FFFFF700).w,d2
0000711A 4442                       		neg.w	d2
0000711C 3002                       		move.w	d2,d0
0000711E E640                       		asr.w	#3,d0
00007120 9042                       		sub.w	d2,d0
00007122 48C0                       		ext.l	d0
00007124 E780                       		asl.l	#3,d0
00007126 81FC 0008                  		divs.w	#8,d0
0000712A 48C0                       		ext.l	d0
0000712C E980                       		asl.l	#4,d0
0000712E E180                       		asl.l	#8,d0
00007130 7600                       		moveq	#0,d3
00007132 3602                       		move.w	d2,d3
00007134 E243                       		asr.w	#1,d3
00007136 323C 0007                  		move.w	#7,d1
0000713A                             
0000713A                            Deform_SYZ_1:				; XREF: Deform_SYZ
0000713A 32C3                       		move.w	d3,(a1)+
0000713C 4843                       		swap	d3
0000713E D680                       		add.l	d0,d3
00007140 4843                       		swap	d3
00007142 51C9 FFF6                  		dbf	d1,Deform_SYZ_1
00007146 3002                       		move.w	d2,d0
00007148 E640                       		asr.w	#3,d0
0000714A 323C 0004                  		move.w	#4,d1
0000714E                             
0000714E                            Deform_SYZ_2:				; XREF: Deform_SYZ
0000714E 32C0                       		move.w	d0,(a1)+
00007150 51C9 FFFC                  		dbf	d1,Deform_SYZ_2
00007154 3002                       		move.w	d2,d0
00007156 E440                       		asr.w	#2,d0
00007158 323C 0005                  		move.w	#5,d1
0000715C                             
0000715C                            Deform_SYZ_3:				; XREF: Deform_SYZ
0000715C 32C0                       		move.w	d0,(a1)+
0000715E 51C9 FFFC                  		dbf	d1,Deform_SYZ_3
00007162 3002                       		move.w	d2,d0
00007164 3202                       		move.w	d2,d1
00007166 E241                       		asr.w	#1,d1
00007168 9041                       		sub.w	d1,d0
0000716A 48C0                       		ext.l	d0
0000716C E980                       		asl.l	#4,d0
0000716E 81FC 000E                  		divs.w	#$E,d0
00007172 48C0                       		ext.l	d0
00007174 E980                       		asl.l	#4,d0
00007176 E180                       		asl.l	#8,d0
00007178 7600                       		moveq	#0,d3
0000717A 3602                       		move.w	d2,d3
0000717C E243                       		asr.w	#1,d3
0000717E 323C 000D                  		move.w	#$D,d1
00007182                             
00007182                            Deform_SYZ_4:				; XREF: Deform_SYZ
00007182 32C3                       		move.w	d3,(a1)+
00007184 4843                       		swap	d3
00007186 D680                       		add.l	d0,d3
00007188 4843                       		swap	d3
0000718A 51C9 FFF6                  		dbf	d1,Deform_SYZ_4
0000718E 45F8 A800                  		lea	($FFFFA800).w,a2
00007192 3038 F70C                  		move.w	($FFFFF70C).w,d0
00007196 3400                       		move.w	d0,d2
00007198 0240 01F0                  		andi.w	#$1F0,d0
0000719C E648                       		lsr.w	#3,d0
0000719E 45F2 0000                  		lea	(a2,d0.w),a2
000071A2 6000 FF12                  		bra.w	Deform_All
000071A6                            ; End of function Deform_SYZ
000071A6                             
000071A6                             
000071A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000071A6                             
000071A6                             
000071A6                            Deform_SBZ:
000071A6 4A38 FE11                  		tst.b	($FFFFFE11).w
000071AA 6600 0000                  		bne.w	Deform_SBZ_Act2
000071AE 3838 F73A                  		move.w	($FFFFF73A).w,d4
000071B2 48C4                       		ext.l	d4
000071B4 EF84                       		asl.l	#7,d4
000071B6 7C02                       		moveq	#2,d6
000071B8 6100 0000                  		bsr.w	ScrollBlock4
000071BC 3838 F73A                  		move.w	($FFFFF73A).w,d4
000071C0 48C4                       		ext.l	d4
000071C2 ED84                       		asl.l	#6,d4
000071C4 7C06                       		moveq	#6,d6
000071C6 6100 0000                  		bsr.w	ScrollBlock6
000071CA 3838 F73A                  		move.w	($FFFFF73A).w,d4
000071CE 48C4                       		ext.l	d4
000071D0 EB84                       		asl.l	#5,d4
000071D2 2204                       		move.l	d4,d1
000071D4 E384                       		asl.l	#1,d4
000071D6 D881                       		add.l	d1,d4
000071D8 7C04                       		moveq	#4,d6
000071DA 6100 0000                  		bsr.w	ScrollBlock5
000071DE 7800                       		moveq	#0,d4
000071E0 3A38 F73C                  		move.w	($FFFFF73C).w,d5
000071E4 48C5                       		ext.l	d5
000071E6 EB85                       		asl.l	#5,d5
000071E8 6100 0000                  		bsr.w	ScrollBlock1_2
000071EC 3038 F70C                  		move.w	($FFFFF70C).w,d0
000071F0 31C0 F714                  		move.w	d0,($FFFFF714).w
000071F4 31C0 F71C                  		move.w	d0,($FFFFF71C).w
000071F8 31C0 F618                  		move.w	d0,($FFFFF618).w
000071FC 1038 F756                  		move.b	($FFFFF756).w,d0
00007200 8038 F75A                  		or.b	($FFFFF75A).w,d0
00007204 8138 F758                  		or.b	d0,($FFFFF758).w
00007208 4238 F756                  		clr.b	($FFFFF756).w
0000720C 4238 F75A                  		clr.b	($FFFFF75A).w
00007210 43F8 A800                  		lea	($FFFFA800).w,a1
00007214 3438 F700                  		move.w	($FFFFF700).w,d2
00007218 4442                       		neg.w	d2
0000721A E442                       		asr.w	#2,d2
0000721C 3002                       		move.w	d2,d0
0000721E E240                       		asr.w	#1,d0
00007220 9042                       		sub.w	d2,d0
00007222 48C0                       		ext.l	d0
00007224 E780                       		asl.l	#3,d0
00007226 81FC 0004                  		divs.w	#4,d0
0000722A 48C0                       		ext.l	d0
0000722C E980                       		asl.l	#4,d0
0000722E E180                       		asl.l	#8,d0
00007230 7600                       		moveq	#0,d3
00007232 3602                       		move.w	d2,d3
00007234 323C 0003                  		move.w	#3,d1
00007238                             
00007238                            Deform_SBZ_1:				; XREF: Deform_SBZ
00007238 32C3                       		move.w	d3,(a1)+
0000723A 4843                       		swap	d3
0000723C D680                       		add.l	d0,d3
0000723E 4843                       		swap	d3
00007240 51C9 FFF6                  		dbf	d1,Deform_SBZ_1
00007244 3038 F718                  		move.w	($FFFFF718).w,d0
00007248 4440                       		neg.w	d0
0000724A 323C 0009                  		move.w	#9,d1
0000724E                             
0000724E                            Deform_SBZ_2:				; XREF: Deform_SBZ
0000724E 32C0                       		move.w	d0,(a1)+
00007250 51C9 FFFC                  		dbf	d1,Deform_SBZ_2
00007254 3038 F710                  		move.w	($FFFFF710).w,d0
00007258 4440                       		neg.w	d0
0000725A 323C 0006                  		move.w	#6,d1
0000725E                             
0000725E                            Deform_SBZ_3:				; XREF: Deform_SBZ
0000725E 32C0                       		move.w	d0,(a1)+
00007260 51C9 FFFC                  		dbf	d1,Deform_SBZ_3
00007264 3038 F708                  		move.w	($FFFFF708).w,d0
00007268 4440                       		neg.w	d0
0000726A 323C 000A                  		move.w	#$A,d1
0000726E                             
0000726E                            Deform_SBZ_4:				; XREF: Deform_SBZ
0000726E 32C0                       		move.w	d0,(a1)+
00007270 51C9 FFFC                  		dbf	d1,Deform_SBZ_4
00007274 45F8 A800                  		lea	($FFFFA800).w,a2
00007278 3038 F70C                  		move.w	($FFFFF70C).w,d0
0000727C 3400                       		move.w	d0,d2
0000727E 0240 01F0                  		andi.w	#$1F0,d0
00007282 E648                       		lsr.w	#3,d0
00007284 45F2 0000                  		lea	(a2,d0.w),a2
00007288 6000 FE2C                  		bra.w	Deform_All
0000728C                            ; ===========================================================================
0000728C                             
0000728C                            Deform_SBZ_Act2:			; XREF: Deform_SBZ
0000728C 3838 F73A                  		move.w	($FFFFF73A).w,d4
00007290 48C4                       		ext.l	d4
00007292 ED84                       		asl.l	#6,d4
00007294 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00007298 48C5                       		ext.l	d5
0000729A EB85                       		asl.l	#5,d5
0000729C 6100 0000                  		bsr.w	ScrollBlock1
000072A0 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000072A6 43F8 CC00                  		lea	($FFFFCC00).w,a1
000072AA 323C 00DF                  		move.w	#$DF,d1	; 'ß'
000072AE 3038 F700                  		move.w	($FFFFF700).w,d0
000072B2 4440                       		neg.w	d0
000072B4 4840                       		swap	d0
000072B6 3038 F708                  		move.w	($FFFFF708).w,d0
000072BA 4440                       		neg.w	d0
000072BC                             
000072BC                            Deform_SBZ_Act2_1:			; XREF: Deform_SBZ
000072BC 22C0                       		move.l	d0,(a1)+
000072BE 51C9 FFFC                  		dbf	d1,Deform_SBZ_Act2_1
000072C2 4E75                       		rts	
000072C4                            ; End of function Deform_SBZ
000072C4                            
000072C4                            ; ---------------------------------------------------------------------------
000072C4                            ; Subroutine to	scroll the level horizontally as Sonic moves
000072C4                            ; ---------------------------------------------------------------------------
000072C4                            
000072C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072C4                            
000072C4                            
000072C4                            ScrollHoriz:				; XREF: DeformBgLayer
000072C4 3838 F700                  		move.w	($FFFFF700).w,d4
000072C8 6100                       		bsr.s	ScrollHoriz2
000072CA 3038 F700                  		move.w	($FFFFF700).w,d0
000072CE 0240 0010                  		andi.w	#$10,d0
000072D2 1238 F74A                  		move.b	($FFFFF74A).w,d1
000072D6 B300                       		eor.b	d1,d0
000072D8 6600                       		bne.s	locret_65B0
000072DA 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
000072E0 3038 F700                  		move.w	($FFFFF700).w,d0
000072E4 9044                       		sub.w	d4,d0
000072E6 6A00                       		bpl.s	loc_65AA
000072E8 08F8 0002 F754             		bset	#2,($FFFFF754).w
000072EE 4E75                       		rts	
000072F0                            ; ===========================================================================
000072F0                            
000072F0                            loc_65AA:
000072F0 08F8 0003 F754             		bset	#3,($FFFFF754).w
000072F6                            
000072F6                            locret_65B0:
000072F6 4E75                       		rts	
000072F8                            ; End of function ScrollHoriz
000072F8                            
000072F8                            
000072F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072F8                            
000072F8                            
000072F8                            ScrollHoriz2:				; XREF: ScrollHoriz
000072F8 3038 D008                  		move.w	($FFFFD008).w,d0
000072FC 9078 F700                  		sub.w	($FFFFF700).w,d0
00007300 0440 0090                  		subi.w	#$90,d0
00007304 6500                       		bcs.s	loc_65F6
00007306 0440 0010                  		subi.w	#$10,d0
0000730A 6400                       		bcc.s	loc_65CC
0000730C 4278 F73A                  		clr.w	($FFFFF73A).w
00007310 4E75                       		rts	
00007312                            ; ===========================================================================
00007312                            
00007312                            loc_65CC:
00007312 0C40 0010                  		cmpi.w	#$10,d0
00007316 6500                       		bcs.s	loc_65D6
00007318 303C 0010                  		move.w	#$10,d0
0000731C                            
0000731C                            loc_65D6:
0000731C D078 F700                  		add.w	($FFFFF700).w,d0
00007320 B078 F72A                  		cmp.w	($FFFFF72A).w,d0
00007324 6D00                       		blt.s	loc_65E4
00007326 3038 F72A                  		move.w	($FFFFF72A).w,d0
0000732A                            
0000732A                            loc_65E4:
0000732A 3200                       		move.w	d0,d1
0000732C 9278 F700                  		sub.w	($FFFFF700).w,d1
00007330 E141                       		asl.w	#8,d1
00007332 31C0 F700                  		move.w	d0,($FFFFF700).w
00007336 31C1 F73A                  		move.w	d1,($FFFFF73A).w
0000733A 4E75                       		rts	
0000733C                            ; ===========================================================================
0000733C                            
0000733C                            loc_65F6:				; XREF: ScrollHoriz2
0000733C D078 F700                  		add.w	($FFFFF700).w,d0
00007340 B078 F728                  		cmp.w	($FFFFF728).w,d0
00007344 6EE4                       		bgt.s	loc_65E4
00007346 3038 F728                  		move.w	($FFFFF728).w,d0
0000734A 60DE                       		bra.s	loc_65E4
0000734C                            ; End of function ScrollHoriz2
0000734C                            
0000734C                            ; ===========================================================================
0000734C 4A40                       		tst.w	d0
0000734E 6A00                       		bpl.s	loc_6610
00007350 303C FFFE                  		move.w	#-2,d0
00007354 60E6                       		bra.s	loc_65F6
00007356                            ; ===========================================================================
00007356                            
00007356                            loc_6610:
00007356 303C 0002                  		move.w	#2,d0
0000735A 60B6                       		bra.s	loc_65CC
0000735C                            
0000735C                            ; ---------------------------------------------------------------------------
0000735C                            ; Subroutine to	scroll the level vertically as Sonic moves
0000735C                            ; ---------------------------------------------------------------------------
0000735C                            
0000735C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000735C                            
0000735C                            
0000735C                            ScrollVertical:				; XREF: DeformBgLayer
0000735C 7200                       		moveq	#0,d1
0000735E 3038 D00C                  		move.w	($FFFFD00C).w,d0
00007362 9078 F704                  		sub.w	($FFFFF704).w,d0
00007366 0838 0002 D022             		btst	#2,($FFFFD022).w
0000736C 6700                       		beq.s	loc_662A
0000736E 5B40                       		subq.w	#5,d0
00007370                            
00007370                            loc_662A:
00007370 0838 0001 D022             		btst	#1,($FFFFD022).w
00007376 6700                       		beq.s	loc_664A
00007378 0640 0020                  		addi.w	#$20,d0
0000737C 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00007380 6500                       		bcs.s	loc_6696
00007382 0440 0040                  		subi.w	#$40,d0
00007386 6400                       		bcc.s	loc_6696
00007388 4A38 F75C                  		tst.b	($FFFFF75C).w
0000738C 6600                       		bne.s	loc_66A8
0000738E 6000                       		bra.s	loc_6656
00007390                            ; ===========================================================================
00007390                            
00007390                            loc_664A:
00007390 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00007394 6600                       		bne.s	loc_665C
00007396 4A38 F75C                  		tst.b	($FFFFF75C).w
0000739A 6600                       		bne.s	loc_66A8
0000739C                            
0000739C                            loc_6656:
0000739C 4278 F73C                  		clr.w	($FFFFF73C).w
000073A0 4E75                       		rts	
000073A2                            ; ===========================================================================
000073A2                            
000073A2                            loc_665C:
000073A2 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
000073A8 6600                       		bne.s	loc_6684
000073AA 3238 D014                  		move.w	($FFFFD014).w,d1
000073AE 6A00                       		bpl.s	loc_666C
000073B0 4441                       		neg.w	d1
000073B2                            
000073B2                            loc_666C:
000073B2 0C41 0800                  		cmpi.w	#$800,d1
000073B6 6400                       		bcc.s	loc_6696
000073B8 323C 0600                  		move.w	#$600,d1
000073BC 0C40 0006                  		cmpi.w	#6,d0
000073C0 6E00                       		bgt.s	loc_66F6
000073C2 0C40 FFFA                  		cmpi.w	#-6,d0
000073C6 6D00                       		blt.s	loc_66C0
000073C8 6000                       		bra.s	loc_66AE
000073CA                            ; ===========================================================================
000073CA                            
000073CA                            loc_6684:
000073CA 323C 0200                  		move.w	#$200,d1
000073CE 0C40 0002                  		cmpi.w	#2,d0
000073D2 6E00                       		bgt.s	loc_66F6
000073D4 0C40 FFFE                  		cmpi.w	#-2,d0
000073D8 6D00                       		blt.s	loc_66C0
000073DA 6000                       		bra.s	loc_66AE
000073DC                            ; ===========================================================================
000073DC                            
000073DC                            loc_6696:
000073DC 323C 1000                  		move.w	#$1000,d1
000073E0 0C40 0010                  		cmpi.w	#$10,d0
000073E4 6E00                       		bgt.s	loc_66F6
000073E6 0C40 FFF0                  		cmpi.w	#-$10,d0
000073EA 6D00                       		blt.s	loc_66C0
000073EC 6000                       		bra.s	loc_66AE
000073EE                            ; ===========================================================================
000073EE                            
000073EE                            loc_66A8:
000073EE 7000                       		moveq	#0,d0
000073F0 11C0 F75C                  		move.b	d0,($FFFFF75C).w
000073F4                            
000073F4                            loc_66AE:
000073F4 7200                       		moveq	#0,d1
000073F6 3200                       		move.w	d0,d1
000073F8 D278 F704                  		add.w	($FFFFF704).w,d1
000073FC 4A40                       		tst.w	d0
000073FE 6A00 0000                  		bpl.w	loc_6700
00007402 6000 0000                  		bra.w	loc_66CC
00007406                            ; ===========================================================================
00007406                            
00007406                            loc_66C0:
00007406 4441                       		neg.w	d1
00007408 48C1                       		ext.l	d1
0000740A E181                       		asl.l	#8,d1
0000740C D2B8 F704                  		add.l	($FFFFF704).w,d1
00007410 4841                       		swap	d1
00007412                            
00007412                            loc_66CC:
00007412 B278 F72C                  		cmp.w	($FFFFF72C).w,d1
00007416 6E00                       		bgt.s	loc_6724
00007418 0C41 FF00                  		cmpi.w	#-$100,d1
0000741C 6E00                       		bgt.s	loc_66F0
0000741E 0241 07FF                  		andi.w	#$7FF,d1
00007422 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00007428 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0000742E 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00007434 6000                       		bra.s	loc_6724
00007436                            ; ===========================================================================
00007436                            
00007436                            loc_66F0:
00007436 3238 F72C                  		move.w	($FFFFF72C).w,d1
0000743A 6000                       		bra.s	loc_6724
0000743C                            ; ===========================================================================
0000743C                            
0000743C                            loc_66F6:
0000743C 48C1                       		ext.l	d1
0000743E E181                       		asl.l	#8,d1
00007440 D2B8 F704                  		add.l	($FFFFF704).w,d1
00007444 4841                       		swap	d1
00007446                            
00007446                            loc_6700:
00007446 B278 F72E                  		cmp.w	($FFFFF72E).w,d1
0000744A 6D00                       		blt.s	loc_6724
0000744C 0441 0800                  		subi.w	#$800,d1
00007450 6500                       		bcs.s	loc_6720
00007452 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00007458 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
0000745E 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00007464 6000                       		bra.s	loc_6724
00007466                            ; ===========================================================================
00007466                            
00007466                            loc_6720:
00007466 3238 F72E                  		move.w	($FFFFF72E).w,d1
0000746A                            
0000746A                            loc_6724:
0000746A 3838 F704                  		move.w	($FFFFF704).w,d4
0000746E 4841                       		swap	d1
00007470 2601                       		move.l	d1,d3
00007472 96B8 F704                  		sub.l	($FFFFF704).w,d3
00007476 E09B                       		ror.l	#8,d3
00007478 31C3 F73C                  		move.w	d3,($FFFFF73C).w
0000747C 21C1 F704                  		move.l	d1,($FFFFF704).w
00007480 3038 F704                  		move.w	($FFFFF704).w,d0
00007484 0240 0010                  		andi.w	#$10,d0
00007488 1238 F74B                  		move.b	($FFFFF74B).w,d1
0000748C B300                       		eor.b	d1,d0
0000748E 6600                       		bne.s	locret_6766
00007490 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
00007496 3038 F704                  		move.w	($FFFFF704).w,d0
0000749A 9044                       		sub.w	d4,d0
0000749C 6A00                       		bpl.s	loc_6760
0000749E 08F8 0000 F754             		bset	#0,($FFFFF754).w
000074A4 4E75                       		rts	
000074A6                            ; ===========================================================================
000074A6                            
000074A6                            loc_6760:
000074A6 08F8 0001 F754             		bset	#1,($FFFFF754).w
000074AC                            
000074AC                            locret_6766:
000074AC 4E75                       		rts	
000074AE                            ; End of function ScrollVertical
000074AE                            
000074AE                            
000074AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000074AE                            
000074AE                            
000074AE                            ScrollBlock1:				; XREF: Deform_LZ, Deform_SBZ
000074AE 2438 F708                  		move.l	($FFFFF708).w,d2
000074B2 2002                       		move.l	d2,d0
000074B4 D084                       		add.l	d4,d0
000074B6 21C0 F708                  		move.l	d0,($FFFFF708).w
000074BA 2200                       		move.l	d0,d1
000074BC 4841                       		swap	d1
000074BE 0241 0010                  		andi.w	#$10,d1
000074C2 1638 F74C                  		move.b	($FFFFF74C).w,d3
000074C6 B701                       		eor.b	d3,d1
000074C8 6600                       		bne.s	ScrollBlock1_2
000074CA 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
000074D0 9082                       		sub.l	d2,d0
000074D2 6A00                       		bpl.s	ScrollBlock1_1
000074D4 08F8 0002 F756             		bset	#2,($FFFFF756).w
000074DA 6000                       		bra.s	ScrollBlock1_2
000074DC                            ; ===========================================================================
000074DC                             
000074DC                            ScrollBlock1_1:				; XREF: ScrollBlock1
000074DC 08F8 0003 F756             		bset	#3,($FFFFF756).w
000074E2                             
000074E2                            ScrollBlock1_2:				; XREF: ScrollBlock1, Deform_SBZ, ...
000074E2 2638 F70C                  		move.l	($FFFFF70C).w,d3
000074E6 2003                       		move.l	d3,d0
000074E8 D085                       		add.l	d5,d0
000074EA 21C0 F70C                  		move.l	d0,($FFFFF70C).w
000074EE 2200                       		move.l	d0,d1
000074F0 4841                       		swap	d1
000074F2 0241 0010                  		andi.w	#$10,d1
000074F6 1438 F74D                  		move.b	($FFFFF74D).w,d2
000074FA B501                       		eor.b	d2,d1
000074FC 6600                       		bne.s	ScrollBlock1_End
000074FE 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00007504 9083                       		sub.l	d3,d0
00007506 6A00                       		bpl.s	ScrollBlock1_3
00007508 08F8 0000 F756             		bset	#0,($FFFFF756).w
0000750E 4E75                       		rts	
00007510                            ; ===========================================================================
00007510                             
00007510                            ScrollBlock1_3:				; XREF: ScrollBlock1
00007510 08F8 0001 F756             		bset	#1,($FFFFF756).w
00007516                             
00007516                            ScrollBlock1_End:			; XREF: ScrollBlock1
00007516 4E75                       		rts	
00007518                            ; End of function ScrollBlock1
00007518                             
00007518                             
00007518                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007518                             
00007518                             
00007518                            ScrollBlock2:				; XREF: Deform_MZ, Deform_SYZ
00007518 2638 F70C                  		move.l	($FFFFF70C).w,d3
0000751C 2003                       		move.l	d3,d0
0000751E D085                       		add.l	d5,d0
00007520 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00007524 2200                       		move.l	d0,d1
00007526 4841                       		swap	d1
00007528 0241 0010                  		andi.w	#$10,d1
0000752C 1438 F74D                  		move.b	($FFFFF74D).w,d2
00007530 B501                       		eor.b	d2,d1
00007532 6600                       		bne.s	ScrollBlock2_End
00007534 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
0000753A 9083                       		sub.l	d3,d0
0000753C 6A00                       		bpl.s	ScrollBlock2_1
0000753E 08F8 0004 F756             		bset	#4,($FFFFF756).w
00007544 4E75                       		rts	
00007546                            ; ===========================================================================
00007546                             
00007546                            ScrollBlock2_1:				; XREF: ScrollBlock2
00007546 08F8 0005 F756             		bset	#5,($FFFFF756).w
0000754C                             
0000754C                            ScrollBlock2_End:			; XREF: ScrollBlock2
0000754C 4E75                       		rts	
0000754E                            ; End of function ScrollBlock2
0000754E                             
0000754E                             
0000754E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000754E                             
0000754E                             
0000754E                            ScrollBlock3:				; XREF: Deform_MZ
0000754E 3638 F70C                  		move.w	($FFFFF70C).w,d3
00007552 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00007556 3200                       		move.w	d0,d1
00007558 0241 0010                  		andi.w	#$10,d1
0000755C 1438 F74D                  		move.b	($FFFFF74D).w,d2
00007560 B501                       		eor.b	d2,d1
00007562 6600                       		bne.s	ScrollBlock3_End
00007564 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
0000756A 9043                       		sub.w	d3,d0
0000756C 6A00                       		bpl.s	ScrollBlock3_1
0000756E 08F8 0000 F756             		bset	#0,($FFFFF756).w
00007574 4E75                       		rts	
00007576                            ; ===========================================================================
00007576                             
00007576                            ScrollBlock3_1:				; XREF: ScrollBlock3
00007576 08F8 0001 F756             		bset	#1,($FFFFF756).w
0000757C                             
0000757C                            ScrollBlock3_End:			; XREF: ScrollBlock3
0000757C 4E75                       		rts	
0000757E                            ; End of function ScrollBlock3
0000757E                             
0000757E                             
0000757E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000757E                             
0000757E                             
0000757E                            ScrollBlock4:				; XREF: Deform_MZ, Deform_SBZ
0000757E 2438 F708                  		move.l	($FFFFF708).w,d2
00007582 2002                       		move.l	d2,d0
00007584 D084                       		add.l	d4,d0
00007586 21C0 F708                  		move.l	d0,($FFFFF708).w
0000758A 2200                       		move.l	d0,d1
0000758C 4841                       		swap	d1
0000758E 0241 0010                  		andi.w	#$10,d1
00007592 1638 F74C                  		move.b	($FFFFF74C).w,d3
00007596 B701                       		eor.b	d3,d1
00007598 6600                       		bne.s	ScrollBlock4_End
0000759A 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
000075A0 9082                       		sub.l	d2,d0
000075A2 6A00                       		bpl.s	ScrollBlock4_1
000075A4 0DF8 F756                  		bset	d6,($FFFFF756).w
000075A8 6000                       		bra.s	ScrollBlock4_End
000075AA                            ; ===========================================================================
000075AA                             
000075AA                            ScrollBlock4_1:				; XREF: ScrollBlock4
000075AA 5206                       		addq.b	#1,d6
000075AC 0DF8 F756                  		bset	d6,($FFFFF756).w
000075B0                             
000075B0                            ScrollBlock4_End:			; XREF: ScrollBlock4
000075B0 4E75                       		rts	
000075B2                            ; End of function ScrollBlock4
000075B2                             
000075B2                             
000075B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000075B2                             
000075B2                             
000075B2                            ScrollBlock5:				; XREF: Deform_GHZ, Deform_MZ, ...
000075B2 2438 F710                  		move.l	($FFFFF710).w,d2
000075B6 2002                       		move.l	d2,d0
000075B8 D084                       		add.l	d4,d0
000075BA 21C0 F710                  		move.l	d0,($FFFFF710).w
000075BE 2200                       		move.l	d0,d1
000075C0 4841                       		swap	d1
000075C2 0241 0010                  		andi.w	#$10,d1
000075C6 1638 F74E                  		move.b	($FFFFF74E).w,d3
000075CA B701                       		eor.b	d3,d1
000075CC 6600                       		bne.s	ScrollBlock5_End
000075CE 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
000075D4 9082                       		sub.l	d2,d0
000075D6 6A00                       		bpl.s	ScrollBlock5_1
000075D8 0DF8 F758                  		bset	d6,($FFFFF758).w
000075DC 6000                       		bra.s	ScrollBlock5_End
000075DE                            ; ===========================================================================
000075DE                             
000075DE                            ScrollBlock5_1:				; XREF: ScrollBlock5
000075DE 5206                       		addq.b	#1,d6
000075E0 0DF8 F758                  		bset	d6,($FFFFF758).w
000075E4                             
000075E4                            ScrollBlock5_End:			; XREF: ScrollBlock5
000075E4 4E75                       		rts	
000075E6                            ; End of function ScrollBlock5
000075E6                             
000075E6                             
000075E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000075E6                             
000075E6                             
000075E6                            ScrollBlock6:				; XREF: Deform_GHZ, Deform_MZ, ...
000075E6 2438 F718                  		move.l	($FFFFF718).w,d2
000075EA 2002                       		move.l	d2,d0
000075EC D084                       		add.l	d4,d0
000075EE 21C0 F718                  		move.l	d0,($FFFFF718).w
000075F2 2200                       		move.l	d0,d1
000075F4 4841                       		swap	d1
000075F6 0241 0010                  		andi.w	#$10,d1
000075FA 1638 F750                  		move.b	($FFFFF750).w,d3
000075FE B701                       		eor.b	d3,d1
00007600 6600                       		bne.s	ScrollBlock6_End
00007602 0A38 0010 F750             		eori.b	#$10,($FFFFF750).w
00007608 9082                       		sub.l	d2,d0
0000760A 6A00                       		bpl.s	ScrollBlock6_1
0000760C 0DF8 F75A                  		bset	d6,($FFFFF75A).w
00007610 6000                       		bra.s	ScrollBlock6_End
00007612                            ; ===========================================================================
00007612                             
00007612                            ScrollBlock6_1:				; XREF: ScrollBlock6
00007612 5206                       		addq.b	#1,d6
00007614 0DF8 F75A                  		bset	d6,($FFFFF75A).w
00007618                             
00007618                            ScrollBlock6_End:			; XREF: ScrollBlock6
00007618 4E75                       		rts	
0000761A                            ; End of function ScrollBlock6
0000761A                            
0000761A                            
0000761A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000761A                            
0000761A                            
0000761A                            sub_6886:		
0000761A 4BF9 00C0 0004             		lea	($C00004).l,a5
00007620 4DF9 00C0 0000             		lea	($C00000).l,a6
00007626 45F8 F756                  		lea	($FFFFF756).w,a2
0000762A 47F8 F708                  		lea	($FFFFF708).w,a3
0000762E 49F8 A440                  		lea	($FFFFA440).w,a4
00007632 343C 6000                  		move.w	#$6000,d2
00007636 6100 0000                  		bsr.w	sub_6D0A
0000763A 45F8 F758                  		lea	($FFFFF758).w,a2
0000763E 47F8 F710                  		lea	($FFFFF710).w,a3
00007642 6000 0000                  		bra.w	sub_6DA6
00007646                            ; End of function sub_6886
00007646                             
00007646                            ; ---------------------------------------------------------------------------
00007646                            ; Subroutine to	display	correct	tiles as you move
00007646                            ; ---------------------------------------------------------------------------
00007646                             
00007646                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007646                             
00007646                             
00007646                            LoadTilesAsYouMove:			; XREF: Demo_Time
00007646 4BF9 00C0 0004             		lea	($C00004).l,a5
0000764C 4DF9 00C0 0000             		lea	($C00000).l,a6
00007652 45F8 FF32                  		lea	($FFFFFF32).w,a2
00007656 47F8 FF18                  		lea	($FFFFFF18).w,a3
0000765A 49F8 A440                  		lea	($FFFFA440).w,a4
0000765E 343C 6000                  		move.w	#$6000,d2
00007662 6100 0000                  		bsr.w	sub_6D0A
00007666 45F8 FF34                  		lea	($FFFFFF34).w,a2
0000766A 47F8 FF20                  		lea	($FFFFFF20).w,a3
0000766E 6100 0000                  		bsr.w	sub_6DA6
00007672 45F8 FF36                  		lea	($FFFFFF36).w,a2
00007676 47F8 FF28                  		lea	($FFFFFF28).w,a3
0000767A 6100 0000                  		bsr.w	sub_6EA4
0000767E 45F8 FF30                  		lea	($FFFFFF30).w,a2
00007682 47F8 FF10                  		lea	($FFFFFF10).w,a3
00007686 49F8 A400                  		lea	($FFFFA400).w,a4
0000768A 343C 4000                  		move.w	#$4000,d2
0000768E 4A38 F745                  		tst.b	($FFFFF745).w
00007692 6700                       		beq.s	Draw_FG
00007694 11FC 0000 F745             		move.b	#0,($FFFFF745).w	;Reset the redraw flag
0000769A 78F0                       		moveq	#-$10,d4			;Go to top line oflevel data relative camera position
0000769C 7C0F                       		moveq	#$F,d6				;
0000769E                             
0000769E                            Draw_All:
0000769E 48E7 0E00                  		movem.l	d4-d6,-(sp)			; This whole routine basically redraws the whole
000076A2 7AF0                       		moveq	#-$10,d5			; area instead of merely a line of tiles
000076A4 3204                       		move.w	d4,d1
000076A6 6100 0000                  		bsr.w	Calc_VRAM_Pos
000076AA 3801                       		move.w	d1,d4
000076AC 7AF0                       		moveq	#-$10,d5
000076AE 6100 0000                  		bsr.w	DrawTiles_LR
000076B2 4CDF 0070                  		movem.l	(sp)+,d4-d6
000076B6 0644 0010                  		addi.w	#$10,d4
000076BA 51CE FFE2                  		dbf	d6,Draw_All
000076BE 4E75                       		rts	
000076C0                             
000076C0                            Draw_FG:
000076C0 4A12                       		tst.b	(a2)
000076C2 6700                       		beq.s	locret_6D08
000076C4 0892 0000                  		bclr	#0,(a2)
000076C8 6700                       		beq.s	loc_6CBE
000076CA 78F0                       		moveq	#-$10,d4
000076CC 7AF0                       		moveq	#-$10,d5
000076CE 6100 0000                  		bsr.w	Calc_VRAM_Pos
000076D2 78F0                       		moveq	#-$10,d4
000076D4 7AF0                       		moveq	#-$10,d5
000076D6 6100 0000                  		bsr.w	DrawTiles_LR
000076DA                             
000076DA                            loc_6CBE:
000076DA 0892 0001                  		bclr	#1,(a2)
000076DE 6700                       		beq.s	loc_6CD8
000076E0 383C 00E0                  		move.w	#$E0,d4	; 'à'
000076E4 7AF0                       		moveq	#-$10,d5
000076E6 6100 0000                  		bsr.w	Calc_VRAM_Pos
000076EA 383C 00E0                  		move.w	#$E0,d4	; 'à'
000076EE 7AF0                       		moveq	#-$10,d5
000076F0 6100 0000                  		bsr.w	DrawTiles_LR
000076F4                             
000076F4                            loc_6CD8:
000076F4 0892 0002                  		bclr	#2,(a2)
000076F8 6700                       		beq.s	loc_6CEE
000076FA 78F0                       		moveq	#-$10,d4
000076FC 7AF0                       		moveq	#-$10,d5
000076FE 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007702 78F0                       		moveq	#-$10,d4
00007704 7AF0                       		moveq	#-$10,d5
00007706 6100 0000                  		bsr.w	DrawTiles_TB
0000770A                             
0000770A                            loc_6CEE:
0000770A 0892 0003                  		bclr	#3,(a2)
0000770E 6700                       		beq.s	locret_6D08
00007710 78F0                       		moveq	#-$10,d4
00007712 3A3C 0140                  		move.w	#$140,d5
00007716 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000771A 78F0                       		moveq	#-$10,d4
0000771C 3A3C 0140                  		move.w	#$140,d5
00007720 6100 0000                  		bsr.w	DrawTiles_TB
00007724                             
00007724                            locret_6D08:
00007724 4E75                       		rts	
00007726                             
00007726                            ; End of function LoadTilesAsYouMove
00007726                             
00007726                             
00007726                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007726                             
00007726                             
00007726                            sub_6D0A:
00007726 4A12                       		tst.b	(a2)
00007728 6700 0000                  		beq.w	locret_6DA4
0000772C 0892 0000                  		bclr	#0,(a2)
00007730 6700                       		beq.s	loc_6D26
00007732 78F0                       		moveq	#-$10,d4
00007734 7AF0                       		moveq	#-$10,d5
00007736 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000773A 78F0                       		moveq	#-$10,d4
0000773C 7AF0                       		moveq	#-$10,d5
0000773E 6100 0000                  		bsr.w	DrawTiles_LR
00007742                             
00007742                            loc_6D26:
00007742 0892 0001                  		bclr	#1,(a2)
00007746 6700                       		beq.s	loc_6D40
00007748 383C 00E0                  		move.w	#$E0,d4	; 'à'
0000774C 7AF0                       		moveq	#-$10,d5
0000774E 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007752 383C 00E0                  		move.w	#$E0,d4	; 'à'
00007756 7AF0                       		moveq	#-$10,d5
00007758 6100 0000                  		bsr.w	DrawTiles_LR
0000775C                             
0000775C                            loc_6D40:
0000775C 0892 0002                  		bclr	#2,(a2)
00007760 6700                       		beq.s	loc_6D56
00007762 78F0                       		moveq	#-$10,d4
00007764 7AF0                       		moveq	#-$10,d5
00007766 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000776A 78F0                       		moveq	#-$10,d4
0000776C 7AF0                       		moveq	#-$10,d5
0000776E 6100 0000                  		bsr.w	DrawTiles_TB
00007772                             
00007772                            loc_6D56:
00007772 0892 0003                  		bclr	#3,(a2)
00007776 6700                       		beq.s	loc_6D70
00007778 78F0                       		moveq	#-$10,d4
0000777A 3A3C 0140                  		move.w	#$140,d5
0000777E 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007782 78F0                       		moveq	#-$10,d4
00007784 3A3C 0140                  		move.w	#$140,d5
00007788 6100 0000                  		bsr.w	DrawTiles_TB
0000778C                             
0000778C                            loc_6D70:
0000778C 0892 0004                  		bclr	#4,(a2)
00007790 6700                       		beq.s	loc_6D88
00007792 78F0                       		moveq	#-$10,d4
00007794 7A00                       		moveq	#0,d5
00007796 6100 0000                  		bsr.w	loc_7176
0000779A 78F0                       		moveq	#-$10,d4
0000779C 7A00                       		moveq	#0,d5
0000779E 7C1F                       		moveq	#$1F,d6
000077A0 6100 0000                  		bsr.w	DrawTiles_LR3
000077A4                             
000077A4                            loc_6D88:
000077A4 0892 0005                  		bclr	#5,(a2)
000077A8 6700                       		beq.s	locret_6DA4
000077AA 383C 00E0                  		move.w	#$E0,d4	; 'à'
000077AE 7A00                       		moveq	#0,d5
000077B0 6100 0000                  		bsr.w	loc_7176
000077B4 383C 00E0                  		move.w	#$E0,d4	; 'à'
000077B8 7A00                       		moveq	#0,d5
000077BA 7C1F                       		moveq	#$1F,d6
000077BC 6100 0000                  		bsr.w	DrawTiles_LR3
000077C0                             
000077C0                            locret_6DA4:
000077C0 4E75                       		rts	
000077C2                            ; End of function sub_6D0A
000077C2                             
000077C2                             
000077C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000077C2                             
000077C2                             
000077C2                            sub_6DA6:
000077C2 4A12                       		tst.b	(a2)
000077C4 6700 0000                  		beq.w	locret_6DF2
000077C8 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w
000077CE 6700 0000                  		beq.w	loc_6E16
000077D2 0892 0000                  		bclr	#0,(a2)
000077D6 6700                       		beq.s	loc_6DD2
000077D8 383C 0070                  		move.w	#$70,d4	; 'p'
000077DC 7AF0                       		moveq	#-$10,d5
000077DE 6100 0000                  		bsr.w	Calc_VRAM_Pos
000077E2 383C 0070                  		move.w	#$70,d4	; 'p'
000077E6 7AF0                       		moveq	#-$10,d5
000077E8 7C02                       		moveq	#2,d6
000077EA 6100 0000                  		bsr.w	DrawTiles_TB2
000077EE                             
000077EE                            loc_6DD2:
000077EE 0892 0001                  		bclr	#1,(a2)
000077F2 6700                       		beq.s	locret_6DF2
000077F4 383C 0070                  		move.w	#$70,d4	; 'p'
000077F8 3A3C 0140                  		move.w	#$140,d5
000077FC 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007800 383C 0070                  		move.w	#$70,d4	; 'p'
00007804 3A3C 0140                  		move.w	#$140,d5
00007808 7C02                       		moveq	#2,d6
0000780A 6100 0000                  		bsr.w	DrawTiles_TB2
0000780E                             
0000780E                            locret_6DF2:
0000780E 4E75                       		rts	
00007810                            ; ===========================================================================
00007810 00                         unk_6DF4:	dc.b   0 ;	 
00007811 00                         unk_6DF5:	dc.b   0 ;	 
00007812 00                         		dc.b   0 ;  
00007813 00                         		dc.b   0 ;  
00007814 00                         		dc.b   0 ;  
00007815 06                         		dc.b   6 ;  
00007816 06                         		dc.b   6 ;  
00007817 06                         		dc.b   6 ;  
00007818 06                         		dc.b   6 ;  
00007819 06                         		dc.b   6 ;  
0000781A 06                         		dc.b   6 ;  
0000781B 06                         		dc.b   6 ;  
0000781C 06                         		dc.b   6 ;  
0000781D 06                         		dc.b   6 ;  
0000781E 06                         		dc.b   6 ;  
0000781F 04                         		dc.b   4 ;  
00007820 04                         		dc.b   4 ;  
00007821 04                         		dc.b   4 ;  
00007822 04                         		dc.b   4 ;  
00007823 04                         		dc.b   4 ;  
00007824 04                         		dc.b   4 ;  
00007825 04                         		dc.b   4 ;  
00007826 02                         		dc.b   2 ;  
00007827 02                         		dc.b   2 ;  
00007828 02                         		dc.b   2 ;  
00007829 02                         		dc.b   2 ;  
0000782A 02                         		dc.b   2 ;  
0000782B 02                         		dc.b   2 ;  
0000782C 02                         		dc.b   2 ;  
0000782D 02                         		dc.b   2 ;  
0000782E 02                         		dc.b   2 ;  
0000782F 02                         		dc.b   2 ;  
00007830 02                         		dc.b   2 ;  
00007831 00                         		dc.b   0 ;  
00007832                            ; ===========================================================================
00007832                             
00007832                            loc_6E16:
00007832 78F0                       		moveq	#-$10,d4
00007834 0892 0000                  		bclr	#0,(a2)
00007838 6600                       		bne.s	loc_6E28
0000783A 0892 0001                  		bclr	#1,(a2)
0000783E 6700                       		beq.s	loc_6E72
00007840 383C 00E0                  		move.w	#$E0,d4	; 'à'
00007844                             
00007844                            loc_6E28:
00007844 41F9 0000 7811             		lea	(unk_6DF5).l,a0
0000784A 3038 F70C                  		move.w	($FFFFF70C).w,d0
0000784E D044                       		add.w	d4,d0
00007850 0240 01F0                  		andi.w	#$1F0,d0
00007854 E848                       		lsr.w	#4,d0
00007856 1030 0000                  		move.b	(a0,d0.w),d0
0000785A 47F9 0000 0000             		lea	(unk_6FE4).l,a3
00007860 3673 0000                  		movea.w	(a3,d0.w),a3
00007864 6700                       		beq.s	loc_6E5E
00007866 7AF0                       		moveq	#-$10,d5
00007868 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000786C 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007870 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007874 6100 0000                  		bsr.w	DrawTiles_LR
00007878 6000                       		bra.s	loc_6E72
0000787A                            ; ===========================================================================
0000787A                             
0000787A                            loc_6E5E:
0000787A 7A00                       		moveq	#0,d5
0000787C 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007880 6100 0000                  		bsr.w	loc_7176
00007884 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007888 7C1F                       		moveq	#$1F,d6
0000788A 6100 0000                  		bsr.w	DrawTiles_LR3
0000788E                             
0000788E                            loc_6E72:
0000788E 4A12                       		tst.b	(a2)
00007890 6600                       		bne.s	loc_6E78
00007892 4E75                       		rts	
00007894                            ; ===========================================================================
00007894                             
00007894                            loc_6E78:
00007894 78F0                       		moveq	#-$10,d4
00007896 7AF0                       		moveq	#-$10,d5
00007898 1012                       		move.b	(a2),d0
0000789A 0200 00A8                  		andi.b	#-$58,d0
0000789E 6700                       		beq.s	loc_6E8C
000078A0 E208                       		lsr.b	#1,d0
000078A2 1480                       		move.b	d0,(a2)
000078A4 3A3C 0140                  		move.w	#$140,d5
000078A8                             
000078A8                            loc_6E8C:
000078A8 41F9 0000 7810             		lea	(unk_6DF4).l,a0
000078AE 3038 F70C                  		move.w	($FFFFF70C).w,d0
000078B2 0240 01F0                  		andi.w	#$1F0,d0
000078B6 E848                       		lsr.w	#4,d0
000078B8 41F0 0000                  		lea	(a0,d0.w),a0
000078BC 6000 0000                  		bra.w	loc_6FEC
000078C0                            ; End of function sub_6DA6
000078C0                             
000078C0                             
000078C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000078C0                             
000078C0                             
000078C0                            sub_6EA4:
000078C0 4A12                       		tst.b	(a2)
000078C2 6700 0000                  		beq.w	locret_6EF0
000078C6 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
000078CC 6700 0000                  		beq.w	loc_6F54
000078D0 0892 0000                  		bclr	#0,(a2)
000078D4 6700                       		beq.s	loc_6ED0_2
000078D6 383C 0040                  		move.w	#$40,d4	; '@'
000078DA 7AF0                       		moveq	#-$10,d5
000078DC 6100 0000                  		bsr.w	Calc_VRAM_Pos
000078E0 383C 0040                  		move.w	#$40,d4	; '@'
000078E4 7AF0                       		moveq	#-$10,d5
000078E6 7C02                       		moveq	#2,d6
000078E8 6100 0000                  		bsr.w	DrawTiles_TB2
000078EC                             
000078EC                            loc_6ED0_2:
000078EC 0892 0001                  		bclr	#1,(a2)
000078F0 6700                       		beq.s	locret_6EF0
000078F2 383C 0040                  		move.w	#$40,d4	; '@'
000078F6 3A3C 0140                  		move.w	#$140,d5
000078FA 6100 0000                  		bsr.w	Calc_VRAM_Pos
000078FE 383C 0040                  		move.w	#$40,d4	; '@'
00007902 3A3C 0140                  		move.w	#$140,d5
00007906 7C02                       		moveq	#2,d6
00007908 6100 0000                  		bsr.w	DrawTiles_TB2
0000790C                             
0000790C                            locret_6EF0:
0000790C 4E75                       		rts	
0000790E                            ; ===========================================================================
0000790E 00                         unk_6EF2:	dc.b   0 ;	 
0000790F 00                         unk_6EF3:	dc.b   0 ;	 
00007910 00                         		dc.b   0 ;  
00007911 00                         		dc.b   0 ;  
00007912 00                         		dc.b   0 ;  
00007913 00                         		dc.b   0 ;  
00007914 06                         		dc.b   6 ;  
00007915 06                         		dc.b   6 ;  
00007916 04                         		dc.b   4 ;  
00007917 04                         		dc.b   4 ;  
00007918 04                         		dc.b   4 ;  
00007919 04                         		dc.b   4 ;  
0000791A 04                         		dc.b   4 ;  
0000791B 04                         		dc.b   4 ;  
0000791C 04                         		dc.b   4 ;  
0000791D 04                         		dc.b   4 ;  
0000791E 04                         		dc.b   4 ;  
0000791F 02                         		dc.b   2 ;  
00007920 02                         		dc.b   2 ;  
00007921 02                         		dc.b   2 ;  
00007922 02                         		dc.b   2 ;  
00007923 02                         		dc.b   2 ;  
00007924 02                         		dc.b   2 ;  
00007925 02                         		dc.b   2 ;  
00007926 02                         		dc.b   2 ;  
00007927 02                         		dc.b   2 ;  
00007928 02                         		dc.b   2 ;  
00007929 02                         		dc.b   2 ;  
0000792A 02                         		dc.b   2 ;  
0000792B 02                         		dc.b   2 ;  
0000792C 02                         		dc.b   2 ;  
0000792D 02                         		dc.b   2 ;  
0000792E 02                         		dc.b   2 ;  
0000792F 02                         		dc.b   2 ;  
00007930 02                         		dc.b   2 ;  
00007931 02                         		dc.b   2 ;  
00007932 02                         		dc.b   2 ;  
00007933 02                         		dc.b   2 ;  
00007934 02                         		dc.b   2 ;  
00007935 02                         		dc.b   2 ;  
00007936 02                         		dc.b   2 ;  
00007937 02                         		dc.b   2 ;  
00007938 02                         		dc.b   2 ;  
00007939 02                         		dc.b   2 ;  
0000793A 02                         		dc.b   2 ;  
0000793B 02                         		dc.b   2 ;  
0000793C 02                         		dc.b   2 ;  
0000793D 02                         		dc.b   2 ;  
0000793E 02                         		dc.b   2 ;  
0000793F 02                         		dc.b   2 ;  
00007940 02                         		dc.b   2 ;  
00007941 02                         		dc.b   2 ;  
00007942 02                         		dc.b   2 ;  
00007943 02                         		dc.b   2 ;  
00007944 02                         		dc.b   2 ;  
00007945 02                         		dc.b   2 ;  
00007946 02                         		dc.b   2 ;  
00007947 02                         		dc.b   2 ;  
00007948 02                         		dc.b   2 ;  
00007949 02                         		dc.b   2 ;  
0000794A 02                         		dc.b   2 ;  
0000794B 02                         		dc.b   2 ;  
0000794C 02                         		dc.b   2 ;  
0000794D 02                         		dc.b   2 ;  
0000794E 02                         		dc.b   2 ;  
0000794F 02                         		dc.b   2 ;  
00007950 02                         		dc.b   2 ;  
00007951 02                         		dc.b   2 ;  
00007952 02                         		dc.b   2 ;  
00007953 02                         		dc.b   2 ;  
00007954 02                         		dc.b   2 ;  
00007955 02                         		dc.b   2 ;  
00007956 02                         		dc.b   2 ;  
00007957 02                         		dc.b   2 ;  
00007958 02                         		dc.b   2 ;  
00007959 02                         		dc.b   2 ;  
0000795A 02                         		dc.b   2 ;  
0000795B 02                         		dc.b   2 ;  
0000795C 02                         		dc.b   2 ;  
0000795D 02                         		dc.b   2 ;  
0000795E 02                         		dc.b   2 ;  
0000795F 02                         		dc.b   2 ;  
00007960 02                         		dc.b   2 ;  
00007961 02                         		dc.b   2 ;  
00007962 02                         		dc.b   2 ;  
00007963 02                         		dc.b   2 ;  
00007964 02                         		dc.b   2 ;  
00007965 02                         		dc.b   2 ;  
00007966 02                         		dc.b   2 ;  
00007967 02                         		dc.b   2 ;  
00007968 02                         		dc.b   2 ;  
00007969 02                         		dc.b   2 ;  
0000796A 02                         		dc.b   2 ;  
0000796B 02                         		dc.b   2 ;  
0000796C 02                         		dc.b   2 ;  
0000796D 02                         		dc.b   2 ;  
0000796E 02                         		dc.b   2 ;  
0000796F 00                         		dc.b   0 ;  
00007970                            ; ===========================================================================
00007970                             
00007970                            loc_6F54:
00007970 78F0                       		moveq	#-$10,d4
00007972 0892 0000                  		bclr	#0,(a2)
00007976 6600                       		bne.s	loc_6F66
00007978 0892 0001                  		bclr	#1,(a2)
0000797C 6700                       		beq.s	loc_6FAE
0000797E 383C 00E0                  		move.w	#$E0,d4	; 'à'
00007982                             
00007982                            loc_6F66:
00007982 41F9 0000 790F             		lea	(unk_6EF3).l,a0
00007988 3038 F70C                  		move.w	($FFFFF70C).w,d0
0000798C 0440 0200                  		subi.w	#$200,d0
00007990 D044                       		add.w	d4,d0
00007992 0240 07F0                  		andi.w	#$7F0,d0
00007996 E848                       		lsr.w	#4,d0
00007998 1030 0000                  		move.b	(a0,d0.w),d0
0000799C 367B 0000                  		movea.w	unk_6FE4(pc,d0.w),a3
000079A0 6700                       		beq.s	loc_6F9A
000079A2 7AF0                       		moveq	#-$10,d5
000079A4 48E7 0C00                  		movem.l	d4-d5,-(sp)
000079A8 6100 0000                  		bsr.w	Calc_VRAM_Pos
000079AC 4CDF 0030                  		movem.l	(sp)+,d4-d5
000079B0 6100 0000                  		bsr.w	DrawTiles_LR
000079B4 6000                       		bra.s	loc_6FAE
000079B6                            ; ===========================================================================
000079B6                             
000079B6                            loc_6F9A:
000079B6 7A00                       		moveq	#0,d5
000079B8 48E7 0C00                  		movem.l	d4-d5,-(sp)
000079BC 6100 0000                  		bsr.w	loc_7176
000079C0 4CDF 0030                  		movem.l	(sp)+,d4-d5
000079C4 7C1F                       		moveq	#$1F,d6
000079C6 6100 0000                  		bsr.w	DrawTiles_LR3
000079CA                             
000079CA                            loc_6FAE:
000079CA 4A12                       		tst.b	(a2)
000079CC 6600                       		bne.s	loc_6FB4
000079CE 4E75                       		rts	
000079D0                            ; ===========================================================================
000079D0                             
000079D0                            loc_6FB4:
000079D0 78F0                       		moveq	#-$10,d4
000079D2 7AF0                       		moveq	#-$10,d5
000079D4 1012                       		move.b	(a2),d0
000079D6 0200 00A8                  		andi.b	#-$58,d0
000079DA 6700                       		beq.s	loc_6FC8
000079DC E208                       		lsr.b	#1,d0
000079DE 1480                       		move.b	d0,(a2)
000079E0 3A3C 0140                  		move.w	#$140,d5
000079E4                             
000079E4                            loc_6FC8:
000079E4 41F9 0000 790E             		lea	(unk_6EF2).l,a0
000079EA 3038 F70C                  		move.w	($FFFFF70C).w,d0
000079EE 0440 0200                  		subi.w	#$200,d0
000079F2 0240 07F0                  		andi.w	#$7F0,d0
000079F6 E848                       		lsr.w	#4,d0
000079F8 41F0 0000                  		lea	(a0,d0.w),a0
000079FC 6000 0000                  		bra.w	loc_6FEC
00007A00                            ; ===========================================================================
00007A00 FF                         unk_6FE4:	dc.b $FF ;  
00007A01 18                         		dc.b $18 ;  
00007A02 FF                         		dc.b $FF ;  
00007A03 18                         		dc.b $18 ;  
00007A04 FF                         		dc.b $FF ;  
00007A05 20                         		dc.b $20 ;  
00007A06 FF                         		dc.b $FF ;  
00007A07 28                         		dc.b $28 ; (
00007A08                            ; ===========================================================================
00007A08                             
00007A08                            loc_6FEC:
00007A08 7C0F                       		moveq	#$F,d6
00007A0A 2E3C 0080 0000             		move.l	#$800000,d7
00007A10                             
00007A10                            loc_6FF4:
00007A10 7000                       		moveq	#0,d0
00007A12 1018                       		move.b	(a0)+,d0
00007A14 0112                       		btst	d0,(a2)
00007A16 6700                       		beq.s	loc_701C
00007A18 367B 00E6                  		movea.w	unk_6FE4(pc,d0.w),a3
00007A1C 48E7 0C80                  		movem.l	d4-d5/a0,-(sp)
00007A20 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007A24 6100 0000                  		bsr.w	sub_712A
00007A28 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007A2C 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007A30 6100 0000                  		bsr.w	sub_70AC
00007A34 4CDF 0130                  		movem.l	(sp)+,d4-d5/a0
00007A38                             
00007A38                            loc_701C:
00007A38 0644 0010                  		addi.w	#$10,d4
00007A3C 51CE FFD2                  		dbf	d6,loc_6FF4
00007A40 4212                       		clr.b	(a2)
00007A42 4E75                       		rts	
00007A44                            ; End of function sub_6EA4
00007A44                             
00007A44                             
00007A44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A44                             
00007A44                             
00007A44                            DrawTiles_LR:
00007A44 7C15                       		moveq	#$15,d6
00007A46                            ; End of function DrawTiles_LR
00007A46                             
00007A46                             
00007A46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A46                             
00007A46                             
00007A46                            DrawTiles_LR2:
00007A46 2E3C 0080 0000             		move.l	#$800000,d7
00007A4C 2200                       		move.l	d0,d1
00007A4E                             
00007A4E                            loc_7032:
00007A4E 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007A52 6100 0000                  		bsr.w	sub_712A
00007A56 2001                       		move.l	d1,d0
00007A58 6100 0000                  		bsr.w	sub_70AC
00007A5C 5801                       		addq.b	#4,d1
00007A5E 0201 007F                  		andi.b	#$7F,d1	; ''
00007A62 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007A66 0645 0010                  		addi.w	#$10,d5
00007A6A 51CE FFE2                  		dbf	d6,loc_7032
00007A6E 4E75                       		rts	
00007A70                            ; End of function DrawTiles_LR2
00007A70                             
00007A70                             
00007A70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A70                             
00007A70                             
00007A70                            DrawTiles_LR3:
00007A70 2E3C 0080 0000             		move.l	#$800000,d7
00007A76 2200                       		move.l	d0,d1
00007A78                             
00007A78                            loc_705C:
00007A78 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007A7C 6100 0000                  		bsr.w	loc_712C
00007A80 2001                       		move.l	d1,d0
00007A82 6100 0000                  		bsr.w	sub_70AC
00007A86 5801                       		addq.b	#4,d1
00007A88 0201 007F                  		andi.b	#$7F,d1	; ''
00007A8C 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007A90 0645 0010                  		addi.w	#$10,d5
00007A94 51CE FFE2                  		dbf	d6,loc_705C
00007A98 4E75                       		rts	
00007A9A                            ; End of function DrawTiles_LR3
00007A9A                             
00007A9A                             
00007A9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A9A                             
00007A9A                             
00007A9A                            DrawTiles_TB:
00007A9A 7C0F                       		moveq	#$F,d6
00007A9C                            ; End of function DrawTiles_TB
00007A9C                             
00007A9C                             
00007A9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A9C                             
00007A9C                             
00007A9C                            DrawTiles_TB2:
00007A9C 2E3C 0080 0000             		move.l	#$800000,d7
00007AA2 2200                       		move.l	d0,d1
00007AA4                             
00007AA4                            loc_7088:
00007AA4 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007AA8 6100 0000                  		bsr.w	sub_712A
00007AAC 2001                       		move.l	d1,d0
00007AAE 6100 0000                  		bsr.w	sub_70AC
00007AB2 0641 0100                  		addi.w	#$100,d1
00007AB6 0241 0FFF                  		andi.w	#$FFF,d1
00007ABA 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007ABE 0644 0010                  		addi.w	#$10,d4
00007AC2 51CE FFE0                  		dbf	d6,loc_7088
00007AC6 4E75                       		rts	
00007AC8                            ; End of function DrawTiles_TB2
00007AC8                             
00007AC8                             
00007AC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007AC8                             
00007AC8                             
00007AC8                            sub_70AC:
00007AC8 8042                       		or.w	d2,d0
00007ACA 4840                       		swap	d0
00007ACC 0810 0004                  		btst	#4,(a0)
00007AD0 6600                       		bne.s	loc_70E8
00007AD2 0810 0003                  		btst	#3,(a0)
00007AD6 6600                       		bne.s	loc_70C8
00007AD8 2A80                       		move.l	d0,(a5)
00007ADA 2C99                       		move.l	(a1)+,(a6)
00007ADC D087                       		add.l	d7,d0
00007ADE 2A80                       		move.l	d0,(a5)
00007AE0 2C99                       		move.l	(a1)+,(a6)
00007AE2 4E75                       		rts	
00007AE4                            ; ===========================================================================
00007AE4                             
00007AE4                            loc_70C8:
00007AE4 2A80                       		move.l	d0,(a5)
00007AE6 2819                       		move.l	(a1)+,d4
00007AE8 0A84 0800 0800             		eori.l	#$8000800,d4
00007AEE 4844                       		swap	d4
00007AF0 2C84                       		move.l	d4,(a6)
00007AF2 D087                       		add.l	d7,d0
00007AF4 2A80                       		move.l	d0,(a5)
00007AF6 2819                       		move.l	(a1)+,d4
00007AF8 0A84 0800 0800             		eori.l	#$8000800,d4
00007AFE 4844                       		swap	d4
00007B00 2C84                       		move.l	d4,(a6)
00007B02 4E75                       		rts	
00007B04                            ; ===========================================================================
00007B04                             
00007B04                            loc_70E8:
00007B04 0810 0003                  		btst	#3,(a0)
00007B08 6600                       		bne.s	loc_710A
00007B0A 2A80                       		move.l	d0,(a5)
00007B0C 2A19                       		move.l	(a1)+,d5
00007B0E 2819                       		move.l	(a1)+,d4
00007B10 0A84 1000 1000             		eori.l	#$10001000,d4
00007B16 2C84                       		move.l	d4,(a6)
00007B18 D087                       		add.l	d7,d0
00007B1A 2A80                       		move.l	d0,(a5)
00007B1C 0A85 1000 1000             		eori.l	#$10001000,d5
00007B22 2C85                       		move.l	d5,(a6)
00007B24 4E75                       		rts	
00007B26                            ; ===========================================================================
00007B26                             
00007B26                            loc_710A:
00007B26 2A80                       		move.l	d0,(a5)
00007B28 2A19                       		move.l	(a1)+,d5
00007B2A 2819                       		move.l	(a1)+,d4
00007B2C 0A84 1800 1800             		eori.l	#$18001800,d4
00007B32 4844                       		swap	d4
00007B34 2C84                       		move.l	d4,(a6)
00007B36 D087                       		add.l	d7,d0
00007B38 2A80                       		move.l	d0,(a5)
00007B3A 0A85 1800 1800             		eori.l	#$18001800,d5
00007B40 4845                       		swap	d5
00007B42 2C85                       		move.l	d5,(a6)
00007B44 4E75                       		rts	
00007B46                            ; End of function sub_70AC
00007B46                             
00007B46                             
00007B46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B46                             
00007B46                             
00007B46                            sub_712A:
00007B46 DA53                       		add.w	(a3),d5
00007B48                             
00007B48                            loc_712C:
00007B48 D86B 0004                  		add.w	4(a3),d4
00007B4C 43F8 B000                  		lea	($FFFFB000).w,a1
00007B50 3604                       		move.w	d4,d3
00007B52 E24B                       		lsr.w	#1,d3
00007B54 0243 0380                  		andi.w	#$380,d3
00007B58 E64D                       		lsr.w	#3,d5
00007B5A 3005                       		move.w	d5,d0
00007B5C EA48                       		lsr.w	#5,d0
00007B5E 0240 007F                  		andi.w	#$7F,d0	; ''
00007B62 D043                       		add.w	d3,d0
00007B64 76FF                       		moveq	#-1,d3
00007B66 1634 0000                  		move.b	(a4,d0.w),d3
00007B6A 6700                       		beq.s	locret_7172
00007B6C 5303                       		subq.b	#1,d3
00007B6E 0243 007F                  		andi.w	#$7F,d3	; ''
00007B72 EE5B                       		ror.w	#7,d3
00007B74 D844                       		add.w	d4,d4
00007B76 0244 01E0                  		andi.w	#$1E0,d4
00007B7A 0245 001E                  		andi.w	#$1E,d5
00007B7E D644                       		add.w	d4,d3
00007B80 D645                       		add.w	d5,d3
00007B82 2043                       		movea.l	d3,a0
00007B84 3610                       		move.w	(a0),d3
00007B86 0243 03FF                  		andi.w	#$3FF,d3
00007B8A E74B                       		lsl.w	#3,d3
00007B8C D2C3                       		adda.w	d3,a1
00007B8E                             
00007B8E                            locret_7172:
00007B8E 4E75                       		rts	
00007B90                            ; End of function sub_712A
00007B90                             
00007B90                             
00007B90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B90                             
00007B90                             
00007B90                            Calc_VRAM_Pos:
00007B90 DA53                       		add.w	(a3),d5
00007B92                             
00007B92                            loc_7176:
00007B92 D86B 0004                  		add.w	4(a3),d4
00007B96 0244 00F0                  		andi.w	#$F0,d4	; 'ð'
00007B9A 0245 01F0                  		andi.w	#$1F0,d5
00007B9E E94C                       		lsl.w	#4,d4
00007BA0 E44D                       		lsr.w	#2,d5
00007BA2 D845                       		add.w	d5,d4
00007BA4 7003                       		moveq	#3,d0
00007BA6 4840                       		swap	d0
00007BA8 3004                       		move.w	d4,d0
00007BAA 4E75                       		rts	
00007BAC                            ; End of function Calc_VRAM_Pos
00007BAC                             
00007BAC                            ; ===========================================================================
00007BAC D86B 0004                  		add.w	4(a3),d4
00007BB0 DA53                       		add.w	(a3),d5
00007BB2 0244 00F0                  		andi.w	#$F0,d4	; 'ð'
00007BB6 0245 01F0                  		andi.w	#$1F0,d5
00007BBA E94C                       		lsl.w	#4,d4
00007BBC E44D                       		lsr.w	#2,d5
00007BBE D845                       		add.w	d5,d4
00007BC0 7002                       		moveq	#2,d0
00007BC2 4840                       		swap	d0
00007BC4 3004                       		move.w	d4,d0
00007BC6 4E75                       		rts	
00007BC8                             
00007BC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007BC8                             
00007BC8                             
00007BC8                            LoadTilesFromStart:
00007BC8 4BF9 00C0 0004             		lea	($C00004).l,a5
00007BCE 4DF9 00C0 0000             		lea	($C00000).l,a6
00007BD4 47F8 F700                  		lea	($FFFFF700).w,a3
00007BD8 49F8 A400                  		lea	($FFFFA400).w,a4
00007BDC 343C 4000                  		move.w	#$4000,d2
00007BE0 6100                       		bsr.s	LoadTilesFromStart2
00007BE2 47F8 F708                  		lea	($FFFFF708).w,a3
00007BE6 49F8 A440                  		lea	($FFFFA440).w,a4
00007BEA 343C 6000                  		move.w	#$6000,d2
00007BEE 4A38 FE10                  		tst.b	($FFFFFE10).w
00007BF2 6700 0000                  		beq.w	loc_7220
00007BF6 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
00007BFC 6700 0000                  		beq.w	loc_725A
00007C00 0C78 0500 FE10             		cmpi.w	#$500,($FFFFFE10).w
00007C06 6700 0000                  		beq.w	loc_7288
00007C0A 0C38 0006 FE10             		cmpi.b	#6,($FFFFFE10).w
00007C10 6700 0000                  		beq.w	loc_7220
00007C14                            ; End of function LoadTilesFromStart
00007C14                             
00007C14                             
00007C14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C14                             
00007C14                             
00007C14                            LoadTilesFromStart2:
00007C14 78F0                       		moveq	#-$10,d4
00007C16 7C0F                       		moveq	#$F,d6
00007C18                             
00007C18                            loc_71FC:
00007C18 48E7 0E00                  		movem.l	d4-d6,-(sp)
00007C1C 7A00                       		moveq	#0,d5
00007C1E 3204                       		move.w	d4,d1
00007C20 6100 FF6E                  		bsr.w	Calc_VRAM_Pos
00007C24 3801                       		move.w	d1,d4
00007C26 7A00                       		moveq	#0,d5
00007C28 7C1F                       		moveq	#$1F,d6
00007C2A 6100 FE1A                  		bsr.w	DrawTiles_LR2
00007C2E 4CDF 0070                  		movem.l	(sp)+,d4-d6
00007C32 0644 0010                  		addi.w	#$10,d4
00007C36 51CE FFE0                  		dbf	d6,loc_71FC
00007C3A 4E75                       		rts	
00007C3C                            ; End of function LoadTilesFromStart2
00007C3C                             
00007C3C                            ; ===========================================================================
00007C3C                             
00007C3C                            loc_7220:
00007C3C 7800                       		moveq	#0,d4
00007C3E 7C0F                       		moveq	#$F,d6
00007C40                             
00007C40                            loc_7224:
00007C40 48E7 0E00                  		movem.l	d4-d6,-(sp)
00007C44 41F9 0000 0000             		lea	(unk_724A).l,a0
00007C4A 3038 F70C                  		move.w	($FFFFF70C).w,d0
00007C4E D044                       		add.w	d4,d0
00007C50 0240 00F0                  		andi.w	#$F0,d0	; 'ð'
00007C54 6100 0000                  		bsr.w	sub_72BA
00007C58 4CDF 0070                  		movem.l	(sp)+,d4-d6
00007C5C 0644 0010                  		addi.w	#$10,d4
00007C60 51CE FFDE                  		dbf	d6,loc_7224
00007C64 4E75                       		rts	
00007C66                            ; ===========================================================================
00007C66 00                         unk_724A:	dc.b   0 ;	 
00007C67 00                         		dc.b   0 ;  
00007C68 00                         		dc.b   0 ;  
00007C69 00                         		dc.b   0 ;  
00007C6A 06                         		dc.b   6 ;  
00007C6B 06                         		dc.b   6 ;  
00007C6C 06                         		dc.b   6 ;  
00007C6D 04                         		dc.b   4 ;  
00007C6E 04                         		dc.b   4 ;  
00007C6F 04                         		dc.b   4 ;  
00007C70 00                         		dc.b   0 ;  
00007C71 00                         		dc.b   0 ;  
00007C72 00                         		dc.b   0 ;  
00007C73 00                         		dc.b   0 ;  
00007C74 00                         		dc.b   0 ;  
00007C75 00                         		dc.b   0 ;  
00007C76                            ; ===========================================================================
00007C76                             
00007C76                            loc_725A:
00007C76 78F0                       		moveq	#-$10,d4
00007C78 7C0F                       		moveq	#$F,d6
00007C7A                             
00007C7A                            loc_725E:
00007C7A 48E7 0E00                  		movem.l	d4-d6,-(sp)
00007C7E 41F9 0000 790F             		lea	(unk_6EF3).l,a0
00007C84 3038 F70C                  		move.w	($FFFFF70C).w,d0
00007C88 0440 0200                  		subi.w	#$200,d0
00007C8C D044                       		add.w	d4,d0
00007C8E 0240 07F0                  		andi.w	#$7F0,d0
00007C92 6100 0000                  		bsr.w	sub_72BA
00007C96 4CDF 0070                  		movem.l	(sp)+,d4-d6
00007C9A 0644 0010                  		addi.w	#$10,d4
00007C9E 51CE FFDA                  		dbf	d6,loc_725E
00007CA2 4E75                       		rts	
00007CA4                            ; ===========================================================================
00007CA4                             
00007CA4                            loc_7288:
00007CA4 78F0                       		moveq	#-$10,d4
00007CA6 7C0F                       		moveq	#$F,d6
00007CA8                             
00007CA8                            loc_728C:
00007CA8 48E7 0E00                  		movem.l	d4-d6,-(sp)
00007CAC 41F9 0000 7811             		lea	(unk_6DF5).l,a0
00007CB2 3038 F70C                  		move.w	($FFFFF70C).w,d0
00007CB6 D044                       		add.w	d4,d0
00007CB8 0240 01F0                  		andi.w	#$1F0,d0
00007CBC 6100 0000                  		bsr.w	sub_72BA
00007CC0 4CDF 0070                  		movem.l	(sp)+,d4-d6
00007CC4 0644 0010                  		addi.w	#$10,d4
00007CC8 51CE FFDE                  		dbf	d6,loc_728C
00007CCC 4E75                       		rts	
00007CCE                            ; ===========================================================================
00007CCE F7                         unk_72B2:	dc.b $F7 ; ÷
00007CCF 08                         		dc.b   8 ;  
00007CD0 F7                         		dc.b $F7 ; ÷
00007CD1 08                         		dc.b   8 ;  
00007CD2 F7                         		dc.b $F7 ; ÷
00007CD3 10                         		dc.b $10 ;  
00007CD4 F7                         		dc.b $F7 ; ÷
00007CD5 18                         		dc.b $18 ;  
00007CD6                             
00007CD6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007CD6                             
00007CD6                             
00007CD6                            sub_72BA:
00007CD6 E848                       		lsr.w	#4,d0
00007CD8 1030 0000                  		move.b	(a0,d0.w),d0
00007CDC 367B 00F0                  		movea.w	unk_72B2(pc,d0.w),a3
00007CE0 6700                       		beq.s	loc_72DA
00007CE2 7AF0                       		moveq	#-$10,d5
00007CE4 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007CE8 6100 FEA6                  		bsr.w	Calc_VRAM_Pos
00007CEC 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007CF0 6100 FD52                  		bsr.w	DrawTiles_LR
00007CF4 6000                       		bra.s	locret_72EE
00007CF6                            ; ===========================================================================
00007CF6                             
00007CF6                            loc_72DA:
00007CF6 7A00                       		moveq	#0,d5
00007CF8 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007CFC 6100 FE94                  		bsr.w	loc_7176
00007D00 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007D04 7C1F                       		moveq	#$1F,d6
00007D06 6100 FD68                  		bsr.w	DrawTiles_LR3
00007D0A                             
00007D0A                            locret_72EE:
00007D0A 4E75                       		rts	
00007D0C                            ; End of function sub_72BA
00007D0C                            
00007D0C                            ; ---------------------------------------------------------------------------
00007D0C                            ; Main Load Block loading subroutine
00007D0C                            ; ---------------------------------------------------------------------------
00007D0C                            
00007D0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D0C                            
00007D0C                            
00007D0C                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
00007D0C 7000                       		moveq	#0,d0
00007D0E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007D12 E948                       		lsl.w	#4,d0
00007D14 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00007D1A 45F2 0000                  		lea	(a2,d0.w),a2
00007D1E 2F0A                       		move.l	a2,-(sp)
00007D20 588A                       		addq.l	#4,a2
00007D22 205A                       		movea.l	(a2)+,a0
00007D24 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
00007D28 303C 0000                  		move.w	#0,d0
00007D2C 6100 99A2                  		bsr.w	EniDec
00007D30 205A                       		movea.l	(a2)+,a0
00007D32 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
00007D38 6100 9B14                  		bsr.w	KosDec
00007D3C 6100 0000                  		bsr.w	LevelLayoutLoad
00007D40 301A                       		move.w	(a2)+,d0
00007D42 3012                       		move.w	(a2),d0
00007D44 0240 00FF                  		andi.w	#$FF,d0
00007D48 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
00007D4E 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
00007D50 700C                       		moveq	#$C,d0		; use SB3 Palette
00007D52                            
00007D52                            MLB_ChkSBZPal:
00007D52 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
00007D58 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
00007D5A 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
00007D60 6600                       		bne.s	MLB_NormalPal	; if not, branch
00007D62                            
00007D62                            MLB_UsePal0E:
00007D62 700E                       		moveq	#$E,d0		; use SBZ2/FZ Palette
00007D64                            
00007D64                            MLB_NormalPal:
00007D64 6100 A4E0                  		bsr.w	PalLoad1	; load Palette (based on	d0)
00007D68 245F                       		movea.l	(sp)+,a2
00007D6A 584A                       		addq.w	#4,a2
00007D6C 7000                       		moveq	#0,d0
00007D6E 1012                       		move.b	(a2),d0
00007D70 6700                       		beq.s	locret_6D10
00007D72 6100 97BE                  		bsr.w	LoadPLC		; load pattern load cues
00007D76                            
00007D76                            locret_6D10:
00007D76 4E75                       		rts	
00007D78                            ; End of function MainLoadBlockLoad
00007D78                            
00007D78                            ; ---------------------------------------------------------------------------
00007D78                            ; Level	layout loading subroutine
00007D78                            ; ---------------------------------------------------------------------------
00007D78                            
00007D78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D78                            
00007D78                            
00007D78                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
00007D78 47F8 A400                  		lea	($FFFFA400).w,a3
00007D7C 323C 01FF                  		move.w	#$1FF,d1
00007D80 7000                       		moveq	#0,d0
00007D82                            
00007D82                            LevLoad_ClrRam:
00007D82 26C0                       		move.l	d0,(a3)+
00007D84 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
00007D88                            
00007D88 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
00007D8C 7200                       		moveq	#0,d1
00007D8E 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
00007D92 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
00007D96 7202                       		moveq	#2,d1
00007D98                            ; End of function LevelLayoutLoad
00007D98                            
00007D98                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
00007D98                            
00007D98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D98                            
00007D98                            
00007D98                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
00007D98 3038 FE10                  		move.w	($FFFFFE10).w,d0
00007D9C ED08                       		lsl.b	#6,d0
00007D9E EA48                       		lsr.w	#5,d0
00007DA0 3400                       		move.w	d0,d2
00007DA2 D040                       		add.w	d0,d0
00007DA4 D042                       		add.w	d2,d0
00007DA6 D041                       		add.w	d1,d0
00007DA8 43F9 0000 0000             		lea	(Level_Index).l,a1
00007DAE 3031 0000                  		move.w	(a1,d0.w),d0
00007DB2 43F1 0000                  		lea	(a1,d0.w),a1
00007DB6 7200                       		moveq	#0,d1
00007DB8 3401                       		move.w	d1,d2
00007DBA 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
00007DBC 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
00007DBE                            
00007DBE                            LevLoad_NumRows:
00007DBE 3001                       		move.w	d1,d0
00007DC0 204B                       		movea.l	a3,a0
00007DC2                            
00007DC2                            LevLoad_Row:
00007DC2 10D9                       		move.b	(a1)+,(a0)+
00007DC4 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
00007DC8 47EB 0080                  		lea	$80(a3),a3	; do next row
00007DCC 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
00007DD0 4E75                       		rts	
00007DD2                            ; End of function LevelLayoutLoad2
00007DD2                            
00007DD2                            ; ---------------------------------------------------------------------------
00007DD2                            ; Dynamic screen resize	loading	subroutine
00007DD2                            ; ---------------------------------------------------------------------------
00007DD2                            
00007DD2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007DD2                            
00007DD2                            
00007DD2                            DynScrResizeLoad:			; XREF: DeformBgLayer
00007DD2 7000                       		moveq	#0,d0
00007DD4 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007DD8 D040                       		add.w	d0,d0
00007DDA 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
00007DDE 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
00007DE2 7202                       		moveq	#2,d1
00007DE4 3038 F726                  		move.w	($FFFFF726).w,d0
00007DE8 9078 F72E                  		sub.w	($FFFFF72E).w,d0
00007DEC 6700                       		beq.s	locret_6DAA
00007DEE 6400                       		bcc.s	loc_6DAC
00007DF0 4441                       		neg.w	d1
00007DF2 3038 F704                  		move.w	($FFFFF704).w,d0
00007DF6 B078 F726                  		cmp.w	($FFFFF726).w,d0
00007DFA 6300                       		bls.s	loc_6DA0
00007DFC 31C0 F72E                  		move.w	d0,($FFFFF72E).w
00007E00 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
00007E06                            
00007E06                            loc_6DA0:
00007E06 D378 F72E                  		add.w	d1,($FFFFF72E).w
00007E0A 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00007E10                            
00007E10                            locret_6DAA:
00007E10 4E75                       		rts	
00007E12                            ; ===========================================================================
00007E12                            
00007E12                            loc_6DAC:				; XREF: DynScrResizeLoad
00007E12 3038 F704                  		move.w	($FFFFF704).w,d0
00007E16 5040                       		addq.w	#8,d0
00007E18 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00007E1C 6500                       		bcs.s	loc_6DC4
00007E1E 0838 0001 D022             		btst	#1,($FFFFD022).w
00007E24 6700                       		beq.s	loc_6DC4
00007E26 D241                       		add.w	d1,d1
00007E28 D241                       		add.w	d1,d1
00007E2A                            
00007E2A                            loc_6DC4:
00007E2A D378 F72E                  		add.w	d1,($FFFFF72E).w
00007E2E 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00007E34 4E75                       		rts	
00007E36                            ; End of function DynScrResizeLoad
00007E36                            
00007E36                            ; ===========================================================================
00007E36                            ; ---------------------------------------------------------------------------
00007E36                            ; Offset index for dynamic screen resizing
00007E36                            ; ---------------------------------------------------------------------------
00007E36 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
00007E3A 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
00007E3E 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
00007E42 0000                       		dc.w Resize_Ending-Resize_Index
00007E44                            ; ===========================================================================
00007E44                            ; ---------------------------------------------------------------------------
00007E44                            ; Green	Hill Zone dynamic screen resizing
00007E44                            ; ---------------------------------------------------------------------------
00007E44                            
00007E44                            Resize_GHZ:				; XREF: Resize_Index
00007E44 7000                       		moveq	#0,d0
00007E46 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007E4A D040                       		add.w	d0,d0
00007E4C 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
00007E50 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
00007E54                            ; ===========================================================================
00007E54 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
00007E56 0000                       		dc.w Resize_GHZ2-Resize_GHZx
00007E58 0000                       		dc.w Resize_GHZ3-Resize_GHZx
00007E5A                            ; ===========================================================================
00007E5A                            
00007E5A                            Resize_GHZ1:
00007E5A 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
00007E60 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
00007E66 6500                       		bcs.s	locret_6E08	; if not, branch
00007E68 31FC 0408 F72E             		move.w #$408,($FFFFF72E).w ; set if the lower y-boundary x-axis ins't scrolling fast enough.
00007E6E 31FC 0408 F726             		move.w	#$408,($FFFFF726).w ; set lower	y-boundary
00007E74                            
00007E74                            locret_6E08:
00007E74 4E75                       		rts	
00007E76                            ; ===========================================================================
00007E76                            
00007E76                            Resize_GHZ2:
00007E76 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007E7C 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
00007E82 6500                       		bcs.s	locret_6E3A
00007E84 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007E8A 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
00007E90 6500                       		bcs.s	locret_6E3A
00007E92 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00007E98 0C78 1D60 F700             		cmpi.w	#$1D60,($FFFFF700).w
00007E9E 6500                       		bcs.s	locret_6E3A
00007EA0 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007EA6                            
00007EA6                            locret_6E3A:
00007EA6 4E75                       		rts	
00007EA8                            ; ===========================================================================
00007EA8                            
00007EA8                            Resize_GHZ3:
00007EA8 7000                       		moveq	#0,d0
00007EAA 1038 F742                  		move.b	($FFFFF742).w,d0
00007EAE 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
00007EB2 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
00007EB6                            ; ===========================================================================
00007EB6 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
00007EB8 0000                       		dc.w Resize_GHZ3boss-off_6E4A
00007EBA 0000                       		dc.w Resize_GHZ3end-off_6E4A
00007EBC                            ; ===========================================================================
00007EBC                            
00007EBC                            Resize_GHZ3main:
00007EBC 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007EC2 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
00007EC8 6500                       		bcs.s	locret_6E96
00007ECA 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
00007ED0 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00007ED6 6500                       		bcs.s	locret_6E96
00007ED8 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
00007EDE 6500                       		bcs.s	loc_6E98
00007EE0 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00007EE6 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
00007EEC 6400                       		bcc.s	loc_6E8E
00007EEE 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
00007EF4 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
00007EFA                            
00007EFA                            loc_6E8E:
00007EFA 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00007F00 6400                       		bcc.s	loc_6E98
00007F02                            
00007F02                            locret_6E96:
00007F02 4E75                       		rts	
00007F04                            ; ===========================================================================
00007F04                            
00007F04                            loc_6E98:
00007F04 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007F0A 5438 F742                  		addq.b	#2,($FFFFF742).w
00007F0E 4E75                       		rts	
00007F10                            ; ===========================================================================
00007F10                            
00007F10                            Resize_GHZ3boss:
00007F10 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00007F16 6400                       		bcc.s	loc_6EB0
00007F18 5538 F742                  		subq.b	#2,($FFFFF742).w
00007F1C                            
00007F1C                            loc_6EB0:
00007F1C 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
00007F22 6500                       		bcs.s	locret_6EE8
00007F24 6100 0000                  		bsr.w	SingleObjLoad
00007F28 6600                       		bne.s	loc_6ED0
00007F2A 137C 003D 0000             		move.b	#$3D,0(a1)	; load GHZ boss	object
00007F30 337C 2A60 0008             		move.w	#$2A60,8(a1)
00007F36 337C 0280 000C             		move.w	#$280,$C(a1)
00007F3C                            
00007F3C                            loc_6ED0:
00007F3C 1038 FE10                  		move.b	($FFFFFE10).w,d0	; set boss number
00007F40 43F9 0000 4018             		lea	(MusicList8).l,a1	; load Music Playlist for bosses
00007F46 1031 0000                  		move.b	(a1,d0.w),d0	; get d0-th entry from the playlist
00007F4A 6100 93DA                  		bsr.w	PlaySound	; play boss music
00007F4E 11FC 0001 FFFF             		move.b	#1,($FFFFFFFF).w	; set boss flag
00007F54 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007F5A 5438 F742                  		addq.b	#2,($FFFFF742).w
00007F5E 7011                       		moveq	#$11,d0
00007F60 6000 95D0                  		bra.w	LoadPLC		; load boss patterns
00007F64                            ; ===========================================================================
00007F64                            
00007F64                            locret_6EE8:
00007F64 4E75                       		rts	
00007F66                            ; ===========================================================================
00007F66                            
00007F66                            Resize_GHZ3end:
00007F66 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007F6C 4E75                       		rts	
00007F6E                            ; ===========================================================================
00007F6E                            ; ---------------------------------------------------------------------------
00007F6E                            ; Labyrinth Zone dynamic screen	resizing
00007F6E                            ; ---------------------------------------------------------------------------
00007F6E                            
00007F6E                            Resize_LZ:				; XREF: Resize_Index
00007F6E 7000                       		moveq	#0,d0
00007F70 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007F74 D040                       		add.w	d0,d0
00007F76 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
00007F7A 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
00007F7E                            ; ===========================================================================
00007F7E 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
00007F80 0000                       		dc.w Resize_LZ12-Resize_LZx
00007F82 0000                       		dc.w Resize_LZ3-Resize_LZx
00007F84 0000                       		dc.w Resize_SBZ3-Resize_LZx
00007F86                            ; ===========================================================================
00007F86                            
00007F86                            Resize_LZ12:
00007F86 4E75                       		rts	
00007F88                            ; ===========================================================================
00007F88                            
00007F88                            Resize_LZ3:
00007F88 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch $F	been pressed?
00007F8C 6700                       		beq.s	loc_6F28	; if not, branch
00007F8E 43F8 A506                  		lea	($FFFFA506).w,a1
00007F92 0C11 0007                  		cmpi.b	#7,(a1)
00007F96 6700                       		beq.s	loc_6F28
00007F98 12BC 0007                  		move.b	#7,(a1)		; modify level layout
00007F9C 303C 00B7                  		move.w	#$B7,d0
00007FA0 6100 938A                  		bsr.w	PlaySound_Special ; play rumbling sound
00007FA4                            
00007FA4                            loc_6F28:
00007FA4 4A38 F742                  		tst.b	($FFFFF742).w
00007FA8 6600                       		bne.s	locret_6F64
00007FAA 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
00007FB0 6500                       		bcs.s	locret_6F62
00007FB2 0C78 0600 F704             		cmpi.w	#$600,($FFFFF704).w
00007FB8 6400                       		bcc.s	locret_6F62
00007FBA 6100 0000                  		bsr.w	SingleObjLoad
00007FBE 6600                       		bne.s	loc_6F4A
00007FC0 137C 0077 0000             		move.b	#$77,0(a1)	; load LZ boss object
00007FC6                            
00007FC6                            loc_6F4A:
00007FC6 1038 FE10                  		move.b	($FFFFFE10).w,d0	; set boss number
00007FCA 43F9 0000 4018             		lea	(MusicList8).l,a1	; load Music Playlist for bosses
00007FD0 1031 0000                  		move.b	(a1,d0.w),d0	; get d0-th entry from the playlist
00007FD4 6100 9350                  		bsr.w	PlaySound	; play boss music
00007FD8 11FC 0001 FFFF             		move.b	#1,($FFFFFFFF).w	; set boss flag
00007FDE 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007FE4 5438 F742                  		addq.b	#2,($FFFFF742).w
00007FE8 7011                       		moveq	#$11,d0
00007FEA 6000 9546                  		bra.w	LoadPLC		; load boss patterns
00007FEE                            ; ===========================================================================
00007FEE                            
00007FEE                            locret_6F62:
00007FEE 4E75                       		rts	
00007FF0                            ; ===========================================================================
00007FF0                            
00007FF0                            locret_6F64:
00007FF0 4E75                       		rts	
00007FF2                            ; ===========================================================================
00007FF2                            
00007FF2                            Resize_SBZ3:
00007FF2 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00007FF8 6500                       		bcs.s	locret_6F8C
00007FFA 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
00008000 6400                       		bcc.s	locret_6F8C	; if not, branch
00008002 4238 FE30                  		clr.b	($FFFFFE30).w
00008006 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000800C 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
00008012 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
00008018                            
00008018                            locret_6F8C:
00008018 4E75                       		rts	
0000801A                            ; ===========================================================================
0000801A                            ; ---------------------------------------------------------------------------
0000801A                            ; Marble Zone dynamic screen resizing
0000801A                            ; ---------------------------------------------------------------------------
0000801A                            
0000801A                            Resize_MZ:				; XREF: Resize_Index
0000801A 7000                       		moveq	#0,d0
0000801C 1038 FE11                  		move.b	($FFFFFE11).w,d0
00008020 D040                       		add.w	d0,d0
00008022 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
00008026 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
0000802A                            ; ===========================================================================
0000802A 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
0000802C 0000                       		dc.w Resize_MZ2-Resize_MZx
0000802E 0000                       		dc.w Resize_MZ3-Resize_MZx
00008030                            ; ===========================================================================
00008030                            
00008030                            Resize_MZ1:
00008030 7000                       		moveq	#0,d0
00008032 1038 F742                  		move.b	($FFFFF742).w,d0
00008036 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
0000803A 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
0000803E                            ; ===========================================================================
0000803E 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
00008040 0000                       		dc.w loc_6FEA-off_6FB2
00008042 0000                       		dc.w loc_702E-off_6FB2
00008044 0000                       		dc.w loc_7050-off_6FB2
00008046                            ; ===========================================================================
00008046                            
00008046                            loc_6FBA:
00008046 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
0000804C 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
00008052 6500                       		bcs.s	locret_6FE8
00008054 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
0000805A 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00008060 6500                       		bcs.s	locret_6FE8
00008062 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00008068 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
0000806E 6500                       		bcs.s	locret_6FE8
00008070 5438 F742                  		addq.b	#2,($FFFFF742).w
00008074                            
00008074                            locret_6FE8:
00008074 4E75                       		rts	
00008076                            ; ===========================================================================
00008076                            
00008076                            loc_6FEA:
00008076 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
0000807C 6400                       		bcc.s	loc_6FF8
0000807E 5538 F742                  		subq.b	#2,($FFFFF742).w
00008082 4E75                       		rts	
00008084                            ; ===========================================================================
00008084                            
00008084                            loc_6FF8:
00008084 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0000808A 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
00008090 6400                       		bcc.s	locret_702C
00008092 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
00008098 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
0000809E 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
000080A4 6400                       		bcc.s	locret_702C
000080A6 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
000080AC 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
000080B2 6500                       		bcs.s	locret_702C
000080B4 5438 F742                  		addq.b	#2,($FFFFF742).w
000080B8                            
000080B8                            locret_702C:
000080B8 4E75                       		rts	
000080BA                            ; ===========================================================================
000080BA                            
000080BA                            loc_702E:
000080BA 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
000080C0 6400                       		bcc.s	loc_703C
000080C2 5538 F742                  		subq.b	#2,($FFFFF742).w
000080C6 4E75                       		rts	
000080C8                            ; ===========================================================================
000080C8                            
000080C8                            loc_703C:
000080C8 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
000080CE 6500                       		bcs.s	locret_704E
000080D0 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
000080D6 5438 F742                  		addq.b	#2,($FFFFF742).w
000080DA                            
000080DA                            locret_704E:
000080DA 4E75                       		rts	
000080DC                            ; ===========================================================================
000080DC                            
000080DC                            loc_7050:
000080DC 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
000080E2 6500                       		bcs.s	locret_7072
000080E4 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
000080EA 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
000080F0 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
000080F6 6500                       		bcs.s	locret_7072
000080F8 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
000080FE                            
000080FE                            locret_7072:
000080FE 4E75                       		rts	
00008100                            ; ===========================================================================
00008100                            
00008100                            Resize_MZ2:
00008100 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00008106 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
0000810C 6500                       		bcs.s	locret_7088
0000810E 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00008114                            
00008114                            locret_7088:
00008114 4E75                       		rts	
00008116                            ; ===========================================================================
00008116                            
00008116                            Resize_MZ3:
00008116 7000                       		moveq	#0,d0
00008118 1038 F742                  		move.b	($FFFFF742).w,d0
0000811C 303B 0000                  		move.w	off_7098(pc,d0.w),d0
00008120 4EFB 0000                  		jmp	off_7098(pc,d0.w)
00008124                            ; ===========================================================================
00008124 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
00008126 0000                       		dc.w Resize_MZ3end-off_7098
00008128                            ; ===========================================================================
00008128                            
00008128                            Resize_MZ3boss:
00008128 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0000812E 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
00008134 6500                       		bcs.s	locret_70E8
00008136 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
0000813C 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
00008142 6500                       		bcs.s	locret_70E8
00008144 6100 0000                  		bsr.w	SingleObjLoad
00008148 6600                       		bne.s	loc_70D0
0000814A 137C 0073 0000             		move.b	#$73,0(a1)	; load MZ boss object
00008150 337C 19F0 0008             		move.w	#$19F0,8(a1)
00008156 337C 022C 000C             		move.w	#$22C,$C(a1)
0000815C                            
0000815C                            loc_70D0:
0000815C 1038 FE10                  		move.b	($FFFFFE10).w,d0	; set boss number
00008160 43F9 0000 4018             		lea	(MusicList8).l,a1	; load Music Playlist for bosses
00008166 1031 0000                  		move.b	(a1,d0.w),d0	; get d0-th entry from the playlist
0000816A 6100 91BA                  		bsr.w	PlaySound	; play boss music
0000816E 11FC 0001 FFFF             		move.b	#1,($FFFFFFFF).w	; set boss flag
00008174 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000817A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000817E 7011                       		moveq	#$11,d0
00008180 6000 93B0                  		bra.w	LoadPLC		; load boss patterns
00008184                            ; ===========================================================================
00008184                            
00008184                            locret_70E8:
00008184 4E75                       		rts	
00008186                            ; ===========================================================================
00008186                            
00008186                            Resize_MZ3end:
00008186 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000818C 4E75                       		rts	
0000818E                            ; ===========================================================================
0000818E                            ; ---------------------------------------------------------------------------
0000818E                            ; Star Light Zone dynamic screen resizing
0000818E                            ; ---------------------------------------------------------------------------
0000818E                            
0000818E                            Resize_SLZ:				; XREF: Resize_Index
0000818E 7000                       		moveq	#0,d0
00008190 1038 FE11                  		move.b	($FFFFFE11).w,d0
00008194 D040                       		add.w	d0,d0
00008196 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
0000819A 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
0000819E                            ; ===========================================================================
0000819E 0000                       Resize_SLZx:	dc.w Resize_SLZ12-Resize_SLZx
000081A0 0000                       		dc.w Resize_SLZ12-Resize_SLZx
000081A2 0000                       		dc.w Resize_SLZ3-Resize_SLZx
000081A4                            ; ===========================================================================
000081A4                            
000081A4                            Resize_SLZ12:
000081A4 4E75                       		rts	
000081A6                            ; ===========================================================================
000081A6                            
000081A6                            Resize_SLZ3:
000081A6 7000                       		moveq	#0,d0
000081A8 1038 F742                  		move.b	($FFFFF742).w,d0
000081AC 303B 0000                  		move.w	off_7118(pc,d0.w),d0
000081B0 4EFB 0000                  		jmp	off_7118(pc,d0.w)
000081B4                            ; ===========================================================================
000081B4 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
000081B6 0000                       		dc.w Resize_SLZ3boss-off_7118
000081B8 0000                       		dc.w Resize_SLZ3end-off_7118
000081BA                            ; ===========================================================================
000081BA                            
000081BA                            Resize_SLZ3main:
000081BA 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
000081C0 6500                       		bcs.s	locret_7130
000081C2 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
000081C8 5438 F742                  		addq.b	#2,($FFFFF742).w
000081CC                            
000081CC                            locret_7130:
000081CC 4E75                       		rts	
000081CE                            ; ===========================================================================
000081CE                            
000081CE                            Resize_SLZ3boss:
000081CE 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
000081D4 6500                       		bcs.s	locret_715C
000081D6 6100 0000                  		bsr.w	SingleObjLoad
000081DA 6600                       		bne.s	loc_7144
000081DC 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
000081E0                            
000081E0                            loc_7144:
000081E0 1038 FE10                  		move.b	($FFFFFE10).w,d0	; set boss number
000081E4 43F9 0000 4018             		lea	(MusicList8).l,a1	; load Music Playlist for bosses
000081EA 1031 0000                  		move.b	(a1,d0.w),d0	; get d0-th entry from the playlist
000081EE 6100 9136                  		bsr.w	PlaySound	; play boss music
000081F2 11FC 0001 FFFF             		move.b	#1,($FFFFFFFF).w	; set boss flag
000081F8 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000081FE 5438 F742                  		addq.b	#2,($FFFFF742).w
00008202 7011                       		moveq	#$11,d0
00008204 6000 932C                  		bra.w	LoadPLC		; load boss patterns
00008208                            ; ===========================================================================
00008208                            
00008208                            locret_715C:
00008208 4E75                       		rts	
0000820A                            ; ===========================================================================
0000820A                            
0000820A                            Resize_SLZ3end:
0000820A 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00008210 4E75                       		rts
00008212 4E75                       		rts
00008214                            ; ===========================================================================
00008214                            ; ---------------------------------------------------------------------------
00008214                            ; Spring Yard Zone dynamic screen resizing
00008214                            ; ---------------------------------------------------------------------------
00008214                            
00008214                            Resize_SYZ:				; XREF: Resize_Index
00008214 7000                       		moveq	#0,d0
00008216 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000821A D040                       		add.w	d0,d0
0000821C 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
00008220 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
00008224                            ; ===========================================================================
00008224 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
00008226 0000                       		dc.w Resize_SYZ2-Resize_SYZx
00008228 0000                       		dc.w Resize_SYZ3-Resize_SYZx
0000822A                            ; ===========================================================================
0000822A                            
0000822A                            Resize_SYZ1:
0000822A 4E75                       		rts	
0000822C                            ; ===========================================================================
0000822C                            
0000822C                            Resize_SYZ2:
0000822C 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00008232 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
00008238 6500                       		bcs.s	locret_71A2
0000823A 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
00008240 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
00008246 6500                       		bcs.s	locret_71A2
00008248 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
0000824E                            
0000824E                            locret_71A2:
0000824E 4E75                       		rts	
00008250                            ; ===========================================================================
00008250                            
00008250                            Resize_SYZ3:
00008250 7000                       		moveq	#0,d0
00008252 1038 F742                  		move.b	($FFFFF742).w,d0
00008256 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
0000825A 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
0000825E                            ; ===========================================================================
0000825E 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
00008260 0000                       		dc.w Resize_SYZ3boss-off_71B2
00008262 0000                       		dc.w Resize_SYZ3end-off_71B2
00008264                            ; ===========================================================================
00008264                            
00008264                            Resize_SYZ3main:
00008264 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
0000826A 6500                       		bcs.s	locret_71CE
0000826C 6100 0000                  		bsr.w	SingleObjLoad
00008270 6600                       		bne.s	locret_71CE
00008272 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
00008276 5438 F742                  		addq.b	#2,($FFFFF742).w
0000827A                            
0000827A                            locret_71CE:
0000827A 4E75                       		rts	
0000827C                            ; ===========================================================================
0000827C                            
0000827C                            Resize_SYZ3boss:
0000827C 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
00008282 6500                       		bcs.s	locret_7200
00008284 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
0000828A 6100 0000                  		bsr.w	SingleObjLoad
0000828E 6600                       		bne.s	loc_71EC
00008290 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
00008294 5438 F742                  		addq.b	#2,($FFFFF742).w
00008298                            
00008298                            loc_71EC:
00008298 1038 FE10                  		move.b	($FFFFFE10).w,d0	; set boss number
0000829C 43F9 0000 4018             		lea	(MusicList8).l,a1	; load Music Playlist for bosses
000082A2 1031 0000                  		move.b	(a1,d0.w),d0	; get d0-th entry from the playlist
000082A6 6100 907E                  		bsr.w	PlaySound	; play boss music
000082AA 11FC 0001 FFFF             		move.b	#1,($FFFFFFFF).w	; set boss flag
000082B0 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000082B6 7011                       		moveq	#$11,d0
000082B8 6000 9278                  		bra.w	LoadPLC		; load boss patterns
000082BC                            ; ===========================================================================
000082BC                            
000082BC                            locret_7200:
000082BC 4E75                       		rts	
000082BE                            ; ===========================================================================
000082BE                            
000082BE                            Resize_SYZ3end:
000082BE 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000082C4 4E75                       		rts	
000082C6                            ; ===========================================================================
000082C6                            ; ---------------------------------------------------------------------------
000082C6                            ; Scrap	Brain Zone dynamic screen resizing
000082C6                            ; ---------------------------------------------------------------------------
000082C6                            
000082C6                            Resize_SBZ:				; XREF: Resize_Index
000082C6 7000                       		moveq	#0,d0
000082C8 1038 FE11                  		move.b	($FFFFFE11).w,d0
000082CC D040                       		add.w	d0,d0
000082CE 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
000082D2 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
000082D6                            ; ===========================================================================
000082D6 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
000082D8 0000                       		dc.w Resize_SBZ2-Resize_SBZx
000082DA 0000                       		dc.w Resize_FZ-Resize_SBZx
000082DC                            ; ===========================================================================
000082DC                            
000082DC                            Resize_SBZ1:
000082DC 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
000082E2 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
000082E8 6500                       		bcs.s	locret_7242
000082EA 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
000082F0 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
000082F6 6500                       		bcs.s	locret_7242
000082F8 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
000082FE                            
000082FE                            locret_7242:
000082FE 4E75                       		rts	
00008300                            ; ===========================================================================
00008300                            
00008300                            Resize_SBZ2:
00008300 7000                       		moveq	#0,d0
00008302 1038 F742                  		move.b	($FFFFF742).w,d0
00008306 303B 0000                  		move.w	off_7252(pc,d0.w),d0
0000830A 4EFB 0000                  		jmp	off_7252(pc,d0.w)
0000830E                            ; ===========================================================================
0000830E 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
00008310 0000                       		dc.w Resize_SBZ2boss-off_7252
00008312 0000                       		dc.w Resize_SBZ2boss2-off_7252
00008314 0000                       		dc.w Resize_SBZ2end-off_7252
00008316                            ; ===========================================================================
00008316                            
00008316                            Resize_SBZ2main:
00008316 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
0000831C 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
00008322 6500                       		bcs.s	locret_727A
00008324 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
0000832A 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
00008330 6500                       		bcs.s	locret_727A
00008332 5438 F742                  		addq.b	#2,($FFFFF742).w
00008336                            
00008336                            locret_727A:
00008336 4E75                       		rts	
00008338                            ; ===========================================================================
00008338                            
00008338                            Resize_SBZ2boss:
00008338 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
0000833E 6500                       		bcs.s	locret_7298
00008340 6100 0000                  		bsr.w	SingleObjLoad
00008344 6600                       		bne.s	locret_7298
00008346 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
0000834A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000834E 701E                       		moveq	#$1E,d0
00008350 6000 91E0                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
00008354                            ; ===========================================================================
00008354                            
00008354                            locret_7298:
00008354 4E75                       		rts	
00008356                            ; ===========================================================================
00008356                            
00008356                            Resize_SBZ2boss2:
00008356 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
0000835C 6500                       		bcs.s	loc_72B6
0000835E 6100 0000                  		bsr.w	SingleObjLoad
00008362 6600                       		bne.s	loc_72B0
00008364 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
00008368 5438 F742                  		addq.b	#2,($FFFFF742).w
0000836C                            
0000836C                            loc_72B0:
0000836C 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00008372                            
00008372                            loc_72B6:
00008372 6000                       		bra.s	loc_72C2
00008374                            ; ===========================================================================
00008374                            
00008374                            Resize_SBZ2end:
00008374 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
0000837A 6500                       		bcs.s	loc_72C2
0000837C 4E75                       		rts	
0000837E                            ; ===========================================================================
0000837E                            
0000837E                            loc_72C2:
0000837E 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00008384 4E75                       		rts	
00008386                            ; ===========================================================================
00008386                            
00008386                            Resize_FZ:
00008386 7000                       		moveq	#0,d0
00008388 1038 F742                  		move.b	($FFFFF742).w,d0
0000838C 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
00008390 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
00008394                            ; ===========================================================================
00008394 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
00008398 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
0000839C 0000                       		dc.w Resize_FZend2-off_72D8
0000839E                            ; ===========================================================================
0000839E                            
0000839E                            Resize_FZmain:
0000839E 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
000083A4 6500                       		bcs.s	loc_72F4
000083A6 5438 F742                  		addq.b	#2,($FFFFF742).w
000083AA 701F                       		moveq	#$1F,d0
000083AC 6100 9184                  		bsr.w	LoadPLC		; load FZ boss patterns
000083B0                            
000083B0                            loc_72F4:
000083B0 60CC                       		bra.s	loc_72C2
000083B2                            ; ===========================================================================
000083B2                            
000083B2                            Resize_FZboss:
000083B2 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
000083B8 6500                       		bcs.s	loc_7312
000083BA 6100 0000                  		bsr.w	SingleObjLoad
000083BE 6600                       		bne.s	loc_7312
000083C0 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
000083C4 5438 F742                  		addq.b	#2,($FFFFF742).w
000083C8 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000083CE                            
000083CE                            loc_7312:
000083CE 60AE                       		bra.s	loc_72C2
000083D0                            ; ===========================================================================
000083D0                            
000083D0                            Resize_FZend:
000083D0 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
000083D6 6500                       		bcs.s	loc_7320
000083D8 5438 F742                  		addq.b	#2,($FFFFF742).w
000083DC                            
000083DC                            loc_7320:
000083DC 60A0                       		bra.s	loc_72C2
000083DE                            ; ===========================================================================
000083DE                            
000083DE                            locret_7322:
000083DE 4E75                       		rts	
000083E0                            ; ===========================================================================
000083E0                            
000083E0                            Resize_FZend2:
000083E0 609C                       		bra.s	loc_72C2
000083E2                            ; ===========================================================================
000083E2                            ; ---------------------------------------------------------------------------
000083E2                            ; Ending sequence dynamic screen resizing (empty)
000083E2                            ; ---------------------------------------------------------------------------
000083E2                            
000083E2                            Resize_Ending:				; XREF: Resize_Index
000083E2 4E75                       		rts	
000083E4                            ; ===========================================================================
000083E4                            ; ---------------------------------------------------------------------------
000083E4                            ; Object 11 - GHZ bridge
000083E4                            ; ---------------------------------------------------------------------------
000083E4                            
000083E4                            Obj11:					; XREF: Obj_Index
000083E4 7000                       		moveq	#0,d0
000083E6 1028 0024                  		move.b	$24(a0),d0
000083EA 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
000083EE 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
000083F2                            ; ===========================================================================
000083F2 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
000083F6 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
000083FA 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
000083FE                            ; ===========================================================================
000083FE                            
000083FE                            Obj11_Main:				; XREF: Obj11_Index
000083FE 5428 0024                  		addq.b	#2,$24(a0)
00008402 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
0000840A 317C 438E 0002             		move.w	#$438E,2(a0)
00008410 117C 0004 0001             		move.b	#4,1(a0)
00008416 117C 0003 0018             		move.b	#3,$18(a0)
0000841C 117C 0080 0019             		move.b	#$80,$19(a0)
00008422 3428 000C                  		move.w	$C(a0),d2
00008426 3628 0008                  		move.w	8(a0),d3
0000842A 1828 0000                  		move.b	0(a0),d4	; copy object number ($11) to d4
0000842E 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
00008432 7200                       		moveq	#0,d1
00008434 1212                       		move.b	(a2),d1		; copy a2 to d1
00008436 14FC 0000                  		move.b	#0,(a2)+
0000843A 3001                       		move.w	d1,d0
0000843C E248                       		lsr.w	#1,d0
0000843E E948                       		lsl.w	#4,d0
00008440 9640                       		sub.w	d0,d3
00008442 5501                       		subq.b	#2,d1
00008444 6500                       		bcs.s	Obj11_Action
00008446                            
00008446                            Obj11_MakeBdg:
00008446 6100 0000                  		bsr.w	SingleObjLoad
0000844A 6600                       		bne.s	Obj11_Action
0000844C 5228 0028                  		addq.b	#1,$28(a0)
00008450 B668 0008                  		cmp.w	8(a0),d3
00008454 6600                       		bne.s	loc_73B8
00008456 0643 0010                  		addi.w	#$10,d3
0000845A 3142 000C                  		move.w	d2,$C(a0)
0000845E 3142 003C                  		move.w	d2,$3C(a0)
00008462 3A08                       		move.w	a0,d5
00008464 0445 D000                  		subi.w	#-$3000,d5
00008468 EC4D                       		lsr.w	#6,d5
0000846A 0245 007F                  		andi.w	#$7F,d5
0000846E 14C5                       		move.b	d5,(a2)+
00008470 5228 0028                  		addq.b	#1,$28(a0)
00008474                            
00008474                            loc_73B8:				; XREF: ROM:00007398j
00008474 3A09                       		move.w	a1,d5
00008476 0445 D000                  		subi.w	#-$3000,d5
0000847A EC4D                       		lsr.w	#6,d5
0000847C 0245 007F                  		andi.w	#$7F,d5
00008480 14C5                       		move.b	d5,(a2)+
00008482 137C 000A 0024             		move.b	#$A,$24(a1)
00008488 1344 0000                  		move.b	d4,0(a1)	; load bridge object (d4 = $11)
0000848C 3342 000C                  		move.w	d2,$C(a1)
00008490 3342 003C                  		move.w	d2,$3C(a1)
00008494 3343 0008                  		move.w	d3,8(a1)
00008498 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
000084A0 337C 438E 0002             		move.w	#$438E,2(a1)
000084A6 137C 0004 0001             		move.b	#4,1(a1)
000084AC 137C 0003 0018             		move.b	#3,$18(a1)
000084B2 137C 0008 0019             		move.b	#8,$19(a1)
000084B8 0643 0010                  		addi.w	#$10,d3
000084BC 51C9 FF88                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
000084C0                            
000084C0                            Obj11_Action:				; XREF: Obj11_Index
000084C0 6100                       		bsr.s	Obj11_Solid
000084C2 4A28 003E                  		tst.b	$3E(a0)
000084C6 6700                       		beq.s	Obj11_Display
000084C8 5928 003E                  		subq.b	#4,$3E(a0)
000084CC 6100 0000                  		bsr.w	Obj11_Bend
000084D0                            
000084D0                            Obj11_Display:
000084D0 6100 0000                  		bsr.w	DisplaySprite
000084D4 6000 0000                  		bra.w	Obj11_ChkDel
000084D8                            
000084D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000084D8                            
000084D8                            
000084D8                            Obj11_Solid:				; XREF: Obj11_Action
000084D8 7200                       		moveq	#0,d1
000084DA 1228 0028                  		move.b	$28(a0),d1
000084DE E749                       		lsl.w	#3,d1
000084E0 3401                       		move.w	d1,d2
000084E2 5041                       		addq.w	#8,d1
000084E4 D442                       		add.w	d2,d2
000084E6 43F8 D000                  		lea	($FFFFD000).w,a1
000084EA 4A69 0012                  		tst.w	$12(a1)
000084EE 6B00 0000                  		bmi.w	locret_751E
000084F2 3029 0008                  		move.w	8(a1),d0
000084F6 9068 0008                  		sub.w	8(a0),d0
000084FA D041                       		add.w	d1,d0
000084FC 6B00 0000                  		bmi.w	locret_751E
00008500 B042                       		cmp.w	d2,d0
00008502 6400 0000                  		bcc.w	locret_751E
00008506 6000                       		bra.s	Platform2
00008508                            ; End of function Obj11_Solid
00008508                            
00008508                            ; ---------------------------------------------------------------------------
00008508                            ; Platform subroutine
00008508                            ; ---------------------------------------------------------------------------
00008508                            
00008508                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008508                            
00008508                            
00008508                            PlatformObject:
00008508 43F8 D000                  		lea	($FFFFD000).w,a1
0000850C 4A69 0012                  		tst.w	$12(a1)
00008510 6B00 0000                  		bmi.w	locret_751E
00008514 3029 0008                  		move.w	8(a1),d0
00008518 9068 0008                  		sub.w	8(a0),d0
0000851C D041                       		add.w	d1,d0
0000851E 6B00 0000                  		bmi.w	locret_751E
00008522 D241                       		add.w	d1,d1
00008524 B041                       		cmp.w	d1,d0
00008526 6400 0000                  		bcc.w	locret_751E
0000852A                            
0000852A                            Platform2:
0000852A 3028 000C                  		move.w	$C(a0),d0
0000852E 5140                       		subq.w	#8,d0
00008530                            
00008530                            Platform3:
00008530 3429 000C                  		move.w	$C(a1),d2
00008534 1229 0016                  		move.b	$16(a1),d1
00008538 4881                       		ext.w	d1
0000853A D242                       		add.w	d2,d1
0000853C 5841                       		addq.w	#4,d1
0000853E 9041                       		sub.w	d1,d0
00008540 6200 0000                  		bhi.w	locret_751E
00008544 0C40 FFF0                  		cmpi.w	#-$10,d0
00008548 6500 0000                  		bcs.w	locret_751E
0000854C 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00008550 6B00 0000                  		bmi.w	locret_751E
00008554 0C29 0006 0024             		cmpi.b	#6,$24(a1)
0000855A 6400 0000                  		bcc.w	locret_751E
0000855E D440                       		add.w	d0,d2
00008560 5642                       		addq.w	#3,d2
00008562 3342 000C                  		move.w	d2,$C(a1)
00008566 5428 0024                  		addq.b	#2,$24(a0)
0000856A                            
0000856A                            loc_74AE:
0000856A 0829 0003 0022             		btst	#3,$22(a1)
00008570 6700                       		beq.s	loc_74DC
00008572 7000                       		moveq	#0,d0
00008574 1029 003D                  		move.b	$3D(a1),d0
00008578 ED48                       		lsl.w	#6,d0
0000857A 0680 00FF D000             		addi.l	#$FFD000,d0
00008580 2440                       		movea.l	d0,a2
00008582 08AA 0003 0022             		bclr	#3,$22(a2)
00008588 422A 0025                  		clr.b	$25(a2)
0000858C 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
00008592 6600                       		bne.s	loc_74DC
00008594 552A 0024                  		subq.b	#2,$24(a2)
00008598                            
00008598                            loc_74DC:
00008598 3008                       		move.w	a0,d0
0000859A 0440 D000                  		subi.w	#-$3000,d0
0000859E EC48                       		lsr.w	#6,d0
000085A0 0240 007F                  		andi.w	#$7F,d0
000085A4 1340 003D                  		move.b	d0,$3D(a1)
000085A8 137C 0000 0026             		move.b	#0,$26(a1)
000085AE 337C 0000 0012             		move.w	#0,$12(a1)
000085B4 3369 0010 0014             		move.w	$10(a1),$14(a1)
000085BA 0829 0001 0022             		btst	#1,$22(a1)
000085C0 6700                       		beq.s	loc_7512
000085C2 2F08                       		move.l	a0,-(sp)
000085C4 2049                       		movea.l	a1,a0
000085C6 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
000085CC 205F                       		movea.l	(sp)+,a0
000085CE                            
000085CE                            loc_7512:
000085CE 08E9 0003 0022             		bset	#3,$22(a1)
000085D4 08E8 0003 0022             		bset	#3,$22(a0)
000085DA                            
000085DA                            locret_751E:
000085DA 4E75                       		rts	
000085DC                            ; End of function PlatformObject
000085DC                            
000085DC                            ; ---------------------------------------------------------------------------
000085DC                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
000085DC                            ; ---------------------------------------------------------------------------
000085DC                            
000085DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000085DC                            
000085DC                            
000085DC                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
000085DC 43F8 D000                  		lea	($FFFFD000).w,a1
000085E0 4A69 0012                  		tst.w	$12(a1)
000085E4 6B00 FFF4                  		bmi.w	locret_751E
000085E8 3029 0008                  		move.w	8(a1),d0
000085EC 9068 0008                  		sub.w	8(a0),d0
000085F0 D041                       		add.w	d1,d0
000085F2 6BE6                       		bmi.s	locret_751E
000085F4 D241                       		add.w	d1,d1
000085F6 B041                       		cmp.w	d1,d0
000085F8 64E0                       		bcc.s	locret_751E
000085FA 0828 0000 0001             		btst	#0,1(a0)
00008600 6700                       		beq.s	loc_754A
00008602 4640                       		not.w	d0
00008604 D041                       		add.w	d1,d0
00008606                            
00008606                            loc_754A:
00008606 E248                       		lsr.w	#1,d0
00008608 7600                       		moveq	#0,d3
0000860A 1632 0000                  		move.b	(a2,d0.w),d3
0000860E 3028 000C                  		move.w	$C(a0),d0
00008612 9043                       		sub.w	d3,d0
00008614 6000 FF1A                  		bra.w	Platform3
00008618                            ; End of function SlopeObject
00008618                            
00008618                            
00008618                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008618                            
00008618                            
00008618                            Obj15_Solid:				; XREF: Obj15_SetSolid
00008618 43F8 D000                  		lea	($FFFFD000).w,a1
0000861C 4A69 0012                  		tst.w	$12(a1)
00008620 6B00 FFB8                  		bmi.w	locret_751E
00008624 3029 0008                  		move.w	8(a1),d0
00008628 9068 0008                  		sub.w	8(a0),d0
0000862C D041                       		add.w	d1,d0
0000862E 6B00 FFAA                  		bmi.w	locret_751E
00008632 D241                       		add.w	d1,d1
00008634 B041                       		cmp.w	d1,d0
00008636 6400 FFA2                  		bcc.w	locret_751E
0000863A 3028 000C                  		move.w	$C(a0),d0
0000863E 9043                       		sub.w	d3,d0
00008640 6000 FEEE                  		bra.w	Platform3
00008644                            ; End of function Obj15_Solid
00008644                            
00008644                            ; ===========================================================================
00008644                            
00008644                            Obj11_Action2:				; XREF: Obj11_Index
00008644 6100                       		bsr.s	Obj11_WalkOff
00008646 6100 0000                  		bsr.w	DisplaySprite
0000864A 6000 0000                  		bra.w	Obj11_ChkDel
0000864E                            
0000864E                            ; ---------------------------------------------------------------------------
0000864E                            ; Subroutine allowing Sonic to walk off a bridge
0000864E                            ; ---------------------------------------------------------------------------
0000864E                            
0000864E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000864E                            
0000864E                            
0000864E                            Obj11_WalkOff:				; XREF: Obj11_Action2
0000864E 7200                       		moveq	#0,d1
00008650 1228 0028                  		move.b	$28(a0),d1
00008654 E749                       		lsl.w	#3,d1
00008656 3401                       		move.w	d1,d2
00008658 5041                       		addq.w	#8,d1
0000865A 6100                       		bsr.s	ExitPlatform2
0000865C 6400                       		bcc.s	locret_75BE
0000865E E848                       		lsr.w	#4,d0
00008660 1140 003F                  		move.b	d0,$3F(a0)
00008664 1028 003E                  		move.b	$3E(a0),d0
00008668 0C00 0040                  		cmpi.b	#$40,d0
0000866C 6700                       		beq.s	loc_75B6
0000866E 5828 003E                  		addq.b	#4,$3E(a0)
00008672                            
00008672                            loc_75B6:
00008672 6100 0000                  		bsr.w	Obj11_Bend
00008676 6100 0000                  		bsr.w	Obj11_MoveSonic
0000867A                            
0000867A                            locret_75BE:
0000867A 4E75                       		rts	
0000867C                            ; End of function Obj11_WalkOff
0000867C                            
0000867C                            ; ---------------------------------------------------------------------------
0000867C                            ; Subroutine allowing Sonic to walk or jump off	a platform
0000867C                            ; ---------------------------------------------------------------------------
0000867C                            
0000867C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000867C                            
0000867C                            
0000867C                            ExitPlatform:
0000867C 3401                       		move.w	d1,d2
0000867E                            
0000867E                            ExitPlatform2:
0000867E D442                       		add.w	d2,d2
00008680 43F8 D000                  		lea	($FFFFD000).w,a1
00008684 0829 0001 0022             		btst	#1,$22(a1)
0000868A 6600                       		bne.s	loc_75E0
0000868C 3029 0008                  		move.w	8(a1),d0
00008690 9068 0008                  		sub.w	8(a0),d0
00008694 D041                       		add.w	d1,d0
00008696 6B00                       		bmi.s	loc_75E0
00008698 B042                       		cmp.w	d2,d0
0000869A 6500                       		bcs.s	locret_75F2
0000869C                            
0000869C                            loc_75E0:
0000869C 08A9 0003 0022             		bclr	#3,$22(a1)
000086A2 117C 0002 0024             		move.b	#2,$24(a0)
000086A8 08A8 0003 0022             		bclr	#3,$22(a0)
000086AE                            
000086AE                            locret_75F2:
000086AE 4E75                       		rts	
000086B0                            ; End of function ExitPlatform
000086B0                            
000086B0                            
000086B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000086B0                            
000086B0                            
000086B0                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
000086B0 7000                       		moveq	#0,d0
000086B2 1028 003F                  		move.b	$3F(a0),d0
000086B6 1030 0029                  		move.b	$29(a0,d0.w),d0
000086BA ED48                       		lsl.w	#6,d0
000086BC 0680 00FF D000             		addi.l	#$FFD000,d0
000086C2 2440                       		movea.l	d0,a2
000086C4 43F8 D000                  		lea	($FFFFD000).w,a1
000086C8 302A 000C                  		move.w	$C(a2),d0
000086CC 5140                       		subq.w	#8,d0
000086CE 7200                       		moveq	#0,d1
000086D0 1229 0016                  		move.b	$16(a1),d1
000086D4 9041                       		sub.w	d1,d0
000086D6 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
000086DA 4E75                       		rts	
000086DC                            ; End of function Obj11_MoveSonic
000086DC                            
000086DC                            
000086DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000086DC                            
000086DC                            
000086DC                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
000086DC 1028 003E                  		move.b	$3E(a0),d0
000086E0 6100 AB92                  		bsr.w	CalcSine
000086E4 3800                       		move.w	d0,d4
000086E6 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
000086EC 7000                       		moveq	#0,d0
000086EE 1028 0028                  		move.b	$28(a0),d0
000086F2 E948                       		lsl.w	#4,d0
000086F4 7600                       		moveq	#0,d3
000086F6 1628 003F                  		move.b	$3F(a0),d3
000086FA 3403                       		move.w	d3,d2
000086FC D640                       		add.w	d0,d3
000086FE 7A00                       		moveq	#0,d5
00008700 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00008706 1A35 3000                  		move.b	(a5,d3.w),d5
0000870A 0243 000F                  		andi.w	#$F,d3
0000870E E94B                       		lsl.w	#4,d3
00008710 47F4 3000                  		lea	(a4,d3.w),a3
00008714 45E8 0029                  		lea	$29(a0),a2
00008718                            
00008718                            loc_765C:
00008718 7000                       		moveq	#0,d0
0000871A 101A                       		move.b	(a2)+,d0
0000871C ED48                       		lsl.w	#6,d0
0000871E 0680 00FF D000             		addi.l	#$FFD000,d0
00008724 2240                       		movea.l	d0,a1
00008726 7000                       		moveq	#0,d0
00008728 101B                       		move.b	(a3)+,d0
0000872A 5240                       		addq.w	#1,d0
0000872C C0C5                       		mulu.w	d5,d0
0000872E C0C4                       		mulu.w	d4,d0
00008730 4840                       		swap	d0
00008732 D069 003C                  		add.w	$3C(a1),d0
00008736 3340 000C                  		move.w	d0,$C(a1)
0000873A 51CA FFDC                  		dbf	d2,loc_765C
0000873E 7000                       		moveq	#0,d0
00008740 1028 0028                  		move.b	$28(a0),d0
00008744 7600                       		moveq	#0,d3
00008746 1628 003F                  		move.b	$3F(a0),d3
0000874A 5203                       		addq.b	#1,d3
0000874C 9600                       		sub.b	d0,d3
0000874E 4403                       		neg.b	d3
00008750 6B00                       		bmi.s	locret_76CA
00008752 3403                       		move.w	d3,d2
00008754 E94B                       		lsl.w	#4,d3
00008756 47F4 3000                  		lea	(a4,d3.w),a3
0000875A D6C2                       		adda.w	d2,a3
0000875C 5342                       		subq.w	#1,d2
0000875E 6500                       		bcs.s	locret_76CA
00008760                            
00008760                            loc_76A4:
00008760 7000                       		moveq	#0,d0
00008762 101A                       		move.b	(a2)+,d0
00008764 ED48                       		lsl.w	#6,d0
00008766 0680 00FF D000             		addi.l	#$FFD000,d0
0000876C 2240                       		movea.l	d0,a1
0000876E 7000                       		moveq	#0,d0
00008770 1023                       		move.b	-(a3),d0
00008772 5240                       		addq.w	#1,d0
00008774 C0C5                       		mulu.w	d5,d0
00008776 C0C4                       		mulu.w	d4,d0
00008778 4840                       		swap	d0
0000877A D069 003C                  		add.w	$3C(a1),d0
0000877E 3340 000C                  		move.w	d0,$C(a1)
00008782 51CA FFDC                  		dbf	d2,loc_76A4
00008786                            
00008786                            locret_76CA:
00008786 4E75                       		rts	
00008788                            ; End of function Obj11_Bend
00008788                            
00008788                            ; ===========================================================================
00008788                            ; ---------------------------------------------------------------------------
00008788                            ; GHZ bridge-bending data
00008788                            ; (Defines how the bridge bends	when Sonic walks across	it)
00008788                            ; ---------------------------------------------------------------------------
00008788                            Obj11_BendData:	incbin	misc\ghzbend1.bin
00008898                            		even
00008898                            Obj11_BendData2:incbin	misc\ghzbend2.bin
00008998                            		even
00008998                            
00008998                            ; ===========================================================================
00008998                            
00008998                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
00008998 3028 0008                  		move.w	8(a0),d0
0000899C 0240 FF80                  		andi.w	#$FF80,d0
000089A0 3238 F700                  		move.w	($FFFFF700).w,d1
000089A4 0441 0080                  		subi.w	#$80,d1
000089A8 0241 FF80                  		andi.w	#$FF80,d1
000089AC 9041                       		sub.w	d1,d0
000089AE 0C40 0280                  		cmpi.w	#$280,d0
000089B2 6200 0000                  		bhi.w	Obj11_DelAll
000089B6 4E75                       		rts	
000089B8                            ; ===========================================================================
000089B8                            
000089B8                            Obj11_DelAll:				; XREF: Obj11_ChkDel
000089B8 7400                       		moveq	#0,d2
000089BA 45E8 0028                  		lea	$28(a0),a2	; load bridge length
000089BE 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
000089C0 5302                       		subq.b	#1,d2		; subtract 1
000089C2 6500                       		bcs.s	Obj11_Delete
000089C4                            
000089C4                            Obj11_DelLoop:
000089C4 7000                       		moveq	#0,d0
000089C6 101A                       		move.b	(a2)+,d0
000089C8 ED48                       		lsl.w	#6,d0
000089CA 0680 00FF D000             		addi.l	#$FFD000,d0
000089D0 2240                       		movea.l	d0,a1
000089D2 B048                       		cmp.w	a0,d0
000089D4 6700                       		beq.s	loc_791E
000089D6 6100 0000                  		bsr.w	DeleteObject2
000089DA                            
000089DA                            loc_791E:
000089DA 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
000089DE                            
000089DE                            Obj11_Delete:
000089DE 6100 0000                  		bsr.w	DeleteObject
000089E2 4E75                       		rts	
000089E4                            ; ===========================================================================
000089E4                            
000089E4                            Obj11_Delete2:				; XREF: Obj11_Index
000089E4 6100 0000                  		bsr.w	DeleteObject
000089E8 4E75                       		rts	
000089EA                            ; ===========================================================================
000089EA                            
000089EA                            Obj11_Display2:				; XREF: Obj11_Index
000089EA 6100 0000                  		bsr.w	DisplaySprite
000089EE 4E75                       		rts	
000089F0                            ; ===========================================================================
000089F0                            ; ---------------------------------------------------------------------------
000089F0                            ; Sprite mappings - GHZ	bridge
000089F0                            ; ---------------------------------------------------------------------------
000089F0                            Map_obj11:
000089F0                            	include "_maps\obj11.asm"
000089F0                            ; ---------------------------------------------------------------------------
000089F0                            ; Sprite mappings - GHZ	bridge
000089F0                            ; ---------------------------------------------------------------------------
000089F0 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
000089F4 0000                       		dc.w byte_794B-Map_obj11
000089F6 01                         byte_793A:	dc.b 1
000089F7 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000089FC 02                         byte_7940:	dc.b 2
000089FD F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
00008A02 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00008A07 01                         byte_794B:	dc.b 1
00008A08 FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
00008A0E 00                         		even
00008A0E 00                         		even
00008A0E                            
00008A0E                            ; ===========================================================================
00008A0E                            ; ---------------------------------------------------------------------------
00008A0E                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00008A0E                            ;	    - spiked ball on a chain (SBZ)
00008A0E                            ; ---------------------------------------------------------------------------
00008A0E                            
00008A0E                            Obj15:					; XREF: Obj_Index
00008A0E 7000                       		moveq	#0,d0
00008A10 1028 0024                  		move.b	$24(a0),d0
00008A14 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
00008A18 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
00008A1C                            ; ===========================================================================
00008A1C 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
00008A20 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
00008A24 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
00008A28 0000                       		dc.w Obj15_Action-Obj15_Index
00008A2A                            ; ===========================================================================
00008A2A                            
00008A2A                            Obj15_Main:				; XREF: Obj15_Index
00008A2A 5428 0024                  		addq.b	#2,$24(a0)
00008A2E 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
00008A36 317C 4380 0002             		move.w	#$4380,2(a0)
00008A3C 117C 0004 0001             		move.b	#4,1(a0)
00008A42 117C 0003 0018             		move.b	#3,$18(a0)
00008A48 117C 0018 0019             		move.b	#$18,$19(a0)
00008A4E 117C 0008 0016             		move.b	#8,$16(a0)
00008A54 3168 000C 0038             		move.w	$C(a0),$38(a0)
00008A5A 3168 0008 003A             		move.w	8(a0),$3A(a0)
00008A60 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008A66 6600                       		bne.s	Obj15_NotSLZ
00008A68 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
00008A70 317C 43DC 0002             		move.w	#$43DC,2(a0)
00008A76 117C 0020 0019             		move.b	#$20,$19(a0)
00008A7C 117C 0010 0016             		move.b	#$10,$16(a0)
00008A82 117C 0099 0020             		move.b	#$99,$20(a0)
00008A88                            
00008A88                            Obj15_NotSLZ:
00008A88 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00008A8E 6600                       		bne.s	Obj15_SetLength
00008A90 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
00008A98 317C 0391 0002             		move.w	#$391,2(a0)
00008A9E 117C 0018 0019             		move.b	#$18,$19(a0)
00008AA4 117C 0018 0016             		move.b	#$18,$16(a0)
00008AAA 117C 0086 0020             		move.b	#$86,$20(a0)
00008AB0 117C 000C 0024             		move.b	#$C,$24(a0)
00008AB6                            
00008AB6                            Obj15_SetLength:
00008AB6 1828 0000                  		move.b	0(a0),d4
00008ABA 7200                       		moveq	#0,d1
00008ABC 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
00008AC0 1212                       		move.b	(a2),d1		; move a2 to d1
00008AC2 3F01                       		move.w	d1,-(sp)
00008AC4 0241 000F                  		andi.w	#$F,d1
00008AC8 14FC 0000                  		move.b	#0,(a2)+
00008ACC 3601                       		move.w	d1,d3
00008ACE E94B                       		lsl.w	#4,d3
00008AD0 5003                       		addq.b	#8,d3
00008AD2 1143 003C                  		move.b	d3,$3C(a0)
00008AD6 5103                       		subq.b	#8,d3
00008AD8 4A28 001A                  		tst.b	$1A(a0)
00008ADC 6700                       		beq.s	Obj15_MakeChain
00008ADE 5003                       		addq.b	#8,d3
00008AE0 5341                       		subq.w	#1,d1
00008AE2                            
00008AE2                            Obj15_MakeChain:
00008AE2 6100 0000                  		bsr.w	SingleObjLoad
00008AE6 6600                       		bne.s	loc_7A92
00008AE8 5228 0028                  		addq.b	#1,$28(a0)
00008AEC 3A09                       		move.w	a1,d5
00008AEE 0445 D000                  		subi.w	#-$3000,d5
00008AF2 EC4D                       		lsr.w	#6,d5
00008AF4 0245 007F                  		andi.w	#$7F,d5
00008AF8 14C5                       		move.b	d5,(a2)+
00008AFA 137C 000A 0024             		move.b	#$A,$24(a1)
00008B00 1344 0000                  		move.b	d4,0(a1)	; load swinging	object
00008B04 2368 0004 0004             		move.l	4(a0),4(a1)
00008B0A 3368 0002 0002             		move.w	2(a0),2(a1)
00008B10 08A9 0006 0002             		bclr	#6,2(a1)
00008B16 137C 0004 0001             		move.b	#4,1(a1)
00008B1C 137C 0004 0018             		move.b	#4,$18(a1)
00008B22 137C 0008 0019             		move.b	#8,$19(a1)
00008B28 137C 0001 001A             		move.b	#1,$1A(a1)
00008B2E 1343 003C                  		move.b	d3,$3C(a1)
00008B32 0403 0010                  		subi.b	#$10,d3
00008B36 6400                       		bcc.s	loc_7A8E
00008B38 137C 0002 001A             		move.b	#2,$1A(a1)
00008B3E 137C 0003 0018             		move.b	#3,$18(a1)
00008B44 08E9 0006 0002             		bset	#6,2(a1)
00008B4A                            
00008B4A                            loc_7A8E:
00008B4A 51C9 FF96                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
00008B4E                            
00008B4E                            loc_7A92:
00008B4E 3A08                       		move.w	a0,d5
00008B50 0445 D000                  		subi.w	#-$3000,d5
00008B54 EC4D                       		lsr.w	#6,d5
00008B56 0245 007F                  		andi.w	#$7F,d5
00008B5A 14C5                       		move.b	d5,(a2)+
00008B5C 317C 4080 0026             		move.w	#$4080,$26(a0)
00008B62 317C FE00 003E             		move.w	#-$200,$3E(a0)
00008B68 321F                       		move.w	(sp)+,d1
00008B6A 0801 0004                  		btst	#4,d1		; is object type $8X ?
00008B6E 6700                       		beq.s	loc_7AD4	; if not, branch
00008B70 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
00008B78 317C 43AA 0002             		move.w	#$43AA,2(a0)
00008B7E 117C 0001 001A             		move.b	#1,$1A(a0)
00008B84 117C 0002 0018             		move.b	#2,$18(a0)
00008B8A 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
00008B90                            
00008B90                            loc_7AD4:
00008B90 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
00008B96 6700                       		beq.s	Obj15_Action	; if yes, branch
00008B98                            
00008B98                            Obj15_SetSolid:				; XREF: Obj15_Index
00008B98 7200                       		moveq	#0,d1
00008B9A 1228 0019                  		move.b	$19(a0),d1
00008B9E 7600                       		moveq	#0,d3
00008BA0 1628 0016                  		move.b	$16(a0),d3
00008BA4 6100 FA72                  		bsr.w	Obj15_Solid
00008BA8                            
00008BA8                            Obj15_Action:				; XREF: Obj15_Index
00008BA8 6100 0000                  		bsr.w	Obj15_Move
00008BAC 6100 0000                  		bsr.w	DisplaySprite
00008BB0 6000 0000                  		bra.w	Obj15_ChkDel
00008BB4                            ; ===========================================================================
00008BB4                            
00008BB4                            Obj15_Action2:				; XREF: Obj15_Index
00008BB4 7200                       		moveq	#0,d1
00008BB6 1228 0019                  		move.b	$19(a0),d1
00008BBA 6100 FAC0                  		bsr.w	ExitPlatform
00008BBE 3F28 0008                  		move.w	8(a0),-(sp)
00008BC2 6100 0000                  		bsr.w	Obj15_Move
00008BC6 341F                       		move.w	(sp)+,d2
00008BC8 7600                       		moveq	#0,d3
00008BCA 1628 0016                  		move.b	$16(a0),d3
00008BCE 5203                       		addq.b	#1,d3
00008BD0 6100 0000                  		bsr.w	MvSonicOnPtfm
00008BD4 6100 0000                  		bsr.w	DisplaySprite
00008BD8 6000 0000                  		bra.w	Obj15_ChkDel
00008BDC                            
00008BDC 4E75                       		rts
00008BDE                            
00008BDE                            ; ---------------------------------------------------------------------------
00008BDE                            ; Subroutine to	change Sonic's position with a platform
00008BDE                            ; ---------------------------------------------------------------------------
00008BDE                            
00008BDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008BDE                            
00008BDE                            
00008BDE                            MvSonicOnPtfm:
00008BDE 43F8 D000                  		lea	($FFFFD000).w,a1
00008BE2 3028 000C                  		move.w	$C(a0),d0
00008BE6 9043                       		sub.w	d3,d0
00008BE8 6000                       		bra.s	MvSonic2
00008BEA                            ; End of function MvSonicOnPtfm
00008BEA                            
00008BEA                            ; ---------------------------------------------------------------------------
00008BEA                            ; Subroutine to	change Sonic's position with a platform
00008BEA                            ; ---------------------------------------------------------------------------
00008BEA                            
00008BEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008BEA                            
00008BEA                            
00008BEA                            MvSonicOnPtfm2:
00008BEA 43F8 D000                  		lea	($FFFFD000).w,a1
00008BEE 3028 000C                  		move.w	$C(a0),d0
00008BF2 0440 0009                  		subi.w	#9,d0
00008BF6                            
00008BF6                            MvSonic2:
00008BF6 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00008BFA 6B00                       		bmi.s	locret_7B62
00008BFC 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00008C02 6400                       		bcc.s	locret_7B62
00008C04 4A78 FE08                  		tst.w	($FFFFFE08).w
00008C08 6600                       		bne.s	locret_7B62
00008C0A 7200                       		moveq	#0,d1
00008C0C 1229 0016                  		move.b	$16(a1),d1
00008C10 9041                       		sub.w	d1,d0
00008C12 3340 000C                  		move.w	d0,$C(a1)
00008C16 9468 0008                  		sub.w	8(a0),d2
00008C1A 9569 0008                  		sub.w	d2,8(a1)
00008C1E                            
00008C1E                            locret_7B62:
00008C1E 4E75                       		rts	
00008C20                            ; End of function MvSonicOnPtfm2
00008C20                            
00008C20                            
00008C20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008C20                            
00008C20                            
00008C20                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
00008C20 1038 FE78                  		move.b	($FFFFFE78).w,d0
00008C24 323C 0080                  		move.w	#$80,d1
00008C28 0828 0000 0022             		btst	#0,$22(a0)
00008C2E 6700                       		beq.s	loc_7B78
00008C30 4440                       		neg.w	d0
00008C32 D041                       		add.w	d1,d0
00008C34                            
00008C34                            loc_7B78:
00008C34 6000                       		bra.s	Obj15_Move2
00008C36                            ; End of function Obj15_Move
00008C36                            
00008C36                            
00008C36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008C36                            
00008C36                            
00008C36                            Obj48_Move:				; XREF: Obj48_Display2
00008C36 4A28 003D                  		tst.b	$3D(a0)
00008C3A 6600                       		bne.s	loc_7B9C
00008C3C 3028 003E                  		move.w	$3E(a0),d0
00008C40 5040                       		addq.w	#8,d0
00008C42 3140 003E                  		move.w	d0,$3E(a0)
00008C46 D168 0026                  		add.w	d0,$26(a0)
00008C4A 0C40 0200                  		cmpi.w	#$200,d0
00008C4E 6600                       		bne.s	loc_7BB6
00008C50 117C 0001 003D             		move.b	#1,$3D(a0)
00008C56 6000                       		bra.s	loc_7BB6
00008C58                            ; ===========================================================================
00008C58                            
00008C58                            loc_7B9C:
00008C58 3028 003E                  		move.w	$3E(a0),d0
00008C5C 5140                       		subq.w	#8,d0
00008C5E 3140 003E                  		move.w	d0,$3E(a0)
00008C62 D168 0026                  		add.w	d0,$26(a0)
00008C66 0C40 FE00                  		cmpi.w	#-$200,d0
00008C6A 6600                       		bne.s	loc_7BB6
00008C6C 117C 0000 003D             		move.b	#0,$3D(a0)
00008C72                            
00008C72                            loc_7BB6:
00008C72 1028 0026                  		move.b	$26(a0),d0
00008C76                            ; End of function Obj48_Move
00008C76                            
00008C76                            
00008C76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008C76                            
00008C76                            
00008C76                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
00008C76 6100 A5FC                  		bsr.w	CalcSine
00008C7A 3428 0038                  		move.w	$38(a0),d2
00008C7E 3628 003A                  		move.w	$3A(a0),d3
00008C82 45E8 0028                  		lea	$28(a0),a2
00008C86 7C00                       		moveq	#0,d6
00008C88 1C1A                       		move.b	(a2)+,d6
00008C8A                            
00008C8A                            loc_7BCE:
00008C8A 7800                       		moveq	#0,d4
00008C8C 181A                       		move.b	(a2)+,d4
00008C8E ED4C                       		lsl.w	#6,d4
00008C90 0684 00FF D000             		addi.l	#$FFD000,d4
00008C96 2244                       		movea.l	d4,a1
00008C98 7800                       		moveq	#0,d4
00008C9A 1829 003C                  		move.b	$3C(a1),d4
00008C9E 2A04                       		move.l	d4,d5
00008CA0 C9C0                       		muls.w	d0,d4
00008CA2 E084                       		asr.l	#8,d4
00008CA4 CBC1                       		muls.w	d1,d5
00008CA6 E085                       		asr.l	#8,d5
00008CA8 D842                       		add.w	d2,d4
00008CAA DA43                       		add.w	d3,d5
00008CAC 3344 000C                  		move.w	d4,$C(a1)
00008CB0 3345 0008                  		move.w	d5,8(a1)
00008CB4 51CE FFD4                  		dbf	d6,loc_7BCE
00008CB8 4E75                       		rts	
00008CBA                            ; End of function Obj15_Move2
00008CBA                            
00008CBA                            ; ===========================================================================
00008CBA                            
00008CBA                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
00008CBA 3028 003A                  		move.w	$3A(a0),d0
00008CBE 0240 FF80                  		andi.w	#$FF80,d0
00008CC2 3238 F700                  		move.w	($FFFFF700).w,d1
00008CC6 0441 0080                  		subi.w	#$80,d1
00008CCA 0241 FF80                  		andi.w	#$FF80,d1
00008CCE 9041                       		sub.w	d1,d0
00008CD0 0C40 0280                  		cmpi.w	#$280,d0
00008CD4 6200 0000                  		bhi.w	Obj15_DelAll
00008CD8 4E75                       		rts	
00008CDA                            ; ===========================================================================
00008CDA                            
00008CDA                            Obj15_DelAll:				; XREF: Obj15_ChkDel
00008CDA 7400                       		moveq	#0,d2
00008CDC 45E8 0028                  		lea	$28(a0),a2
00008CE0 141A                       		move.b	(a2)+,d2
00008CE2                            
00008CE2                            Obj15_DelLoop:
00008CE2 7000                       		moveq	#0,d0
00008CE4 101A                       		move.b	(a2)+,d0
00008CE6 ED48                       		lsl.w	#6,d0
00008CE8 0680 00FF D000             		addi.l	#$FFD000,d0
00008CEE 2240                       		movea.l	d0,a1
00008CF0 6100 0000                  		bsr.w	DeleteObject2
00008CF4 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
00008CF8 4E75                       		rts	
00008CFA                            ; ===========================================================================
00008CFA                            
00008CFA                            Obj15_Delete:				; XREF: Obj15_Index
00008CFA 6100 0000                  		bsr.w	DeleteObject
00008CFE 4E75                       		rts	
00008D00                            ; ===========================================================================
00008D00                            
00008D00                            Obj15_Display:				; XREF: Obj15_Index
00008D00 6000 0000                  		bra.w	DisplaySprite
00008D04                            ; ===========================================================================
00008D04                            ; ---------------------------------------------------------------------------
00008D04                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00008D04                            ; ---------------------------------------------------------------------------
00008D04                            Map_obj15:
00008D04                            	include "_maps\obj15ghz.asm"
00008D04                            ; ---------------------------------------------------------------------------
00008D04                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00008D04                            ; ---------------------------------------------------------------------------
00008D04 0000                       		dc.w byte_7C4E-Map_obj15
00008D06 0000                       		dc.w byte_7C59-Map_obj15
00008D08 0000                       		dc.w byte_7C5F-Map_obj15
00008D0A 02                         byte_7C4E:	dc.b 2
00008D0B F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
00008D10 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
00008D15 01                         byte_7C59:	dc.b 1
00008D16 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00008D1B 01                         byte_7C5F:	dc.b 1
00008D1C F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
00008D22 00                         		even
00008D22 00                         		even
00008D22                            
00008D22                            ; ---------------------------------------------------------------------------
00008D22                            ; Sprite mappings - SLZ	swinging platforms
00008D22                            ; ---------------------------------------------------------------------------
00008D22                            Map_obj15a:
00008D22                            	include "_maps\obj15slz.asm"
00008D22                            ; ---------------------------------------------------------------------------
00008D22                            ; Sprite mappings - SLZ	swinging platforms
00008D22                            ; ---------------------------------------------------------------------------
00008D22 0000                       		dc.w byte_7C6C-Map_obj15a
00008D24 0000                       		dc.w byte_7C95-Map_obj15a
00008D26 0000                       		dc.w byte_7C9B-Map_obj15a
00008D28 08                         byte_7C6C:	dc.b 8
00008D29 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
00008D2E F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
00008D33 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
00008D38 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
00008D3D 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
00008D42 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
00008D47 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
00008D4C 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
00008D51 01                         byte_7C95:	dc.b 1
00008D52 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
00008D57 01                         byte_7C9B:	dc.b 1
00008D58 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
00008D5E 00                         		even
00008D5E 00                         		even
00008D5E                            
00008D5E                            ; ===========================================================================
00008D5E                            ; ---------------------------------------------------------------------------
00008D5E                            ; Object 17 - helix of spikes on a pole	(GHZ)
00008D5E                            ; ---------------------------------------------------------------------------
00008D5E                            
00008D5E                            Obj17:					; XREF: Obj_Index
00008D5E 7000                       		moveq	#0,d0
00008D60 1028 0024                  		move.b	$24(a0),d0
00008D64 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
00008D68 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
00008D6C                            ; ===========================================================================
00008D6C 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
00008D6E 0000                       		dc.w Obj17_Action-Obj17_Index
00008D70 0000                       		dc.w Obj17_Action-Obj17_Index
00008D72 0000                       		dc.w Obj17_Delete-Obj17_Index
00008D74 0000                       		dc.w Obj17_Display-Obj17_Index
00008D76                            ; ===========================================================================
00008D76                            
00008D76                            Obj17_Main:				; XREF: Obj17_Index
00008D76 5428 0024                  		addq.b	#2,$24(a0)
00008D7A 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
00008D82 317C 4398 0002             		move.w	#$4398,2(a0)
00008D88 117C 0007 0022             		move.b	#7,$22(a0)
00008D8E 117C 0004 0001             		move.b	#4,1(a0)
00008D94 117C 0003 0018             		move.b	#3,$18(a0)
00008D9A 117C 0008 0019             		move.b	#8,$19(a0)
00008DA0 3428 000C                  		move.w	$C(a0),d2
00008DA4 3628 0008                  		move.w	8(a0),d3
00008DA8 1828 0000                  		move.b	0(a0),d4
00008DAC 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008DB0 7200                       		moveq	#0,d1
00008DB2 1212                       		move.b	(a2),d1		; move a2 to d1
00008DB4 14FC 0000                  		move.b	#0,(a2)+
00008DB8 3001                       		move.w	d1,d0
00008DBA E248                       		lsr.w	#1,d0
00008DBC E948                       		lsl.w	#4,d0
00008DBE 9640                       		sub.w	d0,d3
00008DC0 5501                       		subq.b	#2,d1
00008DC2 6500                       		bcs.s	Obj17_Action
00008DC4 7C00                       		moveq	#0,d6
00008DC6                            
00008DC6                            Obj17_MakeHelix:
00008DC6 6100 0000                  		bsr.w	SingleObjLoad
00008DCA 6600                       		bne.s	Obj17_Action
00008DCC 5228 0028                  		addq.b	#1,$28(a0)
00008DD0 3A09                       		move.w	a1,d5
00008DD2 0445 D000                  		subi.w	#$D000,d5
00008DD6 EC4D                       		lsr.w	#6,d5
00008DD8 0245 007F                  		andi.w	#$7F,d5
00008DDC 14C5                       		move.b	d5,(a2)+
00008DDE 137C 0008 0024             		move.b	#8,$24(a1)
00008DE4 1344 0000                  		move.b	d4,0(a1)
00008DE8 3342 000C                  		move.w	d2,$C(a1)
00008DEC 3343 0008                  		move.w	d3,8(a1)
00008DF0 2368 0004 0004             		move.l	4(a0),4(a1)
00008DF6 337C 4398 0002             		move.w	#$4398,2(a1)
00008DFC 137C 0004 0001             		move.b	#4,1(a1)
00008E02 137C 0003 0018             		move.b	#3,$18(a1)
00008E08 137C 0008 0019             		move.b	#8,$19(a1)
00008E0E 1346 003E                  		move.b	d6,$3E(a1)
00008E12 5206                       		addq.b	#1,d6
00008E14 0206 0007                  		andi.b	#7,d6
00008E18 0643 0010                  		addi.w	#$10,d3
00008E1C B668 0008                  		cmp.w	8(a0),d3
00008E20 6600                       		bne.s	loc_7D78
00008E22 1146 003E                  		move.b	d6,$3E(a0)
00008E26 5206                       		addq.b	#1,d6
00008E28 0206 0007                  		andi.b	#7,d6
00008E2C 0643 0010                  		addi.w	#$10,d3
00008E30 5228 0028                  		addq.b	#1,$28(a0)
00008E34                            
00008E34                            loc_7D78:
00008E34 51C9 FF90                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
00008E38                            
00008E38                            Obj17_Action:				; XREF: Obj17_Index
00008E38 6100 0000                  		bsr.w	Obj17_RotateSpikes
00008E3C 6100 0000                  		bsr.w	DisplaySprite
00008E40 6000 0000                  		bra.w	Obj17_ChkDel
00008E44                            
00008E44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008E44                            
00008E44                            
00008E44                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
00008E44 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
00008E48 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
00008E4E D028 003E                  		add.b	$3E(a0),d0
00008E52 0200 0007                  		andi.b	#7,d0
00008E56 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
00008E5A 6600                       		bne.s	locret_7DA6
00008E5C 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
00008E62                            
00008E62                            locret_7DA6:
00008E62 4E75                       		rts	
00008E64                            ; End of function Obj17_RotateSpikes
00008E64                            
00008E64                            ; ===========================================================================
00008E64                            
00008E64                            Obj17_ChkDel:				; XREF: Obj17_Action
00008E64 3028 0008                  		move.w	8(a0),d0
00008E68 0240 FF80                  		andi.w	#$FF80,d0
00008E6C 3238 F700                  		move.w	($FFFFF700).w,d1
00008E70 0441 0080                  		subi.w	#$80,d1
00008E74 0241 FF80                  		andi.w	#$FF80,d1
00008E78 9041                       		sub.w	d1,d0
00008E7A 0C40 0280                  		cmpi.w	#$280,d0
00008E7E 6200 0000                  		bhi.w	Obj17_DelAll
00008E82 4E75                       		rts	
00008E84                            ; ===========================================================================
00008E84                            
00008E84                            Obj17_DelAll:				; XREF: Obj17_ChkDel
00008E84 7400                       		moveq	#0,d2
00008E86 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008E8A 141A                       		move.b	(a2)+,d2	; move a2 to d2
00008E8C 5502                       		subq.b	#2,d2
00008E8E 6500                       		bcs.s	Obj17_Delete
00008E90                            
00008E90                            Obj17_DelLoop:
00008E90 7000                       		moveq	#0,d0
00008E92 101A                       		move.b	(a2)+,d0
00008E94 ED48                       		lsl.w	#6,d0
00008E96 0680 00FF D000             		addi.l	#$FFD000,d0
00008E9C 2240                       		movea.l	d0,a1
00008E9E 6100 0000                  		bsr.w	DeleteObject2	; delete object
00008EA2 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
00008EA6                            
00008EA6                            Obj17_Delete:				; XREF: Obj17_Index
00008EA6 6100 0000                  		bsr.w	DeleteObject
00008EAA 4E75                       		rts	
00008EAC                            ; ===========================================================================
00008EAC                            
00008EAC                            Obj17_Display:				; XREF: Obj17_Index
00008EAC 6100 FF96                  		bsr.w	Obj17_RotateSpikes
00008EB0 6000 0000                  		bra.w	DisplaySprite
00008EB4                            ; ===========================================================================
00008EB4                            ; ---------------------------------------------------------------------------
00008EB4                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008EB4                            ; ---------------------------------------------------------------------------
00008EB4                            Map_obj17:
00008EB4                            	include "_maps\obj17.asm"
00008EB4                            ; ---------------------------------------------------------------------------
00008EB4                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008EB4                            ; ---------------------------------------------------------------------------
00008EB4 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
00008EB8 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
00008EBC 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
00008EC0 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
00008EC4 01                         byte_7E08:	dc.b 1
00008EC5 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
00008ECA 01                         byte_7E0E:	dc.b 1
00008ECB F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
00008ED0 01                         byte_7E14:	dc.b 1
00008ED1 F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
00008ED6 01                         byte_7E1A:	dc.b 1
00008ED7 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
00008EDC 01                         byte_7E20:	dc.b 1
00008EDD 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
00008EE2 01                         byte_7E26:	dc.b 1
00008EE3 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
00008EE8 01                         byte_7E2C:	dc.b 1
00008EE9 F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
00008EEE                            		even
00008EEE                            		even
00008EEE                            
00008EEE                            ; ===========================================================================
00008EEE                            ; ---------------------------------------------------------------------------
00008EEE                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
00008EEE                            ; ---------------------------------------------------------------------------
00008EEE                            
00008EEE                            Obj18:					; XREF: Obj_Index
00008EEE 7000                       		moveq	#0,d0
00008EF0 1028 0024                  		move.b	$24(a0),d0
00008EF4 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
00008EF8 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
00008EFC                            ; ===========================================================================
00008EFC 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
00008EFE 0000                       		dc.w Obj18_Solid-Obj18_Index
00008F00 0000                       		dc.w Obj18_Action2-Obj18_Index
00008F02 0000                       		dc.w Obj18_Delete-Obj18_Index
00008F04 0000                       		dc.w Obj18_Action-Obj18_Index
00008F06                            ; ===========================================================================
00008F06                            
00008F06                            Obj18_Main:				; XREF: Obj18_Index
00008F06 5428 0024                  		addq.b	#2,$24(a0)
00008F0A 317C 4000 0002             		move.w	#$4000,2(a0)
00008F10 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
00008F18 117C 0020 0019             		move.b	#$20,$19(a0)
00008F1E 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
00008F24 6600                       		bne.s	Obj18_NotSYZ
00008F26 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
00008F2E 117C 0020 0019             		move.b	#$20,$19(a0)
00008F34                            
00008F34                            Obj18_NotSYZ:
00008F34 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008F3A 6600                       		bne.s	Obj18_NotSLZ
00008F3C 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
00008F44 117C 0020 0019             		move.b	#$20,$19(a0)
00008F4A 317C 4000 0002             		move.w	#$4000,2(a0)
00008F50 117C 0003 0028             		move.b	#3,$28(a0)
00008F56                            
00008F56                            Obj18_NotSLZ:
00008F56 117C 0004 0001             		move.b	#4,1(a0)
00008F5C 117C 0004 0018             		move.b	#4,$18(a0)
00008F62 3168 000C 002C             		move.w	$C(a0),$2C(a0)
00008F68 3168 000C 0034             		move.w	$C(a0),$34(a0)
00008F6E 3168 0008 0032             		move.w	8(a0),$32(a0)
00008F74 317C 0080 0026             		move.w	#$80,$26(a0)
00008F7A 7200                       		moveq	#0,d1
00008F7C 1028 0028                  		move.b	$28(a0),d0
00008F80 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
00008F84 6600                       		bne.s	Obj18_SetFrame	; if not, branch
00008F86 5201                       		addq.b	#1,d1		; use frame #1
00008F88 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
00008F8E                            
00008F8E                            Obj18_SetFrame:
00008F8E 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
00008F92                            
00008F92                            Obj18_Solid:				; XREF: Obj18_Index
00008F92 4A28 0038                  		tst.b	$38(a0)
00008F96 6700                       		beq.s	loc_7EE0
00008F98 5928 0038                  		subq.b	#4,$38(a0)
00008F9C                            
00008F9C                            loc_7EE0:
00008F9C 7200                       		moveq	#0,d1
00008F9E 1228 0019                  		move.b	$19(a0),d1
00008FA2 6100 F564                  		bsr.w	PlatformObject
00008FA6                            
00008FA6                            Obj18_Action:				; XREF: Obj18_Index
00008FA6 6100 0000                  		bsr.w	Obj18_Move
00008FAA 6100 0000                  		bsr.w	Obj18_Nudge
00008FAE 6100 0000                  		bsr.w	DisplaySprite
00008FB2 6000 0000                  		bra.w	Obj18_ChkDel
00008FB6                            ; ===========================================================================
00008FB6                            
00008FB6                            Obj18_Action2:				; XREF: Obj18_Index
00008FB6 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
00008FBC 6700                       		beq.s	loc_7F06
00008FBE 5828 0038                  		addq.b	#4,$38(a0)
00008FC2                            
00008FC2                            loc_7F06:
00008FC2 7200                       		moveq	#0,d1
00008FC4 1228 0019                  		move.b	$19(a0),d1
00008FC8 6100 F6B2                  		bsr.w	ExitPlatform
00008FCC 3F28 0008                  		move.w	8(a0),-(sp)
00008FD0 6100 0000                  		bsr.w	Obj18_Move
00008FD4 6100 0000                  		bsr.w	Obj18_Nudge
00008FD8 341F                       		move.w	(sp)+,d2
00008FDA 6100 FC0E                  		bsr.w	MvSonicOnPtfm2
00008FDE 6100 0000                  		bsr.w	DisplaySprite
00008FE2 6000 0000                  		bra.w	Obj18_ChkDel
00008FE6                            
00008FE6 4E75                       		rts
00008FE8                            
00008FE8                            ; ---------------------------------------------------------------------------
00008FE8                            ; Subroutine to	move platform slightly when you	stand on it
00008FE8                            ; ---------------------------------------------------------------------------
00008FE8                            
00008FE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008FE8                            
00008FE8                            
00008FE8                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
00008FE8 1028 0038                  		move.b	$38(a0),d0
00008FEC 6100 A286                  		bsr.w	CalcSine
00008FF0 323C 0400                  		move.w	#$400,d1
00008FF4 C1C1                       		muls.w	d1,d0
00008FF6 4840                       		swap	d0
00008FF8 D068 002C                  		add.w	$2C(a0),d0
00008FFC 3140 000C                  		move.w	d0,$C(a0)
00009000 4E75                       		rts	
00009002                            ; End of function Obj18_Nudge
00009002                            
00009002                            ; ---------------------------------------------------------------------------
00009002                            ; Subroutine to	move platforms
00009002                            ; ---------------------------------------------------------------------------
00009002                            
00009002                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009002                            
00009002                            
00009002                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
00009002 7000                       		moveq	#0,d0
00009004 1028 0028                  		move.b	$28(a0),d0
00009008 0240 000F                  		andi.w	#$F,d0
0000900C D040                       		add.w	d0,d0
0000900E 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
00009012 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
00009016                            ; End of function Obj18_Move
00009016                            
00009016                            ; ===========================================================================
00009016 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
0000901A 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
0000901E 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
00009022 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
00009026 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
0000902A 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
0000902E 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
00009030                            ; ===========================================================================
00009030                            
00009030                            Obj18_Type00:
00009030 4E75                       		rts			; platform 00 doesn't move
00009032                            ; ===========================================================================
00009032                            
00009032                            Obj18_Type05:
00009032 3028 0032                  		move.w	$32(a0),d0
00009036 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000903A 4401                       		neg.b	d1		; reverse platform-motion
0000903C 0601 0040                  		addi.b	#$40,d1
00009040 6000                       		bra.s	Obj18_01_Move
00009042                            ; ===========================================================================
00009042                            
00009042                            Obj18_Type01:
00009042 3028 0032                  		move.w	$32(a0),d0
00009046 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000904A 0401 0040                  		subi.b	#$40,d1
0000904E                            
0000904E                            Obj18_01_Move:
0000904E 4881                       		ext.w	d1
00009050 D041                       		add.w	d1,d0
00009052 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
00009056 6000 0000                  		bra.w	Obj18_ChgMotion
0000905A                            ; ===========================================================================
0000905A                            
0000905A                            Obj18_Type0C:
0000905A 3028 0034                  		move.w	$34(a0),d0
0000905E 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00009062 4401                       		neg.b	d1		; reverse platform-motion
00009064 0601 0030                  		addi.b	#$30,d1
00009068 6000                       		bra.s	Obj18_02_Move
0000906A                            ; ===========================================================================
0000906A                            
0000906A                            Obj18_Type0B:
0000906A 3028 0034                  		move.w	$34(a0),d0
0000906E 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00009072 0401 0030                  		subi.b	#$30,d1
00009076 6000                       		bra.s	Obj18_02_Move
00009078                            ; ===========================================================================
00009078                            
00009078                            Obj18_Type06:
00009078 3028 0034                  		move.w	$34(a0),d0
0000907C 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00009080 4401                       		neg.b	d1		; reverse platform-motion
00009082 0601 0040                  		addi.b	#$40,d1
00009086 6000                       		bra.s	Obj18_02_Move
00009088                            ; ===========================================================================
00009088                            
00009088                            Obj18_Type02:
00009088 3028 0034                  		move.w	$34(a0),d0
0000908C 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00009090 0401 0040                  		subi.b	#$40,d1
00009094                            
00009094                            Obj18_02_Move:
00009094 4881                       		ext.w	d1
00009096 D041                       		add.w	d1,d0
00009098 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
0000909C 6000 0000                  		bra.w	Obj18_ChgMotion
000090A0                            ; ===========================================================================
000090A0                            
000090A0                            Obj18_Type03:
000090A0 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
000090A4 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
000090A6 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
000090AC 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
000090AE 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
000090B4                            
000090B4                            Obj18_03_NoMove:
000090B4 4E75                       		rts	
000090B6                            ; ===========================================================================
000090B6                            
000090B6                            Obj18_03_Wait:
000090B6 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
000090BA 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
000090BC 317C 0020 003A             		move.w	#32,$3A(a0)
000090C2 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
000090C6 4E75                       		rts	
000090C8                            ; ===========================================================================
000090C8                            
000090C8                            Obj18_Type04:
000090C8 4A68 003A                  		tst.w	$3A(a0)
000090CC 6700                       		beq.s	loc_8048
000090CE 5368 003A                  		subq.w	#1,$3A(a0)
000090D2 6600                       		bne.s	loc_8048
000090D4 0828 0003 0022             		btst	#3,$22(a0)
000090DA 6700                       		beq.s	loc_8042
000090DC 08E9 0001 0022             		bset	#1,$22(a1)
000090E2 08A9 0003 0022             		bclr	#3,$22(a1)
000090E8 137C 0002 0024             		move.b	#2,$24(a1)
000090EE 08A8 0003 0022             		bclr	#3,$22(a0)
000090F4 4228 0025                  		clr.b	$25(a0)
000090F8 3368 0012 0012             		move.w	$12(a0),$12(a1)
000090FE                            
000090FE                            loc_8042:
000090FE 117C 0008 0024             		move.b	#8,$24(a0)
00009104                            
00009104                            loc_8048:
00009104 2628 002C                  		move.l	$2C(a0),d3
00009108 3028 0012                  		move.w	$12(a0),d0
0000910C 48C0                       		ext.l	d0
0000910E E180                       		asl.l	#8,d0
00009110 D680                       		add.l	d0,d3
00009112 2143 002C                  		move.l	d3,$2C(a0)
00009116 0668 0038 0012             		addi.w	#$38,$12(a0)
0000911C 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009120 0640 00E0                  		addi.w	#$E0,d0
00009124 B068 002C                  		cmp.w	$2C(a0),d0
00009128 6400                       		bcc.s	locret_8074
0000912A 117C 0006 0024             		move.b	#6,$24(a0)
00009130                            
00009130                            locret_8074:
00009130 4E75                       		rts	
00009132                            ; ===========================================================================
00009132                            
00009132                            Obj18_Type07:
00009132 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00009136 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
00009138 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000913C 7000                       		moveq	#0,d0
0000913E 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
00009142 E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
00009144 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
00009148 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
0000914A 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00009150                            
00009150                            Obj18_07_NoMove:
00009150 4E75                       		rts	
00009152                            ; ===========================================================================
00009152                            
00009152                            Obj18_07_Wait:
00009152 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00009156 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
00009158 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
0000915C 4E75                       		rts	
0000915E                            ; ===========================================================================
0000915E                            
0000915E                            Obj18_Type08:
0000915E 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
00009162 3028 0034                  		move.w	$34(a0),d0
00009166 0440 0200                  		subi.w	#$200,d0
0000916A B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
0000916E 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
00009170 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
00009174                            
00009174                            Obj18_08_NoStop:
00009174 4E75                       		rts	
00009176                            ; ===========================================================================
00009176                            
00009176                            Obj18_Type0A:
00009176 3028 0034                  		move.w	$34(a0),d0
0000917A 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000917E 0401 0040                  		subi.b	#$40,d1
00009182 4881                       		ext.w	d1
00009184 E241                       		asr.w	#1,d1
00009186 D041                       		add.w	d1,d0
00009188 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
0000918C                            
0000918C                            Obj18_ChgMotion:
0000918C 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
00009192 4E75                       		rts	
00009194                            ; ===========================================================================
00009194                            
00009194                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
00009194 3028 0032                  		move.w	$32(a0),d0
00009198 0240 FF80                  		andi.w	#$FF80,d0
0000919C 3238 F700                  		move.w	($FFFFF700).w,d1
000091A0 0441 0080                  		subi.w	#$80,d1
000091A4 0241 FF80                  		andi.w	#$FF80,d1
000091A8 9041                       		sub.w	d1,d0
000091AA 0C40 0280                  		cmpi.w	#$280,d0
000091AE 6200                       		bhi.s	Obj18_Delete
000091B0 4E75                       		rts	
000091B2                            ; ===========================================================================
000091B2                            
000091B2                            Obj18_Delete:				; XREF: Obj18_Index
000091B2 6000 0000                  		bra.w	DeleteObject
000091B6                            ; ===========================================================================
000091B6                            ; ---------------------------------------------------------------------------
000091B6                            ; Sprite mappings - unused
000091B6                            ; ---------------------------------------------------------------------------
000091B6                            Map_obj18x:
000091B6                            	include "_maps\obj18x.asm"
000091B6                            ; ---------------------------------------------------------------------------
000091B6                            ; Sprite mappings - unused
000091B6                            ; ---------------------------------------------------------------------------
000091B6 0000                       		dc.w byte_80FE-Map_obj18x
000091B8 0000                       		dc.w byte_8109-Map_obj18x
000091BA 02                         byte_80FE:	dc.b 2
000091BB F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
000091C0 F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
000091C5 0A                         byte_8109:	dc.b $A
000091C6 F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
000091CB 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
000091D0 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
000091D5 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
000091DA 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
000091DF F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
000091E4 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
000091E9 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
000091EE 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
000091F3 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
000091F8                            		even
000091F8                            		even
000091F8                            
000091F8                            ; ---------------------------------------------------------------------------
000091F8                            ; Sprite mappings - GHZ	platforms
000091F8                            ; ---------------------------------------------------------------------------
000091F8                            Map_obj18:
000091F8                            	include "_maps\obj18ghz.asm"
000091F8                            ; ---------------------------------------------------------------------------
000091F8                            ; Sprite mappings - GHZ	platforms
000091F8                            ; ---------------------------------------------------------------------------
000091F8 0000                       		dc.w byte_8140-Map_obj18
000091FA 0000                       		dc.w byte_8155-Map_obj18
000091FC 04                         byte_8140:	dc.b 4
000091FD F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
00009202 F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
00009207 F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
0000920C F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
00009211 0A                         byte_8155:	dc.b $A
00009212 F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
00009217 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
0000921C 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
00009221 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
00009226 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
0000922B F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
00009230 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
00009235 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
0000923A 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
0000923F 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
00009244                            		even
00009244                            		even
00009244                            
00009244                            ; ---------------------------------------------------------------------------
00009244                            ; Sprite mappings - SYZ	platforms
00009244                            ; ---------------------------------------------------------------------------
00009244                            Map_obj18a:
00009244                            	include "_maps\obj18syz.asm"
00009244                            ; ---------------------------------------------------------------------------
00009244                            ; Sprite mappings - SYZ	platforms
00009244                            ; ---------------------------------------------------------------------------
00009244 0000                       		dc.w byte_818A-Map_obj18a
00009246 03                         byte_818A:	dc.b 3
00009247 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
0000924C F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
00009251 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
00009256                            		even
00009256                            		even
00009256                            
00009256                            ; ---------------------------------------------------------------------------
00009256                            ; Sprite mappings - SLZ	platforms
00009256                            ; ---------------------------------------------------------------------------
00009256                            Map_obj18b:
00009256                            	include "_maps\obj18slz.asm"
00009256                            ; ---------------------------------------------------------------------------
00009256                            ; Sprite mappings - SLZ	platforms
00009256                            ; ---------------------------------------------------------------------------
00009256 0000                       		dc.w byte_819C-Map_obj18b
00009258 02                         byte_819C:	dc.b 2
00009259 F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
0000925E F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
00009264 00                         		even
00009264 00                         		even
00009264                            
00009264                            ; ===========================================================================
00009264                            ; ---------------------------------------------------------------------------
00009264                            ; Object 19 - blank
00009264                            ; ---------------------------------------------------------------------------
00009264                            
00009264                            Obj19:					; XREF: Obj_Index
00009264 4E75                       		rts	
00009266                            ; ===========================================================================
00009266                            ; ---------------------------------------------------------------------------
00009266                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00009266                            ; ---------------------------------------------------------------------------
00009266                            Map_obj48:
00009266                            	include "_maps\obj48.asm"
00009266                            ; ---------------------------------------------------------------------------
00009266                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00009266                            ; ---------------------------------------------------------------------------
00009266 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
0000926A 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
0000926E 06                         byte_81B2:	dc.b 6
0000926F F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00009274 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
00009279 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
0000927E E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00009283 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00009288 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
0000928D 04                         byte_81D1:	dc.b 4
0000928E E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
00009293 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
00009298 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
0000929D 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
000092A2 04                         byte_81E6:	dc.b 4
000092A3 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
000092A8 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
000092AD 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
000092B2 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
000092B7 04                         byte_81FB:	dc.b 4
000092B8 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
000092BD E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
000092C2 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
000092C7 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
000092CC                            		even
000092CC                            		even
000092CC                            
000092CC                            ; ===========================================================================
000092CC                            ; ---------------------------------------------------------------------------
000092CC                            ; Object 1A - GHZ collapsing ledge
000092CC                            ; ---------------------------------------------------------------------------
000092CC                            
000092CC                            Obj1A:					; XREF: Obj_Index
000092CC 7000                       		moveq	#0,d0
000092CE 1028 0024                  		move.b	$24(a0),d0
000092D2 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
000092D6 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
000092DA                            ; ===========================================================================
000092DA 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
000092DE 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
000092E2 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
000092E6                            ; ===========================================================================
000092E6                            
000092E6                            Obj1A_Main:				; XREF: Obj1A_Index
000092E6 5428 0024                  		addq.b	#2,$24(a0)
000092EA 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
000092F2 317C 4000 0002             		move.w	#$4000,2(a0)
000092F8 0028 0004 0001             		ori.b	#4,1(a0)
000092FE 117C 0004 0018             		move.b	#4,$18(a0)
00009304 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
0000930A 117C 0064 0019             		move.b	#$64,$19(a0)
00009310 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00009316 117C 0038 0016             		move.b	#$38,$16(a0)
0000931C 08E8 0004 0001             		bset	#4,1(a0)
00009322                            
00009322                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
00009322 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
00009326 6700                       		beq.s	Obj1A_Slope	; if not, branch
00009328 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
0000932C 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
00009330 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00009334                            
00009334                            Obj1A_Slope:
00009334 323C 0030                  		move.w	#$30,d1
00009338 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
0000933E 6100 F29C                  		bsr.w	SlopeObject
00009342 6000 0000                  		bra.w	MarkObjGone
00009346                            ; ===========================================================================
00009346                            
00009346                            Obj1A_Touch:				; XREF: Obj1A_Index
00009346 4A28 0038                  		tst.b	$38(a0)
0000934A 6700 0000                  		beq.w	loc_847A
0000934E 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00009354 5328 0038                  		subq.b	#1,$38(a0)
00009358                            
00009358                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009358                            
00009358                            
00009358                            Obj1A_WalkOff:				; XREF: Obj1A_Index
00009358 323C 0030                  		move.w	#$30,d1
0000935C 6100 F31E                  		bsr.w	ExitPlatform
00009360 323C 0030                  		move.w	#$30,d1
00009364 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
0000936A 3428 0008                  		move.w	8(a0),d2
0000936E 6100 0000                  		bsr.w	SlopeObject2
00009372 6000 0000                  		bra.w	MarkObjGone
00009376                            ; End of function Obj1A_WalkOff
00009376                            
00009376                            ; ===========================================================================
00009376                            
00009376                            Obj1A_Display:				; XREF: Obj1A_Index
00009376 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
0000937A 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
0000937C 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00009380 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00009384 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00009388 6000 0000                  		bra.w	DisplaySprite
0000938C                            ; ===========================================================================
0000938C                            
0000938C                            loc_82D0:				; XREF: Obj1A_Display
0000938C 5328 0038                  		subq.b	#1,$38(a0)
00009390 6100 FFC6                  		bsr.w	Obj1A_WalkOff
00009394 43F8 D000                  		lea	($FFFFD000).w,a1
00009398 0829 0003 0022             		btst	#3,$22(a1)
0000939E 6700                       		beq.s	loc_82FC
000093A0 4A28 0038                  		tst.b	$38(a0)
000093A4 6600                       		bne.s	locret_8308
000093A6 08A9 0003 0022             		bclr	#3,$22(a1)
000093AC 08A9 0005 0022             		bclr	#5,$22(a1)
000093B2 137C 0001 001D             		move.b	#1,$1D(a1)
000093B8                            
000093B8                            loc_82FC:
000093B8 117C 0000 003A             		move.b	#0,$3A(a0)
000093BE 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
000093C4                            
000093C4                            locret_8308:
000093C4 4E75                       		rts	
000093C6                            ; ===========================================================================
000093C6                            
000093C6                            Obj1A_TimeZero:				; XREF: Obj1A_Display
000093C6 6100 0000                  		bsr.w	ObjectFall
000093CA 6100 0000                  		bsr.w	DisplaySprite
000093CE 4A28 0001                  		tst.b	1(a0)
000093D2 6A00                       		bpl.s	Obj1A_Delete
000093D4 4E75                       		rts	
000093D6                            ; ===========================================================================
000093D6                            
000093D6                            Obj1A_Delete:				; XREF: Obj1A_Index
000093D6 6100 0000                  		bsr.w	DeleteObject
000093DA 4E75                       		rts	
000093DC                            ; ===========================================================================
000093DC                            ; ---------------------------------------------------------------------------
000093DC                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
000093DC                            ; ---------------------------------------------------------------------------
000093DC                            
000093DC                            Obj53:					; XREF: Obj_Index
000093DC 7000                       		moveq	#0,d0
000093DE 1028 0024                  		move.b	$24(a0),d0
000093E2 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
000093E6 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
000093EA                            ; ===========================================================================
000093EA 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
000093EE 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
000093F2 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
000093F6                            ; ===========================================================================
000093F6                            
000093F6                            Obj53_Main:				; XREF: Obj53_Index
000093F6 5428 0024                  		addq.b	#2,$24(a0)
000093FA 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
00009402 317C 42B8 0002             		move.w	#$42B8,2(a0)
00009408 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000940E 6600                       		bne.s	Obj53_NotSLZ
00009410 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
00009416 5428 001A                  		addq.b	#2,$1A(a0)
0000941A                            
0000941A                            Obj53_NotSLZ:
0000941A 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00009420 6600                       		bne.s	Obj53_NotSBZ
00009422 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
00009428                            
00009428                            Obj53_NotSBZ:
00009428 0028 0004 0001             		ori.b	#4,1(a0)
0000942E 117C 0004 0018             		move.b	#4,$18(a0)
00009434 117C 0007 0038             		move.b	#7,$38(a0)
0000943A 117C 0044 0019             		move.b	#$44,$19(a0)
00009440                            
00009440                            Obj53_ChkTouch:				; XREF: Obj53_Index
00009440 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00009444 6700                       		beq.s	Obj53_Solid	; if not, branch
00009446 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
0000944A 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
0000944E 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00009452                            
00009452                            Obj53_Solid:
00009452 323C 0020                  		move.w	#$20,d1
00009456 6100 F0B0                  		bsr.w	PlatformObject
0000945A 4A28 0028                  		tst.b	$28(a0)
0000945E 6A00                       		bpl.s	Obj53_MarkAsGone
00009460 0829 0003 0022             		btst	#3,$22(a1)
00009466 6700                       		beq.s	Obj53_MarkAsGone
00009468 08A8 0000 0001             		bclr	#0,1(a0)
0000946E 3029 0008                  		move.w	8(a1),d0
00009472 9068 0008                  		sub.w	8(a0),d0
00009476 6400                       		bcc.s	Obj53_MarkAsGone
00009478 08E8 0000 0001             		bset	#0,1(a0)
0000947E                            
0000947E                            Obj53_MarkAsGone:
0000947E 6000 0000                  		bra.w	MarkObjGone
00009482                            ; ===========================================================================
00009482                            
00009482                            Obj53_Touch:				; XREF: Obj53_Index
00009482 4A28 0038                  		tst.b	$38(a0)
00009486 6700 0000                  		beq.w	loc_8458
0000948A 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00009490 5328 0038                  		subq.b	#1,$38(a0)
00009494                            
00009494                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009494                            
00009494                            
00009494                            Obj53_WalkOff:				; XREF: Obj53_Index
00009494 323C 0020                  		move.w	#$20,d1
00009498 6100 F1E2                  		bsr.w	ExitPlatform
0000949C 3428 0008                  		move.w	8(a0),d2
000094A0 6100 F748                  		bsr.w	MvSonicOnPtfm2
000094A4 6000 0000                  		bra.w	MarkObjGone
000094A8                            ; End of function Obj53_WalkOff
000094A8                            
000094A8                            ; ===========================================================================
000094A8                            
000094A8                            Obj53_Display:				; XREF: Obj53_Index
000094A8 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
000094AC 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
000094AE 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
000094B2 6600 0000                  		bne.w	loc_8402	; if yes, branch
000094B6 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000094BA 6000 0000                  		bra.w	DisplaySprite
000094BE                            ; ===========================================================================
000094BE                            
000094BE                            loc_8402:
000094BE 5328 0038                  		subq.b	#1,$38(a0)
000094C2 6100 FFD0                  		bsr.w	Obj53_WalkOff
000094C6 43F8 D000                  		lea	($FFFFD000).w,a1
000094CA 0829 0003 0022             		btst	#3,$22(a1)
000094D0 6700                       		beq.s	loc_842E
000094D2 4A28 0038                  		tst.b	$38(a0)
000094D6 6600                       		bne.s	locret_843A
000094D8 08A9 0003 0022             		bclr	#3,$22(a1)
000094DE 08A9 0005 0022             		bclr	#5,$22(a1)
000094E4 137C 0001 001D             		move.b	#1,$1D(a1)
000094EA                            
000094EA                            loc_842E:
000094EA 117C 0000 003A             		move.b	#0,$3A(a0)
000094F0 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
000094F6                            
000094F6                            locret_843A:
000094F6 4E75                       		rts	
000094F8                            ; ===========================================================================
000094F8                            
000094F8                            Obj53_TimeZero:				; XREF: Obj53_Display
000094F8 6100 0000                  		bsr.w	ObjectFall
000094FC 6100 0000                  		bsr.w	DisplaySprite
00009500 4A28 0001                  		tst.b	1(a0)
00009504 6A00                       		bpl.s	Obj53_Delete
00009506 4E75                       		rts	
00009508                            ; ===========================================================================
00009508                            
00009508                            Obj53_Delete:				; XREF: Obj53_Index
00009508 6100 0000                  		bsr.w	DeleteObject
0000950C 4E75                       		rts	
0000950E                            ; ===========================================================================
0000950E                            
0000950E                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
0000950E 117C 0000 003A             		move.b	#0,$3A(a0)
00009514                            
00009514                            loc_8458:				; XREF: Obj53_Touch
00009514 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
0000951A 0828 0000 0028             		btst	#0,$28(a0)
00009520 6700                       		beq.s	loc_846C
00009522 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
00009528                            
00009528                            loc_846C:
00009528 7207                       		moveq	#7,d1
0000952A 5228 001A                  		addq.b	#1,$1A(a0)
0000952E 6000                       		bra.s	loc_8486
00009530                            ; ===========================================================================
00009530                            
00009530                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
00009530 117C 0000 003A             		move.b	#0,$3A(a0)
00009536                            
00009536                            loc_847A:				; XREF: Obj1A_Touch
00009536 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
0000953C 7218                       		moveq	#$18,d1
0000953E 5428 001A                  		addq.b	#2,$1A(a0)
00009542                            
00009542                            loc_8486:				; XREF: Obj53_Collapse
00009542 7000                       		moveq	#0,d0
00009544 1028 001A                  		move.b	$1A(a0),d0
00009548 D040                       		add.w	d0,d0
0000954A 2668 0004                  		movea.l	4(a0),a3
0000954E D6F3 0000                  		adda.w	(a3,d0.w),a3
00009552 524B                       		addq.w	#1,a3
00009554 08E8 0005 0001             		bset	#5,1(a0)
0000955A 1828 0000                  		move.b	0(a0),d4
0000955E 1A28 0001                  		move.b	1(a0),d5
00009562 2248                       		movea.l	a0,a1
00009564 6000                       		bra.s	loc_84B2
00009566                            ; ===========================================================================
00009566                            
00009566                            loc_84AA:
00009566 6100 0000                  		bsr.w	SingleObjLoad
0000956A 6600                       		bne.s	loc_84F2
0000956C 5A4B                       		addq.w	#5,a3
0000956E                            
0000956E                            loc_84B2:
0000956E 137C 0006 0024             		move.b	#6,$24(a1)
00009574 1344 0000                  		move.b	d4,0(a1)
00009578 234B 0004                  		move.l	a3,4(a1)
0000957C 1345 0001                  		move.b	d5,1(a1)
00009580 3368 0008 0008             		move.w	8(a0),8(a1)
00009586 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000958C 3368 0002 0002             		move.w	2(a0),2(a1)
00009592 1368 0018 0018             		move.b	$18(a0),$18(a1)
00009598 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000959E 135C 0038                  		move.b	(a4)+,$38(a1)
000095A2 B3C8                       		cmpa.l	a0,a1
000095A4 6400                       		bcc.s	loc_84EE
000095A6 6100 0000                  		bsr.w	DisplaySprite2
000095AA                            
000095AA                            loc_84EE:
000095AA 51C9 FFBA                  		dbf	d1,loc_84AA
000095AE                            
000095AE                            loc_84F2:
000095AE 6100 0000                  		bsr.w	DisplaySprite
000095B2 303C 00B9                  		move.w	#$B9,d0
000095B6 4EF9 0000 132C             		jmp	(PlaySound_Special).l ;	play collapsing	sound
000095BC                            ; ===========================================================================
000095BC                            ; ---------------------------------------------------------------------------
000095BC                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
000095BC                            ; ---------------------------------------------------------------------------
000095BC 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
000095CC 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
000095D6 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
000095DE 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
000095E6                            
000095E6                            ; ---------------------------------------------------------------------------
000095E6                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
000095E6                            ; ---------------------------------------------------------------------------
000095E6                            
000095E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000095E6                            
000095E6                            
000095E6                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
000095E6 43F8 D000                  		lea	($FFFFD000).w,a1
000095EA 0829 0003 0022             		btst	#3,$22(a1)
000095F0 6700                       		beq.s	locret_856E
000095F2 3029 0008                  		move.w	8(a1),d0
000095F6 9068 0008                  		sub.w	8(a0),d0
000095FA D041                       		add.w	d1,d0
000095FC E248                       		lsr.w	#1,d0
000095FE 0828 0000 0001             		btst	#0,1(a0)
00009604 6700                       		beq.s	loc_854E
00009606 4640                       		not.w	d0
00009608 D041                       		add.w	d1,d0
0000960A                            
0000960A                            loc_854E:
0000960A 7200                       		moveq	#0,d1
0000960C 1232 0000                  		move.b	(a2,d0.w),d1
00009610 3028 000C                  		move.w	$C(a0),d0
00009614 9041                       		sub.w	d1,d0
00009616 7200                       		moveq	#0,d1
00009618 1229 0016                  		move.b	$16(a1),d1
0000961C 9041                       		sub.w	d1,d0
0000961E 3340 000C                  		move.w	d0,$C(a1)
00009622 9468 0008                  		sub.w	8(a0),d2
00009626 9569 0008                  		sub.w	d2,8(a1)
0000962A                            
0000962A                            locret_856E:
0000962A 4E75                       		rts	
0000962C                            ; End of function SlopeObject2
0000962C                            
0000962C                            ; ===========================================================================
0000962C                            ; ---------------------------------------------------------------------------
0000962C                            ; Collision data for GHZ collapsing ledge
0000962C                            ; ---------------------------------------------------------------------------
0000962C                            Obj1A_SlopeData:
0000962C                            		incbin	misc\ghzledge.bin
0000965C                            		even
0000965C                            
0000965C                            ; ---------------------------------------------------------------------------
0000965C                            ; Sprite mappings - GHZ	collapsing ledge
0000965C                            ; ---------------------------------------------------------------------------
0000965C                            Map_obj1A:
0000965C                            	include "_maps\obj1A.asm"
0000965C                            ; ---------------------------------------------------------------------------
0000965C                            ; Sprite mappings - GHZ	collapsing ledge
0000965C                            ; ---------------------------------------------------------------------------
0000965C 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
00009660 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
00009664 10                         byte_85A8:	dc.b $10
00009665 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
0000966A D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
0000966F E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00009674 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00009679 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000967E D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00009683 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00009688 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
0000968D F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009692 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00009697 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
0000969C 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
000096A1 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
000096A6 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
000096AB 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
000096B0 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
000096B5 10                         byte_85F9:	dc.b $10
000096B6 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
000096BB D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
000096C0 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
000096C5 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
000096CA D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
000096CF D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
000096D4 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
000096D9 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
000096DE F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
000096E3 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
000096E8 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
000096ED 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
000096F2 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
000096F7 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
000096FC 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00009701 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009706 19                         byte_864A:	dc.b $19
00009707 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
0000970C C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00009711 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00009716 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
0000971B E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00009720 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00009725 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
0000972A E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
0000972F D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009734 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00009739 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
0000973E F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00009743 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00009748 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
0000974D F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009752 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00009757 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
0000975C 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00009761 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009766 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
0000976B 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00009770 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00009775 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
0000977A 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
0000977F 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009784 19                         byte_86C8:	dc.b $19
00009785 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
0000978A C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
0000978F D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00009794 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00009799 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
0000979E E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
000097A3 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
000097A8 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
000097AD D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
000097B2 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
000097B7 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
000097BC F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
000097C1 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
000097C6 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
000097CB F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
000097D0 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
000097D5 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
000097DA 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
000097DF 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
000097E4 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
000097E9 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
000097EE 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
000097F3 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
000097F8 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
000097FD 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009802                            		even
00009802                            		even
00009802                            
00009802                            ; ---------------------------------------------------------------------------
00009802                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00009802                            ; ---------------------------------------------------------------------------
00009802                            Map_obj53:
00009802                            	include "_maps\obj53.asm"
00009802                            ; ---------------------------------------------------------------------------
00009802                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00009802                            ; ---------------------------------------------------------------------------
00009802 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
00009806 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
0000980A 04                         byte_874E:	dc.b 4
0000980B F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
00009810 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
00009815 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
0000981A 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
0000981F 08                         byte_8763:	dc.b 8
00009820 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00009825 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
0000982A F805 0000 00               		dc.b $F8, 5, 0,	0, 0
0000982F F805 0000 10               		dc.b $F8, 5, 0,	0, $10
00009834 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
00009839 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
0000983E 0805 0000 00               		dc.b 8,	5, 0, 0, 0
00009843 0805 0000 10               		dc.b 8,	5, 0, 0, $10
00009848 04                         byte_878C:	dc.b 4
00009849 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
0000984E 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
00009853 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00009858 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
0000985D 08                         byte_87A1:	dc.b 8
0000985E F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00009863 F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
00009868 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
0000986D F805 0004 10               		dc.b $F8, 5, 0,	4, $10
00009872 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
00009877 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
0000987C 0805 0008 00               		dc.b 8,	5, 0, 8, 0
00009881 0805 000C 10               		dc.b 8,	5, 0, $C, $10
00009886                            		even
00009886                            		even
00009886                            
00009886                            ; ===========================================================================
00009886                            ; ---------------------------------------------------------------------------
00009886                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
00009886                            ; ---------------------------------------------------------------------------
00009886                            
00009886                            Obj1C:					; XREF: Obj_Index
00009886 7000                       		moveq	#0,d0
00009888 1028 0024                  		move.b	$24(a0),d0
0000988C 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
00009890 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
00009894                            ; ===========================================================================
00009894 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
00009896 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
00009898                            ; ===========================================================================
00009898                            
00009898                            Obj1C_Main:				; XREF: Obj1C_Index
00009898 5428 0024                  		addq.b	#2,$24(a0)
0000989C 7000                       		moveq	#0,d0
0000989E 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
000098A2 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
000098A6 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
000098AA 2159 0004                  		move.l	(a1)+,4(a0)
000098AE 3159 0002                  		move.w	(a1)+,2(a0)
000098B2 0028 0004 0001             		ori.b	#4,1(a0)
000098B8 1159 001A                  		move.b	(a1)+,$1A(a0)
000098BC 1159 0019                  		move.b	(a1)+,$19(a0)
000098C0 1159 0018                  		move.b	(a1)+,$18(a0)
000098C4 1159 0020                  		move.b	(a1)+,$20(a0)
000098C8                            
000098C8                            Obj1C_ChkDel:				; XREF: Obj1C_Index
000098C8 3028 0008                  		move.w	8(a0),d0
000098CC 0240 FF80                  		andi.w	#$FF80,d0
000098D0 3238 F700                  		move.w	($FFFFF700).w,d1
000098D4 0441 0080                  		subi.w	#$80,d1
000098D8 0241 FF80                  		andi.w	#$FF80,d1
000098DC 9041                       		sub.w	d1,d0
000098DE 0C40 0280                  		cmpi.w	#$280,d0
000098E2 6200 0000                  		bhi.w	DeleteObject
000098E6 6000 0000                  		bra.w	DisplaySprite
000098EA                            ; ===========================================================================
000098EA                            ; ---------------------------------------------------------------------------
000098EA                            ; Variables for	object $1C are stored in an array
000098EA                            ; ---------------------------------------------------------------------------
000098EA 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
000098EE 44D8                       		dc.w $44D8		; VRAM setting
000098F0 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
000098F4 0000 0000                  		dc.l Map_obj1C
000098F8 44D8                       		dc.w $44D8
000098FA 0008 0200                  		dc.b 0,	8, 2, 0
000098FE 0000 0000                  		dc.l Map_obj1C
00009902 44D8                       		dc.w $44D8
00009904 0008 0200                  		dc.b 0,	8, 2, 0
00009908 0000 89F0                  		dc.l Map_obj11
0000990C 438E                       		dc.w $438E
0000990E 0110 0100                  		dc.b 1,	$10, 1,	0
00009912                            ; ---------------------------------------------------------------------------
00009912                            ; Sprite mappings - SLZ	lava thrower
00009912                            ; ---------------------------------------------------------------------------
00009912                            Map_obj1C:
00009912                            	include "_maps\obj1C.asm"
00009912                            ; ---------------------------------------------------------------------------
00009912                            ; Sprite mappings - SLZ	lava thrower
00009912                            ; ---------------------------------------------------------------------------
00009912 0000                       		dc.w byte_8858-Map_obj1C
00009914 01                         byte_8858:	dc.b 1
00009915 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000991A                            		even
0000991A                            		even
0000991A                            
0000991A                            ; ===========================================================================
0000991A                            ; ---------------------------------------------------------------------------
0000991A                            ; Object 1D - switch that activates when Sonic touches it
0000991A                            ; (this	is not used anywhere in	the game)
0000991A                            ; ---------------------------------------------------------------------------
0000991A                            
0000991A                            Obj1D:					; XREF: Obj_Index
0000991A 7000                       		moveq	#0,d0
0000991C 1028 0024                  		move.b	$24(a0),d0
00009920 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
00009924 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
00009928                            ; ===========================================================================
00009928 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
0000992A 0000                       		dc.w Obj1D_Action-Obj1D_Index
0000992C 0000                       		dc.w Obj1D_Delete-Obj1D_Index
0000992E                            ; ===========================================================================
0000992E                            
0000992E                            Obj1D_Main:				; XREF: Obj1D_Index
0000992E 5428 0024                  		addq.b	#2,$24(a0)
00009932 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
0000993A 317C 4000 0002             		move.w	#$4000,2(a0)
00009940 117C 0004 0001             		move.b	#4,1(a0)
00009946 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
0000994C 117C 0010 0019             		move.b	#$10,$19(a0)
00009952 117C 0005 0018             		move.b	#5,$18(a0)
00009958                            
00009958                            Obj1D_Action:				; XREF: Obj1D_Index
00009958 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
0000995E 323C 0010                  		move.w	#$10,d1
00009962 6100 0000                  		bsr.w	Obj1D_ChkTouch
00009966 6700                       		beq.s	Obj1D_ChkDel
00009968 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
0000996C 7001                       		moveq	#1,d0
0000996E 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
00009972                            
00009972                            Obj1D_ChkDel:
00009972 6100 0000                  		bsr.w	DisplaySprite
00009976 3028 0008                  		move.w	8(a0),d0
0000997A 0240 FF80                  		andi.w	#$FF80,d0
0000997E 3238 F700                  		move.w	($FFFFF700).w,d1
00009982 0441 0080                  		subi.w	#$80,d1
00009986 0241 FF80                  		andi.w	#$FF80,d1
0000998A 9041                       		sub.w	d1,d0
0000998C 0C40 0280                  		cmpi.w	#$280,d0
00009990 6200 0000                  		bhi.w	Obj1D_Delete
00009994 4E75                       		rts	
00009996                            ; ===========================================================================
00009996                            
00009996                            Obj1D_Delete:				; XREF: Obj1D_Index
00009996 6100 0000                  		bsr.w	DeleteObject
0000999A 4E75                       		rts	
0000999C                            ; ---------------------------------------------------------------------------
0000999C                            ; Subroutine to	check if Sonic touches the object
0000999C                            ; ---------------------------------------------------------------------------
0000999C                            
0000999C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000999C                            
0000999C                            
0000999C                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
0000999C 43F8 D000                  		lea	($FFFFD000).w,a1
000099A0 3029 0008                  		move.w	8(a1),d0
000099A4 9068 0008                  		sub.w	8(a0),d0
000099A8 D041                       		add.w	d1,d0
000099AA 6B00                       		bmi.s	loc_8918
000099AC D241                       		add.w	d1,d1
000099AE B041                       		cmp.w	d1,d0
000099B0 6400                       		bcc.s	loc_8918
000099B2 3429 000C                  		move.w	$C(a1),d2
000099B6 1229 0016                  		move.b	$16(a1),d1
000099BA 4881                       		ext.w	d1
000099BC D242                       		add.w	d2,d1
000099BE 3028 000C                  		move.w	$C(a0),d0
000099C2 0440 0010                  		subi.w	#$10,d0
000099C6 9041                       		sub.w	d1,d0
000099C8 6200                       		bhi.s	loc_8918
000099CA 0C40 FFF0                  		cmpi.w	#-$10,d0
000099CE 6500                       		bcs.s	loc_8918
000099D0 70FF                       		moveq	#-1,d0
000099D2 4E75                       		rts	
000099D4                            ; ===========================================================================
000099D4                            
000099D4                            loc_8918:
000099D4 7000                       		moveq	#0,d0
000099D6 4E75                       		rts	
000099D8                            ; End of function Obj1D_ChkTouch
000099D8                            
000099D8                            ; ===========================================================================
000099D8                            ; ---------------------------------------------------------------------------
000099D8                            ; Sprite mappings - object 1D
000099D8                            ; ---------------------------------------------------------------------------
000099D8                            Map_obj1D:
000099D8                            	include "_maps\obj1D.asm"
000099D8                            ; ---------------------------------------------------------------------------
000099D8                            ; Sprite mappings - object 1D
000099D8                            ; ---------------------------------------------------------------------------
000099D8 0000                       		dc.w byte_891E-Map_obj1D
000099DA 04                         byte_891E:	dc.b 4
000099DB E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
000099E0 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
000099E5 E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
000099EA 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
000099F0 00                         		even
000099F0 00                         		even
000099F0                            
000099F0                            ; ===========================================================================
000099F0                            ; ---------------------------------------------------------------------------
000099F0                            ; Object 2A - doors (SBZ)
000099F0                            ; ---------------------------------------------------------------------------
000099F0                            
000099F0                            Obj2A:					; XREF: Obj_Index
000099F0 7000                       		moveq	#0,d0
000099F2 1028 0024                  		move.b	$24(a0),d0
000099F6 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
000099FA 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
000099FE                            ; ===========================================================================
000099FE 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
00009A00 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
00009A02                            ; ===========================================================================
00009A02                            
00009A02                            Obj2A_Main:				; XREF: Obj2A_Index
00009A02 5428 0024                  		addq.b	#2,$24(a0)
00009A06 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
00009A0E 317C 42E8 0002             		move.w	#$42E8,2(a0)
00009A14 0028 0004 0001             		ori.b	#4,1(a0)
00009A1A 117C 0008 0019             		move.b	#8,$19(a0)
00009A20 117C 0004 0018             		move.b	#4,$18(a0)
00009A26                            
00009A26                            Obj2A_OpenShut:				; XREF: Obj2A_Index
00009A26 323C 0040                  		move.w	#$40,d1
00009A2A 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
00009A2E 3038 D008                  		move.w	($FFFFD008).w,d0
00009A32 D041                       		add.w	d1,d0
00009A34 B068 0008                  		cmp.w	8(a0),d0
00009A38 6500                       		bcs.s	Obj2A_Animate
00009A3A 9041                       		sub.w	d1,d0
00009A3C 9041                       		sub.w	d1,d0
00009A3E B068 0008                  		cmp.w	8(a0),d0
00009A42 6400                       		bcc.s	Obj2A_Animate
00009A44 D041                       		add.w	d1,d0
00009A46 B068 0008                  		cmp.w	8(a0),d0
00009A4A 6400                       		bcc.s	loc_899A
00009A4C 0828 0000 0022             		btst	#0,$22(a0)
00009A52 6600                       		bne.s	Obj2A_Animate
00009A54 6000                       		bra.s	Obj2A_Open
00009A56                            ; ===========================================================================
00009A56                            
00009A56                            loc_899A:				; XREF: Obj2A_OpenShut
00009A56 0828 0000 0022             		btst	#0,$22(a0)
00009A5C 6700                       		beq.s	Obj2A_Animate
00009A5E                            
00009A5E                            Obj2A_Open:				; XREF: Obj2A_OpenShut
00009A5E 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
00009A64                            
00009A64                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
00009A64 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
00009A6A 6100 0000                  		bsr.w	AnimateSprite
00009A6E 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00009A72 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
00009A74 323C 0011                  		move.w	#$11,d1
00009A78 343C 0020                  		move.w	#$20,d2
00009A7C 3602                       		move.w	d2,d3
00009A7E 5243                       		addq.w	#1,d3
00009A80 3828 0008                  		move.w	8(a0),d4
00009A84 6100 0000                  		bsr.w	SolidObject
00009A88                            
00009A88                            Obj2A_MarkAsUsed:
00009A88 6000 0000                  		bra.w	MarkObjGone
00009A8C                            ; ===========================================================================
00009A8C                            Ani_obj2A:
00009A8C                            	include "_anim\obj2A.asm"
00009A8C                            ; ---------------------------------------------------------------------------
00009A8C                            ; Animation script - doors (SBZ)
00009A8C                            ; ---------------------------------------------------------------------------
00009A8C 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
00009A8E 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
00009A90 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
00009A9C 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
00009AA8                            		even
00009AA8                            		even
00009AA8                            
00009AA8                            ; ---------------------------------------------------------------------------
00009AA8                            ; Sprite mappings - doors (SBZ)
00009AA8                            ; ---------------------------------------------------------------------------
00009AA8                            Map_obj2A:
00009AA8                            	include "_maps\obj2A.asm"
00009AA8                            ; ---------------------------------------------------------------------------
00009AA8                            ; Sprite mappings - doors (SBZ)
00009AA8                            ; ---------------------------------------------------------------------------
00009AA8 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
00009AAC 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
00009AB0 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
00009AB4 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
00009AB8 0000                       		dc.w byte_8A56-Map_obj2A
00009ABA 02                         byte_89FE:	dc.b 2
00009ABB E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
00009AC0 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
00009AC5 02                         byte_8A09:	dc.b 2
00009AC6 DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
00009ACB 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
00009AD0 02                         byte_8A14:	dc.b 2
00009AD1 D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
00009AD6 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
00009ADB 02                         byte_8A1F:	dc.b 2
00009ADC D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
00009AE1 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
00009AE6 02                         byte_8A2A:	dc.b 2
00009AE7 D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
00009AEC 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
00009AF1 02                         byte_8A35:	dc.b 2
00009AF2 CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
00009AF7 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
00009AFC 02                         byte_8A40:	dc.b 2
00009AFD C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
00009B02 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
00009B07 02                         byte_8A4B:	dc.b 2
00009B08 C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
00009B0D 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
00009B12 02                         byte_8A56:	dc.b 2
00009B13 C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
00009B18 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
00009B1E 00                         		even
00009B1E 00                         		even
00009B1E                            
00009B1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009B1E                            
00009B1E                            
00009B1E                            Obj44_SolidWall:			; XREF: Obj44_Solid
00009B1E 6100 0000                  		bsr.w	Obj44_SolidWall2
00009B22 6700                       		beq.s	loc_8AA8
00009B24 6B00 0000                  		bmi.w	loc_8AC4
00009B28 4A40                       		tst.w	d0
00009B2A 6700 0000                  		beq.w	loc_8A92
00009B2E 6B00                       		bmi.s	loc_8A7C
00009B30 4A69 0010                  		tst.w	$10(a1)
00009B34 6B00                       		bmi.s	loc_8A92
00009B36 6000                       		bra.s	loc_8A82
00009B38                            ; ===========================================================================
00009B38                            
00009B38                            loc_8A7C:
00009B38 4A69 0010                  		tst.w	$10(a1)
00009B3C 6A00                       		bpl.s	loc_8A92
00009B3E                            
00009B3E                            loc_8A82:
00009B3E 9169 0008                  		sub.w	d0,8(a1)
00009B42 337C 0000 0014             		move.w	#0,$14(a1)
00009B48 337C 0000 0010             		move.w	#0,$10(a1)
00009B4E                            
00009B4E                            loc_8A92:
00009B4E 0829 0001 0022             		btst	#1,$22(a1)
00009B54 6600                       		bne.s	loc_8AB6
00009B56 08E9 0005 0022             		bset	#5,$22(a1)
00009B5C 08E8 0005 0022             		bset	#5,$22(a0)
00009B62 4E75                       		rts	
00009B64                            ; ===========================================================================
00009B64                            
00009B64                            loc_8AA8:
00009B64 0828 0005 0022             		btst	#5,$22(a0)
00009B6A 6700                       		beq.s	locret_8AC2
00009B6C 337C 0001 001C             		move.w	#1,$1C(a1)
00009B72                            
00009B72                            loc_8AB6:
00009B72 08A8 0005 0022             		bclr	#5,$22(a0)
00009B78 08A9 0005 0022             		bclr	#5,$22(a1)
00009B7E                            
00009B7E                            locret_8AC2:
00009B7E 4E75                       		rts	
00009B80                            ; ===========================================================================
00009B80                            
00009B80                            loc_8AC4:
00009B80 4A69 0012                  		tst.w	$12(a1)
00009B84 6A00                       		bpl.s	locret_8AD8
00009B86 4A43                       		tst.w	d3
00009B88 6A00                       		bpl.s	locret_8AD8
00009B8A 9769 000C                  		sub.w	d3,$C(a1)
00009B8E 337C 0000 0012             		move.w	#0,$12(a1)
00009B94                            
00009B94                            locret_8AD8:
00009B94 4E75                       		rts	
00009B96                            ; End of function Obj44_SolidWall
00009B96                            
00009B96                            
00009B96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009B96                            
00009B96                            
00009B96                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
00009B96 43F8 D000                  		lea	($FFFFD000).w,a1
00009B9A 3029 0008                  		move.w	8(a1),d0
00009B9E 9068 0008                  		sub.w	8(a0),d0
00009BA2 D041                       		add.w	d1,d0
00009BA4 6B00                       		bmi.s	loc_8B48
00009BA6 3601                       		move.w	d1,d3
00009BA8 D643                       		add.w	d3,d3
00009BAA B043                       		cmp.w	d3,d0
00009BAC 6200                       		bhi.s	loc_8B48
00009BAE 1629 0016                  		move.b	$16(a1),d3
00009BB2 4883                       		ext.w	d3
00009BB4 D443                       		add.w	d3,d2
00009BB6 3629 000C                  		move.w	$C(a1),d3
00009BBA 9668 000C                  		sub.w	$C(a0),d3
00009BBE D642                       		add.w	d2,d3
00009BC0 6B00                       		bmi.s	loc_8B48
00009BC2 3802                       		move.w	d2,d4
00009BC4 D844                       		add.w	d4,d4
00009BC6 B644                       		cmp.w	d4,d3
00009BC8 6400                       		bcc.s	loc_8B48
00009BCA 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00009BCE 6B00                       		bmi.s	loc_8B48
00009BD0 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00009BD6 6400                       		bcc.s	loc_8B48
00009BD8 4A78 FE08                  		tst.w	($FFFFFE08).w
00009BDC 6600                       		bne.s	loc_8B48
00009BDE 3A00                       		move.w	d0,d5
00009BE0 B240                       		cmp.w	d0,d1
00009BE2 6400                       		bcc.s	loc_8B30
00009BE4 D241                       		add.w	d1,d1
00009BE6 9041                       		sub.w	d1,d0
00009BE8 3A00                       		move.w	d0,d5
00009BEA 4445                       		neg.w	d5
00009BEC                            
00009BEC                            loc_8B30:
00009BEC 3203                       		move.w	d3,d1
00009BEE B443                       		cmp.w	d3,d2
00009BF0 6400                       		bcc.s	loc_8B3C
00009BF2 9644                       		sub.w	d4,d3
00009BF4 3203                       		move.w	d3,d1
00009BF6 4441                       		neg.w	d1
00009BF8                            
00009BF8                            loc_8B3C:
00009BF8 BA41                       		cmp.w	d1,d5
00009BFA 6200                       		bhi.s	loc_8B44
00009BFC 7801                       		moveq	#1,d4
00009BFE 4E75                       		rts	
00009C00                            ; ===========================================================================
00009C00                            
00009C00                            loc_8B44:
00009C00 78FF                       		moveq	#-1,d4
00009C02 4E75                       		rts	
00009C04                            ; ===========================================================================
00009C04                            
00009C04                            loc_8B48:
00009C04 7800                       		moveq	#0,d4
00009C06 4E75                       		rts	
00009C08                            ; End of function Obj44_SolidWall2
00009C08                            
00009C08                            ; ===========================================================================
00009C08                            ; ---------------------------------------------------------------------------
00009C08                            ; Object 1E - Ball Hog enemy (SBZ)
00009C08                            ; ---------------------------------------------------------------------------
00009C08                            
00009C08                            Obj1E:					; XREF: Obj_Index
00009C08 7000                       		moveq	#0,d0
00009C0A 1028 0024                  		move.b	$24(a0),d0
00009C0E 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
00009C12 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
00009C16                            ; ===========================================================================
00009C16 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
00009C18 0000                       		dc.w Obj1E_Action-Obj1E_Index
00009C1A                            ; ===========================================================================
00009C1A                            
00009C1A                            Obj1E_Main:				; XREF: Obj1E_Index
00009C1A 117C 0013 0016             		move.b	#$13,$16(a0)
00009C20 117C 0008 0017             		move.b	#8,$17(a0)
00009C26 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00009C2E 317C 2302 0002             		move.w	#$2302,2(a0)
00009C34 117C 0004 0001             		move.b	#4,1(a0)
00009C3A 117C 0004 0018             		move.b	#4,$18(a0)
00009C40 117C 0005 0020             		move.b	#5,$20(a0)
00009C46 117C 000C 0019             		move.b	#$C,$19(a0)
00009C4C 6100 0000                  		bsr.w	ObjectFall
00009C50 4EB9 0000 0000             		jsr	ObjHitFloor
00009C56 4A41                       		tst.w	d1
00009C58 6A00                       		bpl.s	locret_8BAC
00009C5A D368 000C                  		add.w	d1,$C(a0)
00009C5E 317C 0000 0012             		move.w	#0,$12(a0)
00009C64 5428 0024                  		addq.b	#2,$24(a0)
00009C68                            
00009C68                            locret_8BAC:
00009C68 4E75                       		rts	
00009C6A                            ; ===========================================================================
00009C6A                            
00009C6A                            Obj1E_Action:				; XREF: Obj1E_Index
00009C6A 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
00009C70 6100 0000                  		bsr.w	AnimateSprite
00009C74 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
00009C7A 6600                       		bne.s	Obj1E_SetBall	; if not, branch
00009C7C 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
00009C80 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
00009C82 6000                       		bra.s	Obj1E_MarkAsGone
00009C84                            ; ===========================================================================
00009C84                            
00009C84                            Obj1E_SetBall:				; XREF: Obj1E_Action
00009C84 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
00009C88                            
00009C88                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
00009C88 6000 0000                  		bra.w	MarkObjGone
00009C8C                            ; ===========================================================================
00009C8C                            
00009C8C                            Obj1E_MakeBall:				; XREF: Obj1E_Action
00009C8C 117C 0001 0032             		move.b	#1,$32(a0)
00009C92 6100 0000                  		bsr.w	SingleObjLoad
00009C96 6600                       		bne.s	loc_8C1A
00009C98 137C 0020 0000             		move.b	#$20,0(a1)	; load cannonball object ($20)
00009C9E 3368 0008 0008             		move.w	8(a0),8(a1)
00009CA4 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009CAA 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
00009CB0 337C 0000 0012             		move.w	#0,$12(a1)
00009CB6 70FC                       		moveq	#-4,d0
00009CB8 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
00009CBE 6700                       		beq.s	loc_8C0A	; if not, branch
00009CC0 4440                       		neg.w	d0
00009CC2 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
00009CC6                            
00009CC6                            loc_8C0A:
00009CC6 D169 0008                  		add.w	d0,8(a1)
00009CCA 0669 000C 000C             		addi.w	#$C,$C(a1)
00009CD0 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
00009CD6                            
00009CD6                            loc_8C1A:
00009CD6 60B0                       		bra.s	Obj1E_MarkAsGone
00009CD8                            ; ===========================================================================
00009CD8                            ; ---------------------------------------------------------------------------
00009CD8                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
00009CD8                            ; ---------------------------------------------------------------------------
00009CD8                            
00009CD8                            Obj20:					; XREF: Obj_Index
00009CD8 7000                       		moveq	#0,d0
00009CDA 1028 0024                  		move.b	$24(a0),d0
00009CDE 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
00009CE2 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
00009CE6                            ; ===========================================================================
00009CE6 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
00009CE8 0000                       		dc.w Obj20_Bounce-Obj20_Index
00009CEA                            ; ===========================================================================
00009CEA                            
00009CEA                            Obj20_Main:				; XREF: Obj20_Index
00009CEA 5428 0024                  		addq.b	#2,$24(a0)
00009CEE 117C 0007 0016             		move.b	#7,$16(a0)
00009CF4 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00009CFC 317C 2302 0002             		move.w	#$2302,2(a0)
00009D02 117C 0004 0001             		move.b	#4,1(a0)
00009D08 117C 0003 0018             		move.b	#3,$18(a0)
00009D0E 117C 0087 0020             		move.b	#$87,$20(a0)
00009D14 117C 0008 0019             		move.b	#8,$19(a0)
00009D1A 7000                       		moveq	#0,d0
00009D1C 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00009D20 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
00009D24 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
00009D28 117C 0004 001A             		move.b	#4,$1A(a0)
00009D2E                            
00009D2E                            Obj20_Bounce:				; XREF: Obj20_Index
00009D2E 4EB9 0000 0000             		jsr	ObjectFall
00009D34 4A68 0012                  		tst.w	$12(a0)
00009D38 6B00                       		bmi.s	Obj20_ChkExplode
00009D3A 4EB9 0000 0000             		jsr	ObjHitFloor
00009D40 4A41                       		tst.w	d1
00009D42 6A00                       		bpl.s	Obj20_ChkExplode
00009D44 D368 000C                  		add.w	d1,$C(a0)
00009D48 317C FD00 0012             		move.w	#-$300,$12(a0)
00009D4E 4A03                       		tst.b	d3
00009D50 6700                       		beq.s	Obj20_ChkExplode
00009D52 6B00                       		bmi.s	loc_8CA4
00009D54 4A68 0010                  		tst.w	$10(a0)
00009D58 6A00                       		bpl.s	Obj20_ChkExplode
00009D5A 4468 0010                  		neg.w	$10(a0)
00009D5E 6000                       		bra.s	Obj20_ChkExplode
00009D60                            ; ===========================================================================
00009D60                            
00009D60                            loc_8CA4:				; XREF: Obj20_Bounce
00009D60 4A68 0010                  		tst.w	$10(a0)
00009D64 6B00                       		bmi.s	Obj20_ChkExplode
00009D66 4468 0010                  		neg.w	$10(a0)
00009D6A                            
00009D6A                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
00009D6A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
00009D6E 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
00009D70 117C 0024 0000             		move.b	#$24,0(a0)
00009D76 117C 003F 0000             		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
00009D7C 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
00009D82 6000 0000                  		bra.w	Obj3F		; jump to explosion code
00009D86                            ; ===========================================================================
00009D86                            
00009D86                            Obj20_Animate:				; XREF: Obj20_ChkExplode
00009D86 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009D8A 6A00                       		bpl.s	Obj20_Display
00009D8C 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
00009D92 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00009D98                            
00009D98                            Obj20_Display:
00009D98 6100 0000                  		bsr.w	DisplaySprite
00009D9C 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009DA0 0640 00E0                  		addi.w	#$E0,d0
00009DA4 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
00009DA8 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
00009DAC 4E75                       		rts	
00009DAE                            ; ===========================================================================
00009DAE                            ; ---------------------------------------------------------------------------
00009DAE                            ; Object 24 - explosion	from a destroyed monitor
00009DAE                            ; ---------------------------------------------------------------------------
00009DAE                            
00009DAE                            Obj24:					; XREF: Obj_Index
00009DAE 7000                       		moveq	#0,d0
00009DB0 1028 0024                  		move.b	$24(a0),d0
00009DB4 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
00009DB8 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
00009DBC                            ; ===========================================================================
00009DBC 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
00009DBE 0000                       		dc.w Obj24_Animate-Obj24_Index
00009DC0                            ; ===========================================================================
00009DC0                            
00009DC0                            Obj24_Main:				; XREF: Obj24_Index
00009DC0 5428 0024                  		addq.b	#2,$24(a0)
00009DC4 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
00009DCC 317C 041C 0002             		move.w	#$41C,2(a0)
00009DD2 117C 0004 0001             		move.b	#4,1(a0)
00009DD8 117C 0001 0018             		move.b	#1,$18(a0)
00009DDE 117C 0000 0020             		move.b	#0,$20(a0)
00009DE4 117C 000C 0019             		move.b	#$C,$19(a0)
00009DEA 117C 0009 001E             		move.b	#9,$1E(a0)
00009DF0 117C 0000 001A             		move.b	#0,$1A(a0)
00009DF6 303C 00A5                  		move.w	#$A5,d0
00009DFA 4EB9 0000 132C             		jsr	(PlaySound_Special).l ;	play explosion sound
00009E00                            
00009E00                            Obj24_Animate:				; XREF: Obj24_Index
00009E00 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009E04 6A00                       		bpl.s	Obj24_Display
00009E06 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
00009E0C 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00009E10 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
00009E16 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00009E1A                            
00009E1A                            Obj24_Display:
00009E1A 6000 0000                  		bra.w	DisplaySprite
00009E1E                            ; ===========================================================================
00009E1E                            ; ---------------------------------------------------------------------------
00009E1E                            ; Object 27 - explosion	from a destroyed enemy
00009E1E                            ; ---------------------------------------------------------------------------
00009E1E                            
00009E1E                            Obj27:					; XREF: Obj_Index
00009E1E 7000                       		moveq	#0,d0
00009E20 1028 0024                  		move.b	$24(a0),d0
00009E24 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
00009E28 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
00009E2C                            ; ===========================================================================
00009E2C 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
00009E2E 0000                       		dc.w Obj27_Main-Obj27_Index
00009E30 0000                       		dc.w Obj27_Animate-Obj27_Index
00009E32                            ; ===========================================================================
00009E32                            
00009E32                            Obj27_LoadAnimal:			; XREF: Obj27_Index
00009E32 5428 0024                  		addq.b	#2,$24(a0)
00009E36 6100 0000                  		bsr.w	SingleObjLoad
00009E3A 6600                       		bne.s	Obj27_Main
00009E3C 137C 0028 0000             		move.b	#$28,0(a1)	; load animal object
00009E42 3368 0008 0008             		move.w	8(a0),8(a1)
00009E48 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009E4E 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
00009E54                            
00009E54                            Obj27_Main:				; XREF: Obj27_Index
00009E54 5428 0024                  		addq.b	#2,$24(a0)
00009E58 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
00009E60 317C 05A0 0002             		move.w	#$5A0,2(a0)
00009E66 117C 0004 0001             		move.b	#4,1(a0)
00009E6C 117C 0001 0018             		move.b	#1,$18(a0)
00009E72 117C 0000 0020             		move.b	#0,$20(a0)
00009E78 117C 000C 0019             		move.b	#$C,$19(a0)
00009E7E 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
00009E84 117C 0000 001A             		move.b	#0,$1A(a0)
00009E8A 303C 00C1                  		move.w	#$C1,d0
00009E8E 4EB9 0000 132C             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
00009E94                            
00009E94                            Obj27_Animate:				; XREF: Obj27_Index
00009E94 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009E98 6A00                       		bpl.s	Obj27_Display
00009E9A 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
00009EA0 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00009EA4 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
00009EAA 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00009EAE                            
00009EAE                            Obj27_Display:
00009EAE 6000 0000                  		bra.w	DisplaySprite
00009EB2                            ; ===========================================================================
00009EB2                            ; ---------------------------------------------------------------------------
00009EB2                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
00009EB2                            ; ---------------------------------------------------------------------------
00009EB2                            
00009EB2                            Obj3F:					; XREF: Obj_Index
00009EB2 7000                       		moveq	#0,d0
00009EB4 1028 0024                  		move.b	$24(a0),d0
00009EB8 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
00009EBC 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
00009EC0                            ; ===========================================================================
00009EC0 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
00009EC2 FFD4                       		dc.w Obj27_Animate-Obj3F_Index
00009EC4                            ; ===========================================================================
00009EC4                            
00009EC4                            Obj3F_Main:				; XREF: Obj3F_Index
00009EC4 5428 0024                  		addq.b	#2,$24(a0)
00009EC8 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
00009ED0 317C 05A0 0002             		move.w	#$5A0,2(a0)
00009ED6 117C 0004 0001             		move.b	#4,1(a0)
00009EDC 117C 0001 0018             		move.b	#1,$18(a0)
00009EE2 117C 0000 0020             		move.b	#0,$20(a0)
00009EE8 117C 000C 0019             		move.b	#$C,$19(a0)
00009EEE 117C 0007 001E             		move.b	#7,$1E(a0)
00009EF4 117C 0000 001A             		move.b	#0,$1A(a0)
00009EFA 303C 00C4                  		move.w	#$C4,d0
00009EFE 4EF9 0000 132C             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
00009F04                            ; ===========================================================================
00009F04                            Ani_obj1E:
00009F04                            	include "_anim\obj1E.asm"
00009F04                            ; ---------------------------------------------------------------------------
00009F04                            ; Animation script - doors (SBZ)
00009F04                            ; ---------------------------------------------------------------------------
00009F04 0000                       		dc.w byte_8E4A-Ani_obj1E
00009F06 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
00009F1E 00                         		even
00009F1E 00                         		even
00009F1E                            
00009F1E                            ; ---------------------------------------------------------------------------
00009F1E                            ; Sprite mappings - Ball Hog enemy (SBZ)
00009F1E                            ; ---------------------------------------------------------------------------
00009F1E                            Map_obj1E:
00009F1E                            	include "_maps\obj1E.asm"
00009F1E                            ; ---------------------------------------------------------------------------
00009F1E                            ; Sprite mappings - Ball Hog enemy (SBZ)
00009F1E                            ; ---------------------------------------------------------------------------
00009F1E 0000 0000                  		dc.w byte_8E6E-Map_obj1E, byte_8E79-Map_obj1E
00009F22 0000 0000                  		dc.w byte_8E84-Map_obj1E, byte_8E8F-Map_obj1E
00009F26 0000 0000                  		dc.w byte_8E9A-Map_obj1E, byte_8EA0-Map_obj1E
00009F2A 02                         byte_8E6E:	dc.b 2
00009F2B EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
00009F30 FF0A 0006 F4               		dc.b $FF, $A, 0, 6, $F4
00009F35 02                         byte_8E79:	dc.b 2
00009F36 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
00009F3B FF0A 000F F4               		dc.b $FF, $A, 0, $F, $F4
00009F40 02                         byte_8E84:	dc.b 2
00009F41 F409 0000 F4               		dc.b $F4, 9, 0,	0, $F4
00009F46 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
00009F4B 02                         byte_8E8F:	dc.b 2
00009F4C E409 0000 F4               		dc.b $E4, 9, 0,	0, $F4
00009F51 F40A 001E F4               		dc.b $F4, $A, 0, $1E, $F4
00009F56 01                         byte_8E9A:	dc.b 1
00009F57 F805 0027 F8               		dc.b $F8, 5, 0,	$27, $F8
00009F5C 01                         byte_8EA0:	dc.b 1
00009F5D F805 002B F8               		dc.b $F8, 5, 0,	$2B, $F8
00009F62                            		even
00009F62                            		even
00009F62                            
00009F62                            ; ---------------------------------------------------------------------------
00009F62                            ; Sprite mappings - explosion
00009F62                            ; ---------------------------------------------------------------------------
00009F62                            Map_obj24:
00009F62                            	include "_maps\obj24.asm"
00009F62                            ; ---------------------------------------------------------------------------
00009F62                            ; Sprite mappings - explosion
00009F62                            ; ---------------------------------------------------------------------------
00009F62 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
00009F66 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
00009F6A 01                         byte_8EAE:	dc.b 1
00009F6B F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00009F70 01                         byte_8EB4:	dc.b 1
00009F71 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00009F76 01                         byte_8EBA:	dc.b 1
00009F77 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00009F7C 01                         byte_8EC0:	dc.b 1
00009F7D F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
00009F82                            		even
00009F82                            		even
00009F82                            
00009F82                            ; ---------------------------------------------------------------------------
00009F82                            ; Sprite mappings - explosion
00009F82                            ; ---------------------------------------------------------------------------
00009F82                            Map_obj27:	
00009F82                            	include "_maps\explode.asm"
00009F82 0000 0000                  		dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
00009F86 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
00009F8A 0000                       		dc.w byte_8EF7-Map_obj27
00009F8C 01                         byte_8ED0:	dc.b 1
00009F8D F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
00009F92 01                         byte_8ED6:	dc.b 1
00009F93 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
00009F98 01                         byte_8EDC:	dc.b 1
00009F99 F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
00009F9E 04                         byte_8EE2:	dc.b 4
00009F9F EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
00009FA4 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
00009FA9 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
00009FAE FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
00009FB3 04                         byte_8EF7:	dc.b 4
00009FB4 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
00009FB9 EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
00009FBE 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
00009FC3 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
00009FC8                            		even
00009FC8                            		even
00009FC8                            ; ---------------------------------------------------------------------------
00009FC8                            ; Sprite mappings - explosion from when	a boss is destroyed
00009FC8                            ; ---------------------------------------------------------------------------
00009FC8                            Map_obj3F:	
00009FC8                            	include "_maps\bossexplode.asm"
00009FC8 FFC4                       		dc.w byte_8ED0-Map_obj3F
00009FCA 0000                       		dc.w byte_8F16-Map_obj3F
00009FCC 0000                       		dc.w byte_8F1C-Map_obj3F
00009FCE FFD6                       		dc.w byte_8EE2-Map_obj3F
00009FD0 FFEB                       		dc.w byte_8EF7-Map_obj3F
00009FD2 01                         byte_8F16:	dc.b 1
00009FD3 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
00009FD8 01                         byte_8F1C:	dc.b 1
00009FD9 F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
00009FDE                            		even
00009FDE                            		even
00009FDE                            ; ===========================================================================
00009FDE                            ; ---------------------------------------------------------------------------
00009FDE                            ; Object 28 - animals
00009FDE                            ; ---------------------------------------------------------------------------
00009FDE                            
00009FDE                            Obj28:					; XREF: Obj_Index
00009FDE 7000                       		moveq	#0,d0
00009FE0 1028 0024                  		move.b	$24(a0),d0
00009FE4 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
00009FE8 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
00009FEC                            ; ===========================================================================
00009FEC 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
00009FF0 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
00009FF4 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
00009FF8 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
00009FFC 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
0000A000 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
0000A004 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
0000A008 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
0000A00C 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
0000A010 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
0000A014 0000                       		dc.w loc_92D6-Obj28_Index
0000A016                            
0000A016 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
0000A022                            
0000A022 FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
0000A026 0000 0000                  		dc.l Map_obj28
0000A02A FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
0000A02E 0000 0000                  		dc.l Map_obj28a		; mappings address
0000A032 FE80 FD00                  		dc.w $FE80, $FD00
0000A036 0000 0000                  		dc.l Map_obj28
0000A03A FEC0 FE80                  		dc.w $FEC0, $FE80
0000A03E 0000 0000                  		dc.l Map_obj28a
0000A042 FE40 FD00                  		dc.w $FE40, $FD00
0000A046 0000 0000                  		dc.l Map_obj28b
0000A04A FD00 FC00                  		dc.w $FD00, $FC00
0000A04E 0000 0000                  		dc.l Map_obj28a
0000A052 FD80 FC80                  		dc.w $FD80, $FC80
0000A056 0000 0000                  		dc.l Map_obj28b
0000A05A                            
0000A05A FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
0000A06A FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
0000A07A FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
0000A086                            
0000A086 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
0000A09A 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
0000A0AE 0000 0000                  		dc.l Map_obj28b
0000A0B2                            
0000A0B2 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
0000A0C4 0565 05B3                  		dc.w $565, $5B3
0000A0C8                            ; ===========================================================================
0000A0C8                            
0000A0C8                            Obj28_Ending:				; XREF: Obj28_Index
0000A0C8 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
0000A0CC 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
0000A0D0 7000                       		moveq	#0,d0
0000A0D2 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
0000A0D6 D040                       		add.w	d0,d0		; multiply d0 by 2
0000A0D8 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
0000A0DC 0440 0014                  		subi.w	#$14,d0
0000A0E0 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
0000A0E6 D040                       		add.w	d0,d0
0000A0E8 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
0000A0EE 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
0000A0F2 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
0000A0F8 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
0000A0FE 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
0000A104 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
0000A10A 117C 000C 0016             		move.b	#$C,$16(a0)
0000A110 117C 0004 0001             		move.b	#4,1(a0)
0000A116 08E8 0000 0001             		bset	#0,1(a0)
0000A11C 117C 0006 0018             		move.b	#6,$18(a0)
0000A122 117C 0008 0019             		move.b	#8,$19(a0)
0000A128 117C 0007 001E             		move.b	#7,$1E(a0)
0000A12E 6000 0000                  		bra.w	DisplaySprite
0000A132                            ; ===========================================================================
0000A132                            
0000A132                            Obj28_FromEnemy:			; XREF: Obj28_Ending
0000A132 5428 0024                  		addq.b	#2,$24(a0)
0000A136 6100 9116                  		bsr.w	RandomNumber
0000A13A 0240 0001                  		andi.w	#1,d0
0000A13E 7200                       		moveq	#0,d1
0000A140 1238 FE10                  		move.b	($FFFFFE10).w,d1
0000A144 D241                       		add.w	d1,d1
0000A146 D240                       		add.w	d0,d1
0000A148 43FA FECC                  		lea	Obj28_VarIndex(pc),a1
0000A14C 1031 1000                  		move.b	(a1,d1.w),d0
0000A150 1140 0030                  		move.b	d0,$30(a0)
0000A154 E748                       		lsl.w	#3,d0
0000A156 43FA FECA                  		lea	Obj28_Variables(pc),a1
0000A15A D2C0                       		adda.w	d0,a1
0000A15C 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
0000A160 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
0000A164 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
0000A168 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
0000A16E 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
0000A174 6700                       		beq.s	loc_90C0	; if yes, branch
0000A176 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
0000A17C                            
0000A17C                            loc_90C0:
0000A17C 117C 000C 0016             		move.b	#$C,$16(a0)
0000A182 117C 0004 0001             		move.b	#4,1(a0)
0000A188 08E8 0000 0001             		bset	#0,1(a0)
0000A18E 117C 0006 0018             		move.b	#6,$18(a0)
0000A194 117C 0008 0019             		move.b	#8,$19(a0)
0000A19A 117C 0007 001E             		move.b	#7,$1E(a0)
0000A1A0 117C 0002 001A             		move.b	#2,$1A(a0)
0000A1A6 317C FC00 0012             		move.w	#-$400,$12(a0)
0000A1AC 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0000A1B0 6600                       		bne.s	loc_911C
0000A1B2 6100 0000                  		bsr.w	SingleObjLoad
0000A1B6 6600                       		bne.s	Obj28_Display
0000A1B8 137C 0029 0000             		move.b	#$29,0(a1)	; load points object
0000A1BE 3368 0008 0008             		move.w	8(a0),8(a1)
0000A1C4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A1CA 3028 003E                  		move.w	$3E(a0),d0
0000A1CE E248                       		lsr.w	#1,d0
0000A1D0 1340 001A                  		move.b	d0,$1A(a1)
0000A1D4                            
0000A1D4                            Obj28_Display:
0000A1D4 6000 0000                  		bra.w	DisplaySprite
0000A1D8                            ; ===========================================================================
0000A1D8                            
0000A1D8                            loc_911C:
0000A1D8 117C 0012 0024             		move.b	#$12,$24(a0)
0000A1DE 4268 0010                  		clr.w	$10(a0)
0000A1E2 6000 0000                  		bra.w	DisplaySprite
0000A1E6                            ; ===========================================================================
0000A1E6                            
0000A1E6                            loc_912A:				; XREF: Obj28_Index
0000A1E6 4A28 0001                  		tst.b	1(a0)
0000A1EA 6A00 0000                  		bpl.w	DeleteObject
0000A1EE 6100 0000                  		bsr.w	ObjectFall
0000A1F2 4A68 0012                  		tst.w	$12(a0)
0000A1F6 6B00                       		bmi.s	loc_9180
0000A1F8 4EB9 0000 0000             		jsr	ObjHitFloor
0000A1FE 4A41                       		tst.w	d1
0000A200 6A00                       		bpl.s	loc_9180
0000A202 D368 000C                  		add.w	d1,$C(a0)
0000A206 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000A20C 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A212 117C 0001 001A             		move.b	#1,$1A(a0)
0000A218 1028 0030                  		move.b	$30(a0),d0
0000A21C D000                       		add.b	d0,d0
0000A21E 5800                       		addq.b	#4,d0
0000A220 1140 0024                  		move.b	d0,$24(a0)
0000A224 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0000A228 6700                       		beq.s	loc_9180
0000A22A 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
0000A230 6700                       		beq.s	loc_9180
0000A232 4468 0010                  		neg.w	$10(a0)
0000A236 0868 0000 0001             		bchg	#0,1(a0)
0000A23C                            
0000A23C                            loc_9180:
0000A23C 6000 0000                  		bra.w	DisplaySprite
0000A240                            ; ===========================================================================
0000A240                            
0000A240                            loc_9184:				; XREF: Obj28_Index
0000A240 6100 0000                  		bsr.w	ObjectFall
0000A244 117C 0001 001A             		move.b	#1,$1A(a0)
0000A24A 4A68 0012                  		tst.w	$12(a0)
0000A24E 6B00                       		bmi.s	loc_91AE
0000A250 117C 0000 001A             		move.b	#0,$1A(a0)
0000A256 4EB9 0000 0000             		jsr	ObjHitFloor
0000A25C 4A41                       		tst.w	d1
0000A25E 6A00                       		bpl.s	loc_91AE
0000A260 D368 000C                  		add.w	d1,$C(a0)
0000A264 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A26A                            
0000A26A                            loc_91AE:
0000A26A 4A28 0028                  		tst.b	$28(a0)
0000A26E 6600                       		bne.s	loc_9224
0000A270 4A28 0001                  		tst.b	1(a0)
0000A274 6A00 0000                  		bpl.w	DeleteObject
0000A278 6000 0000                  		bra.w	DisplaySprite
0000A27C                            ; ===========================================================================
0000A27C                            
0000A27C                            loc_91C0:				; XREF: Obj28_Index
0000A27C 6100 0000                  		bsr.w	SpeedToPos
0000A280 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A286 4A68 0012                  		tst.w	$12(a0)
0000A28A 6B00                       		bmi.s	loc_91FC
0000A28C 4EB9 0000 0000             		jsr	ObjHitFloor
0000A292 4A41                       		tst.w	d1
0000A294 6A00                       		bpl.s	loc_91FC
0000A296 D368 000C                  		add.w	d1,$C(a0)
0000A29A 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A2A0 4A28 0028                  		tst.b	$28(a0)
0000A2A4 6700                       		beq.s	loc_91FC
0000A2A6 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
0000A2AC 6700                       		beq.s	loc_91FC
0000A2AE 4468 0010                  		neg.w	$10(a0)
0000A2B2 0868 0000 0001             		bchg	#0,1(a0)
0000A2B8                            
0000A2B8                            loc_91FC:
0000A2B8 5328 001E                  		subq.b	#1,$1E(a0)
0000A2BC 6A00                       		bpl.s	loc_9212
0000A2BE 117C 0001 001E             		move.b	#1,$1E(a0)
0000A2C4 5228 001A                  		addq.b	#1,$1A(a0)
0000A2C8 0228 0001 001A             		andi.b	#1,$1A(a0)
0000A2CE                            
0000A2CE                            loc_9212:
0000A2CE 4A28 0028                  		tst.b	$28(a0)
0000A2D2 6600                       		bne.s	loc_9224
0000A2D4 4A28 0001                  		tst.b	1(a0)
0000A2D8 6A00 0000                  		bpl.w	DeleteObject
0000A2DC 6000 0000                  		bra.w	DisplaySprite
0000A2E0                            ; ===========================================================================
0000A2E0                            
0000A2E0                            loc_9224:				; XREF: Obj28_Index
0000A2E0 3028 0008                  		move.w	8(a0),d0
0000A2E4 9078 D008                  		sub.w	($FFFFD008).w,d0
0000A2E8 6500                       		bcs.s	loc_923C
0000A2EA 0440 0180                  		subi.w	#$180,d0
0000A2EE 6A00                       		bpl.s	loc_923C
0000A2F0 4A28 0001                  		tst.b	1(a0)
0000A2F4 6A00 0000                  		bpl.w	DeleteObject
0000A2F8                            
0000A2F8                            loc_923C:
0000A2F8 6000 0000                  		bra.w	DisplaySprite
0000A2FC                            ; ===========================================================================
0000A2FC                            
0000A2FC                            loc_9240:				; XREF: Obj28_Index
0000A2FC 4A28 0001                  		tst.b	1(a0)
0000A300 6A00 0000                  		bpl.w	DeleteObject
0000A304 5368 0036                  		subq.w	#1,$36(a0)
0000A308 6600 0000                  		bne.w	loc_925C
0000A30C 117C 0002 0024             		move.b	#2,$24(a0)
0000A312 117C 0003 0018             		move.b	#3,$18(a0)
0000A318                            
0000A318                            loc_925C:
0000A318 6000 0000                  		bra.w	DisplaySprite
0000A31C                            ; ===========================================================================
0000A31C                            
0000A31C                            loc_9260:				; XREF: Obj28_Index
0000A31C 6100 0000                  		bsr.w	sub_9404
0000A320 6400                       		bcc.s	loc_927C
0000A322 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000A328 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A32E 117C 000E 0024             		move.b	#$E,$24(a0)
0000A334 6000 FF46                  		bra.w	loc_91C0
0000A338                            ; ===========================================================================
0000A338                            
0000A338                            loc_927C:
0000A338 6000 FFA6                  		bra.w	loc_9224
0000A33C                            ; ===========================================================================
0000A33C                            
0000A33C                            loc_9280:				; XREF: Obj28_Index
0000A33C 6100 0000                  		bsr.w	sub_9404
0000A340 6A00                       		bpl.s	loc_92B6
0000A342 4268 0010                  		clr.w	$10(a0)
0000A346 4268 0032                  		clr.w	$32(a0)
0000A34A 6100 0000                  		bsr.w	SpeedToPos
0000A34E 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A354 6100 0000                  		bsr.w	loc_93C4
0000A358 6100 0000                  		bsr.w	loc_93EC
0000A35C 5328 001E                  		subq.b	#1,$1E(a0)
0000A360 6A00                       		bpl.s	loc_92B6
0000A362 117C 0001 001E             		move.b	#1,$1E(a0)
0000A368 5228 001A                  		addq.b	#1,$1A(a0)
0000A36C 0228 0001 001A             		andi.b	#1,$1A(a0)
0000A372                            
0000A372                            loc_92B6:
0000A372 6000 FF6C                  		bra.w	loc_9224
0000A376                            ; ===========================================================================
0000A376                            
0000A376                            loc_92BA:				; XREF: Obj28_Index
0000A376 6100 0000                  		bsr.w	sub_9404
0000A37A 6A00                       		bpl.s	loc_9310
0000A37C 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000A382 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A388 117C 0004 0024             		move.b	#4,$24(a0)
0000A38E 6000 FEB0                  		bra.w	loc_9184
0000A392                            ; ===========================================================================
0000A392                            
0000A392                            loc_92D6:				; XREF: Obj28_Index
0000A392 6100 0000                  		bsr.w	ObjectFall
0000A396 117C 0001 001A             		move.b	#1,$1A(a0)
0000A39C 4A68 0012                  		tst.w	$12(a0)
0000A3A0 6B00                       		bmi.s	loc_9310
0000A3A2 117C 0000 001A             		move.b	#0,$1A(a0)
0000A3A8 4EB9 0000 0000             		jsr	ObjHitFloor
0000A3AE 4A41                       		tst.w	d1
0000A3B0 6A00                       		bpl.s	loc_9310
0000A3B2 4628 0029                  		not.b	$29(a0)
0000A3B6 6600                       		bne.s	loc_9306
0000A3B8 4468 0010                  		neg.w	$10(a0)
0000A3BC 0868 0000 0001             		bchg	#0,1(a0)
0000A3C2                            
0000A3C2                            loc_9306:
0000A3C2 D368 000C                  		add.w	d1,$C(a0)
0000A3C6 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A3CC                            
0000A3CC                            loc_9310:
0000A3CC 6000 FF12                  		bra.w	loc_9224
0000A3D0                            ; ===========================================================================
0000A3D0                            
0000A3D0                            loc_9314:				; XREF: Obj28_Index
0000A3D0 6100 0000                  		bsr.w	sub_9404
0000A3D4 6A00                       		bpl.s	loc_932E
0000A3D6 4268 0010                  		clr.w	$10(a0)
0000A3DA 4268 0032                  		clr.w	$32(a0)
0000A3DE 6100 0000                  		bsr.w	ObjectFall
0000A3E2 6100 0000                  		bsr.w	loc_93C4
0000A3E6 6100 0000                  		bsr.w	loc_93EC
0000A3EA                            
0000A3EA                            loc_932E:
0000A3EA 6000 FEF4                  		bra.w	loc_9224
0000A3EE                            ; ===========================================================================
0000A3EE                            
0000A3EE                            loc_9332:				; XREF: Obj28_Index
0000A3EE 6100 0000                  		bsr.w	sub_9404
0000A3F2 6A00                       		bpl.s	loc_936C
0000A3F4 6100 0000                  		bsr.w	ObjectFall
0000A3F8 117C 0001 001A             		move.b	#1,$1A(a0)
0000A3FE 4A68 0012                  		tst.w	$12(a0)
0000A402 6B00                       		bmi.s	loc_936C
0000A404 117C 0000 001A             		move.b	#0,$1A(a0)
0000A40A 4EB9 0000 0000             		jsr	ObjHitFloor
0000A410 4A41                       		tst.w	d1
0000A412 6A00                       		bpl.s	loc_936C
0000A414 4468 0010                  		neg.w	$10(a0)
0000A418 0868 0000 0001             		bchg	#0,1(a0)
0000A41E D368 000C                  		add.w	d1,$C(a0)
0000A422 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A428                            
0000A428                            loc_936C:
0000A428 6000 FEB6                  		bra.w	loc_9224
0000A42C                            ; ===========================================================================
0000A42C                            
0000A42C                            loc_9370:				; XREF: Obj28_Index
0000A42C 6100 0000                  		bsr.w	sub_9404
0000A430 6A00                       		bpl.s	loc_93C0
0000A432 6100 0000                  		bsr.w	SpeedToPos
0000A436 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A43C 4A68 0012                  		tst.w	$12(a0)
0000A440 6B00                       		bmi.s	loc_93AA
0000A442 4EB9 0000 0000             		jsr	ObjHitFloor
0000A448 4A41                       		tst.w	d1
0000A44A 6A00                       		bpl.s	loc_93AA
0000A44C 4628 0029                  		not.b	$29(a0)
0000A450 6600                       		bne.s	loc_93A0
0000A452 4468 0010                  		neg.w	$10(a0)
0000A456 0868 0000 0001             		bchg	#0,1(a0)
0000A45C                            
0000A45C                            loc_93A0:
0000A45C D368 000C                  		add.w	d1,$C(a0)
0000A460 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A466                            
0000A466                            loc_93AA:
0000A466 5328 001E                  		subq.b	#1,$1E(a0)
0000A46A 6A00                       		bpl.s	loc_93C0
0000A46C 117C 0001 001E             		move.b	#1,$1E(a0)
0000A472 5228 001A                  		addq.b	#1,$1A(a0)
0000A476 0228 0001 001A             		andi.b	#1,$1A(a0)
0000A47C                            
0000A47C                            loc_93C0:
0000A47C 6000 FE62                  		bra.w	loc_9224
0000A480                            ; ===========================================================================
0000A480                            
0000A480                            loc_93C4:
0000A480 117C 0001 001A             		move.b	#1,$1A(a0)
0000A486 4A68 0012                  		tst.w	$12(a0)
0000A48A 6B00                       		bmi.s	locret_93EA
0000A48C 117C 0000 001A             		move.b	#0,$1A(a0)
0000A492 4EB9 0000 0000             		jsr	ObjHitFloor
0000A498 4A41                       		tst.w	d1
0000A49A 6A00                       		bpl.s	locret_93EA
0000A49C D368 000C                  		add.w	d1,$C(a0)
0000A4A0 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A4A6                            
0000A4A6                            locret_93EA:
0000A4A6 4E75                       		rts	
0000A4A8                            ; ===========================================================================
0000A4A8                            
0000A4A8                            loc_93EC:
0000A4A8 08E8 0000 0001             		bset	#0,1(a0)
0000A4AE 3028 0008                  		move.w	8(a0),d0
0000A4B2 9078 D008                  		sub.w	($FFFFD008).w,d0
0000A4B6 6400                       		bcc.s	locret_9402
0000A4B8 08A8 0000 0001             		bclr	#0,1(a0)
0000A4BE                            
0000A4BE                            locret_9402:
0000A4BE 4E75                       		rts	
0000A4C0                            
0000A4C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A4C0                            
0000A4C0                            
0000A4C0                            sub_9404:
0000A4C0 3038 D008                  		move.w	($FFFFD008).w,d0
0000A4C4 9068 0008                  		sub.w	8(a0),d0
0000A4C8 0440 00B8                  		subi.w	#$B8,d0
0000A4CC 4E75                       		rts	
0000A4CE                            ; End of function sub_9404
0000A4CE                            
0000A4CE                            ; ===========================================================================
0000A4CE                            ; ---------------------------------------------------------------------------
0000A4CE                            ; Object 29 - points that appear when you destroy something
0000A4CE                            ; ---------------------------------------------------------------------------
0000A4CE                            
0000A4CE                            Obj29:					; XREF: Obj_Index
0000A4CE 7000                       		moveq	#0,d0
0000A4D0 1028 0024                  		move.b	$24(a0),d0
0000A4D4 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
0000A4D8 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
0000A4DC 6000 0000                  		bra.w	DisplaySprite
0000A4E0                            ; ===========================================================================
0000A4E0 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
0000A4E2 0000                       		dc.w Obj29_Slower-Obj29_Index
0000A4E4                            ; ===========================================================================
0000A4E4                            
0000A4E4                            Obj29_Main:				; XREF: Obj29_Index
0000A4E4 5428 0024                  		addq.b	#2,$24(a0)
0000A4E8 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
0000A4F0 317C 2797 0002             		move.w	#$2797,2(a0)
0000A4F6 117C 0004 0001             		move.b	#4,1(a0)
0000A4FC 117C 0001 0018             		move.b	#1,$18(a0)
0000A502 117C 0008 0019             		move.b	#8,$19(a0)
0000A508 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
0000A50E                            
0000A50E                            Obj29_Slower:				; XREF: Obj29_Index
0000A50E 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000A512 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
0000A516 6100 0000                  		bsr.w	SpeedToPos
0000A51A 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000A520 4E75                       		rts	
0000A522                            ; ===========================================================================
0000A522                            ; ---------------------------------------------------------------------------
0000A522                            ; Sprite mappings - animals
0000A522                            ; ---------------------------------------------------------------------------
0000A522                            Map_obj28:
0000A522                            	include "_maps\obj28.asm"
0000A522                            ; ---------------------------------------------------------------------------
0000A522                            ; Sprite mappings - animals
0000A522                            ; ---------------------------------------------------------------------------
0000A522 0000                       		dc.w byte_9472-Map_obj28
0000A524 0000                       		dc.w byte_9478-Map_obj28
0000A526 0000                       		dc.w byte_946C-Map_obj28
0000A528 01                         byte_946C:	dc.b 1
0000A529 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000A52E 01                         byte_9472:	dc.b 1
0000A52F F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
0000A534 01                         byte_9478:	dc.b 1
0000A535 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
0000A53A                            		even
0000A53A                            		even
0000A53A                            
0000A53A                            Map_obj28a:
0000A53A                            	include "_maps\obj28a.asm"
0000A53A                            ; ---------------------------------------------------------------------------
0000A53A                            ; Sprite mappings - animals
0000A53A                            ; ---------------------------------------------------------------------------
0000A53A 0000                       		dc.w byte_948A-Map_obj28a
0000A53C 0000                       		dc.w byte_9490-Map_obj28a
0000A53E 0000                       		dc.w byte_9484-Map_obj28a
0000A540 01                         byte_9484:	dc.b 1
0000A541 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000A546 01                         byte_948A:	dc.b 1
0000A547 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
0000A54C 01                         byte_9490:	dc.b 1
0000A54D FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
0000A552                            		even
0000A552                            		even
0000A552                            
0000A552                            Map_obj28b:
0000A552                            	include "_maps\obj28b.asm"
0000A552                            ; ---------------------------------------------------------------------------
0000A552                            ; Sprite mappings - animals
0000A552                            ; ---------------------------------------------------------------------------
0000A552 0000                       		dc.w byte_94A2-Map_obj28b
0000A554 0000                       		dc.w byte_94A8-Map_obj28b
0000A556 0000                       		dc.w byte_949C-Map_obj28b
0000A558 01                         byte_949C:	dc.b 1
0000A559 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000A55E 01                         byte_94A2:	dc.b 1
0000A55F FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
0000A564 01                         byte_94A8:	dc.b 1
0000A565 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
0000A56A                            		even
0000A56A                            		even
0000A56A                            
0000A56A                            ; ---------------------------------------------------------------------------
0000A56A                            ; Sprite mappings - points that	appear when you	destroy	something
0000A56A                            ; ---------------------------------------------------------------------------
0000A56A                            Map_obj29:
0000A56A                            	include "_maps\obj29.asm"
0000A56A                            ; ---------------------------------------------------------------------------
0000A56A                            ; Sprite mappings - points that	appear when you	destroy	something
0000A56A                            ; ---------------------------------------------------------------------------
0000A56A 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
0000A56E 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
0000A572 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
0000A576 0000                       		dc.w byte_94E5-Map_obj29
0000A578 01                         byte_94BC:	dc.b 1
0000A579 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
0000A57E 01                         byte_94C2:	dc.b 1
0000A57F FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
0000A584 01                         byte_94C8:	dc.b 1
0000A585 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
0000A58A 01                         byte_94CE:	dc.b 1
0000A58B FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
0000A590 01                         byte_94D4:	dc.b 1
0000A591 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
0000A596 02                         byte_94DA:	dc.b 2
0000A597 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
0000A59C FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
0000A5A1 02                         byte_94E5:	dc.b 2
0000A5A2 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
0000A5A7 FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
0000A5AC                            		even
0000A5AC                            		even
0000A5AC                            
0000A5AC                            ; ===========================================================================
0000A5AC                            ; ---------------------------------------------------------------------------
0000A5AC                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
0000A5AC                            ; ---------------------------------------------------------------------------
0000A5AC                            
0000A5AC                            Obj1F:					; XREF: Obj_Index
0000A5AC 7000                       		moveq	#0,d0
0000A5AE 1028 0024                  		move.b	$24(a0),d0
0000A5B2 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
0000A5B6 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
0000A5BA                            ; ===========================================================================
0000A5BA 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
0000A5BC 0000                       		dc.w Obj1F_Action-Obj1F_Index
0000A5BE 0000                       		dc.w Obj1F_Delete-Obj1F_Index
0000A5C0 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
0000A5C2 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
0000A5C4                            ; ===========================================================================
0000A5C4                            
0000A5C4                            Obj1F_Main:				; XREF: Obj1F_Index
0000A5C4 117C 0010 0016             		move.b	#$10,$16(a0)
0000A5CA 117C 0008 0017             		move.b	#8,$17(a0)
0000A5D0 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
0000A5D8 317C 0400 0002             		move.w	#$400,2(a0)
0000A5DE 117C 0004 0001             		move.b	#4,1(a0)
0000A5E4 117C 0003 0018             		move.b	#3,$18(a0)
0000A5EA 117C 0006 0020             		move.b	#6,$20(a0)
0000A5F0 117C 0015 0019             		move.b	#$15,$19(a0)
0000A5F6 6100 0000                  		bsr.w	ObjectFall
0000A5FA 4EB9 0000 0000             		jsr	ObjHitFloor
0000A600 4A41                       		tst.w	d1
0000A602 6A00                       		bpl.s	locret_955A
0000A604 D368 000C                  		add.w	d1,$C(a0)
0000A608 1143 0026                  		move.b	d3,$26(a0)
0000A60C 317C 0000 0012             		move.w	#0,$12(a0)
0000A612 5428 0024                  		addq.b	#2,$24(a0)
0000A616                            
0000A616                            locret_955A:
0000A616 4E75                       		rts	
0000A618                            ; ===========================================================================
0000A618                            
0000A618                            Obj1F_Action:				; XREF: Obj1F_Index
0000A618 7000                       		moveq	#0,d0
0000A61A 1028 0025                  		move.b	$25(a0),d0
0000A61E 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
0000A622 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
0000A626 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
0000A62C 6100 0000                  		bsr.w	AnimateSprite
0000A630 6000 0000                  		bra.w	MarkObjGone
0000A634                            ; ===========================================================================
0000A634 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
0000A636 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
0000A638                            ; ===========================================================================
0000A638                            
0000A638                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
0000A638 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0000A63C 6A00                       		bpl.s	locret_95B6
0000A63E 4A28 0001                  		tst.b	1(a0)
0000A642 6A00                       		bpl.s	Obj1F_Move
0000A644 0868 0001 0032             		bchg	#1,$32(a0)
0000A64A 6600                       		bne.s	Obj1F_MakeFire
0000A64C                            
0000A64C                            Obj1F_Move:
0000A64C 5428 0025                  		addq.b	#2,$25(a0)
0000A650 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
0000A656 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
0000A65C 6100 0000                  		bsr.w	Obj1F_SetAni
0000A660 5600                       		addq.b	#3,d0
0000A662 1140 001C                  		move.b	d0,$1C(a0)
0000A666 0868 0000 0022             		bchg	#0,$22(a0)
0000A66C 6600                       		bne.s	locret_95B6
0000A66E 4468 0010                  		neg.w	$10(a0)		; change direction
0000A672                            
0000A672                            locret_95B6:
0000A672 4E75                       		rts	
0000A674                            ; ===========================================================================
0000A674                            
0000A674                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
0000A674 317C 003B 0030             		move.w	#$3B,$30(a0)
0000A67A 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
0000A680 6100 0000                  		bsr.w	SingleObjLoad
0000A684 6600                       		bne.s	Obj1F_MakeFire2
0000A686 137C 001F 0000             		move.b	#$1F,0(a1)	; load left fireball
0000A68C 137C 0006 0024             		move.b	#6,$24(a1)
0000A692 3368 0008 0008             		move.w	8(a0),8(a1)
0000A698 0469 0010 0008             		subi.w	#$10,8(a1)
0000A69E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A6A4 337C FF00 0010             		move.w	#-$100,$10(a1)
0000A6AA                            
0000A6AA                            Obj1F_MakeFire2:
0000A6AA 6100 0000                  		bsr.w	SingleObjLoad
0000A6AE 6600                       		bne.s	locret_9618
0000A6B0 137C 001F 0000             		move.b	#$1F,0(a1)	; load right fireball
0000A6B6 137C 0006 0024             		move.b	#6,$24(a1)
0000A6BC 3368 0008 0008             		move.w	8(a0),8(a1)
0000A6C2 0669 0010 0008             		addi.w	#$10,8(a1)
0000A6C8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A6CE 337C 0100 0010             		move.w	#$100,$10(a1)
0000A6D4                            
0000A6D4                            locret_9618:
0000A6D4 4E75                       		rts	
0000A6D6                            ; ===========================================================================
0000A6D6                            
0000A6D6                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
0000A6D6 5368 0030                  		subq.w	#1,$30(a0)
0000A6DA 6B00                       		bmi.s	loc_966E
0000A6DC 6100 0000                  		bsr.w	SpeedToPos
0000A6E0 0868 0000 0032             		bchg	#0,$32(a0)
0000A6E6 6600                       		bne.s	loc_9654
0000A6E8 3628 0008                  		move.w	8(a0),d3
0000A6EC 0643 0010                  		addi.w	#$10,d3
0000A6F0 0828 0000 0022             		btst	#0,$22(a0)
0000A6F6 6700                       		beq.s	loc_9640
0000A6F8 0443 0020                  		subi.w	#$20,d3
0000A6FC                            
0000A6FC                            loc_9640:
0000A6FC 4EB9 0000 0000             		jsr	ObjHitFloor2
0000A702 0C41 FFF8                  		cmpi.w	#-8,d1
0000A706 6D00                       		blt.s	loc_966E
0000A708 0C41 000C                  		cmpi.w	#$C,d1
0000A70C 6C00                       		bge.s	loc_966E
0000A70E 4E75                       		rts	
0000A710                            ; ===========================================================================
0000A710                            
0000A710                            loc_9654:				; XREF: Obj1F_WalkOnFloor
0000A710 4EB9 0000 0000             		jsr	ObjHitFloor
0000A716 D368 000C                  		add.w	d1,$C(a0)
0000A71A 1143 0026                  		move.b	d3,$26(a0)
0000A71E 6100 0000                  		bsr.w	Obj1F_SetAni
0000A722 5600                       		addq.b	#3,d0
0000A724 1140 001C                  		move.b	d0,$1C(a0)
0000A728 4E75                       		rts	
0000A72A                            ; ===========================================================================
0000A72A                            
0000A72A                            loc_966E:				; XREF: Obj1F_WalkOnFloor
0000A72A 5528 0025                  		subq.b	#2,$25(a0)
0000A72E 317C 003B 0030             		move.w	#59,$30(a0)
0000A734 317C 0000 0010             		move.w	#0,$10(a0)
0000A73A 6100 0000                  		bsr.w	Obj1F_SetAni
0000A73E 1140 001C                  		move.b	d0,$1C(a0)
0000A742 4E75                       		rts	
0000A744                            ; ---------------------------------------------------------------------------
0000A744                            ; Subroutine to	set the	correct	animation for a	Crabmeat
0000A744                            ; ---------------------------------------------------------------------------
0000A744                            
0000A744                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A744                            
0000A744                            
0000A744                            Obj1F_SetAni:				; XREF: loc_966E
0000A744 7000                       		moveq	#0,d0
0000A746 1628 0026                  		move.b	$26(a0),d3
0000A74A 6B00                       		bmi.s	loc_96A4
0000A74C 0C03 0006                  		cmpi.b	#6,d3
0000A750 6500                       		bcs.s	locret_96A2
0000A752 7001                       		moveq	#1,d0
0000A754 0828 0000 0022             		btst	#0,$22(a0)
0000A75A 6600                       		bne.s	locret_96A2
0000A75C 7002                       		moveq	#2,d0
0000A75E                            
0000A75E                            locret_96A2:
0000A75E 4E75                       		rts	
0000A760                            ; ===========================================================================
0000A760                            
0000A760                            loc_96A4:				; XREF: Obj1F_SetAni
0000A760 0C03 00FA                  		cmpi.b	#-6,d3
0000A764 6200                       		bhi.s	locret_96B6
0000A766 7002                       		moveq	#2,d0
0000A768 0828 0000 0022             		btst	#0,$22(a0)
0000A76E 6600                       		bne.s	locret_96B6
0000A770 7001                       		moveq	#1,d0
0000A772                            
0000A772                            locret_96B6:
0000A772 4E75                       		rts	
0000A774                            ; End of function Obj1F_SetAni
0000A774                            
0000A774                            ; ===========================================================================
0000A774                            
0000A774                            Obj1F_Delete:				; XREF: Obj1F_Index
0000A774 6100 0000                  		bsr.w	DeleteObject
0000A778 4E75                       		rts	
0000A77A                            ; ===========================================================================
0000A77A                            ; ---------------------------------------------------------------------------
0000A77A                            ; Sub-object - missile that the	Crabmeat throws
0000A77A                            ; ---------------------------------------------------------------------------
0000A77A                            
0000A77A                            Obj1F_BallMain:				; XREF: Obj1F_Index
0000A77A 5428 0024                  		addq.b	#2,$24(a0)
0000A77E 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
0000A786 317C 0400 0002             		move.w	#$400,2(a0)
0000A78C 117C 0004 0001             		move.b	#4,1(a0)
0000A792 117C 0003 0018             		move.b	#3,$18(a0)
0000A798 117C 0087 0020             		move.b	#$87,$20(a0)
0000A79E 117C 0008 0019             		move.b	#8,$19(a0)
0000A7A4 317C FC00 0012             		move.w	#-$400,$12(a0)
0000A7AA 117C 0007 001C             		move.b	#7,$1C(a0)
0000A7B0                            
0000A7B0                            Obj1F_BallMove:				; XREF: Obj1F_Index
0000A7B0 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
0000A7B6 6100 0000                  		bsr.w	AnimateSprite
0000A7BA 6100 0000                  		bsr.w	ObjectFall
0000A7BE 6100 0000                  		bsr.w	DisplaySprite
0000A7C2 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A7C6 0640 00E0                  		addi.w	#$E0,d0
0000A7CA B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000A7CE 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
0000A7D0 4E75                       		rts	
0000A7D2                            ; ===========================================================================
0000A7D2                            
0000A7D2                            Obj1F_Delete2:
0000A7D2 6000 0000                  		bra.w	DeleteObject
0000A7D6                            ; ===========================================================================
0000A7D6                            Ani_obj1F:
0000A7D6                            	include "_anim\obj1F.asm"
0000A7D6                            ; ---------------------------------------------------------------------------
0000A7D6                            ; Animation script - Crabmeat enemy
0000A7D6                            ; ---------------------------------------------------------------------------
0000A7D6 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
0000A7DC 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
0000A7E2 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
0000A7E6 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
0000A7EA 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
0000A7EE 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
0000A7F2 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
0000A7F8 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
0000A7FE 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
0000A804 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
0000A808 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
0000A80C                            		even
0000A80C                            		even
0000A80C                            
0000A80C                            ; ---------------------------------------------------------------------------
0000A80C                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000A80C                            ; ---------------------------------------------------------------------------
0000A80C                            Map_obj1F:
0000A80C                            	include "_maps\obj1F.asm"
0000A80C                            ; ---------------------------------------------------------------------------
0000A80C                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000A80C                            ; ---------------------------------------------------------------------------
0000A80C 0000 0000                  		dc.w byte_975E-Map_obj1F, byte_9773-Map_obj1F
0000A810 0000 0000                  		dc.w byte_9788-Map_obj1F, byte_979D-Map_obj1F
0000A814 0000 0000                  		dc.w byte_97B2-Map_obj1F, byte_97D1-Map_obj1F
0000A818 0000                       		dc.w byte_97D7-Map_obj1F
0000A81A 04                         byte_975E:	dc.b 4
0000A81B F009 0000 E8               		dc.b $F0, 9, 0,	0, $E8
0000A820 F009 0800 00               		dc.b $F0, 9, 8,	0, 0
0000A825 0005 0006 F0               		dc.b 0,	5, 0, 6, $F0
0000A82A 0005 0806 00               		dc.b 0,	5, 8, 6, 0
0000A82F 04                         byte_9773:	dc.b 4
0000A830 F009 000A E8               		dc.b $F0, 9, 0,	$A, $E8
0000A835 F009 0010 00               		dc.b $F0, 9, 0,	$10, 0
0000A83A 0005 0016 F0               		dc.b 0,	5, 0, $16, $F0
0000A83F 0009 001A 00               		dc.b 0,	9, 0, $1A, 0
0000A844 04                         byte_9788:	dc.b 4
0000A845 EC09 0000 E8               		dc.b $EC, 9, 0,	0, $E8
0000A84A EC09 0800 00               		dc.b $EC, 9, 8,	0, 0
0000A84F FC05 0806 00               		dc.b $FC, 5, 8,	6, 0
0000A854 FC06 0020 F0               		dc.b $FC, 6, 0,	$20, $F0
0000A859 04                         byte_979D:	dc.b 4
0000A85A EC09 000A E8               		dc.b $EC, 9, 0,	$A, $E8
0000A85F EC09 0010 00               		dc.b $EC, 9, 0,	$10, 0
0000A864 FC09 0026 00               		dc.b $FC, 9, 0,	$26, 0
0000A869 FC06 002C F0               		dc.b $FC, 6, 0,	$2C, $F0
0000A86E 06                         byte_97B2:	dc.b 6
0000A86F F004 0032 F0               		dc.b $F0, 4, 0,	$32, $F0
0000A874 F004 0832 00               		dc.b $F0, 4, 8,	$32, 0
0000A879 F809 0034 E8               		dc.b $F8, 9, 0,	$34, $E8
0000A87E F809 0834 00               		dc.b $F8, 9, 8,	$34, 0
0000A883 0804 003A F0               		dc.b 8,	4, 0, $3A, $F0
0000A888 0804 083A 00               		dc.b 8,	4, 8, $3A, 0
0000A88D 01                         byte_97D1:	dc.b 1
0000A88E F805 003C F8               		dc.b $F8, 5, 0,	$3C, $F8
0000A893 01                         byte_97D7:	dc.b 1
0000A894 F805 0040 F8               		dc.b $F8, 5, 0,	$40, $F8
0000A89A 00                         		even
0000A89A 00                         		even
0000A89A                            
0000A89A                            ; ===========================================================================
0000A89A                            ; ---------------------------------------------------------------------------
0000A89A                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
0000A89A                            ; ---------------------------------------------------------------------------
0000A89A                            
0000A89A                            Obj22:					; XREF: Obj_Index
0000A89A 7000                       		moveq	#0,d0
0000A89C 1028 0024                  		move.b	$24(a0),d0
0000A8A0 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
0000A8A4 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
0000A8A8                            ; ===========================================================================
0000A8A8 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
0000A8AA 0000                       		dc.w Obj22_Action-Obj22_Index
0000A8AC 0000                       		dc.w Obj22_Delete-Obj22_Index
0000A8AE                            ; ===========================================================================
0000A8AE                            
0000A8AE                            Obj22_Main:				; XREF: Obj22_Index
0000A8AE 5428 0024                  		addq.b	#2,$24(a0)
0000A8B2 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
0000A8BA 317C 0444 0002             		move.w	#$444,2(a0)
0000A8C0 117C 0004 0001             		move.b	#4,1(a0)
0000A8C6 117C 0003 0018             		move.b	#3,$18(a0)
0000A8CC 117C 0008 0020             		move.b	#8,$20(a0)
0000A8D2 117C 0018 0019             		move.b	#$18,$19(a0)
0000A8D8                            
0000A8D8                            Obj22_Action:				; XREF: Obj22_Index
0000A8D8 7000                       		moveq	#0,d0
0000A8DA 1028 0025                  		move.b	$25(a0),d0
0000A8DE 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
0000A8E2 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
0000A8E6 43F9 0000 0000             		lea	(Ani_obj22).l,a1
0000A8EC 6100 0000                  		bsr.w	AnimateSprite
0000A8F0 6000 0000                  		bra.w	MarkObjGone
0000A8F4                            ; ===========================================================================
0000A8F4 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
0000A8F6 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
0000A8F8                            ; ===========================================================================
0000A8F8                            
0000A8F8                            Obj22_Move:				; XREF: Obj22_Index2
0000A8F8 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000A8FC 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000A8FE 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
0000A904 6600                       		bne.s	Obj22_Fire	; if yes, branch
0000A906 5428 0025                  		addq.b	#2,$25(a0)
0000A90A 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
0000A910 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
0000A916 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
0000A91C 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000A922 6600                       		bne.s	locret_986C	; if not, branch
0000A924 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
0000A928                            
0000A928                            locret_986C:
0000A928 4E75                       		rts	
0000A92A                            ; ===========================================================================
0000A92A                            
0000A92A                            Obj22_Fire:				; XREF: Obj22_Move
0000A92A 6100 0000                  		bsr.w	SingleObjLoad
0000A92E 6600                       		bne.s	locret_98D0
0000A930 137C 0023 0000             		move.b	#$23,0(a1)	; load missile object
0000A936 3368 0008 0008             		move.w	8(a0),8(a1)
0000A93C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A942 0669 001C 000C             		addi.w	#$1C,$C(a1)
0000A948 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
0000A94E 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
0000A954 303C 0018                  		move.w	#$18,d0
0000A958 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000A95E 6600                       		bne.s	loc_98AA	; if not, branch
0000A960 4440                       		neg.w	d0
0000A962 4469 0010                  		neg.w	$10(a1)		; move missile to the left
0000A966                            
0000A966                            loc_98AA:
0000A966 D169 0008                  		add.w	d0,8(a1)
0000A96A 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000A970 337C 000E 0032             		move.w	#$E,$32(a1)
0000A976 2348 003C                  		move.l	a0,$3C(a1)
0000A97A 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
0000A980 317C 003B 0032             		move.w	#$3B,$32(a0)
0000A986 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
0000A98C                            
0000A98C                            locret_98D0:
0000A98C 4E75                       		rts	
0000A98E                            ; ===========================================================================
0000A98E                            
0000A98E                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
0000A98E 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000A992 6B00                       		bmi.s	Obj22_ChgDir
0000A994 6100 0000                  		bsr.w	SpeedToPos
0000A998 4A28 0034                  		tst.b	$34(a0)
0000A99C 6600                       		bne.s	locret_992A
0000A99E 3038 D008                  		move.w	($FFFFD008).w,d0
0000A9A2 9068 0008                  		sub.w	8(a0),d0
0000A9A6 6A00                       		bpl.s	Obj22_SetNrSonic
0000A9A8 4440                       		neg.w	d0
0000A9AA                            
0000A9AA                            Obj22_SetNrSonic:
0000A9AA 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0000A9AE 6400                       		bcc.s	locret_992A	; if not, branch
0000A9B0 4A28 0001                  		tst.b	1(a0)
0000A9B4 6A00                       		bpl.s	locret_992A
0000A9B6 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
0000A9BC 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000A9C2 6000                       		bra.s	Obj22_Stop
0000A9C4                            ; ===========================================================================
0000A9C4                            
0000A9C4                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
0000A9C4 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000A9CA 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000A9D0 317C 003B 0032             		move.w	#59,$32(a0)
0000A9D6                            
0000A9D6                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
0000A9D6 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
0000A9DA 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000A9E0 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000A9E6                            
0000A9E6                            locret_992A:
0000A9E6 4E75                       		rts	
0000A9E8                            ; ===========================================================================
0000A9E8                            
0000A9E8                            Obj22_Delete:				; XREF: Obj22_Index
0000A9E8 6100 0000                  		bsr.w	DeleteObject
0000A9EC 4E75                       		rts	
0000A9EE                            ; ===========================================================================
0000A9EE                            ; ---------------------------------------------------------------------------
0000A9EE                            ; Object 23 - missile that Buzz	Bomber throws
0000A9EE                            ; ---------------------------------------------------------------------------
0000A9EE                            
0000A9EE                            Obj23:					; XREF: Obj_Index
0000A9EE 7000                       		moveq	#0,d0
0000A9F0 1028 0024                  		move.b	$24(a0),d0
0000A9F4 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
0000A9F8 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
0000A9FC                            ; ===========================================================================
0000A9FC 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
0000A9FE 0000                       		dc.w Obj23_Animate-Obj23_Index
0000AA00 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
0000AA02 0000                       		dc.w Obj23_Delete-Obj23_Index
0000AA04 0000                       		dc.w Obj23_FromNewt-Obj23_Index
0000AA06                            ; ===========================================================================
0000AA06                            
0000AA06                            Obj23_Main:				; XREF: Obj23_Index
0000AA06 5368 0032                  		subq.w	#1,$32(a0)
0000AA0A 6A00                       		bpl.s	Obj23_ChkCancel
0000AA0C 5428 0024                  		addq.b	#2,$24(a0)
0000AA10 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
0000AA18 317C 2444 0002             		move.w	#$2444,2(a0)
0000AA1E 117C 0004 0001             		move.b	#4,1(a0)
0000AA24 117C 0003 0018             		move.b	#3,$18(a0)
0000AA2A 117C 0008 0019             		move.b	#8,$19(a0)
0000AA30 0228 0003 0022             		andi.b	#3,$22(a0)
0000AA36 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
0000AA3A 6700                       		beq.s	Obj23_Animate	; if not, branch
0000AA3C 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
0000AA42 117C 0087 0020             		move.b	#$87,$20(a0)
0000AA48 117C 0001 001C             		move.b	#1,$1C(a0)
0000AA4E 6000                       		bra.s	Obj23_Animate2
0000AA50                            ; ===========================================================================
0000AA50                            
0000AA50                            Obj23_Animate:				; XREF: Obj23_Index
0000AA50 6100                       		bsr.s	Obj23_ChkCancel
0000AA52 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000AA58 6100 0000                  		bsr.w	AnimateSprite
0000AA5C 6000 0000                  		bra.w	DisplaySprite
0000AA60                            ; ---------------------------------------------------------------------------
0000AA60                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000AA60                            ; destroyed, and if it has, then cancel	the missile
0000AA60                            ; ---------------------------------------------------------------------------
0000AA60                            
0000AA60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AA60                            
0000AA60                            
0000AA60                            Obj23_ChkCancel:			; XREF: Obj23_Main
0000AA60 2268 003C                  		movea.l	$3C(a0),a1
0000AA64 0C29 0027 0000             		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
0000AA6A 6700                       		beq.s	Obj23_Delete	; if yes, branch
0000AA6C 4E75                       		rts	
0000AA6E                            ; End of function Obj23_ChkCancel
0000AA6E                            
0000AA6E                            ; ===========================================================================
0000AA6E                            
0000AA6E                            Obj23_FromBuzz:				; XREF: Obj23_Index
0000AA6E 0828 0007 0022             		btst	#7,$22(a0)
0000AA74 6600                       		bne.s	Obj23_Explode
0000AA76 117C 0087 0020             		move.b	#$87,$20(a0)
0000AA7C 117C 0001 001C             		move.b	#1,$1C(a0)
0000AA82 6100 0000                  		bsr.w	SpeedToPos
0000AA86 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000AA8C 6100 0000                  		bsr.w	AnimateSprite
0000AA90 6100 0000                  		bsr.w	DisplaySprite
0000AA94 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000AA98 0640 00E0                  		addi.w	#$E0,d0
0000AA9C B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000AAA0 6500                       		bcs.s	Obj23_Delete	; if yes, branch
0000AAA2 4E75                       		rts	
0000AAA4                            ; ===========================================================================
0000AAA4                            
0000AAA4                            Obj23_Explode:				; XREF: Obj23_FromBuzz
0000AAA4 117C 0024 0000             		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
0000AAAA 117C 0000 0024             		move.b	#0,$24(a0)
0000AAB0 6000 F2FC                  		bra.w	Obj24
0000AAB4                            ; ===========================================================================
0000AAB4                            
0000AAB4                            Obj23_Delete:				; XREF: Obj23_Index
0000AAB4 6100 0000                  		bsr.w	DeleteObject
0000AAB8 4E75                       		rts	
0000AABA                            ; ===========================================================================
0000AABA                            
0000AABA                            Obj23_FromNewt:				; XREF: Obj23_Index
0000AABA 4A28 0001                  		tst.b	1(a0)
0000AABE 6AF4                       		bpl.s	Obj23_Delete
0000AAC0 6100 0000                  		bsr.w	SpeedToPos
0000AAC4                            
0000AAC4                            Obj23_Animate2:				; XREF: Obj23_Main
0000AAC4 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000AACA 6100 0000                  		bsr.w	AnimateSprite
0000AACE 6100 0000                  		bsr.w	DisplaySprite
0000AAD2 4E75                       		rts	
0000AAD4                            ; ===========================================================================
0000AAD4                            Ani_obj22:
0000AAD4                            	include "_anim\obj22.asm"
0000AAD4                            ; ---------------------------------------------------------------------------
0000AAD4                            ; Animation script - Buzz Bomber enemy
0000AAD4                            ; ---------------------------------------------------------------------------
0000AAD4 0000                       		dc.w byte_9A1E-Ani_obj22
0000AAD6 0000                       		dc.w byte_9A22-Ani_obj22
0000AAD8 0000                       		dc.w byte_9A26-Ani_obj22
0000AADA 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000AADE 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000AAE2 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
0000AAE6                            		even
0000AAE6                            		even
0000AAE6                            
0000AAE6                            Ani_obj23:
0000AAE6                            	include "_anim\obj23.asm"
0000AAE6                            ; ---------------------------------------------------------------------------
0000AAE6                            ; Animation script - missile that Buzz Bomber throws
0000AAE6                            ; ---------------------------------------------------------------------------
0000AAE6 0000                       		dc.w byte_9A2E-Ani_obj23
0000AAE8 0000                       		dc.w byte_9A32-Ani_obj23
0000AAEA 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
0000AAEE 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
0000AAF2                            		even
0000AAF2                            		even
0000AAF2                            
0000AAF2                            ; ---------------------------------------------------------------------------
0000AAF2                            ; Sprite mappings - Buzz Bomber	enemy
0000AAF2                            ; ---------------------------------------------------------------------------
0000AAF2                            Map_obj22:
0000AAF2                            	include "_maps\obj22.asm"
0000AAF2                            ; ---------------------------------------------------------------------------
0000AAF2                            ; Sprite mappings - Buzz Bomber	enemy
0000AAF2                            ; ---------------------------------------------------------------------------
0000AAF2 0000 0000                  		dc.w byte_9A42-Map_obj22, byte_9A61-Map_obj22
0000AAF6 0000 0000                  		dc.w byte_9A80-Map_obj22, byte_9AA4-Map_obj22
0000AAFA 0000 0000                  		dc.w byte_9AC8-Map_obj22, byte_9AE7-Map_obj22
0000AAFE 06                         byte_9A42:	dc.b 6
0000AAFF F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000AB04 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000AB09 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000AB0E 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000AB13 F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000AB18 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000AB1D 06                         byte_9A61:	dc.b 6
0000AB1E F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000AB23 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000AB28 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000AB2D 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000AB32 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000AB37 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000AB3C 07                         byte_9A80:	dc.b 7
0000AB3D 0400 0030 0C               		dc.b 4,	0, 0, $30, $C
0000AB42 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000AB47 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000AB4C 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000AB51 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000AB56 F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000AB5B F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000AB60 07                         byte_9AA4:	dc.b 7
0000AB61 0404 0031 0C               		dc.b 4,	4, 0, $31, $C
0000AB66 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000AB6B F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000AB70 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000AB75 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000AB7A F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000AB7F F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000AB84 06                         byte_9AC8:	dc.b 6
0000AB85 F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
0000AB8A 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
0000AB8F 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
0000AB94 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
0000AB99 F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000AB9E F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000ABA3 04                         byte_9AE7:	dc.b 4
0000ABA4 F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
0000ABA9 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
0000ABAE 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
0000ABB3 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
0000ABB8 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000ABBD F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000ABC2                            		even
0000ABC2                            		even
0000ABC2                            
0000ABC2                            ; ---------------------------------------------------------------------------
0000ABC2                            ; Sprite mappings - missile that Buzz Bomber throws
0000ABC2                            ; ---------------------------------------------------------------------------
0000ABC2                            Map_obj23:
0000ABC2                            	include "_maps\obj23.asm"
0000ABC2                            ; ---------------------------------------------------------------------------
0000ABC2                            ; Sprite mappings - missile that Buzz Bomber throws
0000ABC2                            ; ---------------------------------------------------------------------------
0000ABC2 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
0000ABC6 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
0000ABCA 01                         byte_9B0E:	dc.b 1
0000ABCB F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
0000ABD0 01                         byte_9B14:	dc.b 1
0000ABD1 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000ABD6 01                         byte_9B1A:	dc.b 1
0000ABD7 F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
0000ABDC 01                         byte_9B20:	dc.b 1
0000ABDD F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000ABE2                            		even
0000ABE2                            		even
0000ABE2                            
0000ABE2                            ; ===========================================================================
0000ABE2                            ; ---------------------------------------------------------------------------
0000ABE2                            ; Object 25 - rings
0000ABE2                            ; ---------------------------------------------------------------------------
0000ABE2                            
0000ABE2                            Obj25:					; XREF: Obj_Index
0000ABE2 7000                       		moveq	#0,d0
0000ABE4 1028 0024                  		move.b	$24(a0),d0
0000ABE8 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
0000ABEC 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
0000ABF0                            ; ===========================================================================
0000ABF0 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
0000ABF2 0000                       		dc.w Obj25_Animate-Obj25_Index
0000ABF4 0000                       		dc.w Obj25_Collect-Obj25_Index
0000ABF6 0000                       		dc.w Obj25_Sparkle-Obj25_Index
0000ABF8 0000                       		dc.w Obj25_Delete-Obj25_Index
0000ABFA                            ; ---------------------------------------------------------------------------
0000ABFA                            ; Distances between rings (format: horizontal, vertical)
0000ABFA                            ; ---------------------------------------------------------------------------
0000ABFA 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
0000ABFC 1800                       		dc.b $18, 0		; horizontal normal
0000ABFE 2000                       		dc.b $20, 0		; horizontal wide
0000AC00 0010                       		dc.b 0,	$10		; vertical tight
0000AC02 0018                       		dc.b 0,	$18		; vertical normal
0000AC04 0020                       		dc.b 0,	$20		; vertical wide
0000AC06 1010                       		dc.b $10, $10		; diagonal
0000AC08 1818                       		dc.b $18, $18
0000AC0A 2020                       		dc.b $20, $20
0000AC0C F010                       		dc.b $F0, $10
0000AC0E E818                       		dc.b $E8, $18
0000AC10 E020                       		dc.b $E0, $20
0000AC12 1008                       		dc.b $10, 8
0000AC14 1810                       		dc.b $18, $10
0000AC16 F008                       		dc.b $F0, 8
0000AC18 E810                       		dc.b $E8, $10
0000AC1A                            ; ===========================================================================
0000AC1A                            
0000AC1A                            Obj25_Main:				; XREF: Obj25_Index
0000AC1A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000AC1E 7000                       		moveq	#0,d0
0000AC20 1028 0023                  		move.b	$23(a0),d0
0000AC24 45F2 0002                  		lea	2(a2,d0.w),a2
0000AC28 1812                       		move.b	(a2),d4
0000AC2A 1228 0028                  		move.b	$28(a0),d1
0000AC2E 1001                       		move.b	d1,d0
0000AC30 0241 0007                  		andi.w	#7,d1
0000AC34 0C41 0007                  		cmpi.w	#7,d1
0000AC38 6600                       		bne.s	loc_9B80
0000AC3A 7206                       		moveq	#6,d1
0000AC3C                            
0000AC3C                            loc_9B80:
0000AC3C 4841                       		swap	d1
0000AC3E 323C 0000                  		move.w	#0,d1
0000AC42 E808                       		lsr.b	#4,d0
0000AC44 D040                       		add.w	d0,d0
0000AC46 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
0000AC4A 4885                       		ext.w	d5
0000AC4C 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
0000AC50 4886                       		ext.w	d6
0000AC52 2248                       		movea.l	a0,a1
0000AC54 3428 0008                  		move.w	8(a0),d2
0000AC58 3628 000C                  		move.w	$C(a0),d3
0000AC5C E20C                       		lsr.b	#1,d4
0000AC5E 6500                       		bcs.s	loc_9C02
0000AC60 0892 0007                  		bclr	#7,(a2)
0000AC64 6000                       		bra.s	loc_9BBA
0000AC66                            ; ===========================================================================
0000AC66                            
0000AC66                            Obj25_MakeRings:
0000AC66 4841                       		swap	d1
0000AC68 E20C                       		lsr.b	#1,d4
0000AC6A 6500                       		bcs.s	loc_9C02
0000AC6C 0892 0007                  		bclr	#7,(a2)
0000AC70 6100 0000                  		bsr.w	SingleObjLoad
0000AC74 6600                       		bne.s	loc_9C0E
0000AC76                            
0000AC76                            loc_9BBA:				; XREF: Obj25_Main
0000AC76 137C 0025 0000             		move.b	#$25,0(a1)	; load ring object
0000AC7C 5429 0024                  		addq.b	#2,$24(a1)
0000AC80 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
0000AC84 3368 0008 0032             		move.w	8(a0),$32(a1)
0000AC8A 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
0000AC8E 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000AC96 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000AC9C 137C 0004 0001             		move.b	#4,1(a1)
0000ACA2 137C 0002 0018             		move.b	#2,$18(a1)
0000ACA8 137C 0047 0020             		move.b	#$47,$20(a1)
0000ACAE 137C 0008 0019             		move.b	#8,$19(a1)
0000ACB4 1368 0023 0023             		move.b	$23(a0),$23(a1)
0000ACBA 1341 0034                  		move.b	d1,$34(a1)
0000ACBE                            
0000ACBE                            loc_9C02:
0000ACBE 5241                       		addq.w	#1,d1
0000ACC0 D445                       		add.w	d5,d2		; add ring spacing value to d2
0000ACC2 D646                       		add.w	d6,d3		; add ring spacing value to d3
0000ACC4 4841                       		swap	d1
0000ACC6 51C9 FF9E                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
0000ACCA                            
0000ACCA                            loc_9C0E:
0000ACCA 0812 0000                  		btst	#0,(a2)
0000ACCE 6600 0000                  		bne.w	DeleteObject
0000ACD2                            
0000ACD2                            Obj25_Animate:				; XREF: Obj25_Index
0000ACD2 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
0000ACD8 6100 0000                  		bsr.w	DisplaySprite
0000ACDC 3028 0032                  		move.w	$32(a0),d0
0000ACE0 0240 FF80                  		andi.w	#$FF80,d0
0000ACE4 3238 F700                  		move.w	($FFFFF700).w,d1
0000ACE8 0441 0080                  		subi.w	#$80,d1
0000ACEC 0241 FF80                  		andi.w	#$FF80,d1
0000ACF0 9041                       		sub.w	d1,d0
0000ACF2 0C40 0280                  		cmpi.w	#$280,d0
0000ACF6 6200                       		bhi.s	Obj25_Delete
0000ACF8 4E75                       		rts	
0000ACFA                            ; ===========================================================================
0000ACFA                            
0000ACFA                            Obj25_Collect:				; XREF: Obj25_Index
0000ACFA 5428 0024                  		addq.b	#2,$24(a0)
0000ACFE 117C 0000 0020             		move.b	#0,$20(a0)
0000AD04 117C 0001 0018             		move.b	#1,$18(a0)
0000AD0A 6100 0000                  		bsr.w	CollectRing
0000AD0E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000AD12 7000                       		moveq	#0,d0
0000AD14 1028 0023                  		move.b	$23(a0),d0
0000AD18 1228 0034                  		move.b	$34(a0),d1
0000AD1C 03F2 0002                  		bset	d1,2(a2,d0.w)
0000AD20                            
0000AD20                            Obj25_Sparkle:				; XREF: Obj25_Index
0000AD20 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000AD26 6100 0000                  		bsr.w	AnimateSprite
0000AD2A 6000 0000                  		bra.w	DisplaySprite
0000AD2E                            ; ===========================================================================
0000AD2E                            
0000AD2E                            Obj25_Delete:				; XREF: Obj25_Index
0000AD2E 6000 0000                  		bra.w	DeleteObject
0000AD32                            
0000AD32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AD32                            
0000AD32                            
0000AD32                            CollectRing:				; XREF: Obj25_Collect
0000AD32 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000AD36 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000AD3C 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000AD40 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000AD46 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000AD48 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000AD4E 6700                       		beq.s	loc_9CA4
0000AD50 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000AD56 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000AD58 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000AD5E 6600                       		bne.s	Obj25_PlaySnd
0000AD60                            
0000AD60                            loc_9CA4:
0000AD60 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000AD64 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000AD68 7091                               moveq   #$FFFFFF91,d0
0000AD6A 4EB9 0000 1304                     jsr     PlaySample
0000AD70 303C 0088                  		move.w	#$88,d0		; play extra life music
0000AD74                            
0000AD74                            Obj25_PlaySnd:
0000AD74 4EF9 0000 132C             		jmp	(PlaySound_Special).l
0000AD7A                            ; End of function CollectRing
0000AD7A                            
0000AD7A                            ; ===========================================================================
0000AD7A                            ; ---------------------------------------------------------------------------
0000AD7A                            ; Object 37 - rings flying out of Sonic	when he's hit
0000AD7A                            ; ---------------------------------------------------------------------------
0000AD7A                            
0000AD7A                            Obj37:					; XREF: Obj_Index
0000AD7A 7000                       		moveq	#0,d0
0000AD7C 1028 0024                  		move.b	$24(a0),d0
0000AD80 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000AD84 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000AD88                            ; ===========================================================================
0000AD88 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000AD8A 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000AD8C 0000                       		dc.w Obj37_Collect-Obj37_Index
0000AD8E 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000AD90 0000                       		dc.w Obj37_Delete-Obj37_Index
0000AD92                            ; ===========================================================================
0000AD92                            
0000AD92                            Obj37_CountRings:			; XREF: Obj37_Index
0000AD92 2248                       		movea.l	a0,a1
0000AD94 7A00                       		moveq	#0,d5
0000AD96 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000AD9A 7020                       		moveq	#32,d0
0000AD9C BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000AD9E 6500                       		bcs.s	loc_9CDE	; if not, branch
0000ADA0 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000ADA2                            
0000ADA2                            loc_9CDE:
0000ADA2 5345                       		subq.w	#1,d5
0000ADA4 383C 0288                  		move.w	#$288,d4
0000ADA8 6000                       		bra.s	Obj37_MakeRings
0000ADAA                            ; ===========================================================================
0000ADAA                            
0000ADAA                            Obj37_Loop:
0000ADAA 6100 0000                  		bsr.w	SingleObjLoad
0000ADAE 6600 0000                  		bne.w	Obj37_ResetCounter
0000ADB2                            
0000ADB2                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000ADB2 137C 0037 0000             		move.b	#$37,0(a1)	; load bouncing	ring object
0000ADB8 5429 0024                  		addq.b	#2,$24(a1)
0000ADBC 137C 0008 0016             		move.b	#8,$16(a1)
0000ADC2 137C 0008 0017             		move.b	#8,$17(a1)
0000ADC8 3368 0008 0008             		move.w	8(a0),8(a1)
0000ADCE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000ADD4 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000ADDC 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000ADE2 137C 0004 0001             		move.b	#4,1(a1)
0000ADE8 137C 0003 0018             		move.b	#3,$18(a1)
0000ADEE 137C 0047 0020             		move.b	#$47,$20(a1)
0000ADF4 137C 0008 0019             		move.b	#8,$19(a1)
0000ADFA 11FC 00FF FEC6             		move.b	#-1,($FFFFFEC6).w
0000AE00 4A44                       		tst.w	d4
0000AE02 6B00                       		bmi.s	loc_9D62
0000AE04 3004                       		move.w	d4,d0
0000AE06 6100 846C                  		bsr.w	CalcSine
0000AE0A 3404                       		move.w	d4,d2
0000AE0C E04A                       		lsr.w	#8,d2
0000AE0E E560                       		asl.w	d2,d0
0000AE10 E561                       		asl.w	d2,d1
0000AE12 3400                       		move.w	d0,d2
0000AE14 3601                       		move.w	d1,d3
0000AE16 0604 0010                  		addi.b	#$10,d4
0000AE1A 6400                       		bcc.s	loc_9D62
0000AE1C 0444 0080                  		subi.w	#$80,d4
0000AE20 6400                       		bcc.s	loc_9D62
0000AE22 383C 0288                  		move.w	#$288,d4
0000AE26                            
0000AE26                            loc_9D62:
0000AE26 3342 0010                  		move.w	d2,$10(a1)
0000AE2A 3343 0012                  		move.w	d3,$12(a1)
0000AE2E 4442                       		neg.w	d2
0000AE30 4444                       		neg.w	d4
0000AE32 51CD FF76                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000AE36                            
0000AE36                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000AE36 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000AE3C 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000AE42 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000AE48 708F                               moveq   #$FFFFFF8F,d0
0000AE4A 4EB9 0000 1304                     jsr     PlaySample
0000AE50 303C 00C6                  		move.w	#$C6,d0
0000AE54 4EB9 0000 132C             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000AE5A                            
0000AE5A                            Obj37_Bounce:				; XREF: Obj37_Index
0000AE5A 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000AE60 6100 0000                  		bsr.w	SpeedToPos
0000AE64 0668 0018 0012             		addi.w	#$18,$12(a0)
0000AE6A 6B00                       		bmi.s	Obj37_ChkDel
0000AE6C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000AE70 D007                       		add.b	d7,d0
0000AE72 0200 0003                  		andi.b	#3,d0
0000AE76 6600                       		bne.s	Obj37_ChkDel
0000AE78 4EB9 0000 0000             		jsr	ObjHitFloor
0000AE7E 4A41                       		tst.w	d1
0000AE80 6A00                       		bpl.s	Obj37_ChkDel
0000AE82 D368 000C                  		add.w	d1,$C(a0)
0000AE86 3028 0012                  		move.w	$12(a0),d0
0000AE8A E440                       		asr.w	#2,d0
0000AE8C 9168 0012                  		sub.w	d0,$12(a0)
0000AE90 4468 0012                  		neg.w	$12(a0)
0000AE94                            
0000AE94                            Obj37_ChkDel:				; XREF: Obj37_Bounce
0000AE94 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000AE98 6700                       		beq.s	Obj37_Delete
0000AE9A 0C78 FF00 F72C             		cmpi.w	#$FF00,($FFFFF72C).w		; is vertical wrapping enabled?
0000AEA0 6700 0000                  		beq.w	DisplaySprite			; if so, branch
0000AEA4 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000AEA8 0640 00E0                  		addi.w	#$E0,d0
0000AEAC B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
0000AEB0 6500                       		bcs.s	Obj37_Delete	; if yes, branch
0000AEB2 6000 0000                  		bra.w	DisplaySprite
0000AEB6                            ; ===========================================================================
0000AEB6                            
0000AEB6                            Obj37_Collect:				; XREF: Obj37_Index
0000AEB6 5428 0024                  		addq.b	#2,$24(a0)
0000AEBA 117C 0000 0020             		move.b	#0,$20(a0)
0000AEC0 117C 0001 0018             		move.b	#1,$18(a0)
0000AEC6 6100 FE6A                  		bsr.w	CollectRing
0000AECA                            
0000AECA                            Obj37_Sparkle:				; XREF: Obj37_Index
0000AECA 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000AED0 6100 0000                  		bsr.w	AnimateSprite
0000AED4 6000 0000                  		bra.w	DisplaySprite
0000AED8                            ; ===========================================================================
0000AED8                            
0000AED8                            Obj37_Delete:				; XREF: Obj37_Index
0000AED8 6000 0000                  		bra.w	DeleteObject
0000AEDC                            ; ===========================================================================
0000AEDC                            ; ---------------------------------------------------------------------------
0000AEDC                            ; Object 4B - giant ring for entry to special stage
0000AEDC                            ; ---------------------------------------------------------------------------
0000AEDC                            
0000AEDC                            Obj4B:					; XREF: Obj_Index
0000AEDC 7000                       		moveq	#0,d0
0000AEDE 1028 0024                  		move.b	$24(a0),d0
0000AEE2 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000AEE6 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000AEEA                            ; ===========================================================================
0000AEEA 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000AEEC 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000AEEE 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000AEF0 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000AEF2                            ; ===========================================================================
0000AEF2                            
0000AEF2                            Obj4B_Main:				; XREF: Obj4B_Index
0000AEF2 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000AEFA 317C 2400 0002             		move.w	#$2400,2(a0)
0000AF00 0028 0004 0001             		ori.b	#4,1(a0)
0000AF06 117C 0040 0019             		move.b	#$40,$19(a0)
0000AF0C 4A28 0001                  		tst.b	1(a0)
0000AF10 6A00                       		bpl.s	Obj4B_Animate
0000AF12 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000AF18 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000AF1C 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000AF22 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000AF24 4E75                       		rts	
0000AF26                            ; ===========================================================================
0000AF26                            
0000AF26                            Obj4B_Okay:				; XREF: Obj4B_Main
0000AF26 5428 0024                  		addq.b	#2,$24(a0)
0000AF2A 117C 0002 0018             		move.b	#2,$18(a0)
0000AF30 117C 0052 0020             		move.b	#$52,$20(a0)
0000AF36 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000AF3C                            
0000AF3C                            Obj4B_Animate:				; XREF: Obj4B_Index
0000AF3C 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000AF42 3028 0008                  		move.w	8(a0),d0
0000AF46 0240 FF80                  		andi.w	#$FF80,d0
0000AF4A 3238 F700                  		move.w	($FFFFF700).w,d1
0000AF4E 0441 0080                  		subi.w	#$80,d1
0000AF52 0241 FF80                  		andi.w	#$FF80,d1
0000AF56 9041                       		sub.w	d1,d0
0000AF58 0C40 0280                  		cmpi.w	#$280,d0
0000AF5C 6200 0000                  		bhi.w	DeleteObject
0000AF60 6000 0000                  		bra.w	DisplaySprite
0000AF64                            ; ===========================================================================
0000AF64                            
0000AF64                            Obj4B_Collect:				; XREF: Obj4B_Index
0000AF64 5528 0024                  		subq.b	#2,$24(a0)
0000AF68 117C 0000 0020             		move.b	#0,$20(a0)
0000AF6E 6100 0000                  		bsr.w	SingleObjLoad
0000AF72 6600 0000                  		bne.w	Obj4B_PlaySnd
0000AF76 137C 007C 0000             		move.b	#$7C,0(a1)	; load giant ring flash	object
0000AF7C 3368 0008 0008             		move.w	8(a0),8(a1)
0000AF82 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000AF88 2348 003C                  		move.l	a0,$3C(a1)
0000AF8C 3038 D008                  		move.w	($FFFFD008).w,d0
0000AF90 B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000AF94 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000AF96 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000AF9C                            
0000AF9C                            Obj4B_PlaySnd:
0000AF9C 303C 00C3                  		move.w	#$C3,d0
0000AFA0 4EB9 0000 132C             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000AFA6 6094                       		bra.s	Obj4B_Animate
0000AFA8                            ; ===========================================================================
0000AFA8                            
0000AFA8                            Obj4B_Delete:				; XREF: Obj4B_Index
0000AFA8 6000 0000                  		bra.w	DeleteObject
0000AFAC                            ; ===========================================================================
0000AFAC                            ; ---------------------------------------------------------------------------
0000AFAC                            ; Object 7C - flash effect when	you collect the	giant ring
0000AFAC                            ; ---------------------------------------------------------------------------
0000AFAC                            
0000AFAC                            Obj7C:					; XREF: Obj_Index
0000AFAC 7000                       		moveq	#0,d0
0000AFAE 1028 0024                  		move.b	$24(a0),d0
0000AFB2 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000AFB6 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000AFBA                            ; ===========================================================================
0000AFBA 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000AFBC 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000AFBE 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000AFC0                            ; ===========================================================================
0000AFC0                            
0000AFC0                            Obj7C_Main:				; XREF: Obj7C_Index
0000AFC0 5428 0024                  		addq.b	#2,$24(a0)
0000AFC4 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000AFCC 317C 2462 0002             		move.w	#$2462,2(a0)
0000AFD2 0028 0004 0001             		ori.b	#4,1(a0)
0000AFD8 117C 0000 0018             		move.b	#0,$18(a0)
0000AFDE 117C 0020 0019             		move.b	#$20,$19(a0)
0000AFE4 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000AFEA                            
0000AFEA                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000AFEA 6100                       		bsr.s	Obj7C_Collect
0000AFEC 3028 0008                  		move.w	8(a0),d0
0000AFF0 0240 FF80                  		andi.w	#$FF80,d0
0000AFF4 3238 F700                  		move.w	($FFFFF700).w,d1
0000AFF8 0441 0080                  		subi.w	#$80,d1
0000AFFC 0241 FF80                  		andi.w	#$FF80,d1
0000B000 9041                       		sub.w	d1,d0
0000B002 0C40 0280                  		cmpi.w	#$280,d0
0000B006 6200 0000                  		bhi.w	DeleteObject
0000B00A 6000 0000                  		bra.w	DisplaySprite
0000B00E                            
0000B00E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B00E                            
0000B00E                            
0000B00E                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000B00E 5328 001E                  		subq.b	#1,$1E(a0)
0000B012 6A00                       		bpl.s	locret_9F76
0000B014 117C 0001 001E             		move.b	#1,$1E(a0)
0000B01A 5228 001A                  		addq.b	#1,$1A(a0)
0000B01E 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000B024 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000B026 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000B02C 6600                       		bne.s	locret_9F76	; if not, branch
0000B02E 2268 003C                  		movea.l	$3C(a0),a1
0000B032 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000B038 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000B03E 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000B044 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000B048 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000B04C                            
0000B04C                            locret_9F76:
0000B04C 4E75                       		rts	
0000B04E                            ; ===========================================================================
0000B04E                            
0000B04E                            Obj7C_End:				; XREF: Obj7C_Collect
0000B04E 5428 0024                  		addq.b	#2,$24(a0)
0000B052 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000B058 588F                       		addq.l	#4,sp
0000B05A 4E75                       		rts	
0000B05C                            ; End of function Obj7C_Collect
0000B05C                            
0000B05C                            ; ===========================================================================
0000B05C                            
0000B05C                            Obj7C_Delete:				; XREF: Obj7C_Index
0000B05C 6000 0000                  		bra.w	DeleteObject
0000B060                            ; ===========================================================================
0000B060                            Ani_obj25:
0000B060                            	include "_anim\obj25.asm"
0000B060                            ; ---------------------------------------------------------------------------
0000B060                            ; Animation script - ring
0000B060                            ; ---------------------------------------------------------------------------
0000B060 0000                       		dc.w byte_9F8C-Ani_obj25
0000B062 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000B068                            		even
0000B068                            		even
0000B068                            
0000B068                            ; ---------------------------------------------------------------------------
0000B068                            ; Sprite mappings - rings
0000B068                            ; ---------------------------------------------------------------------------
0000B068                            Map_obj25:
0000B068                            	include "_maps\obj25.asm"
0000B068                            ; ---------------------------------------------------------------------------
0000B068                            ; Sprite mappings - rings
0000B068                            ; ---------------------------------------------------------------------------
0000B068 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000B06C 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000B070 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000B074 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000B078 01                         byte_9FA2:	dc.b 1
0000B079 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000B07E 01                         byte_9FA8:	dc.b 1
0000B07F F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000B084 01                         byte_9FAE:	dc.b 1
0000B085 F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000B08A 01                         byte_9FB4:	dc.b 1
0000B08B F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000B090 01                         byte_9FBA:	dc.b 1
0000B091 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000B096 01                         byte_9FC0:	dc.b 1
0000B097 F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000B09C 01                         byte_9FC6:	dc.b 1
0000B09D F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000B0A2 01                         byte_9FCC:	dc.b 1
0000B0A3 F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000B0A8                            		even
0000B0A8                            		even
0000B0A8                            
0000B0A8                            ; ---------------------------------------------------------------------------
0000B0A8                            ; Sprite mappings - giant ring
0000B0A8                            ; ---------------------------------------------------------------------------
0000B0A8                            Map_obj4B:
0000B0A8                            	include "_maps\obj4B.asm"
0000B0A8                            ; ---------------------------------------------------------------------------
0000B0A8                            ; Sprite mappings - giant ring
0000B0A8                            ; ---------------------------------------------------------------------------
0000B0A8 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000B0AC 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000B0B0 0A                         byte_9FDA:	dc.b $A
0000B0B1 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000B0B6 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000B0BB E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000B0C0 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000B0C5 F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000B0CA F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000B0CF 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000B0D4 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000B0D9 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000B0DE 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000B0E3 08                         byte_A00D:	dc.b 8
0000B0E4 E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000B0E9 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000B0EE E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000B0F3 F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000B0F8 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000B0FD 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000B102 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000B107 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000B10C 04                         byte_A036:	dc.b 4
0000B10D E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000B112 E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000B117 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000B11C 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000B121 08                         byte_A04B:	dc.b 8
0000B122 E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000B127 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000B12C E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000B131 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000B136 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000B13B 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000B140 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000B145 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000B14A                            		even
0000B14A                            		even
0000B14A                            
0000B14A                            ; ---------------------------------------------------------------------------
0000B14A                            ; Sprite mappings - flash effect when you collect the giant ring
0000B14A                            ; ---------------------------------------------------------------------------
0000B14A                            Map_obj7C:
0000B14A                            	include "_maps\obj7C.asm"
0000B14A                            ; ---------------------------------------------------------------------------
0000B14A                            ; Sprite mappings - flash effect when you collect the giant ring
0000B14A                            ; ---------------------------------------------------------------------------
0000B14A 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000B14E 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000B152 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000B156 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000B15A 02                         byte_A084:	dc.b 2
0000B15B E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000B160 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000B165 04                         byte_A08F:	dc.b 4
0000B166 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000B16B E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000B170 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000B175 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000B17A 04                         byte_A0A4:	dc.b 4
0000B17B E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000B180 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000B185 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000B18A 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000B18F 04                         byte_A0B9:	dc.b 4
0000B190 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000B195 E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000B19A 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000B19F 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000B1A4 04                         byte_A0CE:	dc.b 4
0000B1A5 E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000B1AA E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000B1AF 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000B1B4 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000B1B9 04                         byte_A0E3:	dc.b 4
0000B1BA E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000B1BF E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000B1C4 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000B1C9 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000B1CE 02                         byte_A0F8:	dc.b 2
0000B1CF E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000B1D4 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000B1D9 04                         byte_A103:	dc.b 4
0000B1DA E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000B1DF E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000B1E4 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000B1E9 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000B1EE                            		even
0000B1EE                            		even
0000B1EE                            
0000B1EE                            ; ===========================================================================
0000B1EE                            ; ---------------------------------------------------------------------------
0000B1EE                            ; Object 26 - monitors
0000B1EE                            ; ---------------------------------------------------------------------------
0000B1EE                            
0000B1EE                            Obj26:					; XREF: Obj_Index
0000B1EE 7000                       		moveq	#0,d0
0000B1F0 1028 0024                  		move.b	$24(a0),d0
0000B1F4 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000B1F8 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000B1FC                            ; ===========================================================================
0000B1FC 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000B1FE 0000                       		dc.w Obj26_Solid-Obj26_Index
0000B200 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000B202 0000                       		dc.w Obj26_Animate-Obj26_Index
0000B204 0000                       		dc.w Obj26_Display-Obj26_Index
0000B206                            ; ===========================================================================
0000B206                            
0000B206                            Obj26_Main:				; XREF: Obj26_Index
0000B206 5428 0024                  		addq.b	#2,$24(a0)
0000B20A 117C 000E 0016             		move.b	#$E,$16(a0)
0000B210 117C 000E 0017             		move.b	#$E,$17(a0)
0000B216 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000B21E 317C 0680 0002             		move.w	#$680,2(a0)
0000B224 117C 0004 0001             		move.b	#4,1(a0)
0000B22A 117C 0003 0018             		move.b	#3,$18(a0)
0000B230 117C 000F 0019             		move.b	#$F,$19(a0)
0000B236 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000B23A 7000                       		moveq	#0,d0
0000B23C 1028 0023                  		move.b	$23(a0),d0
0000B240 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000B246 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000B24C 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000B24E 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000B254 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000B25A 4E75                       		rts	
0000B25C                            ; ===========================================================================
0000B25C                            
0000B25C                            Obj26_NotBroken:			; XREF: Obj26_Main
0000B25C 117C 0046 0020             		move.b	#$46,$20(a0)
0000B262 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000B268                            
0000B268                            Obj26_Solid:				; XREF: Obj26_Index
0000B268 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000B26C 6700                       		beq.s	loc_A1EC	; if not, branch
0000B26E 5500                       		subq.b	#2,d0
0000B270 6600                       		bne.s	Obj26_Fall
0000B272 7200                       		moveq	#0,d1
0000B274 1228 0019                  		move.b	$19(a0),d1
0000B278 0641 000B                  		addi.w	#$B,d1
0000B27C 6100 D3FE                  		bsr.w	ExitPlatform
0000B280 0829 0003 0022             		btst	#3,$22(a1)
0000B286 6600 0000                  		bne.w	loc_A1BC
0000B28A 4228 0025                  		clr.b	$25(a0)
0000B28E 6000 0000                  		bra.w	Obj26_Animate
0000B292                            ; ===========================================================================
0000B292                            
0000B292                            loc_A1BC:				; XREF: Obj26_Solid
0000B292 363C 0010                  		move.w	#$10,d3
0000B296 3428 0008                  		move.w	8(a0),d2
0000B29A 6100 D942                  		bsr.w	MvSonicOnPtfm
0000B29E 6000 0000                  		bra.w	Obj26_Animate
0000B2A2                            ; ===========================================================================
0000B2A2                            
0000B2A2                            Obj26_Fall:				; XREF: Obj26_Solid
0000B2A2 6100 0000                  		bsr.w	ObjectFall
0000B2A6 4EB9 0000 0000             		jsr	ObjHitFloor
0000B2AC 4A41                       		tst.w	d1
0000B2AE 6A00 0000                  		bpl.w	Obj26_Animate
0000B2B2 D368 000C                  		add.w	d1,$C(a0)
0000B2B6 4268 0012                  		clr.w	$12(a0)
0000B2BA 4228 0025                  		clr.b	$25(a0)
0000B2BE 6000 0000                  		bra.w	Obj26_Animate
0000B2C2                            ; ===========================================================================
0000B2C2                            
0000B2C2                            loc_A1EC:				; XREF: Obj26_Solid
0000B2C2 323C 001A                  		move.w	#$1A,d1
0000B2C6 343C 000F                  		move.w	#$F,d2
0000B2CA 6100 0000                  		bsr.w	Obj26_SolidSides
0000B2CE 6700 0000                  		beq.w	loc_A25C
0000B2D2 4A69 0012                  		tst.w	$12(a1)
0000B2D6 6B00                       		bmi.s	loc_A20A
0000B2D8 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000B2DE 6700                       		beq.s	loc_A25C	; if yes, branch
0000B2E0 0C29 001F 001C             		cmp.b	#$1F,$1C(a1)	; is Sonic spin-dashing?
0000B2E6 6700                       		beq.s	loc_A25C	; if yes, branch
0000B2E8                            
0000B2E8                            loc_A20A:
0000B2E8 4A41                       		tst.w	d1
0000B2EA 6A00                       		bpl.s	loc_A220
0000B2EC 9769 000C                  		sub.w	d3,$C(a1)
0000B2F0 6100 D278                  		bsr.w	loc_74AE
0000B2F4 117C 0002 0025             		move.b	#2,$25(a0)
0000B2FA 6000 0000                  		bra.w	Obj26_Animate
0000B2FE                            ; ===========================================================================
0000B2FE                            
0000B2FE                            loc_A220:
0000B2FE 4A40                       		tst.w	d0
0000B300 6700 0000                  		beq.w	loc_A246
0000B304 6B00                       		bmi.s	loc_A230
0000B306 4A69 0010                  		tst.w	$10(a1)
0000B30A 6B00                       		bmi.s	loc_A246
0000B30C 6000                       		bra.s	loc_A236
0000B30E                            ; ===========================================================================
0000B30E                            
0000B30E                            loc_A230:
0000B30E 4A69 0010                  		tst.w	$10(a1)
0000B312 6A00                       		bpl.s	loc_A246
0000B314                            
0000B314                            loc_A236:
0000B314 9169 0008                  		sub.w	d0,8(a1)
0000B318 337C 0000 0014             		move.w	#0,$14(a1)
0000B31E 337C 0000 0010             		move.w	#0,$10(a1)
0000B324                            
0000B324                            loc_A246:
0000B324 0829 0001 0022             		btst	#1,$22(a1)
0000B32A 6600                       		bne.s	loc_A26A
0000B32C 08E9 0005 0022             		bset	#5,$22(a1)
0000B332 08E8 0005 0022             		bset	#5,$22(a0)
0000B338 6000                       		bra.s	Obj26_Animate
0000B33A                            ; ===========================================================================
0000B33A                            
0000B33A                            loc_A25C:
0000B33A 0828 0005 0022             		btst	#5,$22(a0)
0000B340 6700                       		beq.s	Obj26_Animate
0000B342 0C29 0002 001C             		cmp.b	#2,$1C(a1)	; check if in jumping/rolling animation
0000B348 6700                       		beq.s	loc_A26A
0000B34A 0C29 0017 001C             		cmp.b	#$17,$1C(a1)	; check if in drowning animation
0000B350 6700                       		beq.s	loc_A26A
0000B352 337C 0001 001C             		move.w	#1,$1C(a1)
0000B358                            
0000B358                            loc_A26A:
0000B358 08A8 0005 0022             		bclr	#5,$22(a0)
0000B35E 08A9 0005 0022             		bclr	#5,$22(a1)
0000B364                            
0000B364                            Obj26_Animate:				; XREF: Obj26_Index
0000B364 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000B36A 6100 0000                  		bsr.w	AnimateSprite
0000B36E                            
0000B36E                            Obj26_Display:				; XREF: Obj26_Index
0000B36E 6100 0000                  		bsr.w	DisplaySprite
0000B372 3028 0008                  		move.w	8(a0),d0
0000B376 0240 FF80                  		andi.w	#$FF80,d0
0000B37A 3238 F700                  		move.w	($FFFFF700).w,d1
0000B37E 0441 0080                  		subi.w	#$80,d1
0000B382 0241 FF80                  		andi.w	#$FF80,d1
0000B386 9041                       		sub.w	d1,d0
0000B388 0C40 0280                  		cmpi.w	#$280,d0
0000B38C 6200 0000                  		bhi.w	DeleteObject
0000B390 4E75                       		rts	
0000B392                            ; ===========================================================================
0000B392                            
0000B392                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000B392 5428 0024                  		addq.b	#2,$24(a0)
0000B396 117C 0000 0020             		move.b	#0,$20(a0)
0000B39C 6100 0000                  		bsr.w	SingleObjLoad
0000B3A0 6600                       		bne.s	Obj26_Explode
0000B3A2 137C 002E 0000             		move.b	#$2E,0(a1)	; load monitor contents	object
0000B3A8 3368 0008 0008             		move.w	8(a0),8(a1)
0000B3AE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000B3B4 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000B3BA                            
0000B3BA                            Obj26_Explode:
0000B3BA 6100 0000                  		bsr.w	SingleObjLoad
0000B3BE 6600                       		bne.s	Obj26_SetBroken
0000B3C0 137C 0027 0000             		move.b	#$27,0(a1)	; load explosion object
0000B3C6 5429 0024                  		addq.b	#2,$24(a1)
0000B3CA 3368 0008 0008             		move.w	8(a0),8(a1)
0000B3D0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000B3D6                            
0000B3D6                            Obj26_SetBroken:
0000B3D6 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000B3DA 7000                       		moveq	#0,d0
0000B3DC 1028 0023                  		move.b	$23(a0),d0
0000B3E0 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000B3E6 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000B3EC 6000 0000                  		bra.w	DisplaySprite
0000B3F0                            ; ===========================================================================
0000B3F0                            ; ---------------------------------------------------------------------------
0000B3F0                            ; Object 2E - contents of monitors
0000B3F0                            ; ---------------------------------------------------------------------------
0000B3F0                            
0000B3F0                            Obj2E:					; XREF: Obj_Index
0000B3F0 7000                       		moveq	#0,d0
0000B3F2 1028 0024                  		move.b	$24(a0),d0
0000B3F6 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000B3FA 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000B3FE 6000 0000                  		bra.w	DisplaySprite
0000B402                            ; ===========================================================================
0000B402 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000B404 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000B406 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000B408                            ; ===========================================================================
0000B408                            
0000B408                            Obj2E_Main:				; XREF: Obj2E_Index
0000B408 5428 0024                  		addq.b	#2,$24(a0)
0000B40C 317C 0680 0002             		move.w	#$680,2(a0)
0000B412 117C 0024 0001             		move.b	#$24,1(a0)
0000B418 117C 0003 0018             		move.b	#3,$18(a0)
0000B41E 117C 0008 0019             		move.b	#8,$19(a0)
0000B424 317C FD00 0012             		move.w	#-$300,$12(a0)
0000B42A 7000                       		moveq	#0,d0
0000B42C 1028 001C                  		move.b	$1C(a0),d0
0000B430 5400                       		addq.b	#2,d0
0000B432 1140 001A                  		move.b	d0,$1A(a0)
0000B436 227C 0000 0000             		movea.l	#Map_obj26,a1
0000B43C D000                       		add.b	d0,d0
0000B43E D2F1 0000                  		adda.w	(a1,d0.w),a1
0000B442 5249                       		addq.w	#1,a1
0000B444 2149 0004                  		move.l	a1,4(a0)
0000B448                            
0000B448                            Obj2E_Move:				; XREF: Obj2E_Index
0000B448 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000B44C 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000B450 6100 0000                  		bsr.w	SpeedToPos
0000B454 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000B45A 4E75                       		rts	
0000B45C                            ; ===========================================================================
0000B45C                            
0000B45C                            Obj2E_ChkEggman:    ; XREF: Obj2E_Move
0000B45C 5428 0024                          addq.b    #2,$24(a0)
0000B460 317C 001D 001E                     move.w    #29,$1E(a0)
0000B466 1028 001C                          move.b    $1C(a0),d0
0000B46A 0C00 0001                          cmpi.b    #1,d0; does monitor contain Eggman?
0000B46E 6600                               bne.s    Obj2E_ChkSonic ; if not, go and check for the next monitor type (1-up icon)
0000B470 2248                               move.l    a0,a1 ; move a0 to a1, because Touch_ChkHurt wants the damaging object to be in a1
0000B472 2F08                               move.l    a0,-(sp) ; push a0 on the stack, and decrement stack pointer
0000B474 41F8 D000                          lea    ($FFFFD000).w,a0 ; put Sonic's ram address in a0, because Touch_ChkHurt wants the damaged object to be in a0
0000B478 4EB9 0000 0000                     jsr    Touch_ChkHurt ; run the Touch_ChkHurt routine
0000B47E 205F                               move.l    (sp)+,a0 ; pop the previous value of a0 from the stack, and increment stack pointer
0000B480 4E75                               rts ; The Eggman monitor now does something!
0000B482                            ; ===========================================================================
0000B482                            
0000B482                            Obj2E_ChkSonic:
0000B482 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000B486 6600                       		bne.s	Obj2E_ChkShoes
0000B488                            
0000B488                            ExtraLife:
0000B488 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000B48C 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000B490 7091                               moveq   #$FFFFFF91,d0
0000B492 4EB9 0000 1304                     jsr     PlaySample
0000B498 303C 0088                  		move.w	#$88,d0
0000B49C 4EF9 0000 1326             		jmp	(PlaySound).l	; play extra life music
0000B4A2                            ; ===========================================================================
0000B4A2                            
0000B4A2                            Obj2E_ChkShoes:
0000B4A2 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000B4A6 6600                       		bne.s	Obj2E_ChkShield
0000B4A8 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000B4AE                            
0000B4AE 0C38 0001 FE2E             		cmpi.b	#$1,($FFFFFE2E).w	; am I already speed shoe'd?
0000B4B4 6700                       		beq.s	Obj2E_NoMusic2	; if so, branch
0000B4B6                            
0000B4B6 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000B4BC 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000B4C2 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000B4C8 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000B4CE                            
0000B4CE 0C38 0001 FE2D             		cmpi.b	#$1,($FFFFFE2D).w	; do I also have invincibility?
0000B4D4 6600                       		bne.b	Obj2E_spd_only	; if I don't then play regular speed shoes music
0000B4D6 303C 0097                  		move.w	#$97,d0		; if I do, then play awesome music
0000B4DA 6000                       		bra.b	Obj2E_spd_play
0000B4DC                            Obj2E_spd_only:
0000B4DC 303C 009A                  		move.w	#$9A,d0
0000B4E0                            Obj2E_spd_play:
0000B4E0 4EF9 0000 1326             		jmp	(PlaySound).l	; Speed	up the music
0000B4E6                            ; ===========================================================================
0000B4E6                            Obj2E_NoMusic2:
0000B4E6 4E75                       		rts
0000B4E8                            
0000B4E8                            Obj2E_ChkShield:
0000B4E8 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000B4EC 6600                       		bne.s	Obj2E_ChkInvinc
0000B4EE 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000B4F4                            	;	moveq	#14,d0		; load Sonic's new Palette
0000B4F4                            	;	jmp		PalLoad1
0000B4F4 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000B4FA 708C                               moveq   #$FFFFFF8C,d0
0000B4FC 4EB9 0000 1304                     jsr     PlaySample
0000B502                            ; ===========================================================================
0000B502                            
0000B502                            Obj2E_ChkInvinc:
0000B502 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000B506 6600 0000                  		bne.w	Obj2E_ChkRings
0000B50A 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000B510                            
0000B510 0C38 0001 FE2D             		cmpi.b	#$1,($FFFFFE2D).w	; am I already invincible?
0000B516 6700                       		beq.s	Obj2E_NoMusic	; if so, branch
0000B518                            
0000B518 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000B51E                            
0000B51E 11FC 004A D200             		move.b	#$4A,($FFFFD200).w ; load stars	object ($3801)
0000B524 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000B52A 11FC 004A D240             		move.b	#$4A,($FFFFD240).w ; load stars	object ($3802)
0000B530 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000B536 11FC 004A D280             		move.b	#$4A,($FFFFD280).w ; load stars	object ($3803)
0000B53C 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000B542 11FC 004A D2C0             		move.b	#$4A,($FFFFD2C0).w ; load stars	object ($3804)
0000B548 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000B54E 4A38 F7AA                  		tst.b	($FFFFF7AA).w	; is boss mode on?
0000B552 6600                       		bne.s	Obj2E_NoMusic	; if yes, branch
0000B554                            
0000B554 0C38 0001 FE10             		cmpi.b	#$1,($FFFFFE10).w	; is this Labyrinth?
0000B55A 6600                       		bne.s	NotLZinv	; if not, branch
0000B55C 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
0000B560 0C40 000C                  		cmpi.w	#$C,d0
0000B564 6200                       		bhi.s	NotLZinv	; if air is above $C, branch
0000B566 6000                       		bra.s	Obj2E_NoMusic
0000B568                            
0000B568                            NotLZinv:
0000B568 0C38 0001 FE2E             		cmpi.b	#$1,($FFFFFE2E).w	; do I also have speed shoes?
0000B56E 6600                       		bne.b	Obj2E_inv_only	; if I don't then play regular invincibility music
0000B570 303C 0097                  		move.w	#$97,d0		; if I do, then play awesome music
0000B574 6000                       		bra.b	Obj2E_inv_play
0000B576                            Obj2E_inv_only:
0000B576 303C 0087                  		move.w	#$87,d0
0000B57A                            Obj2E_inv_play:
0000B57A 4EF9 0000 1326             		jmp	(PlaySound).l	; play invincibility music
0000B580                            ; ===========================================================================
0000B580                            
0000B580                            Obj2E_NoMusic:
0000B580 4E75                       		rts	
0000B582                            ; ===========================================================================
0000B582                            
0000B582                            Obj2E_ChkRings:
0000B582 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000B586 6600                       		bne.s	Obj2E_ChkS
0000B588 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000B58E 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000B594 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000B59A 6500                       		bcs.s	Obj2E_RingSound
0000B59C 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000B5A2 6700 FEE4                  		beq.w	ExtraLife
0000B5A6 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000B5AC 6500                       		bcs.s	Obj2E_RingSound
0000B5AE 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000B5B4 6700 FED2                  		beq.w	ExtraLife
0000B5B8                            
0000B5B8                            Obj2E_RingSound:
0000B5B8 303C 00B5                  		move.w	#$B5,d0
0000B5BC 4EF9 0000 1326             		jmp	(PlaySound).l	; play ring sound
0000B5C2                            ; ===========================================================================
0000B5C2                            
0000B5C2                            Obj2E_ChkS:
0000B5C2 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000B5C6 6600                       		bne.s	Obj2E_ChkEnd
0000B5C8 4E71                       		nop	
0000B5CA                            
0000B5CA                            Obj2E_ChkEnd:
0000B5CA 4E75                       		rts			; 'S' and goggles monitors do nothing
0000B5CC                            ; ===========================================================================
0000B5CC                            
0000B5CC                            Obj2E_Delete:				; XREF: Obj2E_Index
0000B5CC 5368 001E                  		subq.w	#1,$1E(a0)
0000B5D0 6B00 0000                  		bmi.w	DeleteObject
0000B5D4 4E75                       		rts	
0000B5D6                            ; ---------------------------------------------------------------------------
0000B5D6                            ; Subroutine to	make the sides of a monitor solid
0000B5D6                            ; ---------------------------------------------------------------------------
0000B5D6                            
0000B5D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B5D6                            
0000B5D6                            
0000B5D6                            Obj26_SolidSides:			; XREF: loc_A1EC
0000B5D6 43F8 D000                  		lea	($FFFFD000).w,a1
0000B5DA 3029 0008                  		move.w	8(a1),d0
0000B5DE 9068 0008                  		sub.w	8(a0),d0
0000B5E2 D041                       		add.w	d1,d0
0000B5E4 6B00                       		bmi.s	loc_A4E6
0000B5E6 3601                       		move.w	d1,d3
0000B5E8 D643                       		add.w	d3,d3
0000B5EA B043                       		cmp.w	d3,d0
0000B5EC 6200                       		bhi.s	loc_A4E6
0000B5EE 1629 0016                  		move.b	$16(a1),d3
0000B5F2 4883                       		ext.w	d3
0000B5F4 D443                       		add.w	d3,d2
0000B5F6 3629 000C                  		move.w	$C(a1),d3
0000B5FA 9668 000C                  		sub.w	$C(a0),d3
0000B5FE D642                       		add.w	d2,d3
0000B600 6B00                       		bmi.s	loc_A4E6
0000B602 D442                       		add.w	d2,d2
0000B604 B642                       		cmp.w	d2,d3
0000B606 6400                       		bcc.s	loc_A4E6
0000B608 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000B60C 6B00                       		bmi.s	loc_A4E6
0000B60E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000B614 6400                       		bcc.s	loc_A4E6
0000B616 4A78 FE08                  		tst.w	($FFFFFE08).w
0000B61A 6600                       		bne.s	loc_A4E6
0000B61C B240                       		cmp.w	d0,d1
0000B61E 6400                       		bcc.s	loc_A4DC
0000B620 D241                       		add.w	d1,d1
0000B622 9041                       		sub.w	d1,d0
0000B624                            
0000B624                            loc_A4DC:
0000B624 0C43 0010                  		cmpi.w	#$10,d3
0000B628 6500                       		bcs.s	loc_A4EA
0000B62A                            
0000B62A                            loc_A4E2:
0000B62A 7201                       		moveq	#1,d1
0000B62C 4E75                       		rts	
0000B62E                            ; ===========================================================================
0000B62E                            
0000B62E                            loc_A4E6:
0000B62E 7200                       		moveq	#0,d1
0000B630 4E75                       		rts	
0000B632                            ; ===========================================================================
0000B632                            
0000B632                            loc_A4EA:
0000B632 7200                       		moveq	#0,d1
0000B634 1228 0019                  		move.b	$19(a0),d1
0000B638 5841                       		addq.w	#4,d1
0000B63A 3401                       		move.w	d1,d2
0000B63C D442                       		add.w	d2,d2
0000B63E D269 0008                  		add.w	8(a1),d1
0000B642 9268 0008                  		sub.w	8(a0),d1
0000B646 6BE2                       		bmi.s	loc_A4E2
0000B648 B242                       		cmp.w	d2,d1
0000B64A 64DE                       		bcc.s	loc_A4E2
0000B64C 72FF                       		moveq	#-1,d1
0000B64E 4E75                       		rts	
0000B650                            ; End of function Obj26_SolidSides
0000B650                            
0000B650                            ; ===========================================================================
0000B650                            Ani_obj26:
0000B650                            	include "_anim\obj26.asm"
0000B650                            ; ---------------------------------------------------------------------------
0000B650                            ; Animation script - monitors
0000B650                            ; ---------------------------------------------------------------------------
0000B650 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000B656 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000B65C 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000B662 0000                       		dc.w byte_A582-Ani_obj26
0000B664 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000B66A 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000B676 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000B682 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000B68E 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000B69A 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000B6A6 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000B6B2 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000B6BE 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000B6CA 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000B6D2                            		even
0000B6D2                            		even
0000B6D2                            
0000B6D2                            ; ---------------------------------------------------------------------------
0000B6D2                            ; Sprite mappings - monitors
0000B6D2                            ; ---------------------------------------------------------------------------
0000B6D2                            Map_obj26:
0000B6D2                            	include "_maps\obj26.asm"
0000B6D2                            ; ---------------------------------------------------------------------------
0000B6D2                            ; Sprite mappings - monitors
0000B6D2                            ; ---------------------------------------------------------------------------
0000B6D2 0000 0000                  		dc.w byte_A5A2-Map_obj26, byte_A5A8-Map_obj26
0000B6D6 0000 0000                  		dc.w byte_A5B3-Map_obj26, byte_A5BE-Map_obj26
0000B6DA 0000 0000                  		dc.w byte_A5C9-Map_obj26, byte_A5D4-Map_obj26
0000B6DE 0000 0000                  		dc.w byte_A5DF-Map_obj26, byte_A5EA-Map_obj26
0000B6E2 0000 0000                  		dc.w byte_A5F5-Map_obj26, byte_A600-Map_obj26
0000B6E6 0000 0000                  		dc.w byte_A60B-Map_obj26, byte_A616-Map_obj26
0000B6EA 01                         byte_A5A2:	dc.b 1			; static monitor
0000B6EB EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B6F0 02                         byte_A5A8:	dc.b 2			; static monitor
0000B6F1 F505 0010 F8               		dc.b $F5, 5, 0,	$10, $F8
0000B6F6 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B6FB 02                         byte_A5B3:	dc.b 2			; static monitor
0000B6FC F505 0014 F8               		dc.b $F5, 5, 0,	$14, $F8
0000B701 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B706 02                         byte_A5BE:	dc.b 2			; Eggman monitor
0000B707 F505 0018 F8               		dc.b $F5, 5, 0,	$18, $F8
0000B70C EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B711 02                         byte_A5C9:	dc.b 2			; Sonic	monitor
0000B712 F505 001C F8               		dc.b $F5, 5, 0,	$1C, $F8
0000B717 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B71C 02                         byte_A5D4:	dc.b 2			; speed	shoes monitor
0000B71D F505 0024 F8               		dc.b $F5, 5, 0,	$24, $F8
0000B722 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B727 02                         byte_A5DF:	dc.b 2			; shield monitor
0000B728 F505 0028 F8               		dc.b $F5, 5, 0,	$28, $F8
0000B72D EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B732 02                         byte_A5EA:	dc.b 2			; invincibility	monitor
0000B733 F505 002C F8               		dc.b $F5, 5, 0,	$2C, $F8
0000B738 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B73D 02                         byte_A5F5:	dc.b 2			; 10 rings monitor
0000B73E F505 0030 F8               		dc.b $F5, 5, 0,	$30, $F8
0000B743 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B748 02                         byte_A600:	dc.b 2			; 'S' monitor
0000B749 F505 0034 F8               byte_A601:	dc.b $F5, 5, 0,	$34, $F8
0000B74E EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B753 02                         byte_A60B:	dc.b 2			; goggles monitor
0000B754 F505 0020 F8               		dc.b $F5, 5, 0,	$20, $F8
0000B759 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B75E 01                         byte_A616:	dc.b 1			; broken monitor
0000B75F FF0D 0038 F0               		dc.b $FF, $D, 0, $38, $F0
0000B764                            		even
0000B764                            		even
0000B764                            
0000B764                            ; ===========================================================================
0000B764                            ; ---------------------------------------------------------------------------
0000B764                            ; Object 0E - Sonic on the title screen
0000B764                            ; ---------------------------------------------------------------------------
0000B764                            
0000B764                            Obj0E:					; XREF: Obj_Index
0000B764 7000                       		moveq	#0,d0
0000B766 1028 0024                  		move.b	$24(a0),d0
0000B76A 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000B76E 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000B772                            ; ===========================================================================
0000B772 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000B774 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000B776 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000B778 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000B77A                            ; ===========================================================================
0000B77A                            
0000B77A                            Obj0E_Main:				; XREF: Obj0E_Index
0000B77A 5428 0024                  		addq.b	#2,$24(a0)
0000B77E 317C 00F0 0008             		move.w	#$F0,8(a0)
0000B784 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000B78A 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000B792 317C 2300 0002             		move.w	#$2300,2(a0)
0000B798 117C 0001 0018             		move.b	#1,$18(a0)
0000B79E 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000B7A4 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000B7AA 6100 0000                  		bsr.w	AnimateSprite
0000B7AE                            
0000B7AE                            Obj0E_Delay:				; XREF: Obj0E_Index
0000B7AE 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000B7B2 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000B7B4 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000B7B8 6000 0000                  		bra.w	DisplaySprite
0000B7BC                            ; ===========================================================================
0000B7BC                            
0000B7BC                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000B7BC 4E75                       		rts	
0000B7BE                            ; ===========================================================================
0000B7BE                            
0000B7BE                            Obj0E_Move:				; XREF: Obj0E_Index
0000B7BE 5168 000A                  		subq.w	#8,$A(a0)
0000B7C2 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000B7C8 6600                       		bne.s	Obj0E_Display
0000B7CA 5428 0024                  		addq.b	#2,$24(a0)
0000B7CE                            
0000B7CE                            Obj0E_Display:
0000B7CE 6000 0000                  		bra.w	DisplaySprite
0000B7D2                            ; ===========================================================================
0000B7D2 4E75                       		rts	
0000B7D4                            ; ===========================================================================
0000B7D4                            
0000B7D4                            Obj0E_Animate:				; XREF: Obj0E_Index
0000B7D4 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000B7DA 6100 0000                  		bsr.w	AnimateSprite
0000B7DE 6000 0000                  		bra.w	DisplaySprite
0000B7E2                            ; ===========================================================================
0000B7E2 4E75                       		rts	
0000B7E4                            ; ===========================================================================
0000B7E4                            ; ---------------------------------------------------------------------------
0000B7E4                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000B7E4                            ; ---------------------------------------------------------------------------
0000B7E4                            
0000B7E4                            Obj0F:					; XREF: Obj_Index
0000B7E4 7000                       		moveq	#0,d0
0000B7E6 1028 0024                  		move.b	$24(a0),d0
0000B7EA 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000B7EE 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000B7F2 6000 0000                  		bra.w	DisplaySprite
0000B7F6                            ; ===========================================================================
0000B7F6 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000B7F8 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000B7FA 0000                       		dc.w locret_A6F8-Obj0F_Index
0000B7FC                            ; ===========================================================================
0000B7FC                            
0000B7FC                            Obj0F_Main:				; XREF: Obj0F_Index
0000B7FC 5428 0024                  		addq.b	#2,$24(a0)
0000B800 317C 00D0 0008             		move.w	#$D0,8(a0)
0000B806 317C 0130 000A             		move.w	#$130,$A(a0)
0000B80C 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000B814 317C 0200 0002             		move.w	#$200,2(a0)
0000B81A 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000B820 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000B822 5428 0024                  		addq.b	#2,$24(a0)
0000B826 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000B82C 6600                       		bne.s	locret_A6F8	; if not, branch
0000B82E 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000B834 317C 0170 0008             		move.w	#$170,8(a0)
0000B83A 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000B840                            
0000B840                            locret_A6F8:				; XREF: Obj0F_Index
0000B840 4E75                       		rts	
0000B842                            ; ===========================================================================
0000B842                            
0000B842                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000B842 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000B848 6000 0000                  		bra.w	AnimateSprite
0000B84C                            ; ===========================================================================
0000B84C                            Ani_obj0E:
0000B84C                            	include "_anim\obj0E.asm"
0000B84C                            ; ---------------------------------------------------------------------------
0000B84C                            ; Animation script - Sonic on the title screen
0000B84C                            ; ---------------------------------------------------------------------------
0000B84C 0000                       		dc.w byte_A706-Ani_obj0E
0000B84E 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000B85A                            		even
0000B85A                            		even
0000B85A                            
0000B85A                            Ani_obj0F:
0000B85A                            	include "_anim\obj0F.asm"
0000B85A                            ; ---------------------------------------------------------------------------
0000B85A                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000B85A                            ; ---------------------------------------------------------------------------
0000B85A 0000                       		dc.w byte_A714-Ani_obj0F
0000B85C 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000B860                            		even
0000B860                            		even
0000B860                            
0000B860                            ; ---------------------------------------------------------------------------
0000B860                            ; Subroutine to	animate	a sprite using an animation script
0000B860                            ; ---------------------------------------------------------------------------
0000B860                            
0000B860                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B860                            
0000B860                            
0000B860                            AnimateSprite:
0000B860 7000                       		moveq	#0,d0
0000B862 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000B866 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000B86A 6700                       		beq.s	Anim_Run	; if not, branch
0000B86C 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000B870 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000B876 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000B87C                            
0000B87C                            Anim_Run:
0000B87C 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000B880 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000B882 D040                       		add.w	d0,d0
0000B884 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000B888 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000B88C 7200                       		moveq	#0,d1
0000B88E 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000B892 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000B896 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000B898                            
0000B898                            Anim_Next:
0000B898 1200                       		move.b	d0,d1
0000B89A 0200 001F                  		andi.b	#$1F,d0
0000B89E 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000B8A2 1028 0022                  		move.b	$22(a0),d0
0000B8A6 E719                       		rol.b	#3,d1
0000B8A8 B101                       		eor.b	d0,d1
0000B8AA 0201 0003                  		andi.b	#3,d1
0000B8AE 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000B8B4 8328 0001                  		or.b	d1,1(a0)
0000B8B8 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000B8BC                            
0000B8BC                            Anim_Wait:
0000B8BC 4E75                       		rts	
0000B8BE                            ; ===========================================================================
0000B8BE                            
0000B8BE                            Anim_End_FF:
0000B8BE 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000B8C0 6600                       		bne.s	Anim_End_FE	; if not, branch
0000B8C2 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000B8C8 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000B8CC 60CA                       		bra.s	Anim_Next
0000B8CE                            ; ===========================================================================
0000B8CE                            
0000B8CE                            Anim_End_FE:
0000B8CE 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000B8D0 6600                       		bne.s	Anim_End_FD	; if not, branch
0000B8D2 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000B8D6 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000B8DA 9200                       		sub.b	d0,d1
0000B8DC 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000B8E0 60B6                       		bra.s	Anim_Next
0000B8E2                            ; ===========================================================================
0000B8E2                            
0000B8E2                            Anim_End_FD:
0000B8E2 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000B8E4 6600                       		bne.s	Anim_End_FC	; if not, branch
0000B8E6 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000B8EC                            
0000B8EC                            Anim_End_FC:
0000B8EC 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000B8EE 6600                       		bne.s	Anim_End_FB	; if not, branch
0000B8F0 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000B8F4                            
0000B8F4                            Anim_End_FB:
0000B8F4 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000B8F6 6600                       		bne.s	Anim_End_FA	; if not, branch
0000B8F8 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000B8FE 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000B902                            
0000B902                            Anim_End_FA:
0000B902 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000B904 6600                       		bne.s	Anim_End	; if not, branch
0000B906 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000B90A                            
0000B90A                            Anim_End:
0000B90A 4E75                       		rts	
0000B90C                            ; End of function AnimateSprite
0000B90C                            
0000B90C                            ; ===========================================================================
0000B90C                            ; ---------------------------------------------------------------------------
0000B90C                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000B90C                            ; ---------------------------------------------------------------------------
0000B90C                            Map_obj0F:
0000B90C                            	include "_maps\obj0F.asm"
0000B90C                            ; ---------------------------------------------------------------------------
0000B90C                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000B90C                            ; ---------------------------------------------------------------------------
0000B90C 0000                       		dc.w byte_A7CD-Map_obj0F
0000B90E 0000                       		dc.w byte_A7CC-Map_obj0F
0000B910 0000                       		dc.w byte_A7EB-Map_obj0F
0000B912 0000                       		dc.w byte_A882-Map_obj0F
0000B914 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000B915 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000B91A 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000B91F 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000B924 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000B929 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000B92E 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000B933 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000B934 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B939 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B93E B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B943 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B948 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B94D B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B952 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B957 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B95C B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B961 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B966 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B96B D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B970 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B975 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B97A D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B97F D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B984 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B989 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B98E D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B993 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B998 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B99D F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B9A2 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B9A7 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B9AC F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B9B1 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B9B6 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B9BB F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B9C0 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B9C5 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B9CA 01                         byte_A882:	dc.b 1			; "TM"
0000B9CB FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000B9D0                            		even
0000B9D0                            		even
0000B9D0                            
0000B9D0                            ; ---------------------------------------------------------------------------
0000B9D0                            ; Sprite mappings - Sonic on the title screen
0000B9D0                            ; ---------------------------------------------------------------------------
0000B9D0                            Map_obj0E:
0000B9D0                            	include "_maps\obj0E.asm"
0000B9D0                            ; ---------------------------------------------------------------------------
0000B9D0                            ; Sprite mappings - Sonic on the title screen
0000B9D0                            ; ---------------------------------------------------------------------------
0000B9D0 0000                       		dc.w byte_A898-Map_obj0E
0000B9D2 0000                       		dc.w byte_A8CB-Map_obj0E
0000B9D4 0000                       		dc.w byte_A917-Map_obj0E
0000B9D6 0000                       		dc.w byte_A96D-Map_obj0E
0000B9D8 0000                       		dc.w byte_A9AF-Map_obj0E
0000B9DA 0000                       		dc.w byte_A9E7-Map_obj0E
0000B9DC 0000                       		dc.w byte_AA47-Map_obj0E
0000B9DE 0000                       		dc.w byte_AAB1-Map_obj0E
0000B9E0 0A                         byte_A898:	dc.b $A
0000B9E1 0808 0000 08               		dc.b 8,	8, 0, 0, 8
0000B9E6 100F 0003 08               		dc.b $10, $F, 0, 3, 8
0000B9EB 100F 0013 28               		dc.b $10, $F, 0, $13, $28
0000B9F0 300E 0023 08               		dc.b $30, $E, 0, $23, 8
0000B9F5 300E 002F 28               		dc.b $30, $E, 0, $2F, $28
0000B9FA 480D 003B 00               		dc.b $48, $D, 0, $3B, 0
0000B9FF 4809 0043 20               		dc.b $48, 9, 0,	$43, $20
0000BA04 4800 0049 38               		dc.b $48, 0, 0,	$49, $38
0000BA09 580C 004A 08               		dc.b $58, $C, 0, $4A, 8
0000BA0E 5800 004E 28               		dc.b $58, 0, 0,	$4E, $28
0000BA13 0F                         byte_A8CB:	dc.b $F
0000BA14 480E 01BD 20               		dc.b $48, $E, 1, $BD, $20
0000BA19 3805 01C9 38               		dc.b $38, 5, 1,	$C9, $38
0000BA1E 4000 01CD 30               		dc.b $40, 0, 1,	$CD, $30
0000BA23 4800 01CE 40               		dc.b $48, 0, 1,	$CE, $40
0000BA28 6000 01CF 20               		dc.b $60, 0, 1,	$CF, $20
0000BA2D 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000BA32 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000BA37 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000BA3C 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000BA41 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000BA46 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000BA4B 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000BA50 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000BA55 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000BA5A 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000BA5F 11                         byte_A917:	dc.b $11
0000BA60 380E 01BD 28               		dc.b $38, $E, 1, $BD, $28
0000BA65 2805 01C9 40               		dc.b $28, 5, 1,	$C9, $40
0000BA6A 3000 01CD 38               		dc.b $30, 0, 1,	$CD, $38
0000BA6F 3800 01CE 48               		dc.b $38, 0, 1,	$CE, $48
0000BA74 5000 01CF 28               		dc.b $50, 0, 1,	$CF, $28
0000BA79 200F 01A9 08               		dc.b $20, $F, 1, $A9, 8
0000BA7E 2003 01B9 28               		dc.b $20, 3, 1,	$B9, $28
0000BA83 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000BA88 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000BA8D 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000BA92 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000BA97 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000BA9C 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000BAA1 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000BAA6 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000BAAB 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000BAB0 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000BAB5 0D                         byte_A96D:	dc.b $D
0000BAB6 100F 00A3 08               		dc.b $10, $F, 0, $A3, 8
0000BABB 0808 00B3 28               		dc.b 8,	8, 0, $B3, $28
0000BAC0 100F 00B6 28               		dc.b $10, $F, 0, $B6, $28
0000BAC5 1800 00C6 48               		dc.b $18, 0, 0,	$C6, $48
0000BACA 2006 00C7 48               		dc.b $20, 6, 0,	$C7, $48
0000BACF 3800 00CD 48               		dc.b $38, 0, 0,	$CD, $48
0000BAD4 300D 00CE 08               		dc.b $30, $D, 0, $CE, 8
0000BAD9 300E 00D6 28               		dc.b $30, $E, 0, $D6, $28
0000BADE 400B 00E2 10               		dc.b $40, $B, 0, $E2, $10
0000BAE3 4808 00EE 28               		dc.b $48, 8, 0,	$EE, $28
0000BAE8 5001 00F1 08               		dc.b $50, 1, 0,	$F1, 8
0000BAED 5004 00F3 28               		dc.b $50, 4, 0,	$F3, $28
0000BAF2 5800 00F5 28               		dc.b $58, 0, 0,	$F5, $28
0000BAF7 0B                         byte_A9AF:	dc.b $B
0000BAF8 080F 00F6 10               		dc.b 8,	$F, 0, $F6, $10
0000BAFD 080B 0106 30               		dc.b 8,	$B, 1, 6, $30
0000BB02 1006 0112 48               		dc.b $10, 6, 1,	$12, $48
0000BB07 280E 0118 18               		dc.b $28, $E, 1, $18, $18
0000BB0C 280E 0124 38               		dc.b $28, $E, 1, $24, $38
0000BB11 2801 0130 10               		dc.b $28, 1, 1,	$30, $10
0000BB16 400E 0132 10               		dc.b $40, $E, 1, $32, $10
0000BB1B 4006 013E 30               		dc.b $40, 6, 1,	$3E, $30
0000BB20 4004 0144 40               		dc.b $40, 4, 1,	$44, $40
0000BB25 4800 0146 40               		dc.b $48, 0, 1,	$46, $40
0000BB2A 5808 0147 18               		dc.b $58, 8, 1,	$47, $18
0000BB2F 13                         byte_A9E7:	dc.b $13
0000BB30 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000BB35 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000BB3A 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000BB3F 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000BB44 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000BB49 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000BB4E 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000BB53 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000BB58 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000BB5D 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000BB62 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000BB67 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000BB6C 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000BB71 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000BB76 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000BB7B 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000BB80 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000BB85 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000BB8A 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000BB8F 15                         byte_AA47:	dc.b $15
0000BB90 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000BB95 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000BB9A 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000BB9F 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000BBA4 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000BBA9 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000BBAE 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000BBB3 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000BBB8 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000BBBD 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000BBC2 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000BBC7 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000BBCC 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000BBD1 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000BBD6 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000BBDB 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000BBE0 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000BBE5 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000BBEA 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000BBEF 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000BBF4 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000BBF9 16                         byte_AAB1:	dc.b $16
0000BBFA 1804 01F9 38               		dc.b $18, 4, 1,	$F9, $38
0000BBFF 2000 01FB 38               		dc.b $20, 0, 1,	$FB, $38
0000BC04 2808 01FC 30               		dc.b $28, 8, 1,	$FC, $30
0000BC09 3001 01FF 30               		dc.b $30, 1, 1,	$FF, $30
0000BC0E 300B 0201 38               		dc.b $30, $B, 2, 1, $38
0000BC13 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000BC18 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000BC1D 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000BC22 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000BC27 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000BC2C 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000BC31 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000BC36 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000BC3B 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000BC40 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000BC45 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000BC4A 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000BC4F 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000BC54 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000BC59 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000BC5E 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000BC63 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000BC68                            		even
0000BC68                            		even
0000BC68                            
0000BC68                            ; ===========================================================================
0000BC68                            ; ---------------------------------------------------------------------------
0000BC68                            ; Object 2B - Chopper enemy (GHZ)
0000BC68                            ; ---------------------------------------------------------------------------
0000BC68                            
0000BC68                            Obj2B:					; XREF: Obj_Index
0000BC68 7000                       		moveq	#0,d0
0000BC6A 1028 0024                  		move.b	$24(a0),d0
0000BC6E 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000BC72 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000BC76 6000 0000                  		bra.w	MarkObjGone
0000BC7A                            ; ===========================================================================
0000BC7A 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000BC7C 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000BC7E                            ; ===========================================================================
0000BC7E                            
0000BC7E                            Obj2B_Main:				; XREF: Obj2B_Index
0000BC7E 5428 0024                  		addq.b	#2,$24(a0)
0000BC82 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000BC8A 317C 047B 0002             		move.w	#$47B,2(a0)
0000BC90 117C 0004 0001             		move.b	#4,1(a0)
0000BC96 117C 0004 0018             		move.b	#4,$18(a0)
0000BC9C 117C 0009 0020             		move.b	#9,$20(a0)
0000BCA2 117C 0010 0019             		move.b	#$10,$19(a0)
0000BCA8 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000BCAE 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000BCB4                            
0000BCB4                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000BCB4 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000BCBA 6100 FBA4                  		bsr.w	AnimateSprite
0000BCBE 6100 0000                  		bsr.w	SpeedToPos
0000BCC2 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000BCC8 3028 0030                  		move.w	$30(a0),d0
0000BCCC B068 000C                  		cmp.w	$C(a0),d0
0000BCD0 6400                       		bcc.s	Obj2B_ChgAni
0000BCD2 3140 000C                  		move.w	d0,$C(a0)
0000BCD6 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000BCDC                            
0000BCDC                            Obj2B_ChgAni:
0000BCDC 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000BCE2 0440 00C0                  		subi.w	#$C0,d0
0000BCE6 B068 000C                  		cmp.w	$C(a0),d0
0000BCEA 6400                       		bcc.s	locret_ABB6
0000BCEC 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000BCF2 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000BCF6 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000BCF8 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000BCFE                            
0000BCFE                            locret_ABB6:
0000BCFE 4E75                       		rts	
0000BD00                            ; ===========================================================================
0000BD00                            Ani_obj2B:
0000BD00                            	include "_anim\obj2B.asm"
0000BD00                            ; ---------------------------------------------------------------------------
0000BD00                            ; Animation script - Chopper enemy
0000BD00                            ; ---------------------------------------------------------------------------
0000BD00 0000                       		dc.w byte_ABBE-Ani_obj2B
0000BD02 0000                       		dc.w byte_ABC2-Ani_obj2B
0000BD04 0000                       		dc.w byte_ABC6-Ani_obj2B
0000BD06 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000BD0A 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000BD0E 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000BD12 00                         		even
0000BD12 00                         		even
0000BD12                            
0000BD12                            ; ---------------------------------------------------------------------------
0000BD12                            ; Sprite mappings - Chopper enemy (GHZ)
0000BD12                            ; ---------------------------------------------------------------------------
0000BD12                            Map_obj2B:
0000BD12                            	include "_maps\obj2B.asm"
0000BD12                            ; ---------------------------------------------------------------------------
0000BD12                            ; Sprite mappings - Chopper enemy (GHZ)
0000BD12                            ; ---------------------------------------------------------------------------
0000BD12 0000                       		dc.w byte_ABCE-Map_obj2B
0000BD14 0000                       		dc.w byte_ABD4-Map_obj2B
0000BD16 01                         byte_ABCE:	dc.b 1
0000BD17 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000BD1C 01                         byte_ABD4:	dc.b 1
0000BD1D F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000BD22                            		even
0000BD22                            		even
0000BD22                            
0000BD22                            ; ===========================================================================
0000BD22                            ; ---------------------------------------------------------------------------
0000BD22                            ; Object 2C - Jaws enemy (LZ)
0000BD22                            ; ---------------------------------------------------------------------------
0000BD22                            
0000BD22                            Obj2C:					; XREF: Obj_Index
0000BD22 7000                       		moveq	#0,d0
0000BD24 1028 0024                  		move.b	$24(a0),d0
0000BD28 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000BD2C 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000BD30                            ; ===========================================================================
0000BD30 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000BD32 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000BD34                            ; ===========================================================================
0000BD34                            
0000BD34                            Obj2C_Main:				; XREF: Obj2C_Index
0000BD34 5428 0024                  		addq.b	#2,$24(a0)
0000BD38 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000BD40 317C 2486 0002             		move.w	#$2486,2(a0)
0000BD46 0028 0004 0001             		ori.b	#4,1(a0)
0000BD4C 117C 000A 0020             		move.b	#$A,$20(a0)
0000BD52 117C 0004 0018             		move.b	#4,$18(a0)
0000BD58 117C 0010 0019             		move.b	#$10,$19(a0)
0000BD5E 7000                       		moveq	#0,d0
0000BD60 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000BD64 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000BD66 5340                       		subq.w	#1,d0
0000BD68 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000BD6C 3140 0032                  		move.w	d0,$32(a0)
0000BD70 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000BD76 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000BD7C 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000BD7E 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000BD82                            
0000BD82                            Obj2C_Turn:				; XREF: Obj2C_Index
0000BD82 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000BD86 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000BD88 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000BD8E 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000BD92 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000BD98 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000BD9E                            
0000BD9E                            Obj2C_Animate:
0000BD9E 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000BDA4 6100 FABA                  		bsr.w	AnimateSprite
0000BDA8 6100 0000                  		bsr.w	SpeedToPos
0000BDAC 6000 0000                  		bra.w	MarkObjGone
0000BDB0                            ; ===========================================================================
0000BDB0                            Ani_obj2C:
0000BDB0                            	include "_anim\obj2C.asm"
0000BDB0                            ; ---------------------------------------------------------------------------
0000BDB0                            ; Animation script - Jaws enemy
0000BDB0                            ; ---------------------------------------------------------------------------
0000BDB0 0000                       		dc.w byte_AC6A-Ani_obj2C
0000BDB2 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000BDB8                            		even
0000BDB8                            		even
0000BDB8                            
0000BDB8                            ; ---------------------------------------------------------------------------
0000BDB8                            ; Sprite mappings - Jaws enemy (LZ)
0000BDB8                            ; ---------------------------------------------------------------------------
0000BDB8                            Map_obj2C:
0000BDB8                            	include "_maps\obj2C.asm"
0000BDB8                            ; ---------------------------------------------------------------------------
0000BDB8                            ; Sprite mappings - Jaws enemy (LZ)
0000BDB8                            ; ---------------------------------------------------------------------------
0000BDB8 0000                       		dc.w byte_AC78-Map_obj2C
0000BDBA 0000                       		dc.w byte_AC83-Map_obj2C
0000BDBC 0000                       		dc.w byte_AC8E-Map_obj2C
0000BDBE 0000                       		dc.w byte_AC99-Map_obj2C
0000BDC0 02                         byte_AC78:	dc.b 2
0000BDC1 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000BDC6 F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000BDCB 02                         byte_AC83:	dc.b 2
0000BDCC F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000BDD1 F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000BDD6 02                         byte_AC8E:	dc.b 2
0000BDD7 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000BDDC F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000BDE1 02                         byte_AC99:	dc.b 2
0000BDE2 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000BDE7 F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000BDEC                            		even
0000BDEC                            		even
0000BDEC                            
0000BDEC                            ; ===========================================================================
0000BDEC                            ; ---------------------------------------------------------------------------
0000BDEC                            ; Object 2D - Burrobot enemy (LZ)
0000BDEC                            ; ---------------------------------------------------------------------------
0000BDEC                            
0000BDEC                            Obj2D:					; XREF: Obj_Index
0000BDEC 7000                       		moveq	#0,d0
0000BDEE 1028 0024                  		move.b	$24(a0),d0
0000BDF2 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000BDF6 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000BDFA                            ; ===========================================================================
0000BDFA 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000BDFC 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000BDFE                            ; ===========================================================================
0000BDFE                            
0000BDFE                            Obj2D_Main:				; XREF: Obj2D_Index
0000BDFE 5428 0024                  		addq.b	#2,$24(a0)
0000BE02 117C 0013 0016             		move.b	#$13,$16(a0)
0000BE08 117C 0008 0017             		move.b	#8,$17(a0)
0000BE0E 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000BE16 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000BE1C 0028 0004 0001             		ori.b	#4,1(a0)
0000BE22 117C 0004 0018             		move.b	#4,$18(a0)
0000BE28 117C 0005 0020             		move.b	#5,$20(a0)
0000BE2E 117C 000C 0019             		move.b	#$C,$19(a0)
0000BE34 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000BE38 117C 0002 001C             		move.b	#2,$1C(a0)
0000BE3E                            
0000BE3E                            Obj2D_Action:				; XREF: Obj2D_Index
0000BE3E 7000                       		moveq	#0,d0
0000BE40 1028 0025                  		move.b	$25(a0),d0
0000BE44 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000BE48 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000BE4C 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000BE52 6100 FA0C                  		bsr.w	AnimateSprite
0000BE56 6000 0000                  		bra.w	MarkObjGone
0000BE5A                            ; ===========================================================================
0000BE5A 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000BE5C 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000BE5E 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000BE60 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000BE62                            ; ===========================================================================
0000BE62                            
0000BE62                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000BE62 5368 0030                  		subq.w	#1,$30(a0)
0000BE66 6A00                       		bpl.s	locret_AD42
0000BE68 5428 0025                  		addq.b	#2,$25(a0)
0000BE6C 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000BE72 317C 0080 0010             		move.w	#$80,$10(a0)
0000BE78 117C 0001 001C             		move.b	#1,$1C(a0)
0000BE7E 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000BE84 6700                       		beq.s	locret_AD42
0000BE86 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000BE8A                            
0000BE8A                            locret_AD42:
0000BE8A 4E75                       		rts	
0000BE8C                            ; ===========================================================================
0000BE8C                            
0000BE8C                            Obj2D_Move:				; XREF: Obj2D_Index2
0000BE8C 5368 0030                  		subq.w	#1,$30(a0)
0000BE90 6B00                       		bmi.s	loc_AD84
0000BE92 6100 0000                  		bsr.w	SpeedToPos
0000BE96 0868 0000 0032             		bchg	#0,$32(a0)
0000BE9C 6600                       		bne.s	loc_AD78
0000BE9E 3628 0008                  		move.w	8(a0),d3
0000BEA2 0643 000C                  		addi.w	#$C,d3
0000BEA6 0828 0000 0022             		btst	#0,$22(a0)
0000BEAC 6600                       		bne.s	loc_AD6A
0000BEAE 0443 0018                  		subi.w	#$18,d3
0000BEB2                            
0000BEB2                            loc_AD6A:
0000BEB2 4EB9 0000 0000             		jsr	ObjHitFloor2
0000BEB8 0C41 000C                  		cmpi.w	#$C,d1
0000BEBC 6C00                       		bge.s	loc_AD84
0000BEBE 4E75                       		rts	
0000BEC0                            ; ===========================================================================
0000BEC0                            
0000BEC0                            loc_AD78:				; XREF: Obj2D_Move
0000BEC0 4EB9 0000 0000             		jsr	ObjHitFloor
0000BEC6 D368 000C                  		add.w	d1,$C(a0)
0000BECA 4E75                       		rts	
0000BECC                            ; ===========================================================================
0000BECC                            
0000BECC                            loc_AD84:				; XREF: Obj2D_Move
0000BECC 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000BED2 6700                       		beq.s	loc_ADA4
0000BED4 5528 0025                  		subq.b	#2,$25(a0)
0000BED8 317C 003B 0030             		move.w	#$3B,$30(a0)
0000BEDE 317C 0000 0010             		move.w	#0,$10(a0)
0000BEE4 117C 0000 001C             		move.b	#0,$1C(a0)
0000BEEA 4E75                       		rts	
0000BEEC                            ; ===========================================================================
0000BEEC                            
0000BEEC                            loc_ADA4:
0000BEEC 5428 0025                  		addq.b	#2,$25(a0)
0000BEF0 317C FC00 0012             		move.w	#-$400,$12(a0)
0000BEF6 117C 0002 001C             		move.b	#2,$1C(a0)
0000BEFC 4E75                       		rts	
0000BEFE                            ; ===========================================================================
0000BEFE                            
0000BEFE                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000BEFE 6100 0000                  		bsr.w	SpeedToPos
0000BF02 0668 0018 0012             		addi.w	#$18,$12(a0)
0000BF08 6B00                       		bmi.s	locret_ADF0
0000BF0A 117C 0003 001C             		move.b	#3,$1C(a0)
0000BF10 4EB9 0000 0000             		jsr	ObjHitFloor
0000BF16 4A41                       		tst.w	d1
0000BF18 6A00                       		bpl.s	locret_ADF0
0000BF1A D368 000C                  		add.w	d1,$C(a0)
0000BF1E 317C 0000 0012             		move.w	#0,$12(a0)
0000BF24 117C 0001 001C             		move.b	#1,$1C(a0)
0000BF2A 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000BF30 5528 0025                  		subq.b	#2,$25(a0)
0000BF34 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000BF38                            
0000BF38                            locret_ADF0:
0000BF38 4E75                       		rts	
0000BF3A                            ; ===========================================================================
0000BF3A                            
0000BF3A                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000BF3A 343C 0060                  		move.w	#$60,d2
0000BF3E 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000BF42 6400                       		bcc.s	locret_AE20
0000BF44 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000BF48 9068 000C                  		sub.w	$C(a0),d0
0000BF4C 6400                       		bcc.s	locret_AE20
0000BF4E 0C40 FF80                  		cmpi.w	#-$80,d0
0000BF52 6500                       		bcs.s	locret_AE20
0000BF54 4A78 FE08                  		tst.w	($FFFFFE08).w
0000BF58 6600                       		bne.s	locret_AE20
0000BF5A 5528 0025                  		subq.b	#2,$25(a0)
0000BF5E 3141 0010                  		move.w	d1,$10(a0)
0000BF62 317C FC00 0012             		move.w	#-$400,$12(a0)
0000BF68                            
0000BF68                            locret_AE20:
0000BF68 4E75                       		rts	
0000BF6A                            
0000BF6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BF6A                            
0000BF6A                            
0000BF6A                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000BF6A 323C 0080                  		move.w	#$80,d1
0000BF6E 08E8 0000 0022             		bset	#0,$22(a0)
0000BF74 3038 D008                  		move.w	($FFFFD008).w,d0
0000BF78 9068 0008                  		sub.w	8(a0),d0
0000BF7C 6400                       		bcc.s	loc_AE40
0000BF7E 4440                       		neg.w	d0
0000BF80 4441                       		neg.w	d1
0000BF82 08A8 0000 0022             		bclr	#0,$22(a0)
0000BF88                            
0000BF88                            loc_AE40:
0000BF88 B042                       		cmp.w	d2,d0
0000BF8A 4E75                       		rts	
0000BF8C                            ; End of function Obj2D_ChkSonic2
0000BF8C                            
0000BF8C                            ; ===========================================================================
0000BF8C                            Ani_obj2D:
0000BF8C                            	include "_anim\obj2D.asm"
0000BF8C                            ; ---------------------------------------------------------------------------
0000BF8C                            ; Animation script - Burrobot enemy
0000BF8C                            ; ---------------------------------------------------------------------------
0000BF8C 0000                       		dc.w byte_AE4C-Ani_obj2D
0000BF8E 0000                       		dc.w byte_AE50-Ani_obj2D
0000BF90 0000                       		dc.w byte_AE54-Ani_obj2D
0000BF92 0000                       		dc.w byte_AE58-Ani_obj2D
0000BF94 0300 06FF                  byte_AE4C:	dc.b 3,	0, 6, $FF
0000BF98 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF
0000BF9C 0302 03FF                  byte_AE54:	dc.b 3,	2, 3, $FF
0000BFA0 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000BFA4 00                         		even
0000BFA4 00                         		even
0000BFA4                            
0000BFA4                            ; ---------------------------------------------------------------------------
0000BFA4                            ; Sprite mappings - Burrobot enemy (LZ)
0000BFA4                            ; ---------------------------------------------------------------------------
0000BFA4                            Map_obj2D:
0000BFA4                            	include "_maps\obj2D.asm"
0000BFA4                            ; ---------------------------------------------------------------------------
0000BFA4                            ; Sprite mappings - Burrobot enemy (LZ)
0000BFA4                            ; ---------------------------------------------------------------------------
0000BFA4 0000                       		dc.w byte_AE6A-Map_obj2D
0000BFA6 0000                       		dc.w byte_AE75-Map_obj2D
0000BFA8 0000                       		dc.w byte_AE80-Map_obj2D
0000BFAA 0000                       		dc.w byte_AE8B-Map_obj2D
0000BFAC 0000                       		dc.w byte_AE96-Map_obj2D
0000BFAE 0000                       		dc.w byte_AEA1-Map_obj2D
0000BFB0 0000                       		dc.w byte_AEAC-Map_obj2D
0000BFB2 02                         byte_AE6A:	dc.b 2
0000BFB3 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0
0000BFB8 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
0000BFBD 02                         byte_AE75:	dc.b 2
0000BFBE EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
0000BFC3 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
0000BFC8 02                         byte_AE80:	dc.b 2
0000BFC9 E80A 001E F4               		dc.b $E8, $A, 0, $1E, $F4
0000BFCE 000A 0027 F4               		dc.b 0,	$A, 0, $27, $F4
0000BFD3 02                         byte_AE8B:	dc.b 2
0000BFD4 E80A 0030 F4               		dc.b $E8, $A, 0, $30, $F4
0000BFD9 000A 0039 F4               		dc.b 0,	$A, 0, $39, $F4
0000BFDE 02                         byte_AE96:	dc.b 2
0000BFDF E80A 000F F0               		dc.b $E8, $A, 0, $F, $F0
0000BFE4 000A 0042 F4               		dc.b 0,	$A, 0, $42, $F4
0000BFE9 02                         byte_AEA1:	dc.b 2
0000BFEA F406 004B E8               		dc.b $F4, 6, 0,	$4B, $E8
0000BFEF F40A 0051 F8               		dc.b $F4, $A, 0, $51, $F8
0000BFF4 02                         byte_AEAC:	dc.b 2
0000BFF5 EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
0000BFFA 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
0000C000 00                         		even
0000C000 00                         		even
0000C000                            
0000C000                            ; ===========================================================================
0000C000                            ; ---------------------------------------------------------------------------
0000C000                            ; Object 2F - large moving platforms (MZ)
0000C000                            ; ---------------------------------------------------------------------------
0000C000                            
0000C000                            Obj2F:					; XREF: Obj_Index
0000C000 7000                       		moveq	#0,d0
0000C002 1028 0024                  		move.b	$24(a0),d0
0000C006 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000C00A 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000C00E                            ; ===========================================================================
0000C00E 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000C010 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000C012                            
0000C012 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000C014 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000C016 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000C018 0140                       		dc.b 1,	$40
0000C01A 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000C01C 0220                       		dc.b 2,	$20
0000C01E                            ; ===========================================================================
0000C01E                            
0000C01E                            Obj2F_Main:				; XREF: Obj2F_Index
0000C01E 5428 0024                  		addq.b	#2,$24(a0)
0000C022 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000C02A 317C C000 0002             		move.w	#$C000,2(a0)
0000C030 117C 0004 0001             		move.b	#4,1(a0)
0000C036 117C 0005 0018             		move.b	#5,$18(a0)
0000C03C 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000C042 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000C048 7000                       		moveq	#0,d0
0000C04A 1028 0028                  		move.b	$28(a0),d0
0000C04E E448                       		lsr.w	#2,d0
0000C050 0240 001C                  		andi.w	#$1C,d0
0000C054 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000C058 3019                       		move.w	(a1)+,d0
0000C05A 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000C05E 214A 0030                  		move.l	a2,$30(a0)
0000C062 1159 001A                  		move.b	(a1)+,$1A(a0)
0000C066 1151 0019                  		move.b	(a1),$19(a0)
0000C06A 0228 000F 0028             		andi.b	#$F,$28(a0)
0000C070 117C 0040 0016             		move.b	#$40,$16(a0)
0000C076 08E8 0004 0001             		bset	#4,1(a0)
0000C07C                            
0000C07C                            Obj2F_Action:				; XREF: Obj2F_Index
0000C07C 6100 0000                  		bsr.w	Obj2F_Types
0000C080 4A28 0025                  		tst.b	$25(a0)
0000C084 6700                       		beq.s	Obj2F_Solid
0000C086 7200                       		moveq	#0,d1
0000C088 1228 0019                  		move.b	$19(a0),d1
0000C08C 0641 000B                  		addi.w	#$B,d1
0000C090 6100 C5EA                  		bsr.w	ExitPlatform
0000C094 0829 0003 0022             		btst	#3,$22(a1)
0000C09A 6600 0000                  		bne.w	Obj2F_Slope
0000C09E 4228 0025                  		clr.b	$25(a0)
0000C0A2 6000                       		bra.s	Obj2F_Display
0000C0A4                            ; ===========================================================================
0000C0A4                            
0000C0A4                            Obj2F_Slope:				; XREF: Obj2F_Action
0000C0A4 7200                       		moveq	#0,d1
0000C0A6 1228 0019                  		move.b	$19(a0),d1
0000C0AA 0641 000B                  		addi.w	#$B,d1
0000C0AE 2468 0030                  		movea.l	$30(a0),a2
0000C0B2 3428 0008                  		move.w	8(a0),d2
0000C0B6 6100 D52E                  		bsr.w	SlopeObject2
0000C0BA 6000                       		bra.s	Obj2F_Display
0000C0BC                            ; ===========================================================================
0000C0BC                            
0000C0BC                            Obj2F_Solid:				; XREF: Obj2F_Action
0000C0BC 7200                       		moveq	#0,d1
0000C0BE 1228 0019                  		move.b	$19(a0),d1
0000C0C2 0641 000B                  		addi.w	#$B,d1
0000C0C6 343C 0020                  		move.w	#$20,d2
0000C0CA 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000C0D0 6600                       		bne.s	loc_AF8E
0000C0D2 343C 0030                  		move.w	#$30,d2
0000C0D6                            
0000C0D6                            loc_AF8E:
0000C0D6 2468 0030                  		movea.l	$30(a0),a2
0000C0DA 6100 0000                  		bsr.w	SolidObject2F
0000C0DE                            
0000C0DE                            Obj2F_Display:				; XREF: Obj2F_Action
0000C0DE 6100 0000                  		bsr.w	DisplaySprite
0000C0E2 6000 0000                  		bra.w	Obj2F_ChkDel
0000C0E6                            
0000C0E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C0E6                            
0000C0E6                            
0000C0E6                            Obj2F_Types:				; XREF: Obj2F_Action
0000C0E6 7000                       		moveq	#0,d0
0000C0E8 1028 0028                  		move.b	$28(a0),d0
0000C0EC 0240 0007                  		andi.w	#7,d0
0000C0F0 D040                       		add.w	d0,d0
0000C0F2 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000C0F6 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000C0FA                            ; End of function Obj2F_Types
0000C0FA                            
0000C0FA                            ; ===========================================================================
0000C0FA 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000C0FC 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000C0FE 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000C100 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000C102 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000C104 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000C106                            ; ===========================================================================
0000C106                            
0000C106                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000C106 4E75                       		rts			; type 00 platform doesn't move
0000C108                            ; ===========================================================================
0000C108                            
0000C108                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000C108 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000C10C 323C 0020                  		move.w	#$20,d1
0000C110 6000                       		bra.s	Obj2F_Move
0000C112                            ; ===========================================================================
0000C112                            
0000C112                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000C112 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000C116 323C 0030                  		move.w	#$30,d1
0000C11A 6000                       		bra.s	Obj2F_Move
0000C11C                            ; ===========================================================================
0000C11C                            
0000C11C                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000C11C 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000C120 323C 0040                  		move.w	#$40,d1
0000C124 6000                       		bra.s	Obj2F_Move
0000C126                            ; ===========================================================================
0000C126                            
0000C126                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000C126 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000C12A 323C 0060                  		move.w	#$60,d1
0000C12E                            
0000C12E                            Obj2F_Move:
0000C12E 0828 0003 0028             		btst	#3,$28(a0)
0000C134 6700                       		beq.s	loc_AFF2
0000C136 4440                       		neg.w	d0
0000C138 D041                       		add.w	d1,d0
0000C13A                            
0000C13A                            loc_AFF2:
0000C13A 3228 002C                  		move.w	$2C(a0),d1
0000C13E 9240                       		sub.w	d0,d1
0000C140 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000C144 4E75                       		rts	
0000C146                            ; ===========================================================================
0000C146                            
0000C146                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000C146 1028 0034                  		move.b	$34(a0),d0
0000C14A 4A28 0025                  		tst.b	$25(a0)
0000C14E 6600                       		bne.s	loc_B010
0000C150 5500                       		subq.b	#2,d0
0000C152 6400                       		bcc.s	loc_B01C
0000C154 7000                       		moveq	#0,d0
0000C156 6000                       		bra.s	loc_B01C
0000C158                            ; ===========================================================================
0000C158                            
0000C158                            loc_B010:
0000C158 5800                       		addq.b	#4,d0
0000C15A 0C00 0040                  		cmpi.b	#$40,d0
0000C15E 6500                       		bcs.s	loc_B01C
0000C160 103C 0040                  		move.b	#$40,d0
0000C164                            
0000C164                            loc_B01C:
0000C164 1140 0034                  		move.b	d0,$34(a0)
0000C168 4EB9 0000 3274             		jsr	(CalcSine).l
0000C16E E848                       		lsr.w	#4,d0
0000C170 3200                       		move.w	d0,d1
0000C172 D068 002C                  		add.w	$2C(a0),d0
0000C176 3140 000C                  		move.w	d0,$C(a0)
0000C17A 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000C180 6600                       		bne.s	loc_B07A
0000C182 4A28 0035                  		tst.b	$35(a0)
0000C186 6600                       		bne.s	loc_B07A
0000C188 117C 0001 0035             		move.b	#1,$35(a0)
0000C18E 6100 0000                  		bsr.w	SingleObjLoad2
0000C192 6600                       		bne.s	loc_B07A
0000C194 137C 0035 0000             		move.b	#$35,0(a1)	; load sitting flame object
0000C19A 3368 0008 0008             		move.w	8(a0),8(a1)
0000C1A0 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000C1A6 5069 002C                  		addq.w	#8,$2C(a1)
0000C1AA 5769 002C                  		subq.w	#3,$2C(a1)
0000C1AE 0469 0040 0008             		subi.w	#$40,8(a1)
0000C1B4 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000C1BA 2348 0038                  		move.l	a0,$38(a1)
0000C1BE 2448                       		movea.l	a0,a2
0000C1C0 6100                       		bsr.s	sub_B09C
0000C1C2                            
0000C1C2                            loc_B07A:
0000C1C2 7400                       		moveq	#0,d2
0000C1C4 45E8 0036                  		lea	$36(a0),a2
0000C1C8 141A                       		move.b	(a2)+,d2
0000C1CA 5302                       		subq.b	#1,d2
0000C1CC 6500                       		bcs.s	locret_B09A
0000C1CE                            
0000C1CE                            loc_B086:
0000C1CE 7000                       		moveq	#0,d0
0000C1D0 101A                       		move.b	(a2)+,d0
0000C1D2 ED48                       		lsl.w	#6,d0
0000C1D4 0640 D000                  		addi.w	#-$3000,d0
0000C1D8 3240                       		movea.w	d0,a1
0000C1DA 3341 003C                  		move.w	d1,$3C(a1)
0000C1DE 51CA FFEE                  		dbf	d2,loc_B086
0000C1E2                            
0000C1E2                            locret_B09A:
0000C1E2 4E75                       		rts	
0000C1E4                            
0000C1E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C1E4                            
0000C1E4                            
0000C1E4                            sub_B09C:
0000C1E4 45EA 0036                  		lea	$36(a2),a2
0000C1E8 7000                       		moveq	#0,d0
0000C1EA 1012                       		move.b	(a2),d0
0000C1EC 5212                       		addq.b	#1,(a2)
0000C1EE 45F2 0001                  		lea	1(a2,d0.w),a2
0000C1F2 3009                       		move.w	a1,d0
0000C1F4 0440 D000                  		subi.w	#-$3000,d0
0000C1F8 EC48                       		lsr.w	#6,d0
0000C1FA 0240 007F                  		andi.w	#$7F,d0
0000C1FE 1480                       		move.b	d0,(a2)
0000C200 4E75                       		rts	
0000C202                            ; End of function sub_B09C
0000C202                            
0000C202                            ; ===========================================================================
0000C202                            
0000C202                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000C202 4A28 0035                  		tst.b	$35(a0)
0000C206 6700                       		beq.s	loc_B0C6
0000C208 4A28 0001                  		tst.b	1(a0)
0000C20C 6A00                       		bpl.s	Obj2F_DelFlames
0000C20E                            
0000C20E                            loc_B0C6:
0000C20E 3028 002A                  		move.w	$2A(a0),d0
0000C212 0240 FF80                  		andi.w	#$FF80,d0
0000C216 3238 F700                  		move.w	($FFFFF700).w,d1
0000C21A 0441 0080                  		subi.w	#$80,d1
0000C21E 0241 FF80                  		andi.w	#$FF80,d1
0000C222 9041                       		sub.w	d1,d0
0000C224 0C40 0280                  		cmpi.w	#$280,d0
0000C228 6200 0000                  		bhi.w	DeleteObject
0000C22C 4E75                       		rts	
0000C22E                            ; ===========================================================================
0000C22E                            
0000C22E                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000C22E 7400                       		moveq	#0,d2
0000C230                            
0000C230                            loc_B0E8:
0000C230 45E8 0036                  		lea	$36(a0),a2
0000C234 1412                       		move.b	(a2),d2
0000C236 421A                       		clr.b	(a2)+
0000C238 5302                       		subq.b	#1,d2
0000C23A 6500                       		bcs.s	locret_B116
0000C23C                            
0000C23C                            loc_B0F4:
0000C23C 7000                       		moveq	#0,d0
0000C23E 1012                       		move.b	(a2),d0
0000C240 421A                       		clr.b	(a2)+
0000C242 ED48                       		lsl.w	#6,d0
0000C244 0640 D000                  		addi.w	#-$3000,d0
0000C248 3240                       		movea.w	d0,a1
0000C24A 6100 0000                  		bsr.w	DeleteObject2
0000C24E 51CA FFEC                  		dbf	d2,loc_B0F4
0000C252 117C 0000 0035             		move.b	#0,$35(a0)
0000C258 117C 0000 0034             		move.b	#0,$34(a0)
0000C25E                            
0000C25E                            locret_B116:
0000C25E 4E75                       		rts	
0000C260                            ; ===========================================================================
0000C260                            ; ---------------------------------------------------------------------------
0000C260                            ; Collision data for large moving platforms (MZ)
0000C260                            ; ---------------------------------------------------------------------------
0000C260                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000C2AC                            		even
0000C2AC                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000C2D8                            		even
0000C2D8                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000C324                            		even
0000C324                            ; ===========================================================================
0000C324                            ; ---------------------------------------------------------------------------
0000C324                            ; Object 35 - fireball that sits on the	floor (MZ)
0000C324                            ; (appears when	you walk on sinking platforms)
0000C324                            ; ---------------------------------------------------------------------------
0000C324                            
0000C324                            Obj35:					; XREF: Obj_Index
0000C324 7000                       		moveq	#0,d0
0000C326 1028 0024                  		move.b	$24(a0),d0
0000C32A 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000C32E 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000C332                            ; ===========================================================================
0000C332 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000C334 0000                       		dc.w loc_B238-Obj35_Index
0000C336 0000                       		dc.w Obj35_Move-Obj35_Index
0000C338                            ; ===========================================================================
0000C338                            
0000C338                            Obj35_Main:				; XREF: Obj35_Index
0000C338 5428 0024                  		addq.b	#2,$24(a0)
0000C33C 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000C344 317C 0345 0002             		move.w	#$345,2(a0)
0000C34A 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000C350 117C 0004 0001             		move.b	#4,1(a0)
0000C356 117C 0001 0018             		move.b	#1,$18(a0)
0000C35C 117C 008B 0020             		move.b	#$8B,$20(a0)
0000C362 117C 0008 0019             		move.b	#8,$19(a0)
0000C368 303C 00C8                  		move.w	#$C8,d0
0000C36C 4EB9 0000 132C             		jsr	(PlaySound_Special).l ;	play flame sound
0000C372 4A28 0028                  		tst.b	$28(a0)
0000C376 6700                       		beq.s	loc_B238
0000C378 5428 0024                  		addq.b	#2,$24(a0)
0000C37C 6000 0000                  		bra.w	Obj35_Move
0000C380                            ; ===========================================================================
0000C380                            
0000C380                            loc_B238:				; XREF: Obj35_Index
0000C380 2268 0030                  		movea.l	$30(a0),a1
0000C384 3228 0008                  		move.w	8(a0),d1
0000C388 9268 002A                  		sub.w	$2A(a0),d1
0000C38C 0641 000C                  		addi.w	#$C,d1
0000C390 3001                       		move.w	d1,d0
0000C392 E248                       		lsr.w	#1,d0
0000C394 1031 0000                  		move.b	(a1,d0.w),d0
0000C398 4440                       		neg.w	d0
0000C39A D068 002C                  		add.w	$2C(a0),d0
0000C39E 3400                       		move.w	d0,d2
0000C3A0 D068 003C                  		add.w	$3C(a0),d0
0000C3A4 3140 000C                  		move.w	d0,$C(a0)
0000C3A8 0C41 0084                  		cmpi.w	#$84,d1
0000C3AC 6400                       		bcc.s	loc_B2B0
0000C3AE 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000C3B6 0C41 0080                  		cmpi.w	#$80,d1
0000C3BA 6400                       		bcc.s	loc_B2B0
0000C3BC 2028 0008                  		move.l	8(a0),d0
0000C3C0 0680 0008 0000             		addi.l	#$80000,d0
0000C3C6 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000C3CC 6600                       		bne.s	loc_B2B0
0000C3CE 6100 0000                  		bsr.w	SingleObjLoad2
0000C3D2 6600                       		bne.s	loc_B2B0
0000C3D4 137C 0035 0000             		move.b	#$35,0(a1)
0000C3DA 3368 0008 0008             		move.w	8(a0),8(a1)
0000C3E0 3342 002C                  		move.w	d2,$2C(a1)
0000C3E4 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000C3EA 137C 0001 0028             		move.b	#1,$28(a1)
0000C3F0 2468 0038                  		movea.l	$38(a0),a2
0000C3F4 6100 FDEE                  		bsr.w	sub_B09C
0000C3F8                            
0000C3F8                            loc_B2B0:
0000C3F8 6000                       		bra.s	Obj35_Animate
0000C3FA                            ; ===========================================================================
0000C3FA                            
0000C3FA                            Obj35_Move:				; XREF: Obj35_Index
0000C3FA 3028 002C                  		move.w	$2C(a0),d0
0000C3FE D068 003C                  		add.w	$3C(a0),d0
0000C402 3140 000C                  		move.w	d0,$C(a0)
0000C406                            
0000C406                            Obj35_Animate:				; XREF: loc_B238
0000C406 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000C40C 6100 F452                  		bsr.w	AnimateSprite
0000C410 6000 0000                  		bra.w	DisplaySprite
0000C414                            ; ===========================================================================
0000C414                            Ani_obj35:
0000C414                            	include "_anim\obj35.asm"
0000C414                            ; ---------------------------------------------------------------------------
0000C414                            ; Animation script - fireball that sits on the	floor (MZ)
0000C414                            ; ---------------------------------------------------------------------------
0000C414 0000                       		dc.w byte_B2CE-Ani_obj35
0000C416 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000C41C                            		even
0000C41C                            		even
0000C41C                            
0000C41C                            ; ---------------------------------------------------------------------------
0000C41C                            ; Sprite mappings - large moving platforms (MZ)
0000C41C                            ; ---------------------------------------------------------------------------
0000C41C                            Map_obj2F:
0000C41C                            	include "_maps\obj2F.asm"
0000C41C                            ; ---------------------------------------------------------------------------
0000C41C                            ; Sprite mappings - large moving platforms (MZ)
0000C41C                            ; ---------------------------------------------------------------------------
0000C41C 0000                       		dc.w byte_B2DA-Map_obj2F
0000C41E 0000                       		dc.w byte_B31C-Map_obj2F
0000C420 0000                       		dc.w byte_B34F-Map_obj2F
0000C422 0D                         byte_B2DA:	dc.b $D
0000C423 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000C428 F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000C42D 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000C432 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000C437 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000C43C F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000C441 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000C446 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000C44B F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000C450 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000C455 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000C45A D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000C45F F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000C464 0A                         byte_B31C:	dc.b $A
0000C465 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000C46A F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000C46F 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000C474 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000C479 E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000C47E F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000C483 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000C488 E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000C48D C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000C492 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000C497 06                         byte_B34F:	dc.b 6
0000C498 D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000C49D F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000C4A2 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000C4A7 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000C4AC F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000C4B1 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000C4B6                            		even
0000C4B6                            		even
0000C4B6                            
0000C4B6                            ; ---------------------------------------------------------------------------
0000C4B6                            ; Sprite mappings - lava balls (MZ, SLZ)
0000C4B6                            ; ---------------------------------------------------------------------------
0000C4B6                            Map_obj14:
0000C4B6                            	include "_maps\obj14.asm"
0000C4B6                            ; ---------------------------------------------------------------------------
0000C4B6                            ; Sprite mappings - lava balls (MZ, SLZ)
0000C4B6                            ; ---------------------------------------------------------------------------
0000C4B6 0000                       		dc.w byte_B37A-Map_obj14
0000C4B8 0000                       		dc.w byte_B380-Map_obj14
0000C4BA 0000                       		dc.w byte_B386-Map_obj14
0000C4BC 0000                       		dc.w byte_B38C-Map_obj14
0000C4BE 0000                       		dc.w byte_B392-Map_obj14
0000C4C0 0000                       		dc.w byte_B398-Map_obj14
0000C4C2 01                         byte_B37A:	dc.b 1
0000C4C3 E807 0000 F8               		dc.b $E8, 7, 0,	0, $F8
0000C4C8 01                         byte_B380:	dc.b 1
0000C4C9 E807 0008 F8               		dc.b $E8, 7, 0,	8, $F8
0000C4CE 01                         byte_B386:	dc.b 1
0000C4CF F006 0010 F8               		dc.b $F0, 6, 0,	$10, $F8
0000C4D4 01                         byte_B38C:	dc.b 1
0000C4D5 F80D 0016 E8               		dc.b $F8, $D, 0, $16, $E8
0000C4DA 01                         byte_B392:	dc.b 1
0000C4DB F80D 001E E8               		dc.b $F8, $D, 0, $1E, $E8
0000C4E0 01                         byte_B398:	dc.b 1
0000C4E1 F809 0026 F0               		dc.b $F8, 9, 0,	$26, $F0
0000C4E6                            		even
0000C4E6                            		even
0000C4E6                            
0000C4E6                            ; ===========================================================================
0000C4E6                            ; ---------------------------------------------------------------------------
0000C4E6                            ; Object 30 - large green glassy blocks	(MZ)
0000C4E6                            ; ---------------------------------------------------------------------------
0000C4E6                            
0000C4E6                            Obj30:					; XREF: Obj_Index
0000C4E6 7000                       		moveq	#0,d0
0000C4E8 1028 0024                  		move.b	$24(a0),d0
0000C4EC 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000C4F0 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000C4F4 3028 0008                  		move.w	8(a0),d0
0000C4F8 0240 FF80                  		andi.w	#$FF80,d0
0000C4FC 3238 F700                  		move.w	($FFFFF700).w,d1
0000C500 0441 0080                  		subi.w	#$80,d1
0000C504 0241 FF80                  		andi.w	#$FF80,d1
0000C508 9041                       		sub.w	d1,d0
0000C50A 0C40 0280                  		cmpi.w	#$280,d0
0000C50E 6200 0000                  		bhi.w	Obj30_Delete
0000C512 6000 0000                  		bra.w	DisplaySprite
0000C516                            ; ===========================================================================
0000C516                            
0000C516                            Obj30_Delete:
0000C516 6000 0000                  		bra.w	DeleteObject
0000C51A                            ; ===========================================================================
0000C51A 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000C51C 0000                       		dc.w Obj30_Block012-Obj30_Index
0000C51E 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000C520 0000                       		dc.w Obj30_Block34-Obj30_Index
0000C522 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000C524                            
0000C524 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000C527 0400 01                    		dc.b 4,	0, 1
0000C52A 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000C52D 0800 01                    		dc.b 8,	0, 1
0000C530                            ; ===========================================================================
0000C530                            
0000C530                            Obj30_Main:				; XREF: Obj30_Index
0000C530 45F9 0000 C524             		lea	(Obj30_Vars1).l,a2
0000C536 7201                       		moveq	#1,d1
0000C538 117C 0048 0016             		move.b	#$48,$16(a0)
0000C53E 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000C544 6500                       		bcs.s	loc_B40C	; if yes, branch
0000C546 45F9 0000 C52A             		lea	(Obj30_Vars2).l,a2
0000C54C 7201                       		moveq	#1,d1
0000C54E 117C 0038 0016             		move.b	#$38,$16(a0)
0000C554                            
0000C554                            loc_B40C:
0000C554 2248                       		movea.l	a0,a1
0000C556 6000                       		bra.s	Obj30_Load	; load main object
0000C558                            ; ===========================================================================
0000C558                            
0000C558                            Obj30_Loop:
0000C558 6100 0000                  		bsr.w	SingleObjLoad2
0000C55C 6600                       		bne.s	loc_B480
0000C55E                            
0000C55E                            Obj30_Load:				; XREF: Obj30_Main
0000C55E 135A 0024                  		move.b	(a2)+,$24(a1)
0000C562 137C 0030 0000             		move.b	#$30,0(a1)
0000C568 3368 0008 0008             		move.w	8(a0),8(a1)
0000C56E 101A                       		move.b	(a2)+,d0
0000C570 4880                       		ext.w	d0
0000C572 D068 000C                  		add.w	$C(a0),d0
0000C576 3340 000C                  		move.w	d0,$C(a1)
0000C57A 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000C582 337C C38E 0002             		move.w	#$C38E,2(a1)
0000C588 137C 0004 0001             		move.b	#4,1(a1)
0000C58E 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000C594 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C59A 137C 0020 0019             		move.b	#$20,$19(a1)
0000C5A0 137C 0004 0018             		move.b	#4,$18(a1)
0000C5A6 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C5AA 2348 003C                  		move.l	a0,$3C(a1)
0000C5AE 51C9 FFA8                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000C5B2                            
0000C5B2 137C 0010 0019             		move.b	#$10,$19(a1)
0000C5B8 137C 0003 0018             		move.b	#3,$18(a1)
0000C5BE 5029 0028                  		addq.b	#8,$28(a1)
0000C5C2 0229 000F 0028             		andi.b	#$F,$28(a1)
0000C5C8                            
0000C5C8                            loc_B480:
0000C5C8 317C 0090 0032             		move.w	#$90,$32(a0)
0000C5CE 08E8 0004 0001             		bset	#4,1(a0)
0000C5D4                            
0000C5D4                            Obj30_Block012:				; XREF: Obj30_Index
0000C5D4 6100 0000                  		bsr.w	Obj30_Types
0000C5D8 323C 002B                  		move.w	#$2B,d1
0000C5DC 343C 0048                  		move.w	#$48,d2
0000C5E0 363C 0049                  		move.w	#$49,d3
0000C5E4 3828 0008                  		move.w	8(a0),d4
0000C5E8 6000 0000                  		bra.w	SolidObject
0000C5EC                            ; ===========================================================================
0000C5EC                            
0000C5EC                            Obj30_Reflect012:			; XREF: Obj30_Index
0000C5EC 2268 003C                  		movea.l	$3C(a0),a1
0000C5F0 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000C5F6 6000 0000                  		bra.w	Obj30_Types
0000C5FA                            ; ===========================================================================
0000C5FA                            
0000C5FA                            Obj30_Block34:				; XREF: Obj30_Index
0000C5FA 6100 0000                  		bsr.w	Obj30_Types
0000C5FE 323C 002B                  		move.w	#$2B,d1
0000C602 343C 0038                  		move.w	#$38,d2
0000C606 363C 0039                  		move.w	#$39,d3
0000C60A 3828 0008                  		move.w	8(a0),d4
0000C60E 6000 0000                  		bra.w	SolidObject
0000C612                            ; ===========================================================================
0000C612                            
0000C612                            Obj30_Reflect34:			; XREF: Obj30_Index
0000C612 2268 003C                  		movea.l	$3C(a0),a1
0000C616 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000C61C 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000C622 6000 0002                  		bra.w	*+4
0000C626                            
0000C626                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C626                            
0000C626                            
0000C626                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000C626 7000                       		moveq	#0,d0
0000C628 1028 0028                  		move.b	$28(a0),d0
0000C62C 0240 0007                  		andi.w	#7,d0
0000C630 D040                       		add.w	d0,d0
0000C632 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000C636 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000C63A                            ; End of function Obj30_Types
0000C63A                            
0000C63A                            ; ===========================================================================
0000C63A 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000C63C 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000C63E 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000C640 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000C642 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000C644                            ; ===========================================================================
0000C644                            
0000C644                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000C644 4E75                       		rts	
0000C646                            ; ===========================================================================
0000C646                            
0000C646                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000C646 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C64A 323C 0040                  		move.w	#$40,d1
0000C64E 6000                       		bra.s	loc_B514
0000C650                            ; ===========================================================================
0000C650                            
0000C650                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000C650 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C654 323C 0040                  		move.w	#$40,d1
0000C658 4440                       		neg.w	d0
0000C65A D041                       		add.w	d1,d0
0000C65C                            
0000C65C                            loc_B514:				; XREF: Obj30_Type01
0000C65C 0828 0003 0028             		btst	#3,$28(a0)
0000C662 6700                       		beq.s	loc_B526
0000C664 4440                       		neg.w	d0
0000C666 D041                       		add.w	d1,d0
0000C668 E208                       		lsr.b	#1,d0
0000C66A 0640 0020                  		addi.w	#$20,d0
0000C66E                            
0000C66E                            loc_B526:
0000C66E 6000 0000                  		bra.w	loc_B5EE
0000C672                            ; ===========================================================================
0000C672                            
0000C672                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000C672 0828 0003 0028             		btst	#3,$28(a0)
0000C678 6700                       		beq.s	loc_B53E
0000C67A 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C67E 0440 0010                  		subi.w	#$10,d0
0000C682 6000 0000                  		bra.w	loc_B5EE
0000C686                            ; ===========================================================================
0000C686                            
0000C686                            loc_B53E:
0000C686 0828 0003 0022             		btst	#3,$22(a0)
0000C68C 6600                       		bne.s	loc_B54E
0000C68E 08A8 0000 0034             		bclr	#0,$34(a0)
0000C694 6000                       		bra.s	loc_B582
0000C696                            ; ===========================================================================
0000C696                            
0000C696                            loc_B54E:
0000C696 4A28 0034                  		tst.b	$34(a0)
0000C69A 6600                       		bne.s	loc_B582
0000C69C 117C 0001 0034             		move.b	#1,$34(a0)
0000C6A2 08E8 0000 0035             		bset	#0,$35(a0)
0000C6A8 6700                       		beq.s	loc_B582
0000C6AA 08E8 0007 0034             		bset	#7,$34(a0)
0000C6B0 317C 0010 0036             		move.w	#$10,$36(a0)
0000C6B6 117C 000A 0038             		move.b	#$A,$38(a0)
0000C6BC 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000C6C2 6600                       		bne.s	loc_B582
0000C6C4 317C 0040 0036             		move.w	#$40,$36(a0)
0000C6CA                            
0000C6CA                            loc_B582:
0000C6CA 4A28 0034                  		tst.b	$34(a0)
0000C6CE 6A00                       		bpl.s	loc_B5AA
0000C6D0 4A28 0038                  		tst.b	$38(a0)
0000C6D4 6700                       		beq.s	loc_B594
0000C6D6 5328 0038                  		subq.b	#1,$38(a0)
0000C6DA 6600                       		bne.s	loc_B5AA
0000C6DC                            
0000C6DC                            loc_B594:
0000C6DC 4A68 0032                  		tst.w	$32(a0)
0000C6E0 6700                       		beq.s	loc_B5A4
0000C6E2 5368 0032                  		subq.w	#1,$32(a0)
0000C6E6 5368 0036                  		subq.w	#1,$36(a0)
0000C6EA 6600                       		bne.s	loc_B5AA
0000C6EC                            
0000C6EC                            loc_B5A4:
0000C6EC 08A8 0007 0034             		bclr	#7,$34(a0)
0000C6F2                            
0000C6F2                            loc_B5AA:
0000C6F2 3028 0032                  		move.w	$32(a0),d0
0000C6F6 6000                       		bra.s	loc_B5EE
0000C6F8                            ; ===========================================================================
0000C6F8                            
0000C6F8                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000C6F8 0828 0003 0028             		btst	#3,$28(a0)
0000C6FE 6700                       		beq.s	Obj30_ChkSwitch
0000C700 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C704 0440 0010                  		subi.w	#$10,d0
0000C708 6000                       		bra.s	loc_B5EE
0000C70A                            ; ===========================================================================
0000C70A                            
0000C70A                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000C70A 4A28 0034                  		tst.b	$34(a0)
0000C70E 6600                       		bne.s	loc_B5E0
0000C710 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000C714 7000                       		moveq	#0,d0
0000C716 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000C71A E848                       		lsr.w	#4,d0		; read only the	first nybble
0000C71C 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000C720 6700                       		beq.s	loc_B5EA	; if not, branch
0000C722 117C 0001 0034             		move.b	#1,$34(a0)
0000C728                            
0000C728                            loc_B5E0:
0000C728 4A68 0032                  		tst.w	$32(a0)
0000C72C 6700                       		beq.s	loc_B5EA
0000C72E 5568 0032                  		subq.w	#2,$32(a0)
0000C732                            
0000C732                            loc_B5EA:
0000C732 3028 0032                  		move.w	$32(a0),d0
0000C736                            
0000C736                            loc_B5EE:
0000C736 3228 0030                  		move.w	$30(a0),d1
0000C73A 9240                       		sub.w	d0,d1
0000C73C 3141 000C                  		move.w	d1,$C(a0)
0000C740 4E75                       		rts	
0000C742                            ; ===========================================================================
0000C742                            ; ---------------------------------------------------------------------------
0000C742                            ; Sprite mappings - large green	glassy blocks (MZ)
0000C742                            ; ---------------------------------------------------------------------------
0000C742                            Map_obj30:
0000C742                            	include "_maps\obj30.asm"
0000C742                            ; ---------------------------------------------------------------------------
0000C742                            ; Sprite mappings - large green	glassy blocks (MZ)
0000C742                            ; ---------------------------------------------------------------------------
0000C742 0000                       		dc.w byte_B600-Map_obj30
0000C744 0000                       		dc.w byte_B63D-Map_obj30
0000C746 0000                       		dc.w byte_B648-Map_obj30
0000C748 0C                         byte_B600:	dc.b $C
0000C749 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000C74E B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000C753 C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000C758 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000C75D E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000C762 E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000C767 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000C76C 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000C771 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000C776 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000C77B 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000C780 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000C785 02                         byte_B63D:	dc.b 2
0000C786 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000C78B 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000C790 0A                         byte_B648:	dc.b $A
0000C791 C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000C796 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000C79B D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000C7A0 D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000C7A5 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000C7AA F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000C7AF 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000C7B4 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000C7B9 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000C7BE 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000C7C4 00                         		even
0000C7C4 00                         		even
0000C7C4                            
0000C7C4                            ; ===========================================================================
0000C7C4                            ; ---------------------------------------------------------------------------
0000C7C4                            ; Object 31 - stomping metal blocks on chains (MZ)
0000C7C4                            ; ---------------------------------------------------------------------------
0000C7C4                            
0000C7C4                            Obj31:					; XREF: Obj_Index
0000C7C4 7000                       		moveq	#0,d0
0000C7C6 1028 0024                  		move.b	$24(a0),d0
0000C7CA 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000C7CE 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000C7D2                            ; ===========================================================================
0000C7D2 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000C7D4 0000                       		dc.w loc_B798-Obj31_Index
0000C7D6 0000                       		dc.w loc_B7FE-Obj31_Index
0000C7D8 0000                       		dc.w Obj31_Display2-Obj31_Index
0000C7DA 0000                       		dc.w loc_B7E2-Obj31_Index
0000C7DC                            
0000C7DC 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000C7DE 0100                       		dc.b 1,	0
0000C7E0                            
0000C7E0 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000C7E3 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000C7E6 08CC 03                    		dc.b 8,	$CC, 3
0000C7E9 06F0 02                    		dc.b 6,	$F0, 2
0000C7EC                            
0000C7EC 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000C7F0 5000 7800                  		dc.w $5000, $7800
0000C7F4 3800 5800                  		dc.w $3800, $5800
0000C7F8 B800                       		dc.w $B800
0000C7FA                            ; ===========================================================================
0000C7FA                            
0000C7FA                            Obj31_Main:				; XREF: Obj31_Index
0000C7FA 7000                       		moveq	#0,d0
0000C7FC 1028 0028                  		move.b	$28(a0),d0
0000C800 6A00                       		bpl.s	loc_B6CE
0000C802 0240 007F                  		andi.w	#$7F,d0
0000C806 D040                       		add.w	d0,d0
0000C808 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000C80C 115A 003A                  		move.b	(a2)+,$3A(a0)
0000C810 101A                       		move.b	(a2)+,d0
0000C812 1140 0028                  		move.b	d0,$28(a0)
0000C816                            
0000C816                            loc_B6CE:
0000C816 0200 000F                  		andi.b	#$F,d0
0000C81A D040                       		add.w	d0,d0
0000C81C 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000C820 4A40                       		tst.w	d0
0000C822 6600                       		bne.s	loc_B6E0
0000C824 3142 0032                  		move.w	d2,$32(a0)
0000C828                            
0000C828                            loc_B6E0:
0000C828 45F9 0000 C7E0             		lea	(Obj31_Var).l,a2
0000C82E 2248                       		movea.l	a0,a1
0000C830 7203                       		moveq	#3,d1
0000C832 6000                       		bra.s	Obj31_MakeStomper
0000C834                            ; ===========================================================================
0000C834                            
0000C834                            Obj31_Loop:
0000C834 6100 0000                  		bsr.w	SingleObjLoad2
0000C838 6600 0000                  		bne.w	Obj31_SetSize
0000C83C                            
0000C83C                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000C83C 135A 0024                  		move.b	(a2)+,$24(a1)
0000C840 137C 0031 0000             		move.b	#$31,0(a1)
0000C846 3368 0008 0008             		move.w	8(a0),8(a1)
0000C84C 101A                       		move.b	(a2)+,d0
0000C84E 4880                       		ext.w	d0
0000C850 D068 000C                  		add.w	$C(a0),d0
0000C854 3340 000C                  		move.w	d0,$C(a1)
0000C858 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000C860 337C 0300 0002             		move.w	#$300,2(a1)
0000C866 137C 0004 0001             		move.b	#4,1(a1)
0000C86C 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000C872 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C878 137C 0010 0019             		move.b	#$10,$19(a1)
0000C87E 3342 0034                  		move.w	d2,$34(a1)
0000C882 137C 0004 0018             		move.b	#4,$18(a1)
0000C888 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C88C 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000C892 6600                       		bne.s	loc_B76A
0000C894 5341                       		subq.w	#1,d1
0000C896 1028 0028                  		move.b	$28(a0),d0
0000C89A 0240 00F0                  		andi.w	#$F0,d0
0000C89E 0C40 0020                  		cmpi.w	#$20,d0
0000C8A2 6798                       		beq.s	Obj31_MakeStomper
0000C8A4 137C 0038 0019             		move.b	#$38,$19(a1)
0000C8AA 137C 0090 0020             		move.b	#$90,$20(a1)
0000C8B0 5241                       		addq.w	#1,d1
0000C8B2                            
0000C8B2                            loc_B76A:
0000C8B2 2348 003C                  		move.l	a0,$3C(a1)
0000C8B6 51C9 FF7C                  		dbf	d1,Obj31_Loop
0000C8BA                            
0000C8BA 137C 0003 0018             		move.b	#3,$18(a1)
0000C8C0                            
0000C8C0                            Obj31_SetSize:
0000C8C0 7000                       		moveq	#0,d0
0000C8C2 1028 0028                  		move.b	$28(a0),d0
0000C8C6 E648                       		lsr.w	#3,d0
0000C8C8 0200 000E                  		andi.b	#$E,d0
0000C8CC 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000C8D0 115A 0019                  		move.b	(a2)+,$19(a0)
0000C8D4 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C8D8 6000                       		bra.s	loc_B798
0000C8DA                            ; ===========================================================================
0000C8DA 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000C8DC 3009                       		dc.b $30, 9
0000C8DE 100A                       		dc.b $10, $A
0000C8E0                            ; ===========================================================================
0000C8E0                            
0000C8E0                            loc_B798:				; XREF: Obj31_Index
0000C8E0 6100 0000                  		bsr.w	Obj31_Types
0000C8E4 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000C8EA 7200                       		moveq	#0,d1
0000C8EC 1228 0019                  		move.b	$19(a0),d1
0000C8F0 0641 000B                  		addi.w	#$B,d1
0000C8F4 343C 000C                  		move.w	#$C,d2
0000C8F8 363C 000D                  		move.w	#$D,d3
0000C8FC 3828 0008                  		move.w	8(a0),d4
0000C900 6100 0000                  		bsr.w	SolidObject
0000C904 0828 0003 0022             		btst	#3,$22(a0)
0000C90A 6700                       		beq.s	Obj31_Display
0000C90C 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000C912 6400                       		bcc.s	Obj31_Display
0000C914 2448                       		movea.l	a0,a2
0000C916 41F8 D000                  		lea	($FFFFD000).w,a0
0000C91A 4EB9 0000 0000             		jsr	KillSonic
0000C920 204A                       		movea.l	a2,a0
0000C922                            
0000C922                            Obj31_Display:
0000C922 6100 0000                  		bsr.w	DisplaySprite
0000C926 6000 0000                  		bra.w	Obj31_ChkDel
0000C92A                            ; ===========================================================================
0000C92A                            
0000C92A                            loc_B7E2:				; XREF: Obj31_Index
0000C92A 117C 0080 0016             		move.b	#$80,$16(a0)
0000C930 08E8 0004 0001             		bset	#4,1(a0)
0000C936 2268 003C                  		movea.l	$3C(a0),a1
0000C93A 1029 0032                  		move.b	$32(a1),d0
0000C93E EA08                       		lsr.b	#5,d0
0000C940 5600                       		addq.b	#3,d0
0000C942 1140 001A                  		move.b	d0,$1A(a0)
0000C946                            
0000C946                            loc_B7FE:				; XREF: Obj31_Index
0000C946 2268 003C                  		movea.l	$3C(a0),a1
0000C94A 7000                       		moveq	#0,d0
0000C94C 1029 0032                  		move.b	$32(a1),d0
0000C950 D068 0030                  		add.w	$30(a0),d0
0000C954 3140 000C                  		move.w	d0,$C(a0)
0000C958                            
0000C958                            Obj31_Display2:				; XREF: Obj31_Index
0000C958 6100 0000                  		bsr.w	DisplaySprite
0000C95C                            
0000C95C                            Obj31_ChkDel:				; XREF: Obj31_Display
0000C95C 3028 0008                  		move.w	8(a0),d0
0000C960 0240 FF80                  		andi.w	#$FF80,d0
0000C964 3238 F700                  		move.w	($FFFFF700).w,d1
0000C968 0441 0080                  		subi.w	#$80,d1
0000C96C 0241 FF80                  		andi.w	#$FF80,d1
0000C970 9041                       		sub.w	d1,d0
0000C972 0C40 0280                  		cmpi.w	#$280,d0
0000C976 6200 0000                  		bhi.w	DeleteObject
0000C97A 4E75                       		rts	
0000C97C                            ; ===========================================================================
0000C97C                            
0000C97C                            Obj31_Types:				; XREF: loc_B798
0000C97C 1028 0028                  		move.b	$28(a0),d0
0000C980 0240 000F                  		andi.w	#$F,d0
0000C984 D040                       		add.w	d0,d0
0000C986 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000C98A 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000C98E                            ; ===========================================================================
0000C98E 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000C990 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C992 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C994 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000C996 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C998 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000C99A 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C99C                            ; ===========================================================================
0000C99C                            
0000C99C                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000C99C 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000C9A0 7000                       		moveq	#0,d0
0000C9A2 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000C9A6 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000C9AA 6700                       		beq.s	loc_B8A8	; if not, branch
0000C9AC 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000C9B0 6A00                       		bpl.s	loc_B872
0000C9B2 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000C9B8 6700                       		beq.s	loc_B8A0
0000C9BA                            
0000C9BA                            loc_B872:
0000C9BA 4A68 0032                  		tst.w	$32(a0)
0000C9BE 6700                       		beq.s	loc_B8A0
0000C9C0 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C9C4 0200 000F                  		andi.b	#$F,d0
0000C9C8 6600                       		bne.s	loc_B892
0000C9CA 4A28 0001                  		tst.b	1(a0)
0000C9CE 6A00                       		bpl.s	loc_B892
0000C9D0 303C 00C7                  		move.w	#$C7,d0
0000C9D4 4EB9 0000 132C             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000C9DA                            
0000C9DA                            loc_B892:
0000C9DA 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C9E0 6400                       		bcc.s	Obj31_Restart
0000C9E2 317C 0000 0032             		move.w	#0,$32(a0)
0000C9E8                            
0000C9E8                            loc_B8A0:
0000C9E8 317C 0000 0012             		move.w	#0,$12(a0)
0000C9EE 6000                       		bra.s	Obj31_Restart
0000C9F0                            ; ===========================================================================
0000C9F0                            
0000C9F0                            loc_B8A8:				; XREF: Obj31_Type00
0000C9F0 3228 0034                  		move.w	$34(a0),d1
0000C9F4 B268 0032                  		cmp.w	$32(a0),d1
0000C9F8 6700                       		beq.s	Obj31_Restart
0000C9FA 3028 0012                  		move.w	$12(a0),d0
0000C9FE 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000CA04 D168 0032                  		add.w	d0,$32(a0)
0000CA08 B268 0032                  		cmp.w	$32(a0),d1
0000CA0C 6200                       		bhi.s	Obj31_Restart
0000CA0E 3141 0032                  		move.w	d1,$32(a0)
0000CA12 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000CA18 4A28 0001                  		tst.b	1(a0)
0000CA1C 6A00                       		bpl.s	Obj31_Restart
0000CA1E 303C 00BD                  		move.w	#$BD,d0
0000CA22 4EB9 0000 132C             		jsr	(PlaySound_Special).l ;	play stomping sound
0000CA28                            
0000CA28                            Obj31_Restart:
0000CA28 7000                       		moveq	#0,d0
0000CA2A 1028 0032                  		move.b	$32(a0),d0
0000CA2E D068 0030                  		add.w	$30(a0),d0
0000CA32 3140 000C                  		move.w	d0,$C(a0)
0000CA36 4E75                       		rts	
0000CA38                            ; ===========================================================================
0000CA38                            
0000CA38                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000CA38 4A68 0036                  		tst.w	$36(a0)
0000CA3C 6700                       		beq.s	loc_B938
0000CA3E 4A68 0038                  		tst.w	$38(a0)
0000CA42 6700                       		beq.s	loc_B902
0000CA44 5368 0038                  		subq.w	#1,$38(a0)
0000CA48 6000                       		bra.s	loc_B97C
0000CA4A                            ; ===========================================================================
0000CA4A                            
0000CA4A                            loc_B902:
0000CA4A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CA4E 0200 000F                  		andi.b	#$F,d0
0000CA52 6600                       		bne.s	loc_B91C
0000CA54 4A28 0001                  		tst.b	1(a0)
0000CA58 6A00                       		bpl.s	loc_B91C
0000CA5A 303C 00C7                  		move.w	#$C7,d0
0000CA5E 4EB9 0000 132C             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000CA64                            
0000CA64                            loc_B91C:
0000CA64 0468 0080 0032             		subi.w	#$80,$32(a0)
0000CA6A 6400                       		bcc.s	loc_B97C
0000CA6C 317C 0000 0032             		move.w	#0,$32(a0)
0000CA72 317C 0000 0012             		move.w	#0,$12(a0)
0000CA78 317C 0000 0036             		move.w	#0,$36(a0)
0000CA7E 6000                       		bra.s	loc_B97C
0000CA80                            ; ===========================================================================
0000CA80                            
0000CA80                            loc_B938:				; XREF: Obj31_Type01
0000CA80 3228 0034                  		move.w	$34(a0),d1
0000CA84 B268 0032                  		cmp.w	$32(a0),d1
0000CA88 6700                       		beq.s	loc_B97C
0000CA8A 3028 0012                  		move.w	$12(a0),d0
0000CA8E 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000CA94 D168 0032                  		add.w	d0,$32(a0)
0000CA98 B268 0032                  		cmp.w	$32(a0),d1
0000CA9C 6200                       		bhi.s	loc_B97C
0000CA9E 3141 0032                  		move.w	d1,$32(a0)
0000CAA2 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000CAA8 317C 0001 0036             		move.w	#1,$36(a0)
0000CAAE 317C 003C 0038             		move.w	#$3C,$38(a0)
0000CAB4 4A28 0001                  		tst.b	1(a0)
0000CAB8 6A00                       		bpl.s	loc_B97C
0000CABA 303C 00BD                  		move.w	#$BD,d0
0000CABE 4EB9 0000 132C             		jsr	(PlaySound_Special).l ;	play stomping sound
0000CAC4                            
0000CAC4                            loc_B97C:
0000CAC4 6000 FF62                  		bra.w	Obj31_Restart
0000CAC8                            ; ===========================================================================
0000CAC8                            
0000CAC8                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000CAC8 3038 D008                  		move.w	($FFFFD008).w,d0
0000CACC 9068 0008                  		sub.w	8(a0),d0
0000CAD0 6400                       		bcc.s	loc_B98C
0000CAD2 4440                       		neg.w	d0
0000CAD4                            
0000CAD4                            loc_B98C:
0000CAD4 0C40 0090                  		cmpi.w	#$90,d0
0000CAD8 6400                       		bcc.s	loc_B996
0000CADA 5228 0028                  		addq.b	#1,$28(a0)
0000CADE                            
0000CADE                            loc_B996:
0000CADE 6000 FF48                  		bra.w	Obj31_Restart
0000CAE2                            ; ===========================================================================
0000CAE2                            ; ---------------------------------------------------------------------------
0000CAE2                            ; Object 45 - spiked metal block from beta version (MZ)
0000CAE2                            ; ---------------------------------------------------------------------------
0000CAE2                            
0000CAE2                            Obj45:					; XREF: Obj_Index
0000CAE2 7000                       		moveq	#0,d0
0000CAE4 1028 0024                  		move.b	$24(a0),d0
0000CAE8 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000CAEC 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000CAF0                            ; ===========================================================================
0000CAF0 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000CAF2 0000                       		dc.w Obj45_Solid-Obj45_Index
0000CAF4 0000                       		dc.w loc_BA8E-Obj45_Index
0000CAF6 0000                       		dc.w Obj45_Display-Obj45_Index
0000CAF8 0000                       		dc.w loc_BA7A-Obj45_Index
0000CAFA                            
0000CAFA 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000CAFD 04E4 01                    		dc.b	4, $E4,	  1
0000CB00 0834 03                    		dc.b	8, $34,	  3
0000CB03 0628 02                    		dc.b	6, $28,	  2
0000CB06                            
0000CB06 3800                       word_B9BE:	dc.w $3800
0000CB08 A000                       		dc.w -$6000
0000CB0A 5000                       		dc.w $5000
0000CB0C                            ; ===========================================================================
0000CB0C                            
0000CB0C                            Obj45_Main:				; XREF: Obj45_Index
0000CB0C 7000                       		moveq	#0,d0
0000CB0E 1028 0028                  		move.b	$28(a0),d0
0000CB12 D040                       		add.w	d0,d0
0000CB14 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000CB18 45F9 0000 CAFA             		lea	(Obj45_Var).l,a2
0000CB1E 2248                       		movea.l	a0,a1
0000CB20 7203                       		moveq	#3,d1
0000CB22 6000                       		bra.s	Obj45_Load
0000CB24                            ; ===========================================================================
0000CB24                            
0000CB24                            Obj45_Loop:
0000CB24 6100 0000                  		bsr.w	SingleObjLoad2
0000CB28 6600                       		bne.s	loc_BA52
0000CB2A                            
0000CB2A                            Obj45_Load:				; XREF: Obj45_Main
0000CB2A 135A 0024                  		move.b	(a2)+,$24(a1)
0000CB2E 137C 0045 0000             		move.b	#$45,0(a1)
0000CB34 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000CB3A 101A                       		move.b	(a2)+,d0
0000CB3C 4880                       		ext.w	d0
0000CB3E D068 0008                  		add.w	8(a0),d0
0000CB42 3340 0008                  		move.w	d0,8(a1)
0000CB46 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000CB4E 337C 0300 0002             		move.w	#$300,2(a1)
0000CB54 137C 0004 0001             		move.b	#4,1(a1)
0000CB5A 3369 0008 0030             		move.w	8(a1),$30(a1)
0000CB60 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000CB66 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000CB6C 137C 0020 0019             		move.b	#$20,$19(a1)
0000CB72 3342 0034                  		move.w	d2,$34(a1)
0000CB76 137C 0004 0018             		move.b	#4,$18(a1)
0000CB7C 0C12 0001                  		cmpi.b	#1,(a2)
0000CB80 6600                       		bne.s	loc_BA40
0000CB82 137C 0091 0020             		move.b	#$91,$20(a1)
0000CB88                            
0000CB88                            loc_BA40:
0000CB88 135A 001A                  		move.b	(a2)+,$1A(a1)
0000CB8C 2348 003C                  		move.l	a0,$3C(a1)
0000CB90 51C9 FF92                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000CB94                            
0000CB94 137C 0003 0018             		move.b	#3,$18(a1)
0000CB9A                            
0000CB9A                            loc_BA52:
0000CB9A 117C 0010 0019             		move.b	#$10,$19(a0)
0000CBA0                            
0000CBA0                            Obj45_Solid:				; XREF: Obj45_Index
0000CBA0 3F28 0008                  		move.w	8(a0),-(sp)
0000CBA4 6100 0000                  		bsr.w	Obj45_Move
0000CBA8 323C 0017                  		move.w	#$17,d1
0000CBAC 343C 0020                  		move.w	#$20,d2
0000CBB0 363C 0020                  		move.w	#$20,d3
0000CBB4 381F                       		move.w	(sp)+,d4
0000CBB6 6100 0000                  		bsr.w	SolidObject
0000CBBA 6100 0000                  		bsr.w	DisplaySprite
0000CBBE 6000 0000                  		bra.w	Obj45_ChkDel
0000CBC2                            ; ===========================================================================
0000CBC2                            
0000CBC2                            loc_BA7A:				; XREF: Obj45_Index
0000CBC2 2268 003C                  		movea.l	$3C(a0),a1
0000CBC6 1029 0032                  		move.b	$32(a1),d0
0000CBCA 0600 0010                  		addi.b	#$10,d0
0000CBCE EA08                       		lsr.b	#5,d0
0000CBD0 5600                       		addq.b	#3,d0
0000CBD2 1140 001A                  		move.b	d0,$1A(a0)
0000CBD6                            
0000CBD6                            loc_BA8E:				; XREF: Obj45_Index
0000CBD6 2268 003C                  		movea.l	$3C(a0),a1
0000CBDA 7000                       		moveq	#0,d0
0000CBDC 1029 0032                  		move.b	$32(a1),d0
0000CBE0 4440                       		neg.w	d0
0000CBE2 D068 0030                  		add.w	$30(a0),d0
0000CBE6 3140 0008                  		move.w	d0,8(a0)
0000CBEA                            
0000CBEA                            Obj45_Display:				; XREF: Obj45_Index
0000CBEA 6100 0000                  		bsr.w	DisplaySprite
0000CBEE                            
0000CBEE                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000CBEE 3028 003A                  		move.w	$3A(a0),d0
0000CBF2 0240 FF80                  		andi.w	#$FF80,d0
0000CBF6 3238 F700                  		move.w	($FFFFF700).w,d1
0000CBFA 0441 0080                  		subi.w	#$80,d1
0000CBFE 0241 FF80                  		andi.w	#$FF80,d1
0000CC02 9041                       		sub.w	d1,d0
0000CC04 0C40 0280                  		cmpi.w	#$280,d0
0000CC08 6200 0000                  		bhi.w	DeleteObject
0000CC0C 4E75                       		rts	
0000CC0E                            
0000CC0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CC0E                            
0000CC0E                            
0000CC0E                            Obj45_Move:				; XREF: Obj45_Solid
0000CC0E 7000                       		moveq	#0,d0
0000CC10 1028 0028                  		move.b	$28(a0),d0
0000CC14 D040                       		add.w	d0,d0
0000CC16 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000CC1A 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000CC1E                            ; End of function Obj45_Move
0000CC1E                            
0000CC1E                            ; ===========================================================================
0000CC1E 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000CC20 0000                       		dc.w loc_BADA-off_BAD6
0000CC22                            ; ===========================================================================
0000CC22                            
0000CC22                            loc_BADA:				; XREF: off_BAD6
0000CC22 4A68 0036                  		tst.w	$36(a0)
0000CC26 6700                       		beq.s	loc_BB08
0000CC28 4A68 0038                  		tst.w	$38(a0)
0000CC2C 6700                       		beq.s	loc_BAEC
0000CC2E 5368 0038                  		subq.w	#1,$38(a0)
0000CC32 6000                       		bra.s	loc_BB3C
0000CC34                            ; ===========================================================================
0000CC34                            
0000CC34                            loc_BAEC:
0000CC34 0468 0080 0032             		subi.w	#$80,$32(a0)
0000CC3A 6400                       		bcc.s	loc_BB3C
0000CC3C 317C 0000 0032             		move.w	#0,$32(a0)
0000CC42 317C 0000 0010             		move.w	#0,$10(a0)
0000CC48 317C 0000 0036             		move.w	#0,$36(a0)
0000CC4E 6000                       		bra.s	loc_BB3C
0000CC50                            ; ===========================================================================
0000CC50                            
0000CC50                            loc_BB08:				; XREF: loc_BADA
0000CC50 3228 0034                  		move.w	$34(a0),d1
0000CC54 B268 0032                  		cmp.w	$32(a0),d1
0000CC58 6700                       		beq.s	loc_BB3C
0000CC5A 3028 0010                  		move.w	$10(a0),d0
0000CC5E 0668 0070 0010             		addi.w	#$70,$10(a0)
0000CC64 D168 0032                  		add.w	d0,$32(a0)
0000CC68 B268 0032                  		cmp.w	$32(a0),d1
0000CC6C 6200                       		bhi.s	loc_BB3C
0000CC6E 3141 0032                  		move.w	d1,$32(a0)
0000CC72 317C 0000 0010             		move.w	#0,$10(a0)
0000CC78 317C 0001 0036             		move.w	#1,$36(a0)
0000CC7E 317C 003C 0038             		move.w	#$3C,$38(a0)
0000CC84                            
0000CC84                            loc_BB3C:
0000CC84 7000                       		moveq	#0,d0
0000CC86 1028 0032                  		move.b	$32(a0),d0
0000CC8A 4440                       		neg.w	d0
0000CC8C D068 0030                  		add.w	$30(a0),d0
0000CC90 3140 0008                  		move.w	d0,8(a0)
0000CC94 4E75                       		rts	
0000CC96                            ; ===========================================================================
0000CC96                            ; ---------------------------------------------------------------------------
0000CC96                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000CC96                            ; ---------------------------------------------------------------------------
0000CC96                            Map_obj31:
0000CC96                            	include "_maps\obj31.asm"
0000CC96                            ; ---------------------------------------------------------------------------
0000CC96                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000CC96                            ; ---------------------------------------------------------------------------
0000CC96 0000                       		dc.w byte_BB64-Map_obj31
0000CC98 0000                       		dc.w byte_BB7E-Map_obj31
0000CC9A 0000                       		dc.w byte_BB98-Map_obj31
0000CC9C 0000                       		dc.w byte_BB9E-Map_obj31
0000CC9E 0000                       		dc.w byte_BBA9-Map_obj31
0000CCA0 0000                       		dc.w byte_BBBE-Map_obj31
0000CCA2 0000                       		dc.w byte_BBDD-Map_obj31
0000CCA4 0000                       		dc.w byte_BC06-Map_obj31
0000CCA6 0000                       		dc.w byte_BC06-Map_obj31
0000CCA8 0000                       		dc.w byte_BC39-Map_obj31
0000CCAA 0000                       		dc.w byte_BC53-Map_obj31
0000CCAC 05                         byte_BB64:	dc.b 5
0000CCAD F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000CCB2 F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000CCB7 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000CCBC F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000CCC1 F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000CCC6 05                         byte_BB7E:	dc.b 5
0000CCC7 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000CCCC F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000CCD1 F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000CCD6 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000CCDB F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000CCE0 01                         byte_BB98:	dc.b 1
0000CCE1 DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000CCE6 02                         byte_BB9E:	dc.b 2
0000CCE7 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000CCEC 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000CCF1 04                         byte_BBA9:	dc.b 4
0000CCF2 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000CCF7 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000CCFC 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000CD01 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000CD06 06                         byte_BBBE:	dc.b 6
0000CD07 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000CD0C D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000CD11 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000CD16 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000CD1B 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000CD20 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000CD25 08                         byte_BBDD:	dc.b 8
0000CD26 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000CD2B B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000CD30 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000CD35 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000CD3A E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000CD3F F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000CD44 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000CD49 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000CD4E 0A                         byte_BC06:	dc.b $A
0000CD4F 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000CD54 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000CD59 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000CD5E B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000CD63 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000CD68 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000CD6D E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000CD72 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000CD77 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000CD7C 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000CD81 05                         byte_BC39:	dc.b 5
0000CD82 F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000CD87 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000CD8C F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000CD91 F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000CD96 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000CD9B 01                         byte_BC53:	dc.b 1
0000CD9C EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000CDA2 00                         		even
0000CDA2 00                         		even
0000CDA2                            
0000CDA2                            ; ---------------------------------------------------------------------------
0000CDA2                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000CDA2                            ; ---------------------------------------------------------------------------
0000CDA2                            Map_obj45:
0000CDA2                            	include "_maps\obj45.asm"
0000CDA2                            ; ---------------------------------------------------------------------------
0000CDA2                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000CDA2                            ; ---------------------------------------------------------------------------
0000CDA2 0000                       		dc.w byte_BC6C-Map_obj45
0000CDA4 0000                       		dc.w byte_BC7C-Map_obj45
0000CDA6 0000                       		dc.w byte_BC8C-Map_obj45
0000CDA8 0000                       		dc.w byte_BC92-Map_obj45
0000CDAA 0000                       		dc.w byte_BC9D-Map_obj45
0000CDAC 0000                       		dc.w byte_BCB2-Map_obj45
0000CDAE 0000                       		dc.w byte_BCD1-Map_obj45
0000CDB0 0000                       		dc.w byte_BCFA-Map_obj45
0000CDB2 0000                       		dc.w byte_BCFA-Map_obj45
0000CDB4 03                         byte_BC6C:	dc.b 3
0000CDB5 E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000CDBA 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000CDBF F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000CDC4 03                         byte_BC7C:	dc.b 3
0000CDC5 E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000CDCA FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000CDCF 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000CDD4 01                         byte_BC8C:	dc.b 1
0000CDD5 F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000CDDA 02                         byte_BC92:	dc.b 2
0000CDDB F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000CDE0 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000CDE5 04                         byte_BC9D:	dc.b 4
0000CDE6 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000CDEB F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000CDF0 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000CDF5 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000CDFA 06                         byte_BCB2:	dc.b 6
0000CDFB F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000CE00 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000CE05 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000CE0A F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000CE0F F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000CE14 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000CE19 08                         byte_BCD1:	dc.b 8
0000CE1A F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000CE1F F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000CE24 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000CE29 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000CE2E F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000CE33 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000CE38 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000CE3D F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000CE42 08                         byte_BCFA:	dc.b 8
0000CE43 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000CE48 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000CE4D F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000CE52 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000CE57 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000CE5C F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000CE61 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000CE66 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000CE6B F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000CE70 F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000CE76 00                         		even
0000CE76 00                         		even
0000CE76                            
0000CE76                            ; ===========================================================================
0000CE76                            ; ---------------------------------------------------------------------------
0000CE76                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000CE76                            ; ---------------------------------------------------------------------------
0000CE76                            
0000CE76                            Obj32:					; XREF: Obj_Index
0000CE76 7000                       		moveq	#0,d0
0000CE78 1028 0024                  		move.b	$24(a0),d0
0000CE7C 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000CE80 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000CE84                            ; ===========================================================================
0000CE84 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000CE86 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000CE88                            ; ===========================================================================
0000CE88                            
0000CE88                            Obj32_Main:				; XREF: Obj32_Index
0000CE88 5428 0024                  		addq.b	#2,$24(a0)
0000CE8C 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000CE94 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000CE9A 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000CEA0 6700                       		beq.s	loc_BD60
0000CEA2 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000CEA8                            
0000CEA8                            loc_BD60:
0000CEA8 117C 0004 0001             		move.b	#4,1(a0)
0000CEAE 117C 0010 0019             		move.b	#$10,$19(a0)
0000CEB4 117C 0004 0018             		move.b	#4,$18(a0)
0000CEBA 5668 000C                  		addq.w	#3,$C(a0)
0000CEBE                            
0000CEBE                            Obj32_Pressed:				; XREF: Obj32_Index
0000CEBE 4A28 0001                  		tst.b	1(a0)
0000CEC2 6A00                       		bpl.s	Obj32_Display
0000CEC4 323C 001B                  		move.w	#$1B,d1
0000CEC8 343C 0005                  		move.w	#5,d2
0000CECC 363C 0005                  		move.w	#5,d3
0000CED0 3828 0008                  		move.w	8(a0),d4
0000CED4 6100 0000                  		bsr.w	SolidObject
0000CED8 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000CEDE 1028 0028                  		move.b	$28(a0),d0
0000CEE2 0240 000F                  		andi.w	#$F,d0
0000CEE6 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000CEEA 47F3 0000                  		lea	(a3,d0.w),a3
0000CEEE 7600                       		moveq	#0,d3
0000CEF0 0828 0006 0028             		btst	#6,$28(a0)
0000CEF6 6700                       		beq.s	loc_BDB2
0000CEF8 7607                       		moveq	#7,d3
0000CEFA                            
0000CEFA                            loc_BDB2:
0000CEFA 4A28 0028                  		tst.b	$28(a0)
0000CEFE 6A00                       		bpl.s	loc_BDBE
0000CF00 6100 0000                  		bsr.w	Obj32_MZBlock
0000CF04 6600                       		bne.s	loc_BDC8
0000CF06                            
0000CF06                            loc_BDBE:
0000CF06 4A28 0025                  		tst.b	$25(a0)
0000CF0A 6600                       		bne.s	loc_BDC8
0000CF0C 0793                       		bclr	d3,(a3)
0000CF0E 6000                       		bra.s	loc_BDDE
0000CF10                            ; ===========================================================================
0000CF10                            
0000CF10                            loc_BDC8:
0000CF10 4A13                       		tst.b	(a3)
0000CF12 6600                       		bne.s	loc_BDD6
0000CF14 708D                               moveq   #$FFFFFF8D,d0
0000CF16 4EB9 0000 1304                     jsr     PlaySample
0000CF1C                            	;	move.w	#$CD,d0
0000CF1C                            	;	jsr	(PlaySound_Special).l ;	play switch sound
0000CF1C                            
0000CF1C                            loc_BDD6:
0000CF1C 07D3                       		bset	d3,(a3)
0000CF1E 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000CF24                            
0000CF24                            loc_BDDE:
0000CF24 0828 0005 0028             		btst	#5,$28(a0)
0000CF2A 6700                       		beq.s	Obj32_Display
0000CF2C 5328 001E                  		subq.b	#1,$1E(a0)
0000CF30 6A00                       		bpl.s	Obj32_Display
0000CF32 117C 0007 001E             		move.b	#7,$1E(a0)
0000CF38 0868 0001 001A             		bchg	#1,$1A(a0)
0000CF3E                            
0000CF3E                            Obj32_Display:
0000CF3E 6100 0000                  		bsr.w	DisplaySprite
0000CF42 3028 0008                  		move.w	8(a0),d0
0000CF46 0240 FF80                  		andi.w	#$FF80,d0
0000CF4A 3238 F700                  		move.w	($FFFFF700).w,d1
0000CF4E 0441 0080                  		subi.w	#$80,d1
0000CF52 0241 FF80                  		andi.w	#$FF80,d1
0000CF56 9041                       		sub.w	d1,d0
0000CF58 0C40 0280                  		cmpi.w	#$280,d0
0000CF5C 6200 0000                  		bhi.w	Obj32_Delete
0000CF60 4E75                       		rts	
0000CF62                            ; ===========================================================================
0000CF62                            
0000CF62                            Obj32_Delete:
0000CF62 6100 0000                  		bsr.w	DeleteObject
0000CF66 4E75                       		rts	
0000CF68                            
0000CF68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CF68                            
0000CF68                            
0000CF68                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000CF68 3F03                       		move.w	d3,-(sp)
0000CF6A 3428 0008                  		move.w	8(a0),d2
0000CF6E 3628 000C                  		move.w	$C(a0),d3
0000CF72 0442 0010                  		subi.w	#$10,d2
0000CF76 5143                       		subq.w	#8,d3
0000CF78 383C 0020                  		move.w	#$20,d4
0000CF7C 3A3C 0010                  		move.w	#$10,d5
0000CF80 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000CF84 3C3C 005F                  		move.w	#$5F,d6
0000CF88                            
0000CF88                            Obj32_MZLoop:
0000CF88 4A29 0001                  		tst.b	1(a1)
0000CF8C 6A00                       		bpl.s	loc_BE4E
0000CF8E 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000CF92 6700                       		beq.s	loc_BE5E	; if yes, branch
0000CF94                            
0000CF94                            loc_BE4E:
0000CF94 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000CF98 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000CF9C                            
0000CF9C 361F                       		move.w	(sp)+,d3
0000CF9E 7000                       		moveq	#0,d0
0000CFA0                            
0000CFA0                            locret_BE5A:
0000CFA0 4E75                       		rts	
0000CFA2                            ; ===========================================================================
0000CFA2 1010                       Obj32_MZData:	dc.b $10, $10
0000CFA4                            ; ===========================================================================
0000CFA4                            
0000CFA4                            loc_BE5E:				; XREF: Obj32_MZBlock
0000CFA4 7001                       		moveq	#1,d0
0000CFA6 0240 003F                  		andi.w	#$3F,d0
0000CFAA D040                       		add.w	d0,d0
0000CFAC 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000CFB0 121A                       		move.b	(a2)+,d1
0000CFB2 4881                       		ext.w	d1
0000CFB4 3029 0008                  		move.w	8(a1),d0
0000CFB8 9041                       		sub.w	d1,d0
0000CFBA 9042                       		sub.w	d2,d0
0000CFBC 6400                       		bcc.s	loc_BE80
0000CFBE D241                       		add.w	d1,d1
0000CFC0 D041                       		add.w	d1,d0
0000CFC2 6500                       		bcs.s	loc_BE84
0000CFC4 60CE                       		bra.s	loc_BE4E
0000CFC6                            ; ===========================================================================
0000CFC6                            
0000CFC6                            loc_BE80:
0000CFC6 B044                       		cmp.w	d4,d0
0000CFC8 62CA                       		bhi.s	loc_BE4E
0000CFCA                            
0000CFCA                            loc_BE84:
0000CFCA 121A                       		move.b	(a2)+,d1
0000CFCC 4881                       		ext.w	d1
0000CFCE 3029 000C                  		move.w	$C(a1),d0
0000CFD2 9041                       		sub.w	d1,d0
0000CFD4 9043                       		sub.w	d3,d0
0000CFD6 6400                       		bcc.s	loc_BE9A
0000CFD8 D241                       		add.w	d1,d1
0000CFDA D041                       		add.w	d1,d0
0000CFDC 6500                       		bcs.s	loc_BE9E
0000CFDE 60B4                       		bra.s	loc_BE4E
0000CFE0                            ; ===========================================================================
0000CFE0                            
0000CFE0                            loc_BE9A:
0000CFE0 B045                       		cmp.w	d5,d0
0000CFE2 62B0                       		bhi.s	loc_BE4E
0000CFE4                            
0000CFE4                            loc_BE9E:
0000CFE4 361F                       		move.w	(sp)+,d3
0000CFE6 7001                       		moveq	#1,d0
0000CFE8 4E75                       		rts	
0000CFEA                            ; End of function Obj32_MZBlock
0000CFEA                            
0000CFEA                            ; ===========================================================================
0000CFEA                            ; ---------------------------------------------------------------------------
0000CFEA                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000CFEA                            ; ---------------------------------------------------------------------------
0000CFEA                            Map_obj32:
0000CFEA                            	include "_maps\obj32.asm"
0000CFEA                            ; ---------------------------------------------------------------------------
0000CFEA                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000CFEA                            ; ---------------------------------------------------------------------------
0000CFEA 0000                       		dc.w byte_BEAC-Map_obj32
0000CFEC 0000                       		dc.w byte_BEB7-Map_obj32
0000CFEE 0000                       		dc.w byte_BEC2-Map_obj32
0000CFF0 0000                       		dc.w byte_BEB7-Map_obj32
0000CFF2 02                         byte_BEAC:	dc.b 2
0000CFF3 F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000CFF8 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000CFFD 02                         byte_BEB7:	dc.b 2
0000CFFE F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000D003 F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000D008 02                         byte_BEC2:	dc.b 2
0000D009 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000D00E F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000D013 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000D018                            		even
0000D018                            		even
0000D018                            
0000D018                            ; ===========================================================================
0000D018                            ; ---------------------------------------------------------------------------
0000D018                            ; Object 33 - pushable blocks (MZ, LZ)
0000D018                            ; ---------------------------------------------------------------------------
0000D018                            
0000D018                            Obj33:					; XREF: Obj_Index
0000D018 7000                       		moveq	#0,d0
0000D01A 1028 0024                  		move.b	$24(a0),d0
0000D01E 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000D022 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000D026                            ; ===========================================================================
0000D026 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000D028 0000                       		dc.w loc_BF6E-Obj33_Index
0000D02A 0000                       		dc.w loc_C02C-Obj33_Index
0000D02C                            
0000D02C 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000D02E 4001                       		dc.b $40, 1
0000D030                            ; ===========================================================================
0000D030                            
0000D030                            Obj33_Main:				; XREF: Obj33_Index
0000D030 5428 0024                  		addq.b	#2,$24(a0)
0000D034 117C 000F 0016             		move.b	#$F,$16(a0)
0000D03A 117C 000F 0017             		move.b	#$F,$17(a0)
0000D040 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000D048 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000D04E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000D054 6600                       		bne.s	loc_BF16
0000D056 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000D05C                            
0000D05C                            loc_BF16:
0000D05C 117C 0004 0001             		move.b	#4,1(a0)
0000D062 117C 0003 0018             		move.b	#3,$18(a0)
0000D068 3168 0008 0034             		move.w	8(a0),$34(a0)
0000D06E 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000D074 7000                       		moveq	#0,d0
0000D076 1028 0028                  		move.b	$28(a0),d0
0000D07A D040                       		add.w	d0,d0
0000D07C 0240 000E                  		andi.w	#$E,d0
0000D080 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000D084 115A 0019                  		move.b	(a2)+,$19(a0)
0000D088 115A 001A                  		move.b	(a2)+,$1A(a0)
0000D08C 4A28 0028                  		tst.b	$28(a0)
0000D090 6700                       		beq.s	Obj33_ChkGone
0000D092 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000D098                            
0000D098                            Obj33_ChkGone:
0000D098 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000D09C 7000                       		moveq	#0,d0
0000D09E 1028 0023                  		move.b	$23(a0),d0
0000D0A2 6700                       		beq.s	loc_BF6E
0000D0A4 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000D0AA 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000D0B0 6600 0000                  		bne.w	DeleteObject
0000D0B4                            
0000D0B4                            loc_BF6E:				; XREF: Obj33_Index
0000D0B4 4A28 0032                  		tst.b	$32(a0)
0000D0B8 6600 0000                  		bne.w	loc_C046
0000D0BC 7200                       		moveq	#0,d1
0000D0BE 1228 0019                  		move.b	$19(a0),d1
0000D0C2 0641 000B                  		addi.w	#$B,d1
0000D0C6 343C 0010                  		move.w	#$10,d2
0000D0CA 363C 0011                  		move.w	#$11,d3
0000D0CE 3828 0008                  		move.w	8(a0),d4
0000D0D2 6100 0000                  		bsr.w	loc_C186
0000D0D6 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000D0DC 6600                       		bne.s	loc_BFC6	; if not, branch
0000D0DE 08A8 0007 0028             		bclr	#7,$28(a0)
0000D0E4 3028 0008                  		move.w	8(a0),d0
0000D0E8 0C40 0A20                  		cmpi.w	#$A20,d0
0000D0EC 6500                       		bcs.s	loc_BFC6
0000D0EE 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000D0F2 6400                       		bcc.s	loc_BFC6
0000D0F4 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000D0F8 0440 001C                  		subi.w	#$1C,d0
0000D0FC 3140 000C                  		move.w	d0,$C(a0)
0000D100 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000D106 08E8 0007 0028             		bset	#7,$28(a0)
0000D10C                            
0000D10C                            loc_BFC6:
0000D10C 3028 0008                  		move.w	8(a0),d0
0000D110 0240 FF80                  		andi.w	#$FF80,d0
0000D114 3238 F700                  		move.w	($FFFFF700).w,d1
0000D118 0441 0080                  		subi.w	#$80,d1
0000D11C 0241 FF80                  		andi.w	#$FF80,d1
0000D120 9041                       		sub.w	d1,d0
0000D122 0C40 0280                  		cmpi.w	#$280,d0
0000D126 6200                       		bhi.s	loc_BFE6
0000D128 6000 0000                  		bra.w	DisplaySprite
0000D12C                            ; ===========================================================================
0000D12C                            
0000D12C                            loc_BFE6:
0000D12C 3028 0034                  		move.w	$34(a0),d0
0000D130 0240 FF80                  		andi.w	#$FF80,d0
0000D134 3238 F700                  		move.w	($FFFFF700).w,d1
0000D138 0441 0080                  		subi.w	#$80,d1
0000D13C 0241 FF80                  		andi.w	#$FF80,d1
0000D140 9041                       		sub.w	d1,d0
0000D142 0C40 0280                  		cmpi.w	#$280,d0
0000D146 6200                       		bhi.s	loc_C016
0000D148 3168 0034 0008             		move.w	$34(a0),8(a0)
0000D14E 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000D154 117C 0004 0024             		move.b	#4,$24(a0)
0000D15A 6000                       		bra.s	loc_C02C
0000D15C                            ; ===========================================================================
0000D15C                            
0000D15C                            loc_C016:
0000D15C 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000D160 7000                       		moveq	#0,d0
0000D162 1028 0023                  		move.b	$23(a0),d0
0000D166 6700                       		beq.s	loc_C028
0000D168 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000D16E                            
0000D16E                            loc_C028:
0000D16E 6000 0000                  		bra.w	DeleteObject
0000D172                            ; ===========================================================================
0000D172                            
0000D172                            loc_C02C:				; XREF: Obj33_Index
0000D172 6100 0000                  		bsr.w	ChkObjOnScreen2
0000D176 6700                       		beq.s	locret_C044
0000D178 117C 0002 0024             		move.b	#2,$24(a0)
0000D17E 4228 0032                  		clr.b	$32(a0)
0000D182 4268 0010                  		clr.w	$10(a0)
0000D186 4268 0012                  		clr.w	$12(a0)
0000D18A                            
0000D18A                            locret_C044:
0000D18A 4E75                       		rts	
0000D18C                            ; ===========================================================================
0000D18C                            
0000D18C                            loc_C046:				; XREF: loc_BF6E
0000D18C 3F28 0008                  		move.w	8(a0),-(sp)
0000D190 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000D196 6400                       		bcc.s	loc_C056
0000D198 6100 0000                  		bsr.w	SpeedToPos
0000D19C                            
0000D19C                            loc_C056:
0000D19C 0828 0001 0022             		btst	#1,$22(a0)
0000D1A2 6700                       		beq.s	loc_C0A0
0000D1A4 0668 0018 0012             		addi.w	#$18,$12(a0)
0000D1AA 4EB9 0000 0000             		jsr	ObjHitFloor
0000D1B0 4A41                       		tst.w	d1
0000D1B2 6A00 0000                  		bpl.w	loc_C09E
0000D1B6 D368 000C                  		add.w	d1,$C(a0)
0000D1BA 4268 0012                  		clr.w	$12(a0)
0000D1BE 08A8 0001 0022             		bclr	#1,$22(a0)
0000D1C4 3011                       		move.w	(a1),d0
0000D1C6 0240 03FF                  		andi.w	#$3FF,d0
0000D1CA 0C40 016A                  		cmpi.w	#$16A,d0
0000D1CE 6500                       		bcs.s	loc_C09E
0000D1D0 3028 0030                  		move.w	$30(a0),d0
0000D1D4 E640                       		asr.w	#3,d0
0000D1D6 3140 0010                  		move.w	d0,$10(a0)
0000D1DA 117C 0001 0032             		move.b	#1,$32(a0)
0000D1E0 4268 000E                  		clr.w	$E(a0)
0000D1E4                            
0000D1E4                            loc_C09E:
0000D1E4 6000                       		bra.s	loc_C0E6
0000D1E6                            ; ===========================================================================
0000D1E6                            
0000D1E6                            loc_C0A0:
0000D1E6 4A68 0010                  		tst.w	$10(a0)
0000D1EA 6700 0000                  		beq.w	loc_C0D6
0000D1EE 6B00                       		bmi.s	loc_C0BC
0000D1F0 7600                       		moveq	#0,d3
0000D1F2 1628 0019                  		move.b	$19(a0),d3
0000D1F6 4EB9 0000 0000             		jsr	ObjHitWallRight
0000D1FC 4A41                       		tst.w	d1		; has block touched a wall?
0000D1FE 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000D200 6000                       		bra.s	loc_C0E6
0000D202                            ; ===========================================================================
0000D202                            
0000D202                            loc_C0BC:
0000D202 7600                       		moveq	#0,d3
0000D204 1628 0019                  		move.b	$19(a0),d3
0000D208 4643                       		not.w	d3
0000D20A 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000D210 4A41                       		tst.w	d1		; has block touched a wall?
0000D212 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000D214 6000                       		bra.s	loc_C0E6
0000D216                            ; ===========================================================================
0000D216                            
0000D216                            Obj33_StopPush:
0000D216 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000D21A 6000                       		bra.s	loc_C0E6
0000D21C                            ; ===========================================================================
0000D21C                            
0000D21C                            loc_C0D6:
0000D21C 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000D224 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000D22A 6400                       		bcc.s	loc_C104
0000D22C                            
0000D22C                            loc_C0E6:
0000D22C 7200                       		moveq	#0,d1
0000D22E 1228 0019                  		move.b	$19(a0),d1
0000D232 0641 000B                  		addi.w	#$B,d1
0000D236 343C 0010                  		move.w	#$10,d2
0000D23A 363C 0011                  		move.w	#$11,d3
0000D23E 381F                       		move.w	(sp)+,d4
0000D240 6100 0000                  		bsr.w	loc_C186
0000D244 6100                       		bsr.s	Obj33_ChkLava
0000D246 6000 FEC4                  		bra.w	loc_BFC6
0000D24A                            ; ===========================================================================
0000D24A                            
0000D24A                            loc_C104:
0000D24A 381F                       		move.w	(sp)+,d4
0000D24C 43F8 D000                  		lea	($FFFFD000).w,a1
0000D250 08A9 0003 0022             		bclr	#3,$22(a1)
0000D256 08A8 0003 0022             		bclr	#3,$22(a0)
0000D25C 6000 FECE                  		bra.w	loc_BFE6
0000D260                            ; ===========================================================================
0000D260                            
0000D260                            Obj33_ChkLava:
0000D260 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000D266 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000D268 343C FFE0                  		move.w	#-$20,d2
0000D26C 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000D272 6700                       		beq.s	Obj33_LoadLava
0000D274 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000D27A 6700                       		beq.s	Obj33_LoadLava
0000D27C 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000D282 6700                       		beq.s	Obj33_LoadLava
0000D284 4E75                       		rts	
0000D286                            ; ===========================================================================
0000D286                            
0000D286                            Obj33_ChkLava2:
0000D286 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000D28C 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000D28E 343C 0020                  		move.w	#$20,d2
0000D292 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000D298 6700                       		beq.s	Obj33_LoadLava
0000D29A 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000D2A0 6700                       		beq.s	Obj33_LoadLava
0000D2A2                            
0000D2A2                            Obj33_NoLava:
0000D2A2 4E75                       		rts	
0000D2A4                            ; ===========================================================================
0000D2A4                            
0000D2A4                            Obj33_LoadLava:
0000D2A4 6100 0000                  		bsr.w	SingleObjLoad
0000D2A8 6600                       		bne.s	locret_C184
0000D2AA 137C 004C 0000             		move.b	#$4C,0(a1)	; load lava geyser object
0000D2B0 3368 0008 0008             		move.w	8(a0),8(a1)
0000D2B6 D569 0008                  		add.w	d2,8(a1)
0000D2BA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000D2C0 0669 0010 000C             		addi.w	#$10,$C(a1)
0000D2C6 2348 003C                  		move.l	a0,$3C(a1)
0000D2CA                            
0000D2CA                            locret_C184:
0000D2CA 4E75                       		rts	
0000D2CC                            ; ===========================================================================
0000D2CC                            
0000D2CC                            loc_C186:				; XREF: loc_BF6E
0000D2CC 1028 0025                  		move.b	$25(a0),d0
0000D2D0 6700 0000                  		beq.w	loc_C218
0000D2D4 5500                       		subq.b	#2,d0
0000D2D6 6600                       		bne.s	loc_C1AA
0000D2D8 6100 B3A2                  		bsr.w	ExitPlatform
0000D2DC 0829 0003 0022             		btst	#3,$22(a1)
0000D2E2 6600                       		bne.s	loc_C1A4
0000D2E4 4228 0025                  		clr.b	$25(a0)
0000D2E8 4E75                       		rts	
0000D2EA                            ; ===========================================================================
0000D2EA                            
0000D2EA                            loc_C1A4:
0000D2EA 3404                       		move.w	d4,d2
0000D2EC 6000 B8F0                  		bra.w	MvSonicOnPtfm
0000D2F0                            ; ===========================================================================
0000D2F0                            
0000D2F0                            loc_C1AA:
0000D2F0 5500                       		subq.b	#2,d0
0000D2F2 6600                       		bne.s	loc_C1F2
0000D2F4 6100 0000                  		bsr.w	SpeedToPos
0000D2F8 0668 0018 0012             		addi.w	#$18,$12(a0)
0000D2FE 4EB9 0000 0000             		jsr	ObjHitFloor
0000D304 4A41                       		tst.w	d1
0000D306 6A00 0000                  		bpl.w	locret_C1F0
0000D30A D368 000C                  		add.w	d1,$C(a0)
0000D30E 4268 0012                  		clr.w	$12(a0)
0000D312 4228 0025                  		clr.b	$25(a0)
0000D316 3011                       		move.w	(a1),d0
0000D318 0240 03FF                  		andi.w	#$3FF,d0
0000D31C 0C40 016A                  		cmpi.w	#$16A,d0
0000D320 6500                       		bcs.s	locret_C1F0
0000D322 3028 0030                  		move.w	$30(a0),d0
0000D326 E640                       		asr.w	#3,d0
0000D328 3140 0010                  		move.w	d0,$10(a0)
0000D32C 117C 0001 0032             		move.b	#1,$32(a0)
0000D332 4268 000E                  		clr.w	$E(a0)
0000D336                            
0000D336                            locret_C1F0:
0000D336 4E75                       		rts	
0000D338                            ; ===========================================================================
0000D338                            
0000D338                            loc_C1F2:
0000D338 6100 0000                  		bsr.w	SpeedToPos
0000D33C 3028 0008                  		move.w	8(a0),d0
0000D340 0240 000C                  		andi.w	#$C,d0
0000D344 6600 0000                  		bne.w	locret_C2E4
0000D348 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000D34E 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000D354 4268 0010                  		clr.w	$10(a0)
0000D358 5528 0025                  		subq.b	#2,$25(a0)
0000D35C 4E75                       		rts	
0000D35E                            ; ===========================================================================
0000D35E                            
0000D35E                            loc_C218:
0000D35E 6100 0000                  		bsr.w	loc_FAC8
0000D362 4A44                       		tst.w	d4
0000D364 6700 0000                  		beq.w	locret_C2E4
0000D368 6B00 0000                  		bmi.w	locret_C2E4
0000D36C 4A28 0032                  		tst.b	$32(a0)
0000D370 6700                       		beq.s	loc_C230
0000D372 6000 0000                  		bra.w	locret_C2E4
0000D376                            ; ===========================================================================
0000D376                            
0000D376                            loc_C230:
0000D376 4A40                       		tst.w	d0
0000D378 6700 0000                  		beq.w	locret_C2E4
0000D37C 6B00                       		bmi.s	loc_C268
0000D37E 0829 0000 0022             		btst	#0,$22(a1)
0000D384 6600 0000                  		bne.w	locret_C2E4
0000D388 3F00                       		move.w	d0,-(sp)
0000D38A 7600                       		moveq	#0,d3
0000D38C 1628 0019                  		move.b	$19(a0),d3
0000D390 4EB9 0000 0000             		jsr	ObjHitWallRight
0000D396 301F                       		move.w	(sp)+,d0
0000D398 4A41                       		tst.w	d1
0000D39A 6B00 0000                  		bmi.w	locret_C2E4
0000D39E 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000D3A6 7001                       		moveq	#1,d0
0000D3A8 323C 0040                  		move.w	#$40,d1
0000D3AC 6000                       		bra.s	loc_C294
0000D3AE                            ; ===========================================================================
0000D3AE                            
0000D3AE                            loc_C268:
0000D3AE 0829 0000 0022             		btst	#0,$22(a1)
0000D3B4 6700                       		beq.s	locret_C2E4
0000D3B6 3F00                       		move.w	d0,-(sp)
0000D3B8 7600                       		moveq	#0,d3
0000D3BA 1628 0019                  		move.b	$19(a0),d3
0000D3BE 4643                       		not.w	d3
0000D3C0 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000D3C6 301F                       		move.w	(sp)+,d0
0000D3C8 4A41                       		tst.w	d1
0000D3CA 6B00                       		bmi.s	locret_C2E4
0000D3CC 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000D3D4 70FF                       		moveq	#-1,d0
0000D3D6 323C FFC0                  		move.w	#-$40,d1
0000D3DA                            
0000D3DA                            loc_C294:
0000D3DA 43F8 D000                  		lea	($FFFFD000).w,a1
0000D3DE D169 0008                  		add.w	d0,8(a1)
0000D3E2 3341 0014                  		move.w	d1,$14(a1)
0000D3E6 337C 0000 0010             		move.w	#0,$10(a1)
0000D3EC 3F00                       		move.w	d0,-(sp)
0000D3EE 303C 00A7                  		move.w	#$A7,d0
0000D3F2 4EB9 0000 132C             		jsr	(PlaySound_Special).l ;	play pushing sound
0000D3F8 301F                       		move.w	(sp)+,d0
0000D3FA 4A28 0028                  		tst.b	$28(a0)
0000D3FE 6B00                       		bmi.s	locret_C2E4
0000D400 3F00                       		move.w	d0,-(sp)
0000D402 4EB9 0000 0000             		jsr	ObjHitFloor
0000D408 301F                       		move.w	(sp)+,d0
0000D40A 0C41 0004                  		cmpi.w	#4,d1
0000D40E 6F00                       		ble.s	loc_C2E0
0000D410 317C 0400 0010             		move.w	#$400,$10(a0)
0000D416 4A40                       		tst.w	d0
0000D418 6A00                       		bpl.s	loc_C2D8
0000D41A 4468 0010                  		neg.w	$10(a0)
0000D41E                            
0000D41E                            loc_C2D8:
0000D41E 117C 0006 0025             		move.b	#6,$25(a0)
0000D424 6000                       		bra.s	locret_C2E4
0000D426                            ; ===========================================================================
0000D426                            
0000D426                            loc_C2E0:
0000D426 D368 000C                  		add.w	d1,$C(a0)
0000D42A                            
0000D42A                            locret_C2E4:
0000D42A 4E75                       		rts	
0000D42C                            ; ===========================================================================
0000D42C                            ; ---------------------------------------------------------------------------
0000D42C                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000D42C                            ; ---------------------------------------------------------------------------
0000D42C                            Map_obj33:
0000D42C                            	include "_maps\obj33.asm"
0000D42C                            ; ---------------------------------------------------------------------------
0000D42C                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000D42C                            ; ---------------------------------------------------------------------------
0000D42C 0000                       		dc.w byte_C2EA-Map_obj33
0000D42E 0000                       		dc.w byte_C2F0-Map_obj33
0000D430 01                         byte_C2EA:	dc.b 1
0000D431 F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000D436 04                         byte_C2F0:	dc.b 4
0000D437 F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000D43C F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000D441 F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000D446 F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000D44C 00                         		even
0000D44C 00                         		even
0000D44C                            
0000D44C                            ; ===========================================================================
0000D44C                            ; ---------------------------------------------------------------------------
0000D44C                            ; Object 34 - zone title cards
0000D44C                            ; ---------------------------------------------------------------------------
0000D44C                            
0000D44C                            Obj34:					; XREF: Obj_Index
0000D44C 7000                       		moveq	#0,d0
0000D44E 1028 0024                  		move.b	$24(a0),d0
0000D452 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000D456 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000D45A                            ; ===========================================================================
0000D45A 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000D45C 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000D45E 0000                       		dc.w Obj34_Wait-Obj34_Index
0000D460 0000                       		dc.w Obj34_Wait-Obj34_Index
0000D462                            ; ===========================================================================
0000D462                            
0000D462                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000D462                            		include "_inc\loadcards.asm"
0000D462 2248                       		movea.l	a0,a1
0000D464 7000                       		moveq	#0,d0
0000D466 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000D46A 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000D470 6600                       		bne.s	Obj34_CheckFZ
0000D472 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000D474                            
0000D474                            Obj34_CheckFZ:
0000D474 3400                       		move.w	d0,d2
0000D476 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000D47C 6600                       		bne.s	Obj34_LoadConfig
0000D47E 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000D480 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000D480 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000D482                            
0000D482                            Obj34_LoadConfig:
0000D482 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000D488 E948                       		lsl.w	#4,d0
0000D48A D6C0                       		adda.w	d0,a3
0000D48C 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000D492 7203                       		moveq	#3,d1
0000D494                            
0000D494                            Obj34_Loop:
0000D494 137C 0034 0000             		move.b	#$34,0(a1)
0000D49A 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000D49E 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000D4A2 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000D4A6 335A 000A                  		move.w	(a2)+,$A(a1)
0000D4AA 135A 0024                  		move.b	(a2)+,$24(a1)
0000D4AE 101A                       		move.b	(a2)+,d0
0000D4B0 6600                       		bne.s	Obj34_ActNumber
0000D4B2 1002                       		move.b	d2,d0
0000D4B4                            
0000D4B4                            Obj34_ActNumber:
0000D4B4 0C00 0007                  		cmpi.b	#7,d0
0000D4B8 6600                       		bne.s	Obj34_MakeSprite
0000D4BA D038 FE11                  		add.b	($FFFFFE11).w,d0
0000D4BE 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000D4C4 6600                       		bne.s	Obj34_MakeSprite
0000D4C6 5300                       		subq.b	#1,d0
0000D4C8                            
0000D4C8                            Obj34_MakeSprite:
0000D4C8 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000D4CC 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000D4D4 337C 8580 0002             		move.w	#$8580,2(a1)
0000D4DA 137C 0078 0019             		move.b	#$78,$19(a1)
0000D4E0 137C 0000 0001             		move.b	#0,1(a1)
0000D4E6 137C 0000 0018             		move.b	#0,$18(a1)
0000D4EC 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000D4F2 43E9 0040                  		lea	$40(a1),a1	; next object
0000D4F6 51C9 FF9C                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000D4FA                            
0000D4FA                            Obj34_ChkPos:				; XREF: Obj34_Index
0000D4FA 7210                       		moveq	#$10,d1		; set horizontal speed
0000D4FC 3028 0030                  		move.w	$30(a0),d0
0000D500 B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000D504 6700                       		beq.s	loc_C3C8	; if yes, branch
0000D506 6C00                       		bge.s	Obj34_Move
0000D508 4441                       		neg.w	d1
0000D50A                            
0000D50A                            Obj34_Move:
0000D50A D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D50E                            
0000D50E                            loc_C3C8:
0000D50E 3028 0008                  		move.w	8(a0),d0
0000D512 6B00                       		bmi.s	locret_C3D8
0000D514 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D518 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000D51A 6000 0000                  		bra.w	DisplaySprite
0000D51E                            ; ===========================================================================
0000D51E                            
0000D51E                            locret_C3D8:
0000D51E 4E75                       		rts	
0000D520                            ; ===========================================================================
0000D520                            
0000D520                            Obj34_Wait:				; XREF: Obj34_Index
0000D520 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000D524 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000D526 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000D52A 6000 0000                  		bra.w	DisplaySprite
0000D52E                            ; ===========================================================================
0000D52E                            
0000D52E                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000D52E 4A28 0001                  		tst.b	1(a0)
0000D532 6A00                       		bpl.s	Obj34_ChangeArt
0000D534 7220                       		moveq	#$20,d1
0000D536 3028 0032                  		move.w	$32(a0),d0
0000D53A B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000D53E 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000D540 6C00                       		bge.s	Obj34_Move2
0000D542 4441                       		neg.w	d1
0000D544                            
0000D544                            Obj34_Move2:
0000D544 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D548 3028 0008                  		move.w	8(a0),d0
0000D54C 6B00                       		bmi.s	locret_C412
0000D54E 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D552 6400                       		bcc.s	locret_C412	; if yes, branch
0000D554 6000 0000                  		bra.w	DisplaySprite
0000D558                            ; ===========================================================================
0000D558                            
0000D558                            locret_C412:
0000D558 4E75                       		rts	
0000D55A                            ; ===========================================================================
0000D55A                            
0000D55A                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000D55A 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000D560 6600                       		bne.s	Obj34_Delete
0000D562 7002                       		moveq	#2,d0
0000D564 4EB9 0000 1532             		jsr	(LoadPLC).l	; load explosion patterns
0000D56A 7000                       		moveq	#0,d0
0000D56C 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000D570 0640 0015                  		addi.w	#$15,d0
0000D574 4EB9 0000 1532             		jsr	(LoadPLC).l	; load animal patterns
0000D57A                            
0000D57A                            Obj34_Delete:
0000D57A 6000 0000                  		bra.w	DeleteObject
0000D57E                            ; ===========================================================================
0000D57E 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000D580 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000D582 00E4                       		dc.w $E4
0000D584 0206                       		dc.b 2,	6
0000D586 00EA                       		dc.w $EA
0000D588 0207                       		dc.b 2,	7
0000D58A 00E0                       		dc.w $E0
0000D58C 020A                       		dc.b 2,	$A
0000D58E                            ; ---------------------------------------------------------------------------
0000D58E                            ; Title	card configuration data
0000D58E                            ; Format:
0000D58E                            ; 4 bytes per item (YYYY XXXX)
0000D58E                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000D58E                            ; ---------------------------------------------------------------------------
0000D58E                            Obj34_ConData:	
0000D58E 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000D59E 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000D5AE 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000D5BE 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000D5CE 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000D5DE 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000D5EE 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000D5FE                            ; ===========================================================================
0000D5FE                            ; ---------------------------------------------------------------------------
0000D5FE                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000D5FE                            ; ---------------------------------------------------------------------------
0000D5FE                            
0000D5FE                            Obj39:					; XREF: Obj_Index
0000D5FE 7000                       		moveq	#0,d0
0000D600 1028 0024                  		move.b	$24(a0),d0
0000D604 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000D608 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000D60C                            ; ===========================================================================
0000D60C 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000D60E 0000                       		dc.w loc_C50C-Obj39_Index
0000D610 0000                       		dc.w Obj39_Wait-Obj39_Index
0000D612                            ; ===========================================================================
0000D612                            
0000D612                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000D612 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000D616 6700                       		beq.s	Obj39_Main	; if yes, branch
0000D618 4E75                       		rts	
0000D61A                            ; ===========================================================================
0000D61A                            
0000D61A                            Obj39_Main:
0000D61A 5428 0024                  		addq.b	#2,$24(a0)
0000D61E 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000D624 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000D62A 6700                       		beq.s	loc_C4EC	; if not, branch
0000D62C 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000D632                            
0000D632                            loc_C4EC:
0000D632 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000D638 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000D640 317C 855E 0002             		move.w	#$855E,2(a0)
0000D646 117C 0000 0001             		move.b	#0,1(a0)
0000D64C 117C 0000 0018             		move.b	#0,$18(a0)
0000D652                            
0000D652                            loc_C50C:				; XREF: Obj39_Index
0000D652 7210                       		moveq	#$10,d1		; set horizontal speed
0000D654 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000D65A 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000D65C 6500                       		bcs.s	Obj39_Move
0000D65E 4441                       		neg.w	d1
0000D660                            
0000D660                            Obj39_Move:
0000D660 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D664 6000 0000                  		bra.w	DisplaySprite
0000D668                            ; ===========================================================================
0000D668                            
0000D668                            Obj39_SetWait:				; XREF: Obj39_Main
0000D668 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000D66E 5428 0024                  		addq.b	#2,$24(a0)
0000D672 4E75                       		rts	
0000D674                            ; ===========================================================================
0000D674                            
0000D674                            Obj39_Wait:				; XREF: Obj39_Index
0000D674 1038 F605                  		move.b	($FFFFF605).w,d0
0000D678 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000D67C 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000D67E 0828 0000 001A             		btst	#0,$1A(a0)
0000D684 6600                       		bne.s	Obj39_Display
0000D686 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000D68A 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000D68C 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000D690 6000 0000                  		bra.w	DisplaySprite
0000D694                            ; ===========================================================================
0000D694                            
0000D694                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000D694 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000D698 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000D69A 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000D6A0 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000D6A4 6600                       		bne.s	Obj39_Display	; if yes, branch
0000D6A6 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
0000D6AC 6000                       		bra.s	Obj39_Display
0000D6AE                            ; ===========================================================================
0000D6AE                            
0000D6AE                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000D6AE 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D6B4                            
0000D6B4                            Obj39_Display:				; XREF: Obj39_ChgMode
0000D6B4 6000 0000                  		bra.w	DisplaySprite
0000D6B8                            ; ===========================================================================
0000D6B8                            ; ---------------------------------------------------------------------------
0000D6B8                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000D6B8                            ; ---------------------------------------------------------------------------
0000D6B8                            
0000D6B8                            Obj3A:					; XREF: Obj_Index
0000D6B8 7000                       		moveq	#0,d0
0000D6BA 1028 0024                  		move.b	$24(a0),d0
0000D6BE 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000D6C2 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000D6C6                            ; ===========================================================================
0000D6C6 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000D6C8 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000D6CA 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000D6CC 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000D6CE 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000D6D0 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000D6D2 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000D6D4 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000D6D6 0000                       		dc.w loc_C766-Obj3A_Index
0000D6D8                            ; ===========================================================================
0000D6D8                            
0000D6D8                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000D6D8 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000D6DC 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000D6DE 4E75                       		rts	
0000D6E0                            ; ===========================================================================
0000D6E0                            
0000D6E0                            Obj3A_Main:
0000D6E0 2248                       		movea.l	a0,a1
0000D6E2 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000D6E8 7206                       		moveq	#6,d1
0000D6EA                            
0000D6EA                            Obj3A_Loop:
0000D6EA 137C 003A 0000             		move.b	#$3A,0(a1)
0000D6F0 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000D6F4 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000D6F8 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000D6FC 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000D700 135A 0024                  		move.b	(a2)+,$24(a1)
0000D704 101A                       		move.b	(a2)+,d0
0000D706 0C00 0006                  		cmpi.b	#6,d0
0000D70A 6600                       		bne.s	loc_C5CA
0000D70C D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000D710                            
0000D710                            loc_C5CA:
0000D710 1340 001A                  		move.b	d0,$1A(a1)
0000D714 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000D71C 337C 8580 0002             		move.w	#$8580,2(a1)
0000D722 137C 0000 0001             		move.b	#0,1(a1)
0000D728 43E9 0040                  		lea	$40(a1),a1
0000D72C 51C9 FFBC                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000D730                            
0000D730                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000D730 7210                       		moveq	#$10,d1		; set horizontal speed
0000D732 3028 0030                  		move.w	$30(a0),d0
0000D736 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000D73A 6700                       		beq.s	loc_C61A	; if yes, branch
0000D73C 6C00                       		bge.s	Obj3A_Move
0000D73E 4441                       		neg.w	d1
0000D740                            
0000D740                            Obj3A_Move:
0000D740 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D744                            
0000D744                            loc_C5FE:				; XREF: loc_C61A
0000D744 3028 0008                  		move.w	8(a0),d0
0000D748 6B00                       		bmi.s	locret_C60E
0000D74A 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D74E 6400                       		bcc.s	locret_C60E	; if yes, branch
0000D750 6000 0000                  		bra.w	DisplaySprite
0000D754                            ; ===========================================================================
0000D754                            
0000D754                            locret_C60E:
0000D754 4E75                       		rts	
0000D756                            ; ===========================================================================
0000D756                            
0000D756                            loc_C610:				; XREF: loc_C61A
0000D756 117C 000E 0024             		move.b	#$E,$24(a0)
0000D75C 6000 0000                  		bra.w	Obj3A_ChkPos2
0000D760                            ; ===========================================================================
0000D760                            
0000D760                            loc_C61A:				; XREF: Obj3A_ChkPos
0000D760 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000D766 67EE                       		beq.s	loc_C610
0000D768 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000D76E 66D4                       		bne.s	loc_C5FE
0000D770 5428 0024                  		addq.b	#2,$24(a0)
0000D774 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D77A                            
0000D77A                            Obj3A_Wait:				; XREF: Obj3A_Index
0000D77A 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000D77E 6600                       		bne.s	Obj3A_Display
0000D780 5428 0024                  		addq.b	#2,$24(a0)
0000D784                            
0000D784                            Obj3A_Display:
0000D784 6000 0000                  		bra.w	DisplaySprite
0000D788                            ; ===========================================================================
0000D788                            
0000D788                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000D788 6100 0000                  		bsr.w	DisplaySprite
0000D78C 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000D792 7000                       		moveq	#0,d0
0000D794 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000D798 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000D79A 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000D79E 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000D7A4                            
0000D7A4                            Obj3A_RingBonus:
0000D7A4 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000D7A8 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000D7AA 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000D7AE 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000D7B4                            
0000D7B4                            Obj3A_ChkBonus:
0000D7B4 4A40                       		tst.w	d0		; is there any bonus?
0000D7B6 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000D7B8 303C 00C5                  		move.w	#$C5,d0
0000D7BC 4EB9 0000 132C             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000D7C2 5428 0024                  		addq.b	#2,$24(a0)
0000D7C6 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000D7CC 6600                       		bne.s	Obj3A_SetDelay
0000D7CE 5828 0024                  		addq.b	#4,$24(a0)
0000D7D2                            
0000D7D2                            Obj3A_SetDelay:
0000D7D2 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D7D8                            
0000D7D8                            locret_C692:
0000D7D8 4E75                       		rts	
0000D7DA                            ; ===========================================================================
0000D7DA                            
0000D7DA                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000D7DA 4EB9 0000 0000             		jsr	AddPoints
0000D7E0 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D7E4 0200 0003                  		andi.b	#3,d0
0000D7E8 66EE                       		bne.s	locret_C692
0000D7EA 303C 00CD                  		move.w	#$CD,d0
0000D7EE 4EF9 0000 132C             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000D7F4                            ; ===========================================================================
0000D7F4                            
0000D7F4                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000D7F4 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000D7F8 0240 0007                  		andi.w	#7,d0
0000D7FC E748                       		lsl.w	#3,d0
0000D7FE 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000D802 0241 0003                  		andi.w	#3,d1
0000D806 D241                       		add.w	d1,d1
0000D808 D041                       		add.w	d1,d0
0000D80A 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000D80E 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000D812 4A40                       		tst.w	d0
0000D814 6600                       		bne.s	Obj3A_ChkSS
0000D816 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000D81C 6000                       		bra.s	Obj3A_Display2
0000D81E                            ; ===========================================================================
0000D81E                            
0000D81E                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000D81E 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000D822 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000D826 6700                       		beq.s	loc_C6EA	; if not, branch
0000D828 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000D82E 6000                       		bra.s	Obj3A_Display2
0000D830                            ; ===========================================================================
0000D830                            
0000D830                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000D830 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D836                            
0000D836                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000D836 6000 0000                  		bra.w	DisplaySprite
0000D83A                            ; ===========================================================================
0000D83A                            ; ---------------------------------------------------------------------------
0000D83A                            ; Level	order array
0000D83A                            ; ---------------------------------------------------------------------------
0000D83A                            LevelOrder:	incbin	misc\lvl_ord.bin
0000D86A                            		even
0000D86A                            ; ===========================================================================
0000D86A                            
0000D86A                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000D86A 7220                       		moveq	#$20,d1		; set horizontal speed
0000D86C 3028 0032                  		move.w	$32(a0),d0
0000D870 B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000D874 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000D876 6C00                       		bge.s	Obj3A_Move2
0000D878 4441                       		neg.w	d1
0000D87A                            
0000D87A                            Obj3A_Move2:
0000D87A D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D87E 3028 0008                  		move.w	8(a0),d0
0000D882 6B00                       		bmi.s	locret_C748
0000D884 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D888 6400                       		bcc.s	locret_C748	; if yes, branch
0000D88A 6000 0000                  		bra.w	DisplaySprite
0000D88E                            ; ===========================================================================
0000D88E                            
0000D88E                            locret_C748:
0000D88E 4E75                       		rts	
0000D890                            ; ===========================================================================
0000D890                            
0000D890                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000D890 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000D896 6600 0000                  		bne.w	DeleteObject
0000D89A 5428 0024                  		addq.b	#2,$24(a0)
0000D89E 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000D8A2 303C 008D                  		move.w	#$8D,d0
0000D8A6 4EF9 0000 1326             		jmp	(PlaySound).l	; play FZ music
0000D8AC                            ; ===========================================================================
0000D8AC                            
0000D8AC                            loc_C766:				; XREF: Obj3A_Index
0000D8AC 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000D8B0 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000D8B6 6700 0000                  		beq.w	DeleteObject
0000D8BA 4E75                       		rts	
0000D8BC                            ; ===========================================================================
0000D8BC 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000D8C2 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000D8C4 FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000D8CA 0201                       		dc.b 2,	1
0000D8CC 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000D8D2 0206                       		dc.b 2,	6
0000D8D4 0520 0120 00EC             		dc.w $520, $120, $EC
0000D8DA 0202                       		dc.b 2,	2
0000D8DC 0540 0120 00FC             		dc.w $540, $120, $FC
0000D8E2 0203                       		dc.b 2,	3
0000D8E4 0560 0120 010C             		dc.w $560, $120, $10C
0000D8EA 0204                       		dc.b 2,	4
0000D8EC 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000D8F2 0205                       		dc.b 2,	5
0000D8F4                            ; ===========================================================================
0000D8F4                            ; ---------------------------------------------------------------------------
0000D8F4                            ; Object 7E - special stage results screen
0000D8F4                            ; ---------------------------------------------------------------------------
0000D8F4                            
0000D8F4                            Obj7E:					; XREF: Obj_Index
0000D8F4 7000                       		moveq	#0,d0
0000D8F6 1028 0024                  		move.b	$24(a0),d0
0000D8FA 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000D8FE 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000D902                            ; ===========================================================================
0000D902 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000D904 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000D906 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D908 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000D90A 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D90C 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000D90E 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D910 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000D912 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D914 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000D916 0000                       		dc.w loc_C91A-Obj7E_Index
0000D918                            ; ===========================================================================
0000D918                            
0000D918                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000D918 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000D91C 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000D91E 4E75                       		rts	
0000D920                            ; ===========================================================================
0000D920                            
0000D920                            Obj7E_Main:
0000D920 2248                       		movea.l	a0,a1
0000D922 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000D928 7203                       		moveq	#3,d1
0000D92A 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000D930 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000D932 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000D934                            
0000D934                            Obj7E_Loop:
0000D934 137C 007E 0000             		move.b	#$7E,0(a1)
0000D93A 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000D93E 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000D942 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000D946 135A 0024                  		move.b	(a2)+,$24(a1)
0000D94A 135A 001A                  		move.b	(a2)+,$1A(a1)
0000D94E 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000D956 337C 8580 0002             		move.w	#$8580,2(a1)
0000D95C 137C 0000 0001             		move.b	#0,1(a1)
0000D962 43E9 0040                  		lea	$40(a1),a1
0000D966 51C9 FFCC                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000D96A                            
0000D96A 7007                       		moveq	#7,d0
0000D96C 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000D970 6700                       		beq.s	loc_C842
0000D972 7000                       		moveq	#0,d0
0000D974 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000D978 6600                       		bne.s	loc_C842	; if not, branch
0000D97A 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000D97C 317C 0018 0008             		move.w	#$18,8(a0)
0000D982 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000D988                            
0000D988                            loc_C842:
0000D988 1140 001A                  		move.b	d0,$1A(a0)
0000D98C                            
0000D98C                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000D98C 7210                       		moveq	#$10,d1		; set horizontal speed
0000D98E 3028 0030                  		move.w	$30(a0),d0
0000D992 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000D996 6700                       		beq.s	loc_C86C	; if yes, branch
0000D998 6C00                       		bge.s	Obj7E_Move
0000D99A 4441                       		neg.w	d1
0000D99C                            
0000D99C                            Obj7E_Move:
0000D99C D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D9A0                            
0000D9A0                            loc_C85A:				; XREF: loc_C86C
0000D9A0 3028 0008                  		move.w	8(a0),d0
0000D9A4 6B00                       		bmi.s	locret_C86A
0000D9A6 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D9AA 6400                       		bcc.s	locret_C86A	; if yes, branch
0000D9AC 6000 0000                  		bra.w	DisplaySprite
0000D9B0                            ; ===========================================================================
0000D9B0                            
0000D9B0                            locret_C86A:
0000D9B0 4E75                       		rts	
0000D9B2                            ; ===========================================================================
0000D9B2                            
0000D9B2                            loc_C86C:				; XREF: Obj7E_ChkPos
0000D9B2 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000D9B8 66E6                       		bne.s	loc_C85A
0000D9BA 5428 0024                  		addq.b	#2,$24(a0)
0000D9BE 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D9C4 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000D9CA                            
0000D9CA                            Obj7E_Wait:				; XREF: Obj7E_Index
0000D9CA 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000D9CE 6600                       		bne.s	Obj7E_Display
0000D9D0 5428 0024                  		addq.b	#2,$24(a0)
0000D9D4                            
0000D9D4                            Obj7E_Display:
0000D9D4 6000 0000                  		bra.w	DisplaySprite
0000D9D8                            ; ===========================================================================
0000D9D8                            
0000D9D8                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000D9D8 6100 0000                  		bsr.w	DisplaySprite
0000D9DC 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000D9E2 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000D9E6 6700                       		beq.s	loc_C8C4	; if yes, branch
0000D9E8 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000D9EE 700A                       		moveq	#10,d0		; add 10 to score
0000D9F0 4EB9 0000 0000             		jsr	AddPoints
0000D9F6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D9FA 0200 0003                  		andi.b	#3,d0
0000D9FE 6600                       		bne.s	locret_C8EA
0000DA00 303C 00CD                  		move.w	#$CD,d0
0000DA04 4EF9 0000 132C             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000DA0A                            ; ===========================================================================
0000DA0A                            
0000DA0A                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000DA0A 303C 00C5                  		move.w	#$C5,d0
0000DA0E 4EB9 0000 132C             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000DA14 5428 0024                  		addq.b	#2,$24(a0)
0000DA18 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000DA1E 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000DA24 6500                       		bcs.s	locret_C8EA	; if not, branch
0000DA26 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000DA2C 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000DA30                            
0000DA30                            locret_C8EA:
0000DA30 4E75                       		rts	
0000DA32                            ; ===========================================================================
0000DA32                            
0000DA32                            Obj7E_Exit:				; XREF: Obj7E_Index
0000DA32 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000DA38 6000 0000                  		bra.w	DisplaySprite
0000DA3C                            ; ===========================================================================
0000DA3C                            
0000DA3C                            Obj7E_Continue:				; XREF: Obj7E_Index
0000DA3C 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000DA42 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000DA48 303C 00BF                  		move.w	#$BF,d0
0000DA4C 4EB9 0000 132C             		jsr	(PlaySound_Special).l ;	play continues music
0000DA52 5428 0024                  		addq.b	#2,$24(a0)
0000DA56 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000DA5C 6000 0000                  		bra.w	DisplaySprite
0000DA60                            ; ===========================================================================
0000DA60                            
0000DA60                            loc_C91A:				; XREF: Obj7E_Index
0000DA60 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000DA64 0200 000F                  		andi.b	#$F,d0
0000DA68 6600                       		bne.s	Obj7E_Display2
0000DA6A 0868 0000 001A             		bchg	#0,$1A(a0)
0000DA70                            
0000DA70                            Obj7E_Display2:
0000DA70 6000 0000                  		bra.w	DisplaySprite
0000DA74                            ; ===========================================================================
0000DA74 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000DA7A 0200                       		dc.b 2,	0		; rountine number, frame number
0000DA7C 0320 0120 0118             		dc.w $320, $120, $118
0000DA82 0201                       		dc.b 2,	1
0000DA84 0360 0120 0128             		dc.w $360, $120, $128
0000DA8A 0202                       		dc.b 2,	2
0000DA8C 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000DA92 0203                       		dc.b 2,	3
0000DA94 03A0 0120 0138             		dc.w $3A0, $120, $138
0000DA9A 0206                       		dc.b 2,	6
0000DA9C                            ; ===========================================================================
0000DA9C                            ; ---------------------------------------------------------------------------
0000DA9C                            ; Object 7F - chaos emeralds from the special stage results screen
0000DA9C                            ; ---------------------------------------------------------------------------
0000DA9C                            
0000DA9C                            Obj7F:					; XREF: Obj_Index
0000DA9C 7000                       		moveq	#0,d0
0000DA9E 1028 0024                  		move.b	$24(a0),d0
0000DAA2 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000DAA6 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000DAAA                            ; ===========================================================================
0000DAAA 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000DAAC 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000DAAE                            
0000DAAE                            ; ---------------------------------------------------------------------------
0000DAAE                            ; X-axis positions for chaos emeralds
0000DAAE                            ; ---------------------------------------------------------------------------
0000DAAE 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000DABA                            ; ===========================================================================
0000DABA                            
0000DABA                            Obj7F_Main:				; XREF: Obj7F_Index
0000DABA 2248                       		movea.l	a0,a1
0000DABC 45F9 0000 DAAE             		lea	(Obj7F_PosData).l,a2
0000DAC2 7400                       		moveq	#0,d2
0000DAC4 7200                       		moveq	#0,d1
0000DAC6 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000DACA 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000DACC 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000DAD0                            
0000DAD0                            Obj7F_Loop:
0000DAD0 137C 007F 0000             		move.b	#$7F,0(a1)
0000DAD6 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000DADA 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000DAE0 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000DAE4 1633 2000                  		move.b	(a3,d2.w),d3
0000DAE8 1343 001A                  		move.b	d3,$1A(a1)
0000DAEC 1343 001C                  		move.b	d3,$1C(a1)
0000DAF0 5202                       		addq.b	#1,d2
0000DAF2 5429 0024                  		addq.b	#2,$24(a1)
0000DAF6 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000DAFE 337C 8541 0002             		move.w	#$8541,2(a1)
0000DB04 137C 0000 0001             		move.b	#0,1(a1)
0000DB0A 43E9 0040                  		lea	$40(a1),a1	; next object
0000DB0E 51C9 FFC0                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000DB12                            
0000DB12                            Obj7F_Flash:				; XREF: Obj7F_Index
0000DB12 1028 001A                  		move.b	$1A(a0),d0
0000DB16 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000DB1C 0C00 0006                  		cmpi.b	#6,d0
0000DB20 6600                       		bne.s	Obj7F_Display
0000DB22 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000DB28                            
0000DB28                            Obj7F_Display:
0000DB28 6000 0000                  		bra.w	DisplaySprite
0000DB2C                            ; ===========================================================================
0000DB2C                            ; ---------------------------------------------------------------------------
0000DB2C                            ; Sprite mappings - zone title cards
0000DB2C                            ; ---------------------------------------------------------------------------
0000DB2C                            Map_obj34:	
0000DB2C                            		include "_maps\Titlecard.asm"
0000DB2C 0000                       		dc.w byte_C9FE-Map_obj34
0000DB2E 0000                       		dc.w byte_CA2C-Map_obj34
0000DB30 0000                       		dc.w byte_CA5A-Map_obj34
0000DB32 0000                       		dc.w byte_CA7A-Map_obj34
0000DB34 0000                       		dc.w byte_CAA8-Map_obj34
0000DB36 0000                       		dc.w byte_CADC-Map_obj34
0000DB38 0000                       		dc.w byte_CB10-Map_obj34
0000DB3A 0000                       		dc.w byte_CB26-Map_obj34
0000DB3C 0000                       		dc.w byte_CB31-Map_obj34
0000DB3E 0000                       		dc.w byte_CB3C-Map_obj34
0000DB40 0000                       		dc.w byte_CB47-Map_obj34
0000DB42 0000                       		dc.w byte_CB8A-Map_obj34
0000DB44 0A                         byte_C9FE:		dc.b $A	;  GREEN  BEAN ACT 1
0000DB45 F805 0018 AC               		dc.b $F8, 5, 0, $18, $AC	; G
0000DB4A F805 003A BC               		dc.b $F8, 5, 0, $3A, $BC	; R
0000DB4F F805 0010 CC               		dc.b $F8, 5, 0, $10, $CC	; E
0000DB54 F805 0010 DC               		dc.b $F8, 5, 0, $10, $DC	; E
0000DB59 F805 002E EC               		dc.b $F8, 5, 0, $2E, $EC	; N
0000DB5E F800 0056 FC               		dc.b $F8, 0, 0, $56, $FC	; Space
0000DB63 F805 0004 0C               		dc.b $F8, 5, 0, 4, $C		; B
0000DB68 F805 0010 1C               		dc.b $F8, 5, 0, $10, $1C	; E
0000DB6D F805 0000 2C               		dc.b $F8, 5, 0, 0, $2C		; A
0000DB72 F805 002E 3C               		dc.b $F8, 5, 0, $2E, $3C	; N
0000DB77 09                         byte_CA2C:	dc.b 9			; LABYRINTH
0000DB78 F805 0026 BC               		dc.b $F8, 5, 0,	$26, $BC
0000DB7D F805 0000 CC               		dc.b $F8, 5, 0,	0, $CC
0000DB82 F805 0004 DC               		dc.b $F8, 5, 0,	4, $DC
0000DB87 F805 004A EC               		dc.b $F8, 5, 0,	$4A, $EC
0000DB8C F805 003A FC               		dc.b $F8, 5, 0,	$3A, $FC
0000DB91 F801 0020 0C               		dc.b $F8, 1, 0,	$20, $C
0000DB96 F805 002E 14               		dc.b $F8, 5, 0,	$2E, $14
0000DB9B F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000DBA0 F805 001C 34               		dc.b $F8, 5, 0,	$1C, $34
0000DBA5 06                         byte_CA5A:	dc.b 6			; MARBLE
0000DBA6 F805 002A CF               		dc.b $F8, 5, 0,	$2A, $CF
0000DBAB F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000DBB0 F805 003A F0               		dc.b $F8, 5, 0,	$3A, $F0
0000DBB5 F805 0004 00               		dc.b $F8, 5, 0,	4, 0
0000DBBA F805 0026 10               		dc.b $F8, 5, 0,	$26, $10
0000DBBF F805 0010 20               		dc.b $F8, 5, 0,	$10, $20
0000DBC4 00                         		dc.b 0
0000DBC5 09                         byte_CA7A:	dc.b 9			; STAR	LIGHT
0000DBC6 F805 003E B4               		dc.b $F8, 5, 0,	$3E, $B4
0000DBCB F805 0042 C4               		dc.b $F8, 5, 0,	$42, $C4
0000DBD0 F805 0000 D4               		dc.b $F8, 5, 0,	0, $D4
0000DBD5 F805 003A E4               		dc.b $F8, 5, 0,	$3A, $E4
0000DBDA F805 0026 04               		dc.b $F8, 5, 0,	$26, 4
0000DBDF F801 0020 14               		dc.b $F8, 1, 0,	$20, $14
0000DBE4 F805 0018 1C               		dc.b $F8, 5, 0,	$18, $1C
0000DBE9 F805 001C 2C               		dc.b $F8, 5, 0,	$1C, $2C
0000DBEE F805 0042 3C               		dc.b $F8, 5, 0,	$42, $3C
0000DBF3 0A                         byte_CAA8:	dc.b $A			; SPRING YARD
0000DBF4 F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000DBF9 F805 0036 BC               		dc.b $F8, 5, 0,	$36, $BC
0000DBFE F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000DC03 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000DC08 F805 002E E4               		dc.b $F8, 5, 0,	$2E, $E4
0000DC0D F805 0018 F4               		dc.b $F8, 5, 0,	$18, $F4
0000DC12 F805 004A 14               		dc.b $F8, 5, 0,	$4A, $14
0000DC17 F805 0000 24               		dc.b $F8, 5, 0,	0, $24
0000DC1C F805 003A 34               		dc.b $F8, 5, 0,	$3A, $34
0000DC21 F805 000C 44               		dc.b $F8, 5, 0,	$C, $44
0000DC26 00                         		dc.b 0
0000DC27 0A                         byte_CADC:	dc.b $A			; SCRAP BRAIN
0000DC28 F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000DC2D F805 0008 BC               		dc.b $F8, 5, 0,	8, $BC
0000DC32 F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000DC37 F805 0000 DC               		dc.b $F8, 5, 0,	0, $DC
0000DC3C F805 0036 EC               		dc.b $F8, 5, 0,	$36, $EC
0000DC41 F805 0004 0C               		dc.b $F8, 5, 0,	4, $C
0000DC46 F805 003A 1C               		dc.b $F8, 5, 0,	$3A, $1C
0000DC4B F805 0000 2C               		dc.b $F8, 5, 0,	0, $2C
0000DC50 F801 0020 3C               		dc.b $F8, 1, 0,	$20, $3C
0000DC55 F805 002E 44               		dc.b $F8, 5, 0,	$2E, $44
0000DC5A 00                         		dc.b 0
0000DC5B 04                         byte_CB10:	dc.b 4			; ZONE
0000DC5C F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000DC61 F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000DC66 F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000DC6B F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000DC70 00                         		dc.b 0
0000DC71 02                         byte_CB26:	dc.b 2			; ACT 1
0000DC72 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000DC77 F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000DC7C 02                         byte_CB31:	dc.b 2			; ACT 2
0000DC7D 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000DC82 F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000DC87 02                         byte_CB3C:	dc.b 2			; ACT 3
0000DC88 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000DC8D F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000DC92 0D                         byte_CB47:	dc.b $D			; Oval
0000DC93 E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000DC98 E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000DC9D EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000DCA2 F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000DCA7 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000DCAC 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000DCB1 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000DCB6 FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000DCBB EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000DCC0 F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000DCC5 FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000DCCA 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000DCCF 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000DCD4 00                         		dc.b 0
0000DCD5 05                         byte_CB8A:	dc.b 5			; FINAL
0000DCD6 F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000DCDB F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000DCE0 F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000DCE5 F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000DCEA F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000DCF0 00                         		even
0000DCF0 00                         		even
0000DCF0                            ; ---------------------------------------------------------------------------
0000DCF0                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000DCF0                            ; ---------------------------------------------------------------------------
0000DCF0                            Map_obj39:
0000DCF0                            	include "_maps\obj39.asm"
0000DCF0                            ; ---------------------------------------------------------------------------
0000DCF0                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000DCF0                            ; ---------------------------------------------------------------------------
0000DCF0 0000                       		dc.w byte_CBAC-Map_obj39
0000DCF2 0000                       		dc.w byte_CBB7-Map_obj39
0000DCF4 0000                       		dc.w byte_CBC2-Map_obj39
0000DCF6 0000                       		dc.w byte_CBCD-Map_obj39
0000DCF8 02                         byte_CBAC:	dc.b 2
0000DCF9 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000DCFE F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000DD03 02                         byte_CBB7:	dc.b 2
0000DD04 F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000DD09 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000DD0E 02                         byte_CBC2:	dc.b 2
0000DD0F F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000DD14 F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000DD19 02                         byte_CBCD:	dc.b 2
0000DD1A F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000DD1F F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000DD24                            		even
0000DD24                            		even
0000DD24                            
0000DD24                            ; ---------------------------------------------------------------------------
0000DD24                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000DD24                            ; ---------------------------------------------------------------------------
0000DD24                            Map_obj3A:	
0000DD24                            		include "_maps\passed.asm"
0000DD24                            ; ---------------------------------------------------------------------------
0000DD24                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000DD24                            ; ---------------------------------------------------------------------------
0000DD24 0000                       		dc.w byte_CBEA-Map_obj3A
0000DD26 0000                       		dc.w byte_CC13-Map_obj3A
0000DD28 0000                       		dc.w byte_CC32-Map_obj3A
0000DD2A 0000                       		dc.w byte_CC51-Map_obj3A
0000DD2C 0000                       		dc.w byte_CC75-Map_obj3A
0000DD2E FF6E                       		dc.w byte_CB47-Map_obj3A
0000DD30 FF4D                       		dc.w byte_CB26-Map_obj3A
0000DD32 FF58                       		dc.w byte_CB31-Map_obj3A
0000DD34 FF63                       		dc.w byte_CB3C-Map_obj3A
0000DD36 08                         byte_CBEA:	dc.b 8			; SONIC HAS
0000DD37 F805 003E B8               		dc.b $F8, 5, 0,	$3E, $B8
0000DD3C F805 0032 C8               		dc.b $F8, 5, 0,	$32, $C8
0000DD41 F805 002E D8               		dc.b $F8, 5, 0,	$2E, $D8
0000DD46 F801 0020 E8               		dc.b $F8, 1, 0,	$20, $E8
0000DD4B F805 0008 F0               		dc.b $F8, 5, 0,	8, $F0
0000DD50 F805 001C 10               		dc.b $F8, 5, 0,	$1C, $10
0000DD55 F805 0000 20               		dc.b $F8, 5, 0,	0, $20
0000DD5A F805 003E 30               		dc.b $F8, 5, 0,	$3E, $30
0000DD5F 06                         byte_CC13:	dc.b 6			; PASSED
0000DD60 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000DD65 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000DD6A F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000DD6F F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000DD74 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000DD79 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000DD7E 06                         byte_CC32:	dc.b 6			; SCORE
0000DD7F F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000DD84 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000DD89 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000DD8E F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000DD93 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000DD98 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000DD9D 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000DD9E F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000DDA3 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000DDA8 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000DDAD F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000DDB2 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000DDB7 F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000DDBC F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000DDC1 07                         byte_CC75:	dc.b 7			; RING BONUS
0000DDC2 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000DDC7 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000DDCC F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000DDD1 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000DDD6 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000DDDB F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000DDE0 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000DDE6 00                         		even
0000DDE6 00                         		even
0000DDE6                            ; ---------------------------------------------------------------------------
0000DDE6                            ; Sprite mappings - special stage results screen
0000DDE6                            ; ---------------------------------------------------------------------------
0000DDE6                            Map_obj7E:	
0000DDE6                            		include "_maps\passedS.asm"
0000DDE6                            ; ---------------------------------------------------------------------------
0000DDE6                            ; Sprite mappings - special stage results screen
0000DDE6                            ; ---------------------------------------------------------------------------
0000DDE6 0000                       		dc.w byte_CCAC-Map_obj7E
0000DDE8 0000                       		dc.w byte_CCEE-Map_obj7E
0000DDEA 0000                       		dc.w byte_CD0D-Map_obj7E
0000DDEC FEAC                       		dc.w byte_CB47-Map_obj7E
0000DDEE 0000                       		dc.w byte_CD31-Map_obj7E
0000DDF0 0000                       		dc.w byte_CD46-Map_obj7E
0000DDF2 0000                       		dc.w byte_CD5B-Map_obj7E
0000DDF4 0000                       		dc.w byte_CD6B-Map_obj7E
0000DDF6 0000                       		dc.w byte_CDA8-Map_obj7E
0000DDF8 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000DDF9 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000DDFE F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000DE03 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000DE08 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000DE0D F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000DE12 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000DE17 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000DE1C F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000DE21 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000DE26 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000DE2B F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000DE30 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000DE35 F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000DE3A 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000DE3B F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000DE40 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000DE45 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000DE4A F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000DE4F F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000DE54 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000DE59 07                         byte_CD0D:	dc.b 7
0000DE5A F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000DE5F F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000DE64 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000DE69 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000DE6E FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000DE73 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000DE78 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000DE7D 04                         byte_CD31:	dc.b 4
0000DE7E F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000DE83 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000DE88 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000DE8D F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000DE92 04                         byte_CD46:	dc.b 4
0000DE93 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000DE98 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000DE9D F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000DEA2 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000DEA7 03                         byte_CD5B:	dc.b 3
0000DEA8 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000DEAD F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000DEB2 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000DEB7 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000DEB8 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000DEBD F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000DEC2 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000DEC7 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000DECC F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000DED1 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000DED6 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000DEDB F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000DEE0 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000DEE5 F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000DEEA F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000DEEF F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000DEF4 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000DEF5 F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000DEFA F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000DEFF F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000DF04 F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000DF09 F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000DF0E F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000DF13 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000DF18 F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000DF1D F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000DF22 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000DF27 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000DF2C F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000DF31 F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000DF36 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000DF3B F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000DF40                            		even
0000DF40                            		even
0000DF40                            	; ---------------------------------------------------------------------------
0000DF40                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000DF40                            ; ---------------------------------------------------------------------------
0000DF40                            Map_obj7F:
0000DF40                            	include "_maps\obj7F.asm"
0000DF40                            ; ---------------------------------------------------------------------------
0000DF40                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000DF40                            ; ---------------------------------------------------------------------------
0000DF40 0000                       		dc.w byte_CE02-Map_obj7F
0000DF42 0000                       		dc.w byte_CE08-Map_obj7F
0000DF44 0000                       		dc.w byte_CE0E-Map_obj7F
0000DF46 0000                       		dc.w byte_CE14-Map_obj7F
0000DF48 0000                       		dc.w byte_CE1A-Map_obj7F
0000DF4A 0000                       		dc.w byte_CE20-Map_obj7F
0000DF4C 0000                       		dc.w byte_CE26-Map_obj7F
0000DF4E 01                         byte_CE02:	dc.b 1
0000DF4F F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000DF54 01                         byte_CE08:	dc.b 1
0000DF55 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000DF5A 01                         byte_CE0E:	dc.b 1
0000DF5B F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000DF60 01                         byte_CE14:	dc.b 1
0000DF61 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000DF66 01                         byte_CE1A:	dc.b 1
0000DF67 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000DF6C 01                         byte_CE20:	dc.b 1
0000DF6D F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000DF72 00                         byte_CE26:	dc.b 0			; Blank frame
0000DF74 00                         		even
0000DF74 00                         		even
0000DF74                            
0000DF74                            ; ===========================================================================
0000DF74                            ; ---------------------------------------------------------------------------
0000DF74                            ; Object 36 - spikes
0000DF74                            ; ---------------------------------------------------------------------------
0000DF74                            
0000DF74                            Obj36:					; XREF: Obj_Index
0000DF74 7000                       		moveq	#0,d0
0000DF76 1028 0024                  		move.b	$24(a0),d0
0000DF7A 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000DF7E 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000DF82                            ; ===========================================================================
0000DF82 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000DF84 0000                       		dc.w Obj36_Solid-Obj36_Index
0000DF86                            
0000DF86 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000DF88 0110                       		dc.b 1,	$10
0000DF8A 0204                       		dc.b 2,	4
0000DF8C 031C                       		dc.b 3,	$1C
0000DF8E 0440                       		dc.b 4,	$40
0000DF90 0510                       		dc.b 5,	$10
0000DF92                            ; ===========================================================================
0000DF92                            
0000DF92                            Obj36_Main:				; XREF: Obj36_Index
0000DF92 5428 0024                  		addq.b	#2,$24(a0)
0000DF96 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000DF9E 317C 051B 0002             		move.w	#$51B,2(a0)
0000DFA4 0028 0004 0001             		ori.b	#4,1(a0)
0000DFAA 117C 0004 0018             		move.b	#4,$18(a0)
0000DFB0 1028 0028                  		move.b	$28(a0),d0
0000DFB4 0228 000F 0028             		andi.b	#$F,$28(a0)
0000DFBA 0240 00F0                  		andi.w	#$F0,d0
0000DFBE 43F9 0000 DF86             		lea	(Obj36_Var).l,a1
0000DFC4 E648                       		lsr.w	#3,d0
0000DFC6 D2C0                       		adda.w	d0,a1
0000DFC8 1159 001A                  		move.b	(a1)+,$1A(a0)
0000DFCC 1159 0019                  		move.b	(a1)+,$19(a0)
0000DFD0 3168 0008 0030             		move.w	8(a0),$30(a0)
0000DFD6 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000DFDC                            
0000DFDC                            Obj36_Solid:				; XREF: Obj36_Index
0000DFDC 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000DFE0 343C 0004                  		move.w	#4,d2
0000DFE4 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000DFEA 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000DFEC 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000DFF2 6600                       		bne.s	Obj36_Upright	; if not, branch
0000DFF4 343C 0014                  		move.w	#$14,d2
0000DFF8                            
0000DFF8                            ; Spikes types $1x and $5x face	sideways
0000DFF8                            
0000DFF8                            Obj36_SideWays:				; XREF: Obj36_Solid
0000DFF8 323C 001B                  		move.w	#$1B,d1
0000DFFC 3602                       		move.w	d2,d3
0000DFFE 5243                       		addq.w	#1,d3
0000E000 3828 0008                  		move.w	8(a0),d4
0000E004 6100 0000                  		bsr.w	SolidObject
0000E008 0828 0003 0022             		btst	#3,$22(a0)
0000E00E 6600                       		bne.s	Obj36_Display
0000E010 0C44 0001                  		cmpi.w	#1,d4
0000E014 6700                       		beq.s	Obj36_Hurt
0000E016 6000                       		bra.s	Obj36_Display
0000E018                            ; ===========================================================================
0000E018                            
0000E018                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000E018                            
0000E018                            Obj36_Upright:				; XREF: Obj36_Solid
0000E018 7200                       		moveq	#0,d1
0000E01A 1228 0019                  		move.b	$19(a0),d1
0000E01E 0641 000B                  		addi.w	#$B,d1
0000E022 343C 0010                  		move.w	#$10,d2
0000E026 363C 0011                  		move.w	#$11,d3
0000E02A 3828 0008                  		move.w	8(a0),d4
0000E02E 6100 0000                  		bsr.w	SolidObject
0000E032 0828 0003 0022             		btst	#3,$22(a0)
0000E038 6600                       		bne.s	Obj36_Hurt
0000E03A 4A44                       		tst.w	d4
0000E03C 6A00                       		bpl.s	Obj36_Display
0000E03E                            
0000E03E                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000E03E 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000E042 6600                       		bne.s	Obj36_Display	; if yes, branch
0000E044 4A78 D030                  		tst.w	($FFFFD030).w	; +++ is Sonic invulnerable?
0000E048 6600                       		bne.s	Obj36_Display	; +++ if yes, branch
0000E04A 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
0000E04E 6600                       		bne.s	Obj36_Display	; if yes, branch
0000E050 2F08                       		move.l	a0,-(sp)
0000E052 2448                       		movea.l	a0,a2
0000E054 41F8 D000                  		lea	($FFFFD000).w,a0
0000E058 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000E05E 6400                       		bcc.s	loc_CF20
0000E060 2628 000C                  		move.l	$C(a0),d3
0000E064 3028 0012                  		move.w	$12(a0),d0
0000E068 48C0                       		ext.l	d0
0000E06A E180                       		asl.l	#8,d0
0000E06C 9680                       		sub.l	d0,d3
0000E06E 2143 000C                  		move.l	d3,$C(a0)
0000E072 4EB9 0000 0000             		jsr	KillSonic
0000E078                            
0000E078                            loc_CF20:
0000E078 205F                       		movea.l	(sp)+,a0
0000E07A                            
0000E07A                            Obj36_Display:
0000E07A 6100 0000                  		bsr.w	DisplaySprite
0000E07E 3028 0030                  		move.w	$30(a0),d0
0000E082 0240 FF80                  		andi.w	#$FF80,d0
0000E086 3238 F700                  		move.w	($FFFFF700).w,d1
0000E08A 0441 0080                  		subi.w	#$80,d1
0000E08E 0241 FF80                  		andi.w	#$FF80,d1
0000E092 9041                       		sub.w	d1,d0
0000E094 0C40 0280                  		cmpi.w	#$280,d0
0000E098 6200 0000                  		bhi.w	DeleteObject
0000E09C 4E75                       		rts	
0000E09E                            ; ===========================================================================
0000E09E                            
0000E09E                            Obj36_Type0x:				; XREF: Obj36_Solid
0000E09E 7000                       		moveq	#0,d0
0000E0A0 1028 0028                  		move.b	$28(a0),d0
0000E0A4 D040                       		add.w	d0,d0
0000E0A6 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000E0AA 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000E0AE                            ; ===========================================================================
0000E0AE 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000E0B0 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000E0B2 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000E0B4                            ; ===========================================================================
0000E0B4                            
0000E0B4                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000E0B4 4E75                       		rts			; don't move the object
0000E0B6                            ; ===========================================================================
0000E0B6                            
0000E0B6                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000E0B6 6100 0000                  		bsr.w	Obj36_Wait
0000E0BA 7000                       		moveq	#0,d0
0000E0BC 1028 0034                  		move.b	$34(a0),d0
0000E0C0 D068 0032                  		add.w	$32(a0),d0
0000E0C4 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000E0C8 4E75                       		rts	
0000E0CA                            ; ===========================================================================
0000E0CA                            
0000E0CA                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000E0CA 6100 0000                  		bsr.w	Obj36_Wait
0000E0CE 7000                       		moveq	#0,d0
0000E0D0 1028 0034                  		move.b	$34(a0),d0
0000E0D4 D068 0030                  		add.w	$30(a0),d0
0000E0D8 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000E0DC 4E75                       		rts	
0000E0DE                            ; ===========================================================================
0000E0DE                            
0000E0DE                            Obj36_Wait:
0000E0DE 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000E0E2 6700                       		beq.s	loc_CFA4	; if yes, branch
0000E0E4 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000E0E8 6600                       		bne.s	locret_CFE6
0000E0EA 4A28 0001                  		tst.b	1(a0)
0000E0EE 6A00                       		bpl.s	locret_CFE6
0000E0F0 303C 00B6                  		move.w	#$B6,d0
0000E0F4 4EB9 0000 132C             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000E0FA 6000                       		bra.s	locret_CFE6
0000E0FC                            ; ===========================================================================
0000E0FC                            
0000E0FC                            loc_CFA4:
0000E0FC 4A68 0036                  		tst.w	$36(a0)
0000E100 6700                       		beq.s	loc_CFC6
0000E102 0468 0800 0034             		subi.w	#$800,$34(a0)
0000E108 6400                       		bcc.s	locret_CFE6
0000E10A 317C 0000 0034             		move.w	#0,$34(a0)
0000E110 317C 0000 0036             		move.w	#0,$36(a0)
0000E116 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000E11C 6000                       		bra.s	locret_CFE6
0000E11E                            ; ===========================================================================
0000E11E                            
0000E11E                            loc_CFC6:
0000E11E 0668 0800 0034             		addi.w	#$800,$34(a0)
0000E124 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000E12A 6500                       		bcs.s	locret_CFE6
0000E12C 317C 2000 0034             		move.w	#$2000,$34(a0)
0000E132 317C 0001 0036             		move.w	#1,$36(a0)
0000E138 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000E13E                            
0000E13E                            locret_CFE6:
0000E13E 4E75                       		rts	
0000E140                            ; ===========================================================================
0000E140                            ; ---------------------------------------------------------------------------
0000E140                            ; Sprite mappings - spikes
0000E140                            ; ---------------------------------------------------------------------------
0000E140                            Map_obj36:
0000E140                            	include "_maps\obj36.asm"
0000E140                            ; ---------------------------------------------------------------------------
0000E140                            ; Sprite mappings - spikes
0000E140                            ; ---------------------------------------------------------------------------
0000E140 0000                       		dc.w byte_CFF4-Map_obj36
0000E142 0000                       		dc.w byte_D004-Map_obj36
0000E144 0000                       		dc.w byte_D014-Map_obj36
0000E146 0000                       		dc.w byte_D01A-Map_obj36
0000E148 0000                       		dc.w byte_D02A-Map_obj36
0000E14A 0000                       		dc.w byte_D049-Map_obj36
0000E14C 03                         byte_CFF4:	dc.b 3			; 3 spikes
0000E14D F003 0004 EC               		dc.b $F0, 3, 0,	4, $EC
0000E152 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000E157 F003 0004 0C               		dc.b $F0, 3, 0,	4, $C
0000E15C 03                         byte_D004:	dc.b 3			; 3 spikes facing sideways
0000E15D EC0C 0000 F0               		dc.b $EC, $C, 0, 0, $F0
0000E162 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000E167 0C0C 0000 F0               		dc.b $C, $C, 0,	0, $F0
0000E16C 01                         byte_D014:	dc.b 1			; 1 spike
0000E16D F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000E172 03                         byte_D01A:	dc.b 3			; 3 spikes widely spaced
0000E173 F003 0004 E4               		dc.b $F0, 3, 0,	4, $E4
0000E178 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000E17D F003 0004 14               		dc.b $F0, 3, 0,	4, $14
0000E182 06                         byte_D02A:	dc.b 6			; 6 spikes
0000E183 F003 0004 C0               		dc.b $F0, 3, 0,	4, $C0
0000E188 F003 0004 D8               		dc.b $F0, 3, 0,	4, $D8
0000E18D F003 0004 F0               		dc.b $F0, 3, 0,	4, $F0
0000E192 F003 0004 08               		dc.b $F0, 3, 0,	4, 8
0000E197 F003 0004 20               		dc.b $F0, 3, 0,	4, $20
0000E19C F003 0004 38               		dc.b $F0, 3, 0,	4, $38
0000E1A1 01                         byte_D049:	dc.b 1			; 1 spike facing sideways
0000E1A2 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000E1A8 00                         		even
0000E1A8 00                         		even
0000E1A8                            
0000E1A8                            ; ===========================================================================
0000E1A8                            ; ---------------------------------------------------------------------------
0000E1A8                            ; Object 3B - purple rock (GHZ)
0000E1A8                            ; ---------------------------------------------------------------------------
0000E1A8                            
0000E1A8                            Obj3B:					; XREF: Obj_Index
0000E1A8 7000                       		moveq	#0,d0
0000E1AA 1028 0024                  		move.b	$24(a0),d0
0000E1AE 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000E1B2 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000E1B6                            ; ===========================================================================
0000E1B6 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000E1B8 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000E1BA                            ; ===========================================================================
0000E1BA                            
0000E1BA                            Obj3B_Main:				; XREF: Obj3B_Index
0000E1BA 5428 0024                  		addq.b	#2,$24(a0)
0000E1BE 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000E1C6 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000E1CC 117C 0004 0001             		move.b	#4,1(a0)
0000E1D2 117C 0013 0019             		move.b	#$13,$19(a0)
0000E1D8 117C 0004 0018             		move.b	#4,$18(a0)
0000E1DE                            
0000E1DE                            Obj3B_Solid:				; XREF: Obj3B_Index
0000E1DE 323C 001B                  		move.w	#$1B,d1
0000E1E2 343C 0010                  		move.w	#$10,d2
0000E1E6 363C 0010                  		move.w	#$10,d3
0000E1EA 3828 0008                  		move.w	8(a0),d4
0000E1EE 6100 0000                  		bsr.w	SolidObject
0000E1F2 6100 0000                  		bsr.w	DisplaySprite
0000E1F6 3028 0008                  		move.w	8(a0),d0
0000E1FA 0240 FF80                  		andi.w	#$FF80,d0
0000E1FE 3238 F700                  		move.w	($FFFFF700).w,d1
0000E202 0441 0080                  		subi.w	#$80,d1
0000E206 0241 FF80                  		andi.w	#$FF80,d1
0000E20A 9041                       		sub.w	d1,d0
0000E20C 0C40 0280                  		cmpi.w	#$280,d0
0000E210 6200 0000                  		bhi.w	DeleteObject
0000E214 4E75                       		rts	
0000E216                            ; ===========================================================================
0000E216                            ; ---------------------------------------------------------------------------
0000E216                            ; Object 49 - waterfall	sound effect (GHZ)
0000E216                            ; ---------------------------------------------------------------------------
0000E216                            
0000E216                            Obj49:					; XREF: Obj_Index
0000E216 7000                       		moveq	#0,d0
0000E218 1028 0024                  		move.b	$24(a0),d0
0000E21C 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000E220 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000E224                            ; ===========================================================================
0000E224 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000E226 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000E228                            ; ===========================================================================
0000E228                            
0000E228                            Obj49_Main:				; XREF: Obj49_Index
0000E228 5428 0024                  		addq.b	#2,$24(a0)
0000E22C 117C 0004 0001             		move.b	#4,1(a0)
0000E232                            
0000E232                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000E232 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000E236 0200 003F                  		andi.b	#$3F,d0
0000E23A 6600                       		bne.s	Obj49_ChkDel
0000E23C 303C 00D0                  		move.w	#$D0,d0
0000E240 4EB9 0000 132C             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000E246                            
0000E246                            Obj49_ChkDel:
0000E246 3028 0008                  		move.w	8(a0),d0
0000E24A 0240 FF80                  		andi.w	#$FF80,d0
0000E24E 3238 F700                  		move.w	($FFFFF700).w,d1
0000E252 0441 0080                  		subi.w	#$80,d1
0000E256 0241 FF80                  		andi.w	#$FF80,d1
0000E25A 9041                       		sub.w	d1,d0
0000E25C 0C40 0280                  		cmpi.w	#$280,d0
0000E260 6200 0000                  		bhi.w	DeleteObject
0000E264 4E75                       		rts	
0000E266                            ; ===========================================================================
0000E266                            ; ---------------------------------------------------------------------------
0000E266                            ; Sprite mappings - purple rock	(GHZ)
0000E266                            ; ---------------------------------------------------------------------------
0000E266                            Map_obj3B:
0000E266                            	include "_maps\obj3B.asm"
0000E266                            ; ---------------------------------------------------------------------------
0000E266                            ; Sprite mappings - purple rock	(GHZ)
0000E266                            ; ---------------------------------------------------------------------------
0000E266 0000                       		dc.w byte_D110-Map_obj3B
0000E268 02                         byte_D110:	dc.b 2
0000E269 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000E26E F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000E274 00                         		even
0000E274 00                         		even
0000E274                            
0000E274                            ; ===========================================================================
0000E274                            ; ---------------------------------------------------------------------------
0000E274                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000E274                            ; ---------------------------------------------------------------------------
0000E274                            
0000E274                            Obj3C:					; XREF: Obj_Index
0000E274 7000                       		moveq	#0,d0
0000E276 1028 0024                  		move.b	$24(a0),d0
0000E27A 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000E27E 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000E282 6000 0000                  		bra.w	MarkObjGone
0000E286                            ; ===========================================================================
0000E286 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000E288 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000E28A 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000E28C                            ; ===========================================================================
0000E28C                            
0000E28C                            Obj3C_Main:				; XREF: Obj3C_Index
0000E28C 5428 0024                  		addq.b	#2,$24(a0)
0000E290 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000E298 317C 450F 0002             		move.w	#$450F,2(a0)
0000E29E 117C 0004 0001             		move.b	#4,1(a0)
0000E2A4 117C 0010 0019             		move.b	#$10,$19(a0)
0000E2AA 117C 0004 0018             		move.b	#4,$18(a0)
0000E2B0 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000E2B6                            
0000E2B6                            Obj3C_Solid:				; XREF: Obj3C_Index
0000E2B6 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000E2BC 323C 001B                  		move.w	#$1B,d1
0000E2C0 343C 0020                  		move.w	#$20,d2
0000E2C4 363C 0020                  		move.w	#$20,d3
0000E2C8 3828 0008                  		move.w	8(a0),d4
0000E2CC 6100 0000                  		bsr.w	SolidObject
0000E2D0 0828 0005 0022             		btst	#5,$22(a0)
0000E2D6 6600                       		bne.s	Obj3C_ChkRoll
0000E2D8                            
0000E2D8                            locret_D180:
0000E2D8 4E75                       		rts	
0000E2DA                            ; ===========================================================================
0000E2DA                            
0000E2DA                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000E2DA 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000E2E0 66F6                       		bne.s	locret_D180	; if not, branch
0000E2E2 3028 0030                  		move.w	$30(a0),d0
0000E2E6 6A00                       		bpl.s	Obj3C_ChkSpeed
0000E2E8 4440                       		neg.w	d0
0000E2EA                            
0000E2EA                            Obj3C_ChkSpeed:
0000E2EA 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000E2EE 65E8                       		bcs.s	locret_D180	; if not, branch
0000E2F0 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000E2F6 5869 0008                  		addq.w	#4,8(a1)
0000E2FA 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000E300 3028 0008                  		move.w	8(a0),d0
0000E304 B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000E308 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000E30A 5169 0008                  		subq.w	#8,8(a1)
0000E30E 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000E314                            
0000E314                            Obj3C_Smash:
0000E314 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000E31A 08A8 0005 0022             		bclr	#5,$22(a0)
0000E320 08A9 0005 0022             		bclr	#5,$22(a1)
0000E326 7207                       		moveq	#7,d1		; load 8 fragments
0000E328 343C 0070                  		move.w	#$70,d2
0000E32C 6100                       		bsr.s	SmashObject
0000E32E                            
0000E32E                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000E32E 6100 0000                  		bsr.w	SpeedToPos
0000E332 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000E338 6100 0000                  		bsr.w	DisplaySprite
0000E33C 4A28 0001                  		tst.b	1(a0)
0000E340 6A00 0000                  		bpl.w	DeleteObject
0000E344 4E75                       		rts	
0000E346                            
0000E346                            ; ---------------------------------------------------------------------------
0000E346                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000E346                            ; ---------------------------------------------------------------------------
0000E346                            
0000E346                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E346                            
0000E346                            
0000E346                            SmashObject:				; XREF: Obj3C_Smash
0000E346 7000                       		moveq	#0,d0
0000E348 1028 001A                  		move.b	$1A(a0),d0
0000E34C D040                       		add.w	d0,d0
0000E34E 2668 0004                  		movea.l	4(a0),a3
0000E352 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000E356 524B                       		addq.w	#1,a3
0000E358 08E8 0005 0001             		bset	#5,1(a0)
0000E35E 1828 0000                  		move.b	0(a0),d4
0000E362 1A28 0001                  		move.b	1(a0),d5
0000E366 2248                       		movea.l	a0,a1
0000E368 6000                       		bra.s	Smash_LoadFrag
0000E36A                            ; ===========================================================================
0000E36A                            
0000E36A                            Smash_Loop:
0000E36A 6100 0000                  		bsr.w	SingleObjLoad
0000E36E 6600                       		bne.s	Smash_PlaySnd
0000E370 5A4B                       		addq.w	#5,a3
0000E372                            
0000E372                            Smash_LoadFrag:				; XREF: SmashObject
0000E372 137C 0004 0024             		move.b	#4,$24(a1)
0000E378 1344 0000                  		move.b	d4,0(a1)
0000E37C 234B 0004                  		move.l	a3,4(a1)
0000E380 1345 0001                  		move.b	d5,1(a1)
0000E384 3368 0008 0008             		move.w	8(a0),8(a1)
0000E38A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E390 3368 0002 0002             		move.w	2(a0),2(a1)
0000E396 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000E39C 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000E3A2 335C 0010                  		move.w	(a4)+,$10(a1)
0000E3A6 335C 0012                  		move.w	(a4)+,$12(a1)
0000E3AA B3C8                       		cmpa.l	a0,a1
0000E3AC 6400                       		bcc.s	loc_D268
0000E3AE 2F08                       		move.l	a0,-(sp)
0000E3B0 2049                       		movea.l	a1,a0
0000E3B2 6100 0000                  		bsr.w	SpeedToPos
0000E3B6 D568 0012                  		add.w	d2,$12(a0)
0000E3BA 205F                       		movea.l	(sp)+,a0
0000E3BC 6100 0000                  		bsr.w	DisplaySprite2
0000E3C0                            
0000E3C0                            loc_D268:
0000E3C0 51C9 FFA8                  		dbf	d1,Smash_Loop
0000E3C4                            
0000E3C4                            Smash_PlaySnd:
0000E3C4 303C 00CB                  		move.w	#$CB,d0
0000E3C8 4EF9 0000 132C             		jmp	(PlaySound_Special).l ;	play smashing sound
0000E3CE                            ; End of function SmashObject
0000E3CE                            
0000E3CE                            ; ===========================================================================
0000E3CE                            ; Smashed block	fragment speeds
0000E3CE                            ;
0000E3CE 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000E3D2 0600 FF00                  		dc.w $600, $FF00
0000E3D6 0600 0100                  		dc.w $600, $100
0000E3DA 0400 0500                  		dc.w $400, $500
0000E3DE 0600 FA00                  		dc.w $600, $FA00
0000E3E2 0800 FE00                  		dc.w $800, $FE00
0000E3E6 0800 0200                  		dc.w $800, $200
0000E3EA 0600 0600                  		dc.w $600, $600
0000E3EE                            
0000E3EE FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000E3F2 F800 FE00                  		dc.w $F800, $FE00
0000E3F6 F800 0200                  		dc.w $F800, $200
0000E3FA FA00 0600                  		dc.w $FA00, $600
0000E3FE FC00 FB00                  		dc.w $FC00, $FB00
0000E402 FA00 FF00                  		dc.w $FA00, $FF00
0000E406 FA00 0100                  		dc.w $FA00, $100
0000E40A FC00 0500                  		dc.w $FC00, $500
0000E40E                            ; ---------------------------------------------------------------------------
0000E40E                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000E40E                            ; ---------------------------------------------------------------------------
0000E40E                            Map_obj3C:
0000E40E                            	include "_maps\obj3C.asm"
0000E40E                            ; ---------------------------------------------------------------------------
0000E40E                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000E40E                            ; ---------------------------------------------------------------------------
0000E40E 0000                       		dc.w byte_D2BC-Map_obj3C
0000E410 0000                       		dc.w byte_D2E5-Map_obj3C
0000E412 0000                       		dc.w byte_D30E-Map_obj3C
0000E414 08                         byte_D2BC:	dc.b 8
0000E415 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000E41A F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000E41F 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000E424 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000E429 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000E42E F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000E433 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000E438 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000E43D 08                         byte_D2E5:	dc.b 8
0000E43E E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000E443 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000E448 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000E44D 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000E452 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000E457 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000E45C 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000E461 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000E466 08                         byte_D30E:	dc.b 8
0000E467 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000E46C F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000E471 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000E476 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000E47B E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000E480 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000E485 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000E48A 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000E490 00                         		even
0000E490 00                         		even
0000E490                            
0000E490                            ; ---------------------------------------------------------------------------
0000E490                            ; Object code loading subroutine
0000E490                            ; ---------------------------------------------------------------------------
0000E490                            
0000E490                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E490                            
0000E490                            
0000E490                            ObjectsLoad:				; XREF: TitleScreen; et al
0000E490 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000E494 7E7F                       		moveq	#$7F,d7
0000E496 7000                       		moveq	#0,d0
0000E498 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000E49E 6400                       		bcc.s	loc_D362
0000E4A0                            
0000E4A0                            loc_D348:
0000E4A0 1010                       		move.b	(a0),d0		; load object number from RAM
0000E4A2 6700                       		beq.s	loc_D358
0000E4A4 D040                       		add.w	d0,d0
0000E4A6 D040                       		add.w	d0,d0
0000E4A8 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000E4AC 4E91                       		jsr	(a1)		; run the object's code
0000E4AE 7000                       		moveq	#0,d0
0000E4B0                            
0000E4B0                            loc_D358:
0000E4B0 41E8 0040                  		lea	$40(a0),a0	; next object
0000E4B4 51CF FFEA                  		dbf	d7,loc_D348
0000E4B8 4E75                       		rts	
0000E4BA                            ; ===========================================================================
0000E4BA                            
0000E4BA                            loc_D362:
0000E4BA 7E1F                       		moveq	#$1F,d7
0000E4BC 61E2                       		bsr.s	loc_D348
0000E4BE 7E5F                       		moveq	#$5F,d7
0000E4C0                            
0000E4C0                            loc_D368:
0000E4C0 7000                       		moveq	#0,d0
0000E4C2 1010                       		move.b	(a0),d0
0000E4C4 6700                       		beq.s	loc_D378
0000E4C6 4A28 0001                  		tst.b	1(a0)
0000E4CA 6A00                       		bpl.s	loc_D378
0000E4CC 6100 0000                  		bsr.w	DisplaySprite
0000E4D0                            
0000E4D0                            loc_D378:
0000E4D0 41E8 0040                  		lea	$40(a0),a0
0000E4D4                            
0000E4D4                            loc_D37C:
0000E4D4 51CF FFEA                  		dbf	d7,loc_D368
0000E4D8 4E75                       		rts	
0000E4DA                            ; End of function ObjectsLoad
0000E4DA                            
0000E4DA                            ; ===========================================================================
0000E4DA                            ; ---------------------------------------------------------------------------
0000E4DA                            ; Object pointers
0000E4DA                            ; ---------------------------------------------------------------------------
0000E4DA                            Obj_Index:
0000E4DA                            	include "_inc\Object pointers.asm"
0000E4DA                            ; ---------------------------------------------------------------------------
0000E4DA                            ; Object pointers
0000E4DA                            ; ---------------------------------------------------------------------------
0000E4DA 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjectFall,	ObjectFall, ObjectFall
0000E4EA 0000 0000 0000 0000 0000+  	dc.l SpinDash_dust, ObjectFall, ObjectFall, Obj08
0000E4FA 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000E50A 0000 0000 0000 B764 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000E51A 0000 83E4 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000E52A 0000 8A0E 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000E53A 0000 9264 0000 92CC 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000E54A 0000 991A 0000 9C08 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000E55A 0000 0000 0000 A89A 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000E56A 0000 ABE2 0000 B1EE 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000E57A 0000 A4CE 0000 99F0 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000E58A 0000 BDEC 0000 B3F0 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000E59A 0000 C7C4 0000 CE76 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000E5AA 0000 C324 0000 DF74 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000E5BA 0000 D5FE 0000 D6B8 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000E5CA 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000E5DA 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000E5EA 0000 CAE2 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000E5FA 0000 E216 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000E60A 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000E61A 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000E62A 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000E63A 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000E64A 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000E65A 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000E66A 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000E67A 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000E68A 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000E69A 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000E6AA 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000E6BA 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000E6CA 0000 0000 0000 D8F4 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000E6DA 0000 58BE 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000E6EA 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000E6FA 0000 5FA2 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000E6FA 0000 5FA2 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000E70A                            
0000E70A                            ; ---------------------------------------------------------------------------
0000E70A                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000E70A                            ; ---------------------------------------------------------------------------
0000E70A                            
0000E70A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E70A                            
0000E70A                            
0000E70A                            ObjectFall:
0000E70A 2428 0008                  		move.l	8(a0),d2
0000E70E 2628 000C                  		move.l	$C(a0),d3
0000E712 3028 0010                  		move.w	$10(a0),d0
0000E716 48C0                       		ext.l	d0
0000E718 E180                       		asl.l	#8,d0
0000E71A D480                       		add.l	d0,d2
0000E71C 3028 0012                  		move.w	$12(a0),d0
0000E720 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000E726 48C0                       		ext.l	d0
0000E728 E180                       		asl.l	#8,d0
0000E72A D680                       		add.l	d0,d3
0000E72C 2142 0008                  		move.l	d2,8(a0)
0000E730 2143 000C                  		move.l	d3,$C(a0)
0000E734 4E75                       		rts	
0000E736                            ; End of function ObjectFall
0000E736                            
0000E736                            ; ---------------------------------------------------------------------------
0000E736                            ; Subroutine translating object	speed to update	object position
0000E736                            ; ---------------------------------------------------------------------------
0000E736                            
0000E736                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E736                            
0000E736                            
0000E736                            SpeedToPos:
0000E736 2428 0008                  		move.l	8(a0),d2
0000E73A 2628 000C                  		move.l	$C(a0),d3
0000E73E 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000E742 48C0                       		ext.l	d0
0000E744 E180                       		asl.l	#8,d0		; multiply speed by $100
0000E746 D480                       		add.l	d0,d2		; add to x-axis	position
0000E748 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000E74C 48C0                       		ext.l	d0
0000E74E E180                       		asl.l	#8,d0		; multiply by $100
0000E750 D680                       		add.l	d0,d3		; add to y-axis	position
0000E752 2142 0008                  		move.l	d2,8(a0)	; update x-axis	position
0000E756 2143 000C                  		move.l	d3,$C(a0)	; update y-axis	position
0000E75A 4E75                       		rts	
0000E75C                            ; End of function SpeedToPos
0000E75C                            
0000E75C                            ; ---------------------------------------------------------------------------
0000E75C                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000E75C                            ; ---------------------------------------------------------------------------
0000E75C                            
0000E75C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E75C                            
0000E75C                            
0000E75C                            DisplaySprite:
0000E75C 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000E760 3028 0018                  		move.w	$18(a0),d0
0000E764 E248                       		lsr.w	#1,d0
0000E766 0240 0380                  		andi.w	#$380,d0
0000E76A D2C0                       		adda.w	d0,a1
0000E76C 0C51 007E                  		cmpi.w	#$7E,(a1)
0000E770 6400                       		bcc.s	locret_D620
0000E772 5451                       		addq.w	#2,(a1)
0000E774 D2D1                       		adda.w	(a1),a1
0000E776 3288                       		move.w	a0,(a1)
0000E778                            
0000E778                            locret_D620:
0000E778 4E75                       		rts	
0000E77A                            ; End of function DisplaySprite
0000E77A                            
0000E77A                            ; ---------------------------------------------------------------------------
0000E77A                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000E77A                            ; ---------------------------------------------------------------------------
0000E77A                            
0000E77A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E77A                            
0000E77A                            
0000E77A                            DisplaySprite2:
0000E77A 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000E77E 3029 0018                  		move.w	$18(a1),d0
0000E782 E248                       		lsr.w	#1,d0
0000E784 0240 0380                  		andi.w	#$380,d0
0000E788 D4C0                       		adda.w	d0,a2
0000E78A 0C52 007E                  		cmpi.w	#$7E,(a2)
0000E78E 6400                       		bcc.s	locret_D63E
0000E790 5452                       		addq.w	#2,(a2)
0000E792 D4D2                       		adda.w	(a2),a2
0000E794 3489                       		move.w	a1,(a2)
0000E796                            
0000E796                            locret_D63E:
0000E796 4E75                       		rts	
0000E798                            ; End of function DisplaySprite2
0000E798                            
0000E798                            ; ---------------------------------------------------------------------------
0000E798                            ; Subroutine to	delete an object
0000E798                            ; ---------------------------------------------------------------------------
0000E798                            
0000E798                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E798                            
0000E798                            
0000E798                            DeleteObject:
0000E798 2248                       		movea.l	a0,a1
0000E79A                            
0000E79A                            DeleteObject2:
0000E79A 7200                       		moveq	#0,d1
0000E79C 700F                       		moveq	#$F,d0
0000E79E                            
0000E79E                            loc_D646:
0000E79E 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000E7A0 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000E7A4 4E75                       		rts	
0000E7A6                            ; End of function DeleteObject
0000E7A6                            
0000E7A6                            ; ===========================================================================
0000E7A6 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000E7AA 00FF F700                  		dc.l $FFF700		; main screen x-position
0000E7AE 00FF F708                  		dc.l $FFF708		; background x-position	1
0000E7B2 00FF F718                  		dc.l $FFF718		; background x-position	2
0000E7B6                            ; ---------------------------------------------------------------------------
0000E7B6                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000E7B6                            ; ---------------------------------------------------------------------------
0000E7B6                            
0000E7B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E7B6                            
0000E7B6                            
0000E7B6                            BuildSprites:				; XREF: TitleScreen; et al
0000E7B6 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000E7BA 7A00                       		moveq	#0,d5
0000E7BC 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000E7C0 7E07                       		moveq	#7,d7
0000E7C2                            
0000E7C2                            loc_D66A:
0000E7C2 4A54                       		tst.w	(a4)
0000E7C4 6700 0000                  		beq.w	loc_D72E
0000E7C8 7C02                       		moveq	#2,d6
0000E7CA                            
0000E7CA                            loc_D672:
0000E7CA 3074 6000                  		movea.w	(a4,d6.w),a0
0000E7CE 4A10                       		tst.b	(a0)
0000E7D0 6700 0000                  		beq.w	loc_D726
0000E7D4 08A8 0007 0001             		bclr	#7,1(a0)
0000E7DA 1028 0001                  		move.b	1(a0),d0
0000E7DE 1800                       		move.b	d0,d4
0000E7E0 0240 000C                  		andi.w	#$C,d0
0000E7E4 6700                       		beq.s	loc_D6DE
0000E7E6 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000E7EA 7000                       		moveq	#0,d0
0000E7EC 1028 0019                  		move.b	$19(a0),d0
0000E7F0 3628 0008                  		move.w	8(a0),d3
0000E7F4 9651                       		sub.w	(a1),d3
0000E7F6 3203                       		move.w	d3,d1
0000E7F8 D240                       		add.w	d0,d1
0000E7FA 6B00 0000                  		bmi.w	loc_D726
0000E7FE 3203                       		move.w	d3,d1
0000E800 9240                       		sub.w	d0,d1
0000E802 0C41 0140                  		cmpi.w	#$140,d1
0000E806 6C00                       		bge.s	loc_D726
0000E808 0643 0080                  		addi.w	#$80,d3
0000E80C 0804 0004                  		btst	#4,d4
0000E810 6700                       		beq.s	loc_D6E8
0000E812 7000                       		moveq	#0,d0
0000E814 1028 0016                  		move.b	$16(a0),d0
0000E818 3428 000C                  		move.w	$C(a0),d2
0000E81C 9469 0004                  		sub.w	4(a1),d2
0000E820 3202                       		move.w	d2,d1
0000E822 D240                       		add.w	d0,d1
0000E824 6B00                       		bmi.s	loc_D726
0000E826 3202                       		move.w	d2,d1
0000E828 9240                       		sub.w	d0,d1
0000E82A 0C41 00E0                  		cmpi.w	#$E0,d1
0000E82E 6C00                       		bge.s	loc_D726
0000E830 0642 0080                  		addi.w	#$80,d2
0000E834 6000                       		bra.s	loc_D700
0000E836                            ; ===========================================================================
0000E836                            
0000E836                            loc_D6DE:
0000E836 3428 000A                  		move.w	$A(a0),d2
0000E83A 3628 0008                  		move.w	8(a0),d3
0000E83E 6000                       		bra.s	loc_D700
0000E840                            ; ===========================================================================
0000E840                            
0000E840                            loc_D6E8:
0000E840 3428 000C                  		move.w	$C(a0),d2
0000E844 9469 0004                  		sub.w	4(a1),d2
0000E848 0642 0080                  		addi.w	#$80,d2
0000E84C 0C42 0060                  		cmpi.w	#$60,d2
0000E850 6500                       		bcs.s	loc_D726
0000E852 0C42 0180                  		cmpi.w	#$180,d2
0000E856 6400                       		bcc.s	loc_D726
0000E858                            
0000E858                            loc_D700:
0000E858 2268 0004                  		movea.l	4(a0),a1
0000E85C 7200                       		moveq	#0,d1
0000E85E 0804 0005                  		btst	#5,d4
0000E862 6600                       		bne.s	loc_D71C
0000E864 1228 001A                  		move.b	$1A(a0),d1
0000E868 D201                       		add.b	d1,d1
0000E86A D2F1 1000                  		adda.w	(a1,d1.w),a1
0000E86E 1219                       		move.b	(a1)+,d1
0000E870 5301                       		subq.b	#1,d1
0000E872 6B00                       		bmi.s	loc_D720
0000E874                            
0000E874                            loc_D71C:
0000E874 6100 0000                  		bsr.w	sub_D750
0000E878                            
0000E878                            loc_D720:
0000E878 08E8 0007 0001             		bset	#7,1(a0)
0000E87E                            
0000E87E                            loc_D726:
0000E87E 5446                       		addq.w	#2,d6
0000E880 5554                       		subq.w	#2,(a4)
0000E882 6600 FF46                  		bne.w	loc_D672
0000E886                            
0000E886                            loc_D72E:
0000E886 49EC 0080                  		lea	$80(a4),a4
0000E88A 51CF FF36                  		dbf	d7,loc_D66A
0000E88E 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000E892 0C05 0050                  		cmpi.b	#$50,d5
0000E896 6700                       		beq.s	loc_D748
0000E898 24BC 0000 0000             		move.l	#0,(a2)
0000E89E 4E75                       		rts	
0000E8A0                            ; ===========================================================================
0000E8A0                            
0000E8A0                            loc_D748:
0000E8A0 157C 0000 FFFB             		move.b	#0,-5(a2)
0000E8A6 4E75                       		rts	
0000E8A8                            ; End of function BuildSprites
0000E8A8                            
0000E8A8                            
0000E8A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E8A8                            
0000E8A8                            
0000E8A8                            sub_D750:				; XREF: BuildSprites
0000E8A8 3668 0002                  		movea.w	2(a0),a3
0000E8AC 0804 0000                  		btst	#0,d4
0000E8B0 6600                       		bne.s	loc_D796
0000E8B2 0804 0001                  		btst	#1,d4
0000E8B6 6600 0000                  		bne.w	loc_D7E4
0000E8BA                            ; End of function sub_D750
0000E8BA                            
0000E8BA                            
0000E8BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E8BA                            
0000E8BA                            
0000E8BA                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000E8BA 0C05 0050                  		cmpi.b	#$50,d5
0000E8BE 6700                       		beq.s	locret_D794
0000E8C0 1019                       		move.b	(a1)+,d0
0000E8C2 4880                       		ext.w	d0
0000E8C4 D042                       		add.w	d2,d0
0000E8C6 34C0                       		move.w	d0,(a2)+
0000E8C8 14D9                       		move.b	(a1)+,(a2)+
0000E8CA 5205                       		addq.b	#1,d5
0000E8CC 14C5                       		move.b	d5,(a2)+
0000E8CE 1019                       		move.b	(a1)+,d0
0000E8D0 E148                       		lsl.w	#8,d0
0000E8D2 1019                       		move.b	(a1)+,d0
0000E8D4 D04B                       		add.w	a3,d0
0000E8D6 34C0                       		move.w	d0,(a2)+
0000E8D8 1019                       		move.b	(a1)+,d0
0000E8DA 4880                       		ext.w	d0
0000E8DC D043                       		add.w	d3,d0
0000E8DE 0240 01FF                  		andi.w	#$1FF,d0
0000E8E2 6600                       		bne.s	loc_D78E
0000E8E4 5240                       		addq.w	#1,d0
0000E8E6                            
0000E8E6                            loc_D78E:
0000E8E6 34C0                       		move.w	d0,(a2)+
0000E8E8 51C9 FFD0                  		dbf	d1,sub_D762
0000E8EC                            
0000E8EC                            locret_D794:
0000E8EC 4E75                       		rts	
0000E8EE                            ; End of function sub_D762
0000E8EE                            
0000E8EE                            ; ===========================================================================
0000E8EE                            
0000E8EE                            loc_D796:
0000E8EE 0804 0001                  		btst	#1,d4
0000E8F2 6600 0000                  		bne.w	loc_D82A
0000E8F6                            
0000E8F6                            loc_D79E:
0000E8F6 0C05 0050                  		cmpi.b	#$50,d5
0000E8FA 6700                       		beq.s	locret_D7E2
0000E8FC 1019                       		move.b	(a1)+,d0
0000E8FE 4880                       		ext.w	d0
0000E900 D042                       		add.w	d2,d0
0000E902 34C0                       		move.w	d0,(a2)+
0000E904 1819                       		move.b	(a1)+,d4
0000E906 14C4                       		move.b	d4,(a2)+
0000E908 5205                       		addq.b	#1,d5
0000E90A 14C5                       		move.b	d5,(a2)+
0000E90C 1019                       		move.b	(a1)+,d0
0000E90E E148                       		lsl.w	#8,d0
0000E910 1019                       		move.b	(a1)+,d0
0000E912 D04B                       		add.w	a3,d0
0000E914 0A40 0800                  		eori.w	#$800,d0
0000E918 34C0                       		move.w	d0,(a2)+
0000E91A 1019                       		move.b	(a1)+,d0
0000E91C 4880                       		ext.w	d0
0000E91E 4440                       		neg.w	d0
0000E920 D804                       		add.b	d4,d4
0000E922 0244 0018                  		andi.w	#$18,d4
0000E926 5044                       		addq.w	#8,d4
0000E928 9044                       		sub.w	d4,d0
0000E92A D043                       		add.w	d3,d0
0000E92C 0240 01FF                  		andi.w	#$1FF,d0
0000E930 6600                       		bne.s	loc_D7DC
0000E932 5240                       		addq.w	#1,d0
0000E934                            
0000E934                            loc_D7DC:
0000E934 34C0                       		move.w	d0,(a2)+
0000E936 51C9 FFBE                  		dbf	d1,loc_D79E
0000E93A                            
0000E93A                            locret_D7E2:
0000E93A 4E75                       		rts	
0000E93C                            ; ===========================================================================
0000E93C                            
0000E93C                            loc_D7E4:				; XREF: sub_D750
0000E93C 0C05 0050                  		cmpi.b	#$50,d5
0000E940 6700                       		beq.s	locret_D828
0000E942 1019                       		move.b	(a1)+,d0
0000E944 1811                       		move.b	(a1),d4
0000E946 4880                       		ext.w	d0
0000E948 4440                       		neg.w	d0
0000E94A E70C                       		lsl.b	#3,d4
0000E94C 0244 0018                  		andi.w	#$18,d4
0000E950 5044                       		addq.w	#8,d4
0000E952 9044                       		sub.w	d4,d0
0000E954 D042                       		add.w	d2,d0
0000E956 34C0                       		move.w	d0,(a2)+
0000E958 14D9                       		move.b	(a1)+,(a2)+
0000E95A 5205                       		addq.b	#1,d5
0000E95C 14C5                       		move.b	d5,(a2)+
0000E95E 1019                       		move.b	(a1)+,d0
0000E960 E148                       		lsl.w	#8,d0
0000E962 1019                       		move.b	(a1)+,d0
0000E964 D04B                       		add.w	a3,d0
0000E966 0A40 1000                  		eori.w	#$1000,d0
0000E96A 34C0                       		move.w	d0,(a2)+
0000E96C 1019                       		move.b	(a1)+,d0
0000E96E 4880                       		ext.w	d0
0000E970 D043                       		add.w	d3,d0
0000E972 0240 01FF                  		andi.w	#$1FF,d0
0000E976 6600                       		bne.s	loc_D822
0000E978 5240                       		addq.w	#1,d0
0000E97A                            
0000E97A                            loc_D822:
0000E97A 34C0                       		move.w	d0,(a2)+
0000E97C 51C9 FFBE                  		dbf	d1,loc_D7E4
0000E980                            
0000E980                            locret_D828:
0000E980 4E75                       		rts	
0000E982                            ; ===========================================================================
0000E982                            
0000E982                            loc_D82A:
0000E982 0C05 0050                  		cmpi.b	#$50,d5
0000E986 6700                       		beq.s	locret_D87C
0000E988 1019                       		move.b	(a1)+,d0
0000E98A 1811                       		move.b	(a1),d4
0000E98C 4880                       		ext.w	d0
0000E98E 4440                       		neg.w	d0
0000E990 E70C                       		lsl.b	#3,d4
0000E992 0244 0018                  		andi.w	#$18,d4
0000E996 5044                       		addq.w	#8,d4
0000E998 9044                       		sub.w	d4,d0
0000E99A D042                       		add.w	d2,d0
0000E99C 34C0                       		move.w	d0,(a2)+
0000E99E 1819                       		move.b	(a1)+,d4
0000E9A0 14C4                       		move.b	d4,(a2)+
0000E9A2 5205                       		addq.b	#1,d5
0000E9A4 14C5                       		move.b	d5,(a2)+
0000E9A6 1019                       		move.b	(a1)+,d0
0000E9A8 E148                       		lsl.w	#8,d0
0000E9AA 1019                       		move.b	(a1)+,d0
0000E9AC D04B                       		add.w	a3,d0
0000E9AE 0A40 1800                  		eori.w	#$1800,d0
0000E9B2 34C0                       		move.w	d0,(a2)+
0000E9B4 1019                       		move.b	(a1)+,d0
0000E9B6 4880                       		ext.w	d0
0000E9B8 4440                       		neg.w	d0
0000E9BA D804                       		add.b	d4,d4
0000E9BC 0244 0018                  		andi.w	#$18,d4
0000E9C0 5044                       		addq.w	#8,d4
0000E9C2 9044                       		sub.w	d4,d0
0000E9C4 D043                       		add.w	d3,d0
0000E9C6 0240 01FF                  		andi.w	#$1FF,d0
0000E9CA 6600                       		bne.s	loc_D876
0000E9CC 5240                       		addq.w	#1,d0
0000E9CE                            
0000E9CE                            loc_D876:
0000E9CE 34C0                       		move.w	d0,(a2)+
0000E9D0 51C9 FFB0                  		dbf	d1,loc_D82A
0000E9D4                            
0000E9D4                            locret_D87C:
0000E9D4 4E75                       		rts	
0000E9D6                            ; ---------------------------------------------------------------------------
0000E9D6                            ; Subroutine to	check if an object is on the screen
0000E9D6                            ; ---------------------------------------------------------------------------
0000E9D6                            
0000E9D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E9D6                            
0000E9D6                            
0000E9D6                            ChkObjOnScreen:
0000E9D6 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000E9DA 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000E9DE 6B00                       		bmi.s	NotOnScreen
0000E9E0 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000E9E4 6C00                       		bge.s	NotOnScreen	; if not, branch
0000E9E6                            
0000E9E6 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000E9EA 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000E9EE 6B00                       		bmi.s	NotOnScreen
0000E9F0 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000E9F4 6C00                       		bge.s	NotOnScreen	; if not, branch
0000E9F6                            
0000E9F6 7000                       		moveq	#0,d0		; set flag to 0
0000E9F8 4E75                       		rts	
0000E9FA                            ; ===========================================================================
0000E9FA                            
0000E9FA                            NotOnScreen:				; XREF: ChkObjOnScreen
0000E9FA 7001                       		moveq	#1,d0		; set flag to 1
0000E9FC 4E75                       		rts	
0000E9FE                            ; End of function ChkObjOnScreen
0000E9FE                            
0000E9FE                            
0000E9FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E9FE                            
0000E9FE                            
0000E9FE                            ChkObjOnScreen2:
0000E9FE 7200                       		moveq	#0,d1
0000EA00 1228 0019                  		move.b	$19(a0),d1
0000EA04 3028 0008                  		move.w	8(a0),d0
0000EA08 9078 F700                  		sub.w	($FFFFF700).w,d0
0000EA0C D041                       		add.w	d1,d0
0000EA0E 6B00                       		bmi.s	NotOnScreen2
0000EA10 D241                       		add.w	d1,d1
0000EA12 9041                       		sub.w	d1,d0
0000EA14 0C40 0140                  		cmpi.w	#320,d0
0000EA18 6C00                       		bge.s	NotOnScreen2
0000EA1A                            
0000EA1A 3228 000C                  		move.w	$C(a0),d1
0000EA1E 9278 F704                  		sub.w	($FFFFF704).w,d1
0000EA22 6B00                       		bmi.s	NotOnScreen2
0000EA24 0C41 00E0                  		cmpi.w	#224,d1
0000EA28 6C00                       		bge.s	NotOnScreen2
0000EA2A                            
0000EA2A 7000                       		moveq	#0,d0
0000EA2C 4E75                       		rts	
0000EA2E                            ; ===========================================================================
0000EA2E                            
0000EA2E                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000EA2E 7001                       		moveq	#1,d0
0000EA30 4E75                       		rts	
0000EA32                            ; End of function ChkObjOnScreen2
0000EA32                            
0000EA32                            ; ---------------------------------------------------------------------------
0000EA32                            ; Subroutine to	load a level's objects
0000EA32                            ; ---------------------------------------------------------------------------
0000EA32                            
0000EA32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EA32                            
0000EA32                            
0000EA32                            ObjPosLoad:				; XREF: Level; et al
0000EA32 7000                       		moveq	#0,d0
0000EA34 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000EA38 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000EA3C 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000EA40                            ; End of function ObjPosLoad
0000EA40                            
0000EA40                            ; ===========================================================================
0000EA40 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000EA42 0000                       		dc.w OPL_Next-OPL_Index
0000EA44                            ; ===========================================================================
0000EA44                            
0000EA44                            OPL_Main:				; XREF: OPL_Index
0000EA44 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000EA48 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000EA4C ED08                       		lsl.b	#6,d0
0000EA4E E848                       		lsr.w	#4,d0
0000EA50 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000EA56 2248                       		movea.l	a0,a1
0000EA58 D0F0 0000                  		adda.w	(a0,d0.w),a0
0000EA5C 21C8 F770                  		move.l	a0,($FFFFF770).w
0000EA60 21C8 F774                  		move.l	a0,($FFFFF774).w
0000EA64 D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000EA68 21C9 F778                  		move.l	a1,($FFFFF778).w
0000EA6C 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000EA70 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000EA74 34FC 0101                  		move.w	#$101,(a2)+
0000EA78 303C 005E                  		move.w	#$5E,d0
0000EA7C                            
0000EA7C                            OPL_ClrList:
0000EA7C 429A                       		clr.l	(a2)+
0000EA7E 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000EA82                            
0000EA82 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000EA86 7400                       		moveq	#0,d2
0000EA88 3C38 F700                  		move.w	($FFFFF700).w,d6
0000EA8C 0446 0080                  		subi.w	#$80,d6
0000EA90 6400                       		bcc.s	loc_D93C
0000EA92 7C00                       		moveq	#0,d6
0000EA94                            
0000EA94                            loc_D93C:
0000EA94 0246 FF80                  		andi.w	#$FF80,d6
0000EA98 2078 F770                  		movea.l	($FFFFF770).w,a0
0000EA9C                            
0000EA9C                            loc_D944:
0000EA9C BC50                       		cmp.w	(a0),d6
0000EA9E 6300                       		bls.s	loc_D956
0000EAA0 4A28 0004                  		tst.b	4(a0)
0000EAA4 6A00                       		bpl.s	loc_D952
0000EAA6 1412                       		move.b	(a2),d2
0000EAA8 5212                       		addq.b	#1,(a2)
0000EAAA                            
0000EAAA                            loc_D952:
0000EAAA 5C48                       		addq.w	#6,a0
0000EAAC 60EE                       		bra.s	loc_D944
0000EAAE                            ; ===========================================================================
0000EAAE                            
0000EAAE                            loc_D956:
0000EAAE 21C8 F770                  		move.l	a0,($FFFFF770).w
0000EAB2 2078 F774                  		movea.l	($FFFFF774).w,a0
0000EAB6 0446 0080                  		subi.w	#$80,d6
0000EABA 6500                       		bcs.s	loc_D976
0000EABC                            
0000EABC                            loc_D964:
0000EABC BC50                       		cmp.w	(a0),d6
0000EABE 6300                       		bls.s	loc_D976
0000EAC0 4A28 0004                  		tst.b	4(a0)
0000EAC4 6A00                       		bpl.s	loc_D972
0000EAC6 522A 0001                  		addq.b	#1,1(a2)
0000EACA                            
0000EACA                            loc_D972:
0000EACA 5C48                       		addq.w	#6,a0
0000EACC 60EE                       		bra.s	loc_D964
0000EACE                            ; ===========================================================================
0000EACE                            
0000EACE                            loc_D976:
0000EACE 21C8 F774                  		move.l	a0,($FFFFF774).w
0000EAD2 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000EAD8                            
0000EAD8                            OPL_Next:				; XREF: OPL_Index
0000EAD8 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000EADC 7400                       		moveq	#0,d2
0000EADE 3C38 F700                  		move.w	($FFFFF700).w,d6
0000EAE2 0246 FF80                  		andi.w	#$FF80,d6
0000EAE6 BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000EAEA 6700 0000                  		beq.w	locret_DA3A
0000EAEE 6C00                       		bge.s	loc_D9F6
0000EAF0 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000EAF4 2078 F774                  		movea.l	($FFFFF774).w,a0
0000EAF8 0446 0080                  		subi.w	#$80,d6
0000EAFC 6500                       		bcs.s	loc_D9D2
0000EAFE                            
0000EAFE                            loc_D9A6:
0000EAFE BC68 FFFA                  		cmp.w	-6(a0),d6
0000EB02 6C00                       		bge.s	loc_D9D2
0000EB04 5D48                       		subq.w	#6,a0
0000EB06 4A28 0004                  		tst.b	4(a0)
0000EB0A 6A00                       		bpl.s	loc_D9BC
0000EB0C 532A 0001                  		subq.b	#1,1(a2)
0000EB10 142A 0001                  		move.b	1(a2),d2
0000EB14                            
0000EB14                            loc_D9BC:
0000EB14 6100 0000                  		bsr.w	loc_DA3C
0000EB18 6600                       		bne.s	loc_D9C6
0000EB1A 5D48                       		subq.w	#6,a0
0000EB1C 60E0                       		bra.s	loc_D9A6
0000EB1E                            ; ===========================================================================
0000EB1E                            
0000EB1E                            loc_D9C6:
0000EB1E 4A28 0004                  		tst.b	4(a0)
0000EB22 6A00                       		bpl.s	loc_D9D0
0000EB24 522A 0001                  		addq.b	#1,1(a2)
0000EB28                            
0000EB28                            loc_D9D0:
0000EB28 5C48                       		addq.w	#6,a0
0000EB2A                            
0000EB2A                            loc_D9D2:
0000EB2A 21C8 F774                  		move.l	a0,($FFFFF774).w
0000EB2E 2078 F770                  		movea.l	($FFFFF770).w,a0
0000EB32 0646 0300                  		addi.w	#$300,d6
0000EB36                            
0000EB36                            loc_D9DE:
0000EB36 BC68 FFFA                  		cmp.w	-6(a0),d6
0000EB3A 6E00                       		bgt.s	loc_D9F0
0000EB3C 4A28 FFFE                  		tst.b	-2(a0)
0000EB40 6A00                       		bpl.s	loc_D9EC
0000EB42 5312                       		subq.b	#1,(a2)
0000EB44                            
0000EB44                            loc_D9EC:
0000EB44 5D48                       		subq.w	#6,a0
0000EB46 60EE                       		bra.s	loc_D9DE
0000EB48                            ; ===========================================================================
0000EB48                            
0000EB48                            loc_D9F0:
0000EB48 21C8 F770                  		move.l	a0,($FFFFF770).w
0000EB4C 4E75                       		rts	
0000EB4E                            ; ===========================================================================
0000EB4E                            
0000EB4E                            loc_D9F6:
0000EB4E 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000EB52 2078 F770                  		movea.l	($FFFFF770).w,a0
0000EB56 0646 0280                  		addi.w	#$280,d6
0000EB5A                            
0000EB5A                            loc_DA02:
0000EB5A BC50                       		cmp.w	(a0),d6
0000EB5C 6300                       		bls.s	loc_DA16
0000EB5E 4A28 0004                  		tst.b	4(a0)
0000EB62 6A00                       		bpl.s	loc_DA10
0000EB64 1412                       		move.b	(a2),d2
0000EB66 5212                       		addq.b	#1,(a2)
0000EB68                            
0000EB68                            loc_DA10:
0000EB68 6100 0000                  		bsr.w	loc_DA3C
0000EB6C 67EC                       		beq.s	loc_DA02
0000EB6E                            
0000EB6E                            loc_DA16:
0000EB6E 21C8 F770                  		move.l	a0,($FFFFF770).w
0000EB72 2078 F774                  		movea.l	($FFFFF774).w,a0
0000EB76 0446 0300                  		subi.w	#$300,d6
0000EB7A 6500                       		bcs.s	loc_DA36
0000EB7C                            
0000EB7C                            loc_DA24:
0000EB7C BC50                       		cmp.w	(a0),d6
0000EB7E 6300                       		bls.s	loc_DA36
0000EB80 4A28 0004                  		tst.b	4(a0)
0000EB84 6A00                       		bpl.s	loc_DA32
0000EB86 522A 0001                  		addq.b	#1,1(a2)
0000EB8A                            
0000EB8A                            loc_DA32:
0000EB8A 5C48                       		addq.w	#6,a0
0000EB8C 60EE                       		bra.s	loc_DA24
0000EB8E                            ; ===========================================================================
0000EB8E                            
0000EB8E                            loc_DA36:
0000EB8E 21C8 F774                  		move.l	a0,($FFFFF774).w
0000EB92                            
0000EB92                            locret_DA3A:
0000EB92 4E75                       		rts	
0000EB94                            ; ===========================================================================
0000EB94                            
0000EB94                            loc_DA3C:
0000EB94 4A28 0004                  		tst.b	4(a0)
0000EB98 6A00                       		bpl.s	OPL_MakeItem
0000EB9A 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000EBA0 6700                       		beq.s	OPL_MakeItem
0000EBA2 5C48                       		addq.w	#6,a0
0000EBA4 7000                       		moveq	#0,d0
0000EBA6 4E75                       		rts	
0000EBA8                            ; ===========================================================================
0000EBA8                            
0000EBA8                            OPL_MakeItem:
0000EBA8 6100 0000                  		bsr.w	SingleObjLoad
0000EBAC 6600                       		bne.s	locret_DA8A
0000EBAE 3358 0008                  		move.w	(a0)+,8(a1)
0000EBB2 3018                       		move.w	(a0)+,d0
0000EBB4 3200                       		move.w	d0,d1
0000EBB6 0240 0FFF                  		andi.w	#$FFF,d0
0000EBBA 3340 000C                  		move.w	d0,$C(a1)
0000EBBE E559                       		rol.w	#2,d1
0000EBC0 0201 0003                  		andi.b	#3,d1
0000EBC4 1341 0001                  		move.b	d1,1(a1)
0000EBC8 1341 0022                  		move.b	d1,$22(a1)
0000EBCC 1018                       		move.b	(a0)+,d0
0000EBCE 6A00                       		bpl.s	loc_DA80
0000EBD0 0200 007F                  		andi.b	#$7F,d0
0000EBD4 1342 0023                  		move.b	d2,$23(a1)
0000EBD8                            
0000EBD8                            loc_DA80:
0000EBD8 1340 0000                  		move.b	d0,0(a1)
0000EBDC 1358 0028                  		move.b	(a0)+,$28(a1)
0000EBE0 7000                       		moveq	#0,d0
0000EBE2                            
0000EBE2                            locret_DA8A:
0000EBE2 4E75                       		rts	
0000EBE4                            ; ---------------------------------------------------------------------------
0000EBE4                            ; Single object	loading	subroutine
0000EBE4                            ; ---------------------------------------------------------------------------
0000EBE4                            
0000EBE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EBE4                            
0000EBE4                            
0000EBE4                            SingleObjLoad:
0000EBE4 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000EBE8 303C 005F                  		move.w	#$5F,d0
0000EBEC                            
0000EBEC                            loc_DA94:
0000EBEC 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000EBEE 6700                       		beq.s	locret_DAA0	; if yes, branch
0000EBF0 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000EBF4 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000EBF8                            
0000EBF8                            locret_DAA0:
0000EBF8 4E75                       		rts	
0000EBFA                            ; End of function SingleObjLoad
0000EBFA                            
0000EBFA                            
0000EBFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EBFA                            
0000EBFA                            
0000EBFA                            SingleObjLoad2:
0000EBFA 2248                       		movea.l	a0,a1
0000EBFC 303C F000                  		move.w	#-$1000,d0
0000EC00 9048                       		sub.w	a0,d0
0000EC02 EC48                       		lsr.w	#6,d0
0000EC04 5340                       		subq.w	#1,d0
0000EC06 6500                       		bcs.s	locret_DABC
0000EC08                            
0000EC08                            loc_DAB0:
0000EC08 4A11                       		tst.b	(a1)
0000EC0A 6700                       		beq.s	locret_DABC
0000EC0C 43E9 0040                  		lea	$40(a1),a1
0000EC10 51C8 FFF6                  		dbf	d0,loc_DAB0
0000EC14                            
0000EC14                            locret_DABC:
0000EC14 4E75                       		rts	
0000EC16                            ; End of function SingleObjLoad2
0000EC16                            
0000EC16                            ; ===========================================================================
0000EC16                            ; ---------------------------------------------------------------------------
0000EC16                            ; Object 41B - noteblock
0000EC16                            ; ---------------------------------------------------------------------------
0000EC16                            
0000EC16                            Obj41B:					; XREF: Obj_Index
0000EC16 7000                       		moveq	#0,d0
0000EC18 1028 0024                  		move.b	$24(a0),d0
0000EC1C 323B 0000                  		move.w	Obj41B_Index(pc,d0.w),d1
0000EC20 4EBB 1000                  		jsr	Obj41B_Index(pc,d1.w)
0000EC24 6100 FB36                  		bsr.w	DisplaySprite
0000EC28 3028 0008                  		move.w	8(a0),d0
0000EC2C 0240 FF80                  		andi.w	#$FF80,d0
0000EC30 3238 F700                  		move.w	($FFFFF700).w,d1
0000EC34 0441 0080                  		subi.w	#$80,d1
0000EC38 0241 FF80                  		andi.w	#$FF80,d1
0000EC3C 9041                       		sub.w	d1,d0
0000EC3E 0C40 0280                  		cmpi.w	#$280,d0
0000EC42 6200 FB54                  		bhi.w	DeleteObject
0000EC46 4E75                       		rts	
0000EC48                            ; ===========================================================================
0000EC48 0000                       Obj41B_Index:	dc.w Obj41B_Main-Obj41B_Index
0000EC4A 0000                       		dc.w Obj41B_Up-Obj41B_Index
0000EC4C 0000                       		dc.w Obj41B_AniUp-Obj41B_Index
0000EC4E 0000                       		dc.w Obj41B_ResetUp-Obj41B_Index
0000EC50                            
0000EC50 F000                       Obj41B_Powers:	dc.w -$1000		; power	of red spring
0000EC52 F600                       		dc.w -$A00		; power	of yellow spring
0000EC54                            ; ===========================================================================
0000EC54                            
0000EC54                            Obj41B_Main:				; XREF: Obj41_Index
0000EC54 5428 0024                  		addq.b	#2,$24(a0)
0000EC58 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000EC60 317C 0523 0002             		move.w	#$523,2(a0)
0000EC66 0028 0004 0001             		ori.b	#4,1(a0)
0000EC6C 117C 0010 0019             		move.b	#$10,$19(a0)
0000EC72 117C 0004 0018             		move.b	#4,$18(a0)
0000EC78 1028 0028                  		move.b	$28(a0),d0
0000EC7C 117C 0001 001C             		move.b	#1,$1C(a0)
0000EC82 117C 0003 001A             		move.b	#3,$1A(a0)
0000EC88 317C 0533 0002             		move.w	#$533,2(a0)
0000EC8E 117C 0008 0019             		move.b	#8,$19(a0)
0000EC94                            
0000EC94                            locB_DB66:
0000EC94 0800 0001                  		btst	#1,d0
0000EC98 6700                       		beq.s	locB_DB72
0000EC9A 08E8 0005 0002             		bset	#5,2(a0)
0000ECA0                            
0000ECA0                            locB_DB72:
0000ECA0 0240 000F                  		andi.w	#$F,d0
0000ECA4 317B 00AA 0030             		move.w	Obj41B_Powers(pc,d0.w),$30(a0)
0000ECAA 4E75                       		rts	
0000ECAC                            Obj41B_Up:				; XREF: Obj41_Index
0000ECAC 323C 001B                  		move.w	#$1B,d1
0000ECB0 343C 0008                  		move.w	#8,d2
0000ECB4 363C 0010                  		move.w	#$10,d3
0000ECB8 3828 0008                  		move.w	8(a0),d4
0000ECBC 6100 0000                  		bsr.w	SolidObject
0000ECC0 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000ECC4 6600                       		bne.s	Obj41B_BounceUp	; if yes, branch
0000ECC6 4E75                       		rts	
0000ECC8                            ; ===========================================================================
0000ECC8                            
0000ECC8                            Obj41B_BounceUp:				; XREF: Obj41_Up
0000ECC8 5428 0024                  		addq.b	#2,$24(a0)
0000ECCC 5069 000C                  		addq.w	#8,$C(a1)
0000ECD0 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000ECD6 08E9 0001 0022             		bset	#1,$22(a1)
0000ECDC 08A9 0003 0022             		bclr	#3,$22(a1)
0000ECE2 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000ECE8 137C 0002 0024             		move.b	#2,$24(a1)
0000ECEE 08A8 0003 0022             		bclr	#3,$22(a0)
0000ECF4 4228 0025                  		clr.b	$25(a0)
0000ECF8 303C 00CC                  		move.w	#$CC,d0
0000ECFC 4EB9 0000 132C             		jsr	(PlaySound_Special).l ;	play spring sound
0000ED02                            
0000ED02                            Obj41B_AniUp:				; XREF: Obj41_Index
0000ED02 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000ED08 6000 CB56                  		bra.w	AnimateSprite
0000ED0C                            ; ===========================================================================
0000ED0C                            
0000ED0C                            Obj41B_ResetUp:				; XREF: Obj41_Index
0000ED0C 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000ED12 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000ED16 4E75                       		rts	
0000ED18                            ; ===========================================================================
0000ED18                            ; ---------------------------------------------------------------------------
0000ED18                            ; Object 41 - springs
0000ED18                            ; ---------------------------------------------------------------------------
0000ED18                            
0000ED18                            Obj41:					; XREF: Obj_Index
0000ED18 7000                       		moveq	#0,d0
0000ED1A 1028 0024                  		move.b	$24(a0),d0
0000ED1E 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000ED22 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000ED26 6100 FA34                  		bsr.w	DisplaySprite
0000ED2A 3028 0008                  		move.w	8(a0),d0
0000ED2E 0240 FF80                  		andi.w	#$FF80,d0
0000ED32 3238 F700                  		move.w	($FFFFF700).w,d1
0000ED36 0441 0080                  		subi.w	#$80,d1
0000ED3A 0241 FF80                  		andi.w	#$FF80,d1
0000ED3E 9041                       		sub.w	d1,d0
0000ED40 0C40 0280                  		cmpi.w	#$280,d0
0000ED44 6200 FA52                  		bhi.w	DeleteObject
0000ED48 4E75                       		rts	
0000ED4A                            ; ===========================================================================
0000ED4A 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000ED4C 0000                       		dc.w Obj41_Up-Obj41_Index
0000ED4E 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000ED50 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000ED52 0000                       		dc.w Obj41_LR-Obj41_Index
0000ED54 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000ED56 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000ED58 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000ED5A 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000ED5C 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000ED5E                            
0000ED5E F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000ED60 F600                       		dc.w -$A00		; power	of yellow spring
0000ED62                            ; ===========================================================================
0000ED62                            
0000ED62                            Obj41_Main:				; XREF: Obj41_Index
0000ED62 5428 0024                  		addq.b	#2,$24(a0)
0000ED66 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000ED6E 317C 0523 0002             		move.w	#$523,2(a0)
0000ED74 0028 0004 0001             		ori.b	#4,1(a0)
0000ED7A 117C 0010 0019             		move.b	#$10,$19(a0)
0000ED80 117C 0004 0018             		move.b	#4,$18(a0)
0000ED86 1028 0028                  		move.b	$28(a0),d0
0000ED8A 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000ED8E 6700                       		beq.s	loc_DB54	; if not, branch
0000ED90 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000ED96 117C 0001 001C             		move.b	#1,$1C(a0)
0000ED9C 117C 0003 001A             		move.b	#3,$1A(a0)
0000EDA2 317C 0533 0002             		move.w	#$533,2(a0)
0000EDA8 117C 0008 0019             		move.b	#8,$19(a0)
0000EDAE                            
0000EDAE                            loc_DB54:
0000EDAE 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000EDB2 6700                       		beq.s	loc_DB66	; if not, branch
0000EDB4 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000EDBA 08E8 0001 0022             		bset	#1,$22(a0)
0000EDC0                            
0000EDC0                            loc_DB66:
0000EDC0 0800 0001                  		btst	#1,d0
0000EDC4 6700                       		beq.s	loc_DB72
0000EDC6 08E8 0005 0002             		bset	#5,2(a0)
0000EDCC                            
0000EDCC                            loc_DB72:
0000EDCC 0240 000F                  		andi.w	#$F,d0
0000EDD0 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000EDD6 4E75                       		rts	
0000EDD8                            ; ===========================================================================
0000EDD8                            
0000EDD8                            Obj41_Up:				; XREF: Obj41_Index
0000EDD8 323C 001B                  		move.w	#$1B,d1
0000EDDC 343C 0008                  		move.w	#8,d2
0000EDE0 363C 0010                  		move.w	#$10,d3
0000EDE4 3828 0008                  		move.w	8(a0),d4
0000EDE8 6100 0000                  		bsr.w	SolidObject
0000EDEC 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000EDF0 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000EDF2 4E75                       		rts	
0000EDF4                            ; ===========================================================================
0000EDF4                            
0000EDF4                            Obj41_BounceUp:				; XREF: Obj41_Up
0000EDF4 5428 0024                  		addq.b	#2,$24(a0)
0000EDF8 5069 000C                  		addq.w	#8,$C(a1)
0000EDFC 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000EE02 08E9 0001 0022             		bset	#1,$22(a1)
0000EE08 08A9 0003 0022             		bclr	#3,$22(a1)
0000EE0E 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000EE14 137C 0002 0024             		move.b	#2,$24(a1)
0000EE1A 08A8 0003 0022             		bclr	#3,$22(a0)
0000EE20 4228 0025                  		clr.b	$25(a0)
0000EE24 303C 00CC                  		move.w	#$CC,d0
0000EE28 4EB9 0000 132C             		jsr	(PlaySound_Special).l ;	play spring sound
0000EE2E                            
0000EE2E                            Obj41_AniUp:				; XREF: Obj41_Index
0000EE2E 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000EE34 6000 CA2A                  		bra.w	AnimateSprite
0000EE38                            ; ===========================================================================
0000EE38                            
0000EE38                            Obj41_ResetUp:				; XREF: Obj41_Index
0000EE38 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000EE3E 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000EE42 4E75                       		rts	
0000EE44                            ; ===========================================================================
0000EE44                            
0000EE44                            Obj41_LR:				; XREF: Obj41_Index
0000EE44 323C 0013                  		move.w	#$13,d1
0000EE48 343C 000E                  		move.w	#$E,d2
0000EE4C 363C 000F                  		move.w	#$F,d3
0000EE50 3828 0008                  		move.w	8(a0),d4
0000EE54 6100 0000                  		bsr.w	SolidObject
0000EE58 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000EE5E 6600                       		bne.s	loc_DC0C
0000EE60 117C 0008 0024             		move.b	#8,$24(a0)
0000EE66                            
0000EE66                            loc_DC0C:
0000EE66 0828 0005 0022             		btst	#5,$22(a0)
0000EE6C 6600                       		bne.s	Obj41_BounceLR
0000EE6E 4E75                       		rts	
0000EE70                            ; ===========================================================================
0000EE70                            
0000EE70                            Obj41_BounceLR:				; XREF: Obj41_LR
0000EE70 5428 0024                  		addq.b	#2,$24(a0)
0000EE74 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000EE7A 5069 0008                  		addq.w	#8,8(a1)
0000EE7E 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000EE84 6600                       		bne.s	loc_DC36	; if yes, branch
0000EE86 0469 0010 0008             		subi.w	#$10,8(a1)
0000EE8C 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000EE90                            
0000EE90                            loc_DC36:
0000EE90 337C 000F 003E             		move.w	#$F,$3E(a1)
0000EE96 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000EE9C 0869 0000 0022             		bchg	#0,$22(a1)
0000EEA2 0829 0002 0022             		btst	#2,$22(a1)
0000EEA8 6600                       		bne.s	loc_DC56
0000EEAA 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000EEB0                            
0000EEB0                            loc_DC56:
0000EEB0 08A8 0005 0022             		bclr	#5,$22(a0)
0000EEB6 08A9 0005 0022             		bclr	#5,$22(a1)
0000EEBC 303C 00CC                  		move.w	#$CC,d0
0000EEC0 4EB9 0000 132C             		jsr	(PlaySound_Special).l ;	play spring sound
0000EEC6                            
0000EEC6                            Obj41_AniLR:				; XREF: Obj41_Index
0000EEC6 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000EECC 6000 C992                  		bra.w	AnimateSprite
0000EED0                            ; ===========================================================================
0000EED0                            
0000EED0                            Obj41_ResetLR:				; XREF: Obj41_Index
0000EED0 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000EED6 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000EEDA 4E75                       		rts	
0000EEDC                            ; ===========================================================================
0000EEDC                            
0000EEDC                            Obj41_Dwn:				; XREF: Obj41_Index
0000EEDC 323C 001B                  		move.w	#$1B,d1
0000EEE0 343C 0008                  		move.w	#8,d2
0000EEE4 363C 0010                  		move.w	#$10,d3
0000EEE8 3828 0008                  		move.w	8(a0),d4
0000EEEC 6100 0000                  		bsr.w	SolidObject
0000EEF0 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000EEF6 6600                       		bne.s	loc_DCA4
0000EEF8 117C 000E 0024             		move.b	#$E,$24(a0)
0000EEFE                            
0000EEFE                            loc_DCA4:
0000EEFE 4A28 0025                  		tst.b	$25(a0)
0000EF02 6600                       		bne.s	locret_DCAE
0000EF04 4A44                       		tst.w	d4
0000EF06 6B00                       		bmi.s	Obj41_BounceDwn
0000EF08                            
0000EF08                            locret_DCAE:
0000EF08 4E75                       		rts	
0000EF0A                            ; ===========================================================================
0000EF0A                            
0000EF0A                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000EF0A 5428 0024                  		addq.b	#2,$24(a0)
0000EF0E 5169 000C                  		subq.w	#8,$C(a1)
0000EF12 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000EF18 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000EF1C 08E9 0001 0022             		bset	#1,$22(a1)
0000EF22 08A9 0003 0022             		bclr	#3,$22(a1)
0000EF28 137C 0002 0024             		move.b	#2,$24(a1)
0000EF2E 08A8 0003 0022             		bclr	#3,$22(a0)
0000EF34 4228 0025                  		clr.b	$25(a0)
0000EF38 303C 00CC                  		move.w	#$CC,d0
0000EF3C 4EB9 0000 132C             		jsr	(PlaySound_Special).l ;	play spring sound
0000EF42                            
0000EF42                            Obj41_AniDwn:				; XREF: Obj41_Index
0000EF42 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000EF48 6000 C916                  		bra.w	AnimateSprite
0000EF4C                            ; ===========================================================================
0000EF4C                            
0000EF4C                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000EF4C 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000EF52 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000EF56 4E75                       		rts	
0000EF58                            ; ===========================================================================
0000EF58                            Ani_obj41:
0000EF58                            	include "_anim\obj41.asm"
0000EF58                            ; ---------------------------------------------------------------------------
0000EF58                            ; Animation script - springs
0000EF58                            ; ---------------------------------------------------------------------------
0000EF58 0000                       		dc.w byte_DD02-Ani_obj41
0000EF5A 0000                       		dc.w byte_DD0E-Ani_obj41
0000EF5C 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000EF68 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000EF74                            		even
0000EF74                            		even
0000EF74                            
0000EF74                            ; ---------------------------------------------------------------------------
0000EF74                            ; Sprite mappings - springs
0000EF74                            ; ---------------------------------------------------------------------------
0000EF74                            Map_obj41:
0000EF74                            	include "_maps\obj41.asm"
0000EF74                            ; ---------------------------------------------------------------------------
0000EF74                            ; Sprite mappings - springs
0000EF74                            ; ---------------------------------------------------------------------------
0000EF74 0000                       		dc.w byte_DD26-Map_obj41
0000EF76 0000                       		dc.w byte_DD31-Map_obj41
0000EF78 0000                       		dc.w byte_DD37-Map_obj41
0000EF7A 0000                       		dc.w byte_DD47-Map_obj41
0000EF7C 0000                       		dc.w byte_DD4D-Map_obj41
0000EF7E 0000                       		dc.w byte_DD53-Map_obj41
0000EF80 02                         byte_DD26:	dc.b 2
0000EF81 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000EF86 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000EF8B 01                         byte_DD31:	dc.b 1
0000EF8C 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000EF91 03                         byte_DD37:	dc.b 3
0000EF92 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000EF97 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000EF9C 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000EFA1 01                         byte_DD47:	dc.b 1
0000EFA2 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000EFA7 01                         byte_DD4D:	dc.b 1
0000EFA8 F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000EFAD 04                         byte_DD53:	dc.b 4
0000EFAE F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000EFB3 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000EFB8 F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000EFBD 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000EFC2                            		even
0000EFC2                            		even
0000EFC2                            
0000EFC2                            ; ===========================================================================
0000EFC2                            ; ---------------------------------------------------------------------------
0000EFC2                            ; Object 42 - Newtron enemy (GHZ)
0000EFC2                            ; ---------------------------------------------------------------------------
0000EFC2                            
0000EFC2                            Obj42:					; XREF: Obj_Index
0000EFC2 7000                       		moveq	#0,d0
0000EFC4 1028 0024                  		move.b	$24(a0),d0
0000EFC8 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000EFCC 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000EFD0                            ; ===========================================================================
0000EFD0 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000EFD2 0000                       		dc.w Obj42_Action-Obj42_Index
0000EFD4 0000                       		dc.w Obj42_Delete-Obj42_Index
0000EFD6                            ; ===========================================================================
0000EFD6                            
0000EFD6                            Obj42_Main:				; XREF: Obj42_Index
0000EFD6 5428 0024                  		addq.b	#2,$24(a0)
0000EFDA 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000EFE2 317C 049B 0002             		move.w	#$49B,2(a0)
0000EFE8 117C 0004 0001             		move.b	#4,1(a0)
0000EFEE 117C 0004 0018             		move.b	#4,$18(a0)
0000EFF4 117C 0014 0019             		move.b	#$14,$19(a0)
0000EFFA 117C 0010 0016             		move.b	#$10,$16(a0)
0000F000 117C 0008 0017             		move.b	#8,$17(a0)
0000F006                            
0000F006                            Obj42_Action:				; XREF: Obj42_Index
0000F006 7000                       		moveq	#0,d0
0000F008 1028 0025                  		move.b	$25(a0),d0
0000F00C 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000F010 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000F014 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000F01A 6100 C844                  		bsr.w	AnimateSprite
0000F01E 6000 0000                  		bra.w	MarkObjGone
0000F022                            ; ===========================================================================
0000F022 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000F024 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000F026 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000F028 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000F02A 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000F02C                            ; ===========================================================================
0000F02C                            
0000F02C                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000F02C 08E8 0000 0022             		bset	#0,$22(a0)
0000F032 3038 D008                  		move.w	($FFFFD008).w,d0
0000F036 9068 0008                  		sub.w	8(a0),d0
0000F03A 6400                       		bcc.s	loc_DDEA
0000F03C 4440                       		neg.w	d0
0000F03E 08A8 0000 0022             		bclr	#0,$22(a0)
0000F044                            
0000F044                            loc_DDEA:
0000F044 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000F048 6400                       		bcc.s	locret_DE12	; if not, branch
0000F04A 5428 0025                  		addq.b	#2,$25(a0)
0000F04E 117C 0001 001C             		move.b	#1,$1C(a0)
0000F054 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000F058 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000F05A 317C 249B 0002             		move.w	#$249B,2(a0)
0000F060 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000F066 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000F06C                            
0000F06C                            locret_DE12:
0000F06C 4E75                       		rts	
0000F06E                            ; ===========================================================================
0000F06E                            
0000F06E                            Obj42_Type00:				; XREF: Obj42_Index2
0000F06E 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000F074 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000F076 08E8 0000 0022             		bset	#0,$22(a0)
0000F07C 3038 D008                  		move.w	($FFFFD008).w,d0
0000F080 9068 0008                  		sub.w	8(a0),d0
0000F084 6400                       		bcc.s	locret_DE32
0000F086 08A8 0000 0022             		bclr	#0,$22(a0)
0000F08C                            
0000F08C                            locret_DE32:
0000F08C 4E75                       		rts	
0000F08E                            ; ===========================================================================
0000F08E                            
0000F08E                            Obj42_Fall:				; XREF: Obj42_Type00
0000F08E 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000F094 6600                       		bne.s	loc_DE42
0000F096 117C 000C 0020             		move.b	#$C,$20(a0)
0000F09C                            
0000F09C                            loc_DE42:
0000F09C 6100 F66C                  		bsr.w	ObjectFall
0000F0A0 6100 0000                  		bsr.w	ObjHitFloor
0000F0A4 4A41                       		tst.w	d1		; has newtron hit the floor?
0000F0A6 6A00                       		bpl.s	locret_DE86	; if not, branch
0000F0A8 D368 000C                  		add.w	d1,$C(a0)
0000F0AC 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000F0B2 5428 0025                  		addq.b	#2,$25(a0)
0000F0B6 117C 0002 001C             		move.b	#2,$1C(a0)
0000F0BC 0828 0005 0002             		btst	#5,2(a0)
0000F0C2 6700                       		beq.s	Obj42_Move
0000F0C4 5228 001C                  		addq.b	#1,$1C(a0)
0000F0C8                            
0000F0C8                            Obj42_Move:
0000F0C8 117C 000D 0020             		move.b	#$D,$20(a0)
0000F0CE 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000F0D4 0828 0000 0022             		btst	#0,$22(a0)
0000F0DA 6600                       		bne.s	locret_DE86
0000F0DC 4468 0010                  		neg.w	$10(a0)
0000F0E0                            
0000F0E0                            locret_DE86:
0000F0E0 4E75                       		rts	
0000F0E2                            ; ===========================================================================
0000F0E2                            
0000F0E2                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000F0E2 6100 F652                  		bsr.w	SpeedToPos
0000F0E6 6100 0000                  		bsr.w	ObjHitFloor
0000F0EA 0C41 FFF8                  		cmpi.w	#-8,d1
0000F0EE 6D00                       		blt.s	loc_DEA2
0000F0F0 0C41 000C                  		cmpi.w	#$C,d1
0000F0F4 6C00                       		bge.s	loc_DEA2
0000F0F6 D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000F0FA 4E75                       		rts	
0000F0FC                            ; ===========================================================================
0000F0FC                            
0000F0FC                            loc_DEA2:
0000F0FC 5428 0025                  		addq.b	#2,$25(a0)
0000F100 4E75                       		rts	
0000F102                            ; ===========================================================================
0000F102                            
0000F102                            Obj42_Speed:				; XREF: Obj42_Index2
0000F102 6100 F632                  		bsr.w	SpeedToPos
0000F106 4E75                       		rts	
0000F108                            ; ===========================================================================
0000F108                            
0000F108                            Obj42_Type01:				; XREF: Obj42_Index2
0000F108 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000F10E 6600                       		bne.s	Obj42_FireMissile
0000F110 117C 000C 0020             		move.b	#$C,$20(a0)
0000F116                            
0000F116                            Obj42_FireMissile:
0000F116 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000F11C 6600                       		bne.s	locret_DF14
0000F11E 4A28 0032                  		tst.b	$32(a0)
0000F122 6600                       		bne.s	locret_DF14
0000F124 117C 0001 0032             		move.b	#1,$32(a0)
0000F12A 6100 FAB8                  		bsr.w	SingleObjLoad
0000F12E 6600                       		bne.s	locret_DF14
0000F130 137C 0023 0000             		move.b	#$23,0(a1)	; load missile object
0000F136 3368 0008 0008             		move.w	8(a0),8(a1)
0000F13C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F142 5169 000C                  		subq.w	#8,$C(a1)
0000F146 337C 0200 0010             		move.w	#$200,$10(a1)
0000F14C 303C 0014                  		move.w	#$14,d0
0000F150 0828 0000 0022             		btst	#0,$22(a0)
0000F156 6600                       		bne.s	loc_DF04
0000F158 4440                       		neg.w	d0
0000F15A 4469 0010                  		neg.w	$10(a1)
0000F15E                            
0000F15E                            loc_DF04:
0000F15E D169 0008                  		add.w	d0,8(a1)
0000F162 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000F168 137C 0001 0028             		move.b	#1,$28(a1)
0000F16E                            
0000F16E                            locret_DF14:
0000F16E 4E75                       		rts	
0000F170                            ; ===========================================================================
0000F170                            
0000F170                            Obj42_Delete:				; XREF: Obj42_Index
0000F170 6000 F626                  		bra.w	DeleteObject
0000F174                            ; ===========================================================================
0000F174                            Ani_obj42:
0000F174                            	include "_anim\obj42.asm"
0000F174                            ; ---------------------------------------------------------------------------
0000F174                            ; Animation script - Newtron enemy
0000F174                            ; ---------------------------------------------------------------------------
0000F174 0000                       		dc.w byte_DF24-Ani_obj42
0000F176 0000                       		dc.w byte_DF28-Ani_obj42
0000F178 0000                       		dc.w byte_DF30-Ani_obj42
0000F17A 0000                       		dc.w byte_DF34-Ani_obj42
0000F17C 0000                       		dc.w byte_DF38-Ani_obj42
0000F17E 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000F182 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000F18A 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000F18E 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000F192 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000F19C                            		even
0000F19C                            		even
0000F19C                            
0000F19C                            ; ---------------------------------------------------------------------------
0000F19C                            ; Sprite mappings - Newtron enemy (GHZ)
0000F19C                            ; ---------------------------------------------------------------------------
0000F19C                            Map_obj42:
0000F19C                            	include "_maps\obj42.asm"
0000F19C                            ; ---------------------------------------------------------------------------
0000F19C                            ; Sprite mappings - Newtron enemy (GHZ)
0000F19C                            ; ---------------------------------------------------------------------------
0000F19C 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000F1A0 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000F1A4 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000F1A8 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000F1AC 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000F1B0 0000                       		dc.w byte_DFF8-Map_obj42
0000F1B2 03                         byte_DF58:	dc.b 3
0000F1B3 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000F1B8 F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000F1BD FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000F1C2 03                         byte_DF68:	dc.b 3
0000F1C3 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000F1C8 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000F1CD FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000F1D2 03                         byte_DF78:	dc.b 3
0000F1D3 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000F1D8 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000F1DD FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000F1E2 04                         byte_DF88:	dc.b 4
0000F1E3 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000F1E8 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000F1ED FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000F1F2 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000F1F7 03                         byte_DF9D:	dc.b 3
0000F1F8 F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000F1FD FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000F202 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000F207 02                         byte_DFAD:	dc.b 2
0000F208 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000F20D F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000F212 03                         byte_DFB8:	dc.b 3
0000F213 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000F218 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000F21D FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000F222 03                         byte_DFC8:	dc.b 3
0000F223 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000F228 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000F22D FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000F232 03                         byte_DFD8:	dc.b 3
0000F233 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000F238 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000F23D FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000F242 03                         byte_DFE8:	dc.b 3
0000F243 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000F248 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000F24D FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000F252 00                         byte_DFF8:	dc.b 0
0000F254 00                         		even
0000F254 00                         		even
0000F254                            
0000F254                            ; ===========================================================================
0000F254                            ; ---------------------------------------------------------------------------
0000F254                            ; Object 43 - Roller enemy (SYZ)
0000F254                            ; ---------------------------------------------------------------------------
0000F254                            
0000F254                            Obj43:					; XREF: Obj_Index
0000F254 7000                       		moveq	#0,d0
0000F256 1028 0024                  		move.b	$24(a0),d0
0000F25A 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000F25E 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000F262                            ; ===========================================================================
0000F262 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000F264 0000                       		dc.w Obj43_Action-Obj43_Index
0000F266                            ; ===========================================================================
0000F266                            
0000F266                            Obj43_Main:				; XREF: Obj43_Index
0000F266 117C 000E 0016             		move.b	#$E,$16(a0)
0000F26C 117C 0008 0017             		move.b	#8,$17(a0)
0000F272 6100 F496                  		bsr.w	ObjectFall
0000F276 6100 0000                  		bsr.w	ObjHitFloor
0000F27A 4A41                       		tst.w	d1
0000F27C 6A00                       		bpl.s	locret_E052
0000F27E D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000F282 317C 0000 0012             		move.w	#0,$12(a0)
0000F288 5428 0024                  		addq.b	#2,$24(a0)
0000F28C 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000F294 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000F29A 117C 0004 0001             		move.b	#4,1(a0)
0000F2A0 117C 0004 0018             		move.b	#4,$18(a0)
0000F2A6 117C 0010 0019             		move.b	#$10,$19(a0)
0000F2AC                            
0000F2AC                            locret_E052:
0000F2AC 4E75                       		rts	
0000F2AE                            ; ===========================================================================
0000F2AE                            
0000F2AE                            Obj43_Action:				; XREF: Obj43_Index
0000F2AE 7000                       		moveq	#0,d0
0000F2B0 1028 0025                  		move.b	$25(a0),d0
0000F2B4 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000F2B8 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000F2BC 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000F2C2 6100 C59C                  		bsr.w	AnimateSprite
0000F2C6 3028 0008                  		move.w	8(a0),d0
0000F2CA 0240 FF80                  		andi.w	#$FF80,d0
0000F2CE 3238 F700                  		move.w	($FFFFF700).w,d1
0000F2D2 0441 0080                  		subi.w	#$80,d1
0000F2D6 0241 FF80                  		andi.w	#$FF80,d1
0000F2DA 9041                       		sub.w	d1,d0
0000F2DC 0C40 0280                  		cmpi.w	#$280,d0
0000F2E0 6E00 0000                  		bgt.w	Obj43_ChkGone
0000F2E4 6000 F476                  		bra.w	DisplaySprite
0000F2E8                            ; ===========================================================================
0000F2E8                            
0000F2E8                            Obj43_ChkGone:				; XREF: Obj43_Action
0000F2E8 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F2EC 7000                       		moveq	#0,d0
0000F2EE 1028 0023                  		move.b	$23(a0),d0
0000F2F2 6700                       		beq.s	Obj43_Delete
0000F2F4 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F2FA                            
0000F2FA                            Obj43_Delete:
0000F2FA 6000 F49C                  		bra.w	DeleteObject
0000F2FE                            ; ===========================================================================
0000F2FE 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000F300 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000F302 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000F304 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000F306                            ; ===========================================================================
0000F306                            
0000F306                            Obj43_RollChk:				; XREF: Obj43_Index2
0000F306 3038 D008                  		move.w	($FFFFD008).w,d0
0000F30A 0440 0100                  		subi.w	#$100,d0
0000F30E 6500                       		bcs.s	loc_E0D2
0000F310 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000F314 6500                       		bcs.s	loc_E0D2
0000F316 5828 0025                  		addq.b	#4,$25(a0)
0000F31A 117C 0002 001C             		move.b	#2,$1C(a0)
0000F320 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000F326 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000F32C                            
0000F32C                            loc_E0D2:
0000F32C 588F                       		addq.l	#4,sp
0000F32E 4E75                       		rts	
0000F330                            ; ===========================================================================
0000F330                            
0000F330                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000F330 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000F336 6700                       		beq.s	loc_E0F8
0000F338 5368 0030                  		subq.w	#1,$30(a0)
0000F33C 6A00                       		bpl.s	locret_E0F6
0000F33E 117C 0001 001C             		move.b	#1,$1C(a0)
0000F344 317C 0700 0010             		move.w	#$700,$10(a0)
0000F34A 117C 008E 0020             		move.b	#$8E,$20(a0)
0000F350                            
0000F350                            locret_E0F6:
0000F350 4E75                       		rts	
0000F352                            ; ===========================================================================
0000F352                            
0000F352                            loc_E0F8:
0000F352 5428 0025                  		addq.b	#2,$25(a0)
0000F356 4E75                       		rts	
0000F358                            ; ===========================================================================
0000F358                            
0000F358                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000F358 6100 0000                  		bsr.w	Obj43_Stop
0000F35C 6100 F3D8                  		bsr.w	SpeedToPos
0000F360 6100 0000                  		bsr.w	ObjHitFloor
0000F364 0C41 FFF8                  		cmpi.w	#-8,d1
0000F368 6D00                       		blt.s	Obj43_Jump
0000F36A 0C41 000C                  		cmpi.w	#$C,d1
0000F36E 6C00                       		bge.s	Obj43_Jump
0000F370 D368 000C                  		add.w	d1,$C(a0)
0000F374 4E75                       		rts	
0000F376                            ; ===========================================================================
0000F376                            
0000F376                            Obj43_Jump:
0000F376 5428 0025                  		addq.b	#2,$25(a0)
0000F37A 08E8 0000 0032             		bset	#0,$32(a0)
0000F380 6700                       		beq.s	locret_E12E
0000F382 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000F388                            
0000F388                            locret_E12E:
0000F388 4E75                       		rts	
0000F38A                            ; ===========================================================================
0000F38A                            
0000F38A                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000F38A 6100 F37E                  		bsr.w	ObjectFall
0000F38E 4A68 0012                  		tst.w	$12(a0)
0000F392 6B00                       		bmi.s	locret_E150
0000F394 6100 0000                  		bsr.w	ObjHitFloor
0000F398 4A41                       		tst.w	d1
0000F39A 6A00                       		bpl.s	locret_E150
0000F39C D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000F3A0 5528 0025                  		subq.b	#2,$25(a0)
0000F3A4 317C 0000 0012             		move.w	#0,$12(a0)
0000F3AA                            
0000F3AA                            locret_E150:
0000F3AA 4E75                       		rts	
0000F3AC                            
0000F3AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F3AC                            
0000F3AC                            
0000F3AC                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000F3AC 4A28 0032                  		tst.b	$32(a0)
0000F3B0 6B00                       		bmi.s	locret_E188
0000F3B2 3038 D008                  		move.w	($FFFFD008).w,d0
0000F3B6 0440 0030                  		subi.w	#$30,d0
0000F3BA 9068 0008                  		sub.w	8(a0),d0
0000F3BE 6400                       		bcc.s	locret_E188
0000F3C0 117C 0000 001C             		move.b	#0,$1C(a0)
0000F3C6 117C 000E 0020             		move.b	#$E,$20(a0)
0000F3CC 4268 0010                  		clr.w	$10(a0)
0000F3D0 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000F3D6 117C 0002 0025             		move.b	#2,$25(a0)
0000F3DC 08E8 0007 0032             		bset	#7,$32(a0)
0000F3E2                            
0000F3E2                            locret_E188:
0000F3E2 4E75                       		rts	
0000F3E4                            ; End of function Obj43_Stop
0000F3E4                            
0000F3E4                            ; ===========================================================================
0000F3E4                            Ani_obj43:
0000F3E4                            	include "_anim\obj43.asm"
0000F3E4                            ; ---------------------------------------------------------------------------
0000F3E4                            ; Animation script - Roller enemy
0000F3E4                            ; ---------------------------------------------------------------------------
0000F3E4 0000                       		dc.w byte_E190-Ani_obj43
0000F3E6 0000                       		dc.w byte_E196-Ani_obj43
0000F3E8 0000                       		dc.w byte_E19C-Ani_obj43
0000F3EA 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000F3F0 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000F3F6 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000F3FC 00                         		even
0000F3FC 00                         		even
0000F3FC                            
0000F3FC                            ; ---------------------------------------------------------------------------
0000F3FC                            ; Sprite mappings - Roller enemy (SYZ)
0000F3FC                            ; ---------------------------------------------------------------------------
0000F3FC                            Map_obj43:
0000F3FC                            	include "_maps\obj43.asm"
0000F3FC                            ; ---------------------------------------------------------------------------
0000F3FC                            ; Sprite mappings - Roller enemy (SYZ)
0000F3FC                            ; ---------------------------------------------------------------------------
0000F3FC 0000 0000                  		dc.w byte_E1AC-Map_obj43, byte_E1B7-Map_obj43
0000F400 0000 0000                  		dc.w byte_E1C2-Map_obj43, byte_E1C8-Map_obj43
0000F404 0000                       		dc.w byte_E1CE-Map_obj43
0000F406 02                         byte_E1AC:	dc.b 2
0000F407 DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0
0000F40C F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0
0000F411 02                         byte_E1B7:	dc.b 2
0000F412 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0000F417 FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0
0000F41C 01                         byte_E1C2:	dc.b 1
0000F41D F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
0000F422 01                         byte_E1C8:	dc.b 1
0000F423 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
0000F428 01                         byte_E1CE:	dc.b 1
0000F429 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000F42E                            		even
0000F42E                            		even
0000F42E                            
0000F42E                            ; ===========================================================================
0000F42E                            ; ---------------------------------------------------------------------------
0000F42E                            ; Object 44 - walls (GHZ)
0000F42E                            ; ---------------------------------------------------------------------------
0000F42E                            
0000F42E                            Obj44:					; XREF: Obj_Index
0000F42E 7000                       		moveq	#0,d0
0000F430 1028 0024                  		move.b	$24(a0),d0
0000F434 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000F438 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000F43C                            ; ===========================================================================
0000F43C 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000F43E 0000                       		dc.w Obj44_Solid-Obj44_Index
0000F440 0000                       		dc.w Obj44_Display-Obj44_Index
0000F442                            ; ===========================================================================
0000F442                            
0000F442                            Obj44_Main:				; XREF: Obj44_Index
0000F442 5428 0024                  		addq.b	#2,$24(a0)
0000F446 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000F44E 317C 434C 0002             		move.w	#$434C,2(a0)
0000F454 0028 0004 0001             		ori.b	#4,1(a0)
0000F45A 117C 0008 0019             		move.b	#8,$19(a0)
0000F460 117C 0006 0018             		move.b	#6,$18(a0)
0000F466 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000F46C 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000F472 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000F474 5428 0024                  		addq.b	#2,$24(a0)
0000F478 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000F47A                            ; ===========================================================================
0000F47A                            
0000F47A                            Obj44_Solid:				; XREF: Obj44_Index
0000F47A 323C 0013                  		move.w	#$13,d1
0000F47E 343C 0028                  		move.w	#$28,d2
0000F482 6100 A69A                  		bsr.w	Obj44_SolidWall
0000F486                            
0000F486                            Obj44_Display:				; XREF: Obj44_Index
0000F486 6100 F2D4                  		bsr.w	DisplaySprite
0000F48A 3028 0008                  		move.w	8(a0),d0
0000F48E 0240 FF80                  		andi.w	#$FF80,d0
0000F492 3238 F700                  		move.w	($FFFFF700).w,d1
0000F496 0441 0080                  		subi.w	#$80,d1
0000F49A 0241 FF80                  		andi.w	#$FF80,d1
0000F49E 9041                       		sub.w	d1,d0
0000F4A0 0C40 0280                  		cmpi.w	#$280,d0
0000F4A4 6200 F2F2                  		bhi.w	DeleteObject
0000F4A8 4E75                       		rts	
0000F4AA                            ; ===========================================================================
0000F4AA                            ; ---------------------------------------------------------------------------
0000F4AA                            ; Sprite mappings - walls (GHZ)
0000F4AA                            ; ---------------------------------------------------------------------------
0000F4AA                            Map_obj44:
0000F4AA                            	include "_maps\obj44.asm"
0000F4AA                            ; ---------------------------------------------------------------------------
0000F4AA                            ; Sprite mappings - walls (GHZ)
0000F4AA                            ; ---------------------------------------------------------------------------
0000F4AA 0000                       		dc.w byte_E256-Map_obj44
0000F4AC 0000                       		dc.w byte_E26B-Map_obj44
0000F4AE 0000                       		dc.w byte_E280-Map_obj44
0000F4B0 04                         byte_E256:	dc.b 4
0000F4B1 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000F4B6 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000F4BB 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000F4C0 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000F4C5 04                         byte_E26B:	dc.b 4
0000F4C6 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000F4CB F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000F4D0 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000F4D5 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000F4DA 04                         byte_E280:	dc.b 4
0000F4DB E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000F4E0 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000F4E5 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000F4EA 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000F4F0 00                         		even
0000F4F0 00                         		even
0000F4F0                            
0000F4F0                            ; ===========================================================================
0000F4F0                            ; ---------------------------------------------------------------------------
0000F4F0                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000F4F0                            ; ---------------------------------------------------------------------------
0000F4F0                            
0000F4F0                            Obj13:					; XREF: Obj_Index
0000F4F0 7000                       		moveq	#0,d0
0000F4F2 1028 0024                  		move.b	$24(a0),d0
0000F4F6 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000F4FA 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000F4FE 6000 0000                  		bra.w	Obj14_ChkDel
0000F502                            ; ===========================================================================
0000F502 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000F504 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000F506                            ; ---------------------------------------------------------------------------
0000F506                            ;
0000F506                            ; Lava ball production rates
0000F506                            ;
0000F506 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000F50C                            ; ===========================================================================
0000F50C                            
0000F50C                            Obj13_Main:				; XREF: Obj13_Index
0000F50C 5428 0024                  		addq.b	#2,$24(a0)
0000F510 1028 0028                  		move.b	$28(a0),d0
0000F514 E848                       		lsr.w	#4,d0
0000F516 0240 000F                  		andi.w	#$F,d0
0000F51A 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000F520 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000F526 0228 000F 0028             		andi.b	#$F,$28(a0)
0000F52C                            
0000F52C                            Obj13_MakeLava:				; XREF: Obj13_Index
0000F52C 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000F530 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000F532 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000F538 6100 F49C                  		bsr.w	ChkObjOnScreen
0000F53C 6600                       		bne.s	locret_E302
0000F53E 6100 F6A4                  		bsr.w	SingleObjLoad
0000F542 6600                       		bne.s	locret_E302
0000F544 137C 0014 0000             		move.b	#$14,0(a1)	; load lava ball object
0000F54A 3368 0008 0008             		move.w	8(a0),8(a1)
0000F550 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F556 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F55C                            
0000F55C                            locret_E302:
0000F55C 4E75                       		rts	
0000F55E                            ; ===========================================================================
0000F55E                            ; ---------------------------------------------------------------------------
0000F55E                            ; Object 14 - lava balls (MZ, SLZ)
0000F55E                            ; ---------------------------------------------------------------------------
0000F55E                            
0000F55E                            Obj14:					; XREF: Obj_Index
0000F55E 7000                       		moveq	#0,d0
0000F560 1028 0024                  		move.b	$24(a0),d0
0000F564 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000F568 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000F56C 6000 F1EE                  		bra.w	DisplaySprite
0000F570                            ; ===========================================================================
0000F570 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000F572 0000                       		dc.w Obj14_Action-Obj14_Index
0000F574 0000                       		dc.w Obj14_Delete-Obj14_Index
0000F576                            
0000F576 FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000F580 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000F588                            ; ===========================================================================
0000F588                            
0000F588                            Obj14_Main:				; XREF: Obj14_Index
0000F588 5428 0024                  		addq.b	#2,$24(a0)
0000F58C 117C 0008 0016             		move.b	#8,$16(a0)
0000F592 117C 0008 0017             		move.b	#8,$17(a0)
0000F598 217C 0000 C4B6 0004        		move.l	#Map_obj14,4(a0)
0000F5A0 317C 0345 0002             		move.w	#$345,2(a0)
0000F5A6 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000F5AC 6600                       		bne.s	loc_E35A
0000F5AE 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000F5B4                            
0000F5B4                            loc_E35A:
0000F5B4 117C 0004 0001             		move.b	#4,1(a0)
0000F5BA 117C 0003 0018             		move.b	#3,$18(a0)
0000F5C0 117C 008B 0020             		move.b	#$8B,$20(a0)
0000F5C6 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F5CC 4A28 0029                  		tst.b	$29(a0)
0000F5D0 6700                       		beq.s	Obj14_SetSpeed
0000F5D2 5428 0018                  		addq.b	#2,$18(a0)
0000F5D6                            
0000F5D6                            Obj14_SetSpeed:
0000F5D6 7000                       		moveq	#0,d0
0000F5D8 1028 0028                  		move.b	$28(a0),d0
0000F5DC D040                       		add.w	d0,d0
0000F5DE 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000F5E4 117C 0008 0019             		move.b	#8,$19(a0)
0000F5EA 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000F5F0 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000F5F2 117C 0010 0019             		move.b	#$10,$19(a0)
0000F5F8 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000F5FE 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000F604 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000F60A                            
0000F60A                            Obj14_PlaySnd:
0000F60A 303C 00AE                  		move.w	#$AE,d0
0000F60E 4EB9 0000 132C             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000F614                            
0000F614                            Obj14_Action:				; XREF: Obj14_Index
0000F614 7000                       		moveq	#0,d0
0000F616 1028 0028                  		move.b	$28(a0),d0
0000F61A D040                       		add.w	d0,d0
0000F61C 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000F620 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000F624 6100 F110                  		bsr.w	SpeedToPos
0000F628 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000F62E 6100 C230                  		bsr.w	AnimateSprite
0000F632                            
0000F632                            Obj14_ChkDel:				; XREF: Obj13
0000F632 3028 0008                  		move.w	8(a0),d0
0000F636 0240 FF80                  		andi.w	#$FF80,d0
0000F63A 3238 F700                  		move.w	($FFFFF700).w,d1
0000F63E 0441 0080                  		subi.w	#$80,d1
0000F642 0241 FF80                  		andi.w	#$FF80,d1
0000F646 9041                       		sub.w	d1,d0
0000F648 0C40 0280                  		cmpi.w	#$280,d0
0000F64C 6200 F14A                  		bhi.w	DeleteObject
0000F650 4E75                       		rts	
0000F652                            ; ===========================================================================
0000F652 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000F656 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000F65A 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000F65E 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000F662 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000F664                            ; ===========================================================================
0000F664                            ; lavaball types 00-03 fly up and fall back down
0000F664                            
0000F664                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000F664 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000F66A 3028 0030                  		move.w	$30(a0),d0
0000F66E B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000F672 6400                       		bcc.s	loc_E41E	; if not, branch
0000F674 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000F678                            
0000F678                            loc_E41E:
0000F678 08A8 0001 0022             		bclr	#1,$22(a0)
0000F67E 4A68 0012                  		tst.w	$12(a0)
0000F682 6A00                       		bpl.s	locret_E430
0000F684 08E8 0001 0022             		bset	#1,$22(a0)
0000F68A                            
0000F68A                            locret_E430:
0000F68A 4E75                       		rts	
0000F68C                            ; ===========================================================================
0000F68C                            ; lavaball type	04 flies up until it hits the ceiling
0000F68C                            
0000F68C                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000F68C 08E8 0001 0022             		bset	#1,$22(a0)
0000F692 6100 0000                  		bsr.w	ObjHitCeiling
0000F696 4A41                       		tst.w	d1
0000F698 6A00                       		bpl.s	locret_E452
0000F69A 117C 0008 0028             		move.b	#8,$28(a0)
0000F6A0 117C 0001 001C             		move.b	#1,$1C(a0)
0000F6A6 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000F6AC                            
0000F6AC                            locret_E452:
0000F6AC 4E75                       		rts	
0000F6AE                            ; ===========================================================================
0000F6AE                            ; lavaball type	05 falls down until it hits the	floor
0000F6AE                            
0000F6AE                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000F6AE 08A8 0001 0022             		bclr	#1,$22(a0)
0000F6B4 6100 0000                  		bsr.w	ObjHitFloor
0000F6B8 4A41                       		tst.w	d1
0000F6BA 6A00                       		bpl.s	locret_E474
0000F6BC 117C 0008 0028             		move.b	#8,$28(a0)
0000F6C2 117C 0001 001C             		move.b	#1,$1C(a0)
0000F6C8 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000F6CE                            
0000F6CE                            locret_E474:
0000F6CE 4E75                       		rts	
0000F6D0                            ; ===========================================================================
0000F6D0                            ; lavaball types 06-07 move sideways
0000F6D0                            
0000F6D0                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000F6D0 08E8 0000 0022             		bset	#0,$22(a0)
0000F6D6 76F8                       		moveq	#-8,d3
0000F6D8 6100 0000                  		bsr.w	ObjHitWallLeft
0000F6DC 4A41                       		tst.w	d1
0000F6DE 6A00                       		bpl.s	locret_E498
0000F6E0 117C 0008 0028             		move.b	#8,$28(a0)
0000F6E6 117C 0003 001C             		move.b	#3,$1C(a0)
0000F6EC 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000F6F2                            
0000F6F2                            locret_E498:
0000F6F2 4E75                       		rts	
0000F6F4                            ; ===========================================================================
0000F6F4                            
0000F6F4                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000F6F4 08A8 0000 0022             		bclr	#0,$22(a0)
0000F6FA 7608                       		moveq	#8,d3
0000F6FC 6100 0000                  		bsr.w	ObjHitWallRight
0000F700 4A41                       		tst.w	d1
0000F702 6A00                       		bpl.s	locret_E4BC
0000F704 117C 0008 0028             		move.b	#8,$28(a0)
0000F70A 117C 0003 001C             		move.b	#3,$1C(a0)
0000F710 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000F716                            
0000F716                            locret_E4BC:
0000F716 4E75                       		rts	
0000F718                            ; ===========================================================================
0000F718                            
0000F718                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000F718 4E75                       		rts	
0000F71A                            ; ===========================================================================
0000F71A                            
0000F71A                            Obj14_Delete:				; XREF: Obj14_Index
0000F71A 6000 F07C                  		bra.w	DeleteObject
0000F71E                            ; ===========================================================================
0000F71E                            Ani_obj14:
0000F71E                            	include "_anim\obj14.asm"
0000F71E                            ; ---------------------------------------------------------------------------
0000F71E                            ; Animation script - lava balls
0000F71E                            ; ---------------------------------------------------------------------------
0000F71E 0000                       		dc.w byte_E4CC-Ani_obj14
0000F720 0000                       		dc.w byte_E4D2-Ani_obj14
0000F722 0000                       		dc.w byte_E4D6-Ani_obj14
0000F724 0000                       		dc.w byte_E4DC-Ani_obj14
0000F726 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000F72C 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000F730 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000F736 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000F73A                            		even
0000F73A                            		even
0000F73A                            
0000F73A                            ; ===========================================================================
0000F73A                            ; ---------------------------------------------------------------------------
0000F73A                            ; Object 6D - flame thrower (SBZ)
0000F73A                            ; ---------------------------------------------------------------------------
0000F73A                            
0000F73A                            Obj6D:					; XREF: Obj_Index
0000F73A 7000                       		moveq	#0,d0
0000F73C 1028 0024                  		move.b	$24(a0),d0
0000F740 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000F744 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000F748                            ; ===========================================================================
0000F748 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000F74A 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000F74C                            ; ===========================================================================
0000F74C                            
0000F74C                            Obj6D_Main:				; XREF: Obj6D_Index
0000F74C 5428 0024                  		addq.b	#2,$24(a0)
0000F750 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000F758 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000F75E 0028 0004 0001             		ori.b	#4,1(a0)
0000F764 117C 0001 0018             		move.b	#1,$18(a0)
0000F76A 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F770 117C 000C 0019             		move.b	#$C,$19(a0)
0000F776 1028 0028                  		move.b	$28(a0),d0
0000F77A 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000F77E D040                       		add.w	d0,d0		; multiply by 2
0000F780 3140 0030                  		move.w	d0,$30(a0)
0000F784 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000F788 1028 0028                  		move.b	$28(a0),d0
0000F78C 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000F790 EB48                       		lsl.w	#5,d0		; multiply by $20
0000F792 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000F796 117C 000A 0036             		move.b	#$A,$36(a0)
0000F79C 0828 0001 0022             		btst	#1,$22(a0)
0000F7A2 6700                       		beq.s	Obj6D_Action
0000F7A4 117C 0002 001C             		move.b	#2,$1C(a0)
0000F7AA 117C 0015 0036             		move.b	#$15,$36(a0)
0000F7B0                            
0000F7B0                            Obj6D_Action:				; XREF: Obj6D_Index
0000F7B0 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000F7B4 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000F7B6 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000F7BC 0868 0000 001C             		bchg	#0,$1C(a0)
0000F7C2 6700                       		beq.s	loc_E57A
0000F7C4 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000F7CA 303C 00B3                  		move.w	#$B3,d0
0000F7CE 4EB9 0000 132C             		jsr	(PlaySound_Special).l ;	play flame sound
0000F7D4                            
0000F7D4                            loc_E57A:
0000F7D4 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000F7DA 6100 C084                  		bsr.w	AnimateSprite
0000F7DE 117C 0000 0020             		move.b	#0,$20(a0)
0000F7E4 1028 0036                  		move.b	$36(a0),d0
0000F7E8 B028 001A                  		cmp.b	$1A(a0),d0
0000F7EC 6600                       		bne.s	Obj6D_ChkDel
0000F7EE 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000F7F4                            
0000F7F4                            Obj6D_ChkDel:
0000F7F4 3028 0008                  		move.w	8(a0),d0
0000F7F8 0240 FF80                  		andi.w	#$FF80,d0
0000F7FC 3238 F700                  		move.w	($FFFFF700).w,d1
0000F800 0441 0080                  		subi.w	#$80,d1
0000F804 0241 FF80                  		andi.w	#$FF80,d1
0000F808 9041                       		sub.w	d1,d0
0000F80A 0C40 0280                  		cmpi.w	#$280,d0
0000F80E 6200 EF88                  		bhi.w	DeleteObject
0000F812 6000 EF48                  		bra.w	DisplaySprite
0000F816                            ; ===========================================================================
0000F816                            Ani_obj6D:
0000F816                            	include "_anim\obj6D.asm"
0000F816                            ; ---------------------------------------------------------------------------
0000F816                            ; Animation script - flamethrower (SBZ)
0000F816                            ; ---------------------------------------------------------------------------
0000F816 0000                       		dc.w byte_E5C4-Ani_obj6D
0000F818 0000                       		dc.w byte_E5D2-Ani_obj6D
0000F81A 0000                       		dc.w byte_E5DC-Ani_obj6D
0000F81C 0000                       		dc.w byte_E5EA-Ani_obj6D
0000F81E 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000F82C 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000F836 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000F844 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000F84E                            		even
0000F84E                            		even
0000F84E                            
0000F84E                            ; ---------------------------------------------------------------------------
0000F84E                            ; Sprite mappings - flame thrower (SBZ)
0000F84E                            ; ---------------------------------------------------------------------------
0000F84E                            Map_obj6D:
0000F84E                            	include "_maps\obj6D.asm"
0000F84E                            ; ---------------------------------------------------------------------------
0000F84E                            ; Sprite mappings - flame thrower (SBZ)
0000F84E                            ; ---------------------------------------------------------------------------
0000F84E 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000F852 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000F856 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000F85A 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000F85E 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000F862 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000F866 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000F86A 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000F86E 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000F872 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000F876 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000F87A 01                         byte_E620:	dc.b 1
0000F87B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F880 02                         byte_E626:	dc.b 2
0000F881 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F886 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F88B 02                         byte_E631:	dc.b 2
0000F88C 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F891 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F896 03                         byte_E63C:	dc.b 3
0000F897 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F89C 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F8A1 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F8A6 03                         byte_E64C:	dc.b 3
0000F8A7 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F8AC 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F8B1 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F8B6 04                         byte_E65C:	dc.b 4
0000F8B7 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F8BC 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F8C1 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F8C6 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F8CB 04                         byte_E671:	dc.b 4
0000F8CC 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F8D1 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F8D6 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F8DB 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F8E0 05                         byte_E686:	dc.b 5
0000F8E1 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000F8E6 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F8EB 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F8F0 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F8F5 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F8FA 05                         byte_E6A0:	dc.b 5
0000F8FB F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F900 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F905 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F90A 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F90F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F914 06                         byte_E6BA:	dc.b 6
0000F915 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000F91A F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000F91F 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F924 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000F929 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F92E 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F933 06                         byte_E6D9:	dc.b 6
0000F934 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000F939 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F93E 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000F943 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F948 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F94D 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F952 01                         byte_E6F8:	dc.b 1
0000F953 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F958 02                         byte_E6FE:	dc.b 2
0000F959 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F95E 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F963 02                         byte_E709:	dc.b 2
0000F964 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F969 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F96E 03                         byte_E714:	dc.b 3
0000F96F 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F974 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F979 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F97E 03                         byte_E724:	dc.b 3
0000F97F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F984 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F989 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F98E 04                         byte_E734:	dc.b 4
0000F98F 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F994 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F999 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F99E 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F9A3 04                         byte_E749:	dc.b 4
0000F9A4 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F9A9 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F9AE 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F9B3 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F9B8 05                         byte_E75E:	dc.b 5
0000F9B9 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000F9BE 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F9C3 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F9C8 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F9CD 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F9D2 05                         byte_E778:	dc.b 5
0000F9D3 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F9D8 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F9DD 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F9E2 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F9E7 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F9EC 06                         byte_E792:	dc.b 6
0000F9ED E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000F9F2 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000F9F7 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F9FC 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000FA01 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000FA06 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000FA0B 06                         byte_E7B1:	dc.b 6
0000FA0C E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000FA11 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000FA16 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000FA1B 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000FA20 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000FA25 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000FA2A                            		even
0000FA2A                            		even
0000FA2A                            
0000FA2A                            ; ===========================================================================
0000FA2A                            ; ---------------------------------------------------------------------------
0000FA2A                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0000FA2A                            ; ---------------------------------------------------------------------------
0000FA2A                            
0000FA2A                            Obj46:					; XREF: Obj_Index
0000FA2A 7000                       		moveq	#0,d0
0000FA2C 1028 0024                  		move.b	$24(a0),d0
0000FA30 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
0000FA34 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
0000FA38                            ; ===========================================================================
0000FA38 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0000FA3A 0000                       		dc.w Obj46_Action-Obj46_Index
0000FA3C                            ; ===========================================================================
0000FA3C                            
0000FA3C                            Obj46_Main:				; XREF: Obj46_Index
0000FA3C 5428 0024                  		addq.b	#2,$24(a0)
0000FA40 117C 000F 0016             		move.b	#$F,$16(a0)
0000FA46 117C 000F 0017             		move.b	#$F,$17(a0)
0000FA4C 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
0000FA54 317C 4000 0002             		move.w	#$4000,2(a0)
0000FA5A 117C 0004 0001             		move.b	#4,1(a0)
0000FA60 117C 0003 0018             		move.b	#3,$18(a0)
0000FA66 117C 0010 0019             		move.b	#$10,$19(a0)
0000FA6C 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000FA72 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0000FA78                            
0000FA78                            Obj46_Action:				; XREF: Obj46_Index
0000FA78 4A28 0001                  		tst.b	1(a0)
0000FA7C 6A00                       		bpl.s	Obj46_ChkDel
0000FA7E 7000                       		moveq	#0,d0
0000FA80 1028 0028                  		move.b	$28(a0),d0	; get object type
0000FA84 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0000FA88 D040                       		add.w	d0,d0
0000FA8A 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0000FA8E 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
0000FA92 323C 001B                  		move.w	#$1B,d1
0000FA96 343C 0010                  		move.w	#$10,d2
0000FA9A 363C 0011                  		move.w	#$11,d3
0000FA9E 3828 0008                  		move.w	8(a0),d4
0000FAA2 6100 0000                  		bsr.w	SolidObject
0000FAA6                            
0000FAA6                            Obj46_ChkDel:
0000FAA6 6100 ECB4                  		bsr.w	DisplaySprite
0000FAAA 3028 0008                  		move.w	8(a0),d0
0000FAAE 0240 FF80                  		andi.w	#$FF80,d0
0000FAB2 3238 F700                  		move.w	($FFFFF700).w,d1
0000FAB6 0441 0080                  		subi.w	#$80,d1
0000FABA 0241 FF80                  		andi.w	#$FF80,d1
0000FABE 9041                       		sub.w	d1,d0
0000FAC0 0C40 0280                  		cmpi.w	#$280,d0
0000FAC4 6200 ECD2                  		bhi.w	DeleteObject
0000FAC8 4E75                       		rts	
0000FACA                            ; ===========================================================================
0000FACA 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0000FACC 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0000FACE 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0000FAD0 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0000FAD2 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0000FAD4                            ; ===========================================================================
0000FAD4                            
0000FAD4                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0000FAD4 4E75                       		rts	
0000FAD6                            ; ===========================================================================
0000FAD6                            
0000FAD6                            Obj46_Type02:				; XREF: Obj46_TypeIndex
0000FAD6 3038 D008                  		move.w	($FFFFD008).w,d0
0000FADA 9068 0008                  		sub.w	8(a0),d0
0000FADE 6400                       		bcc.s	loc_E888
0000FAE0 4440                       		neg.w	d0
0000FAE2                            
0000FAE2                            loc_E888:
0000FAE2 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0000FAE6 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
0000FAE8 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0000FAEE                            
0000FAEE                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0000FAEE 7000                       		moveq	#0,d0
0000FAF0 1038 FE74                  		move.b	($FFFFFE74).w,d0
0000FAF4 0828 0003 0028             		btst	#3,$28(a0)
0000FAFA 6700                       		beq.s	loc_E8A8
0000FAFC 4440                       		neg.w	d0
0000FAFE 0640 0010                  		addi.w	#$10,d0
0000FB02                            
0000FB02                            loc_E8A8:
0000FB02 3228 0030                  		move.w	$30(a0),d1
0000FB06 9240                       		sub.w	d0,d1
0000FB08 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0000FB0C 4E75                       		rts	
0000FB0E                            ; ===========================================================================
0000FB0E                            
0000FB0E                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0000FB0E 6100 EC26                  		bsr.w	SpeedToPos
0000FB12 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
0000FB18 6100 0000                  		bsr.w	ObjHitFloor
0000FB1C 4A41                       		tst.w	d1		; has the block	hit the	floor?
0000FB1E 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0000FB22 D368 000C                  		add.w	d1,$C(a0)
0000FB26 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0000FB2A 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000FB30 117C 0004 0028             		move.b	#4,$28(a0)
0000FB36 3011                       		move.w	(a1),d0
0000FB38 0240 03FF                  		andi.w	#$3FF,d0
0000FB3C 0C40 02E8                  		cmpi.w	#$2E8,d0
0000FB40 6400                       		bcc.s	locret_E8EE
0000FB42 117C 0000 0028             		move.b	#0,$28(a0)
0000FB48                            
0000FB48                            locret_E8EE:
0000FB48 4E75                       		rts	
0000FB4A                            ; ===========================================================================
0000FB4A                            
0000FB4A                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0000FB4A 7000                       		moveq	#0,d0
0000FB4C 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000FB50 E648                       		lsr.w	#3,d0
0000FB52 3228 0030                  		move.w	$30(a0),d1
0000FB56 9240                       		sub.w	d0,d1
0000FB58 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0000FB5C 4E75                       		rts	
0000FB5E                            ; ===========================================================================
0000FB5E                            ; ---------------------------------------------------------------------------
0000FB5E                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000FB5E                            ; ---------------------------------------------------------------------------
0000FB5E                            Map_obj46:
0000FB5E                            	include "_maps\obj46.asm"
0000FB5E                            ; ---------------------------------------------------------------------------
0000FB5E                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000FB5E                            ; ---------------------------------------------------------------------------
0000FB5E 0000                       		dc.w byte_E906-Map_obj46
0000FB60 01                         byte_E906:	dc.b 1
0000FB61 F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
0000FB66                            		even
0000FB66                            		even
0000FB66                            
0000FB66                            ; ===========================================================================
0000FB66                            ; ---------------------------------------------------------------------------
0000FB66                            ; Object 12 - lamp (SYZ)
0000FB66                            ; ---------------------------------------------------------------------------
0000FB66                            
0000FB66                            Obj12:					; XREF: Obj_Index
0000FB66 7000                       		moveq	#0,d0
0000FB68 1028 0024                  		move.b	$24(a0),d0
0000FB6C 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0000FB70 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
0000FB74                            ; ===========================================================================
0000FB74 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
0000FB76 0000                       		dc.w Obj12_Animate-Obj12_Index
0000FB78                            ; ===========================================================================
0000FB78                            
0000FB78                            Obj12_Main:				; XREF: Obj12_Index
0000FB78 5428 0024                  		addq.b	#2,$24(a0)
0000FB7C 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
0000FB84 317C 0000 0002             		move.w	#0,2(a0)
0000FB8A 117C 0004 0001             		move.b	#4,1(a0)
0000FB90 117C 0010 0019             		move.b	#$10,$19(a0)
0000FB96 117C 0006 0018             		move.b	#6,$18(a0)
0000FB9C                            
0000FB9C                            Obj12_Animate:				; XREF: Obj12_Index
0000FB9C 5328 001E                  		subq.b	#1,$1E(a0)
0000FBA0 6A00                       		bpl.s	Obj12_ChkDel
0000FBA2 117C 0007 001E             		move.b	#7,$1E(a0)
0000FBA8 5228 001A                  		addq.b	#1,$1A(a0)
0000FBAC 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0000FBB2 6500                       		bcs.s	Obj12_ChkDel
0000FBB4 117C 0000 001A             		move.b	#0,$1A(a0)
0000FBBA                            
0000FBBA                            Obj12_ChkDel:
0000FBBA 3028 0008                  		move.w	8(a0),d0
0000FBBE 0240 FF80                  		andi.w	#$FF80,d0
0000FBC2 3238 F700                  		move.w	($FFFFF700).w,d1
0000FBC6 0441 0080                  		subi.w	#$80,d1
0000FBCA 0241 FF80                  		andi.w	#$FF80,d1
0000FBCE 9041                       		sub.w	d1,d0
0000FBD0 0C40 0280                  		cmpi.w	#$280,d0
0000FBD4 6200 EBC2                  		bhi.w	DeleteObject
0000FBD8 6000 EB82                  		bra.w	DisplaySprite
0000FBDC                            ; ===========================================================================
0000FBDC                            ; ---------------------------------------------------------------------------
0000FBDC                            ; Sprite mappings - lamp (SYZ)
0000FBDC                            ; ---------------------------------------------------------------------------
0000FBDC                            Map_obj12:
0000FBDC                            	include "_maps\obj12.asm"
0000FBDC                            ; ---------------------------------------------------------------------------
0000FBDC                            ; Sprite mappings - lamp (SYZ)
0000FBDC                            ; ---------------------------------------------------------------------------
0000FBDC 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0000FBE0 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0000FBE4 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
0000FBE8 02                         byte_E98E:	dc.b 2
0000FBE9 F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0000FBEE 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0000FBF3 02                         byte_E999:	dc.b 2
0000FBF4 F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
0000FBF9 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0000FBFE 02                         byte_E9A4:	dc.b 2
0000FBFF F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0000FC04 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
0000FC09 02                         byte_E9AF:	dc.b 2
0000FC0A F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0000FC0F 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0000FC14 02                         byte_E9BA:	dc.b 2
0000FC15 F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0000FC1A 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0000FC1F 02                         byte_E9C5:	dc.b 2
0000FC20 F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
0000FC25 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
0000FC2A                            		even
0000FC2A                            		even
0000FC2A                            
0000FC2A                            ; ===========================================================================
0000FC2A                            ; ---------------------------------------------------------------------------
0000FC2A                            ; Object 47 - pinball bumper (SYZ)
0000FC2A                            ; ---------------------------------------------------------------------------
0000FC2A                            
0000FC2A                            Obj47:					; XREF: Obj_Index
0000FC2A 7000                       		moveq	#0,d0
0000FC2C 1028 0024                  		move.b	$24(a0),d0
0000FC30 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
0000FC34 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
0000FC38                            ; ===========================================================================
0000FC38 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
0000FC3A 0000                       		dc.w Obj47_Hit-Obj47_Index
0000FC3C                            ; ===========================================================================
0000FC3C                            
0000FC3C                            Obj47_Main:				; XREF: Obj47_Index
0000FC3C 5428 0024                  		addq.b	#2,$24(a0)
0000FC40 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
0000FC48 317C 0380 0002             		move.w	#$380,2(a0)
0000FC4E 117C 0004 0001             		move.b	#4,1(a0)
0000FC54 117C 0010 0019             		move.b	#$10,$19(a0)
0000FC5A 117C 0001 0018             		move.b	#1,$18(a0)
0000FC60 117C 00D7 0020             		move.b	#$D7,$20(a0)
0000FC66                            
0000FC66                            Obj47_Hit:				; XREF: Obj47_Index
0000FC66 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
0000FC6A 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0000FC6E 4228 0021                  		clr.b	$21(a0)
0000FC72 43F8 D000                  		lea	($FFFFD000).w,a1
0000FC76 3228 0008                  		move.w	8(a0),d1
0000FC7A 3428 000C                  		move.w	$C(a0),d2
0000FC7E 9269 0008                  		sub.w	8(a1),d1
0000FC82 9469 000C                  		sub.w	$C(a1),d2
0000FC86 4EB9 0000 3542             		jsr	(CalcAngle).l
0000FC8C 4EB9 0000 3274             		jsr	(CalcSine).l
0000FC92 C3FC F900                  		muls.w	#-$700,d1
0000FC96 E081                       		asr.l	#8,d1
0000FC98 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
0000FC9C C1FC F900                  		muls.w	#-$700,d0
0000FCA0 E080                       		asr.l	#8,d0
0000FCA2 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0000FCA6 08E9 0001 0022             		bset	#1,$22(a1)
0000FCAC 08A9 0004 0022             		bclr	#4,$22(a1)
0000FCB2 08A9 0005 0022             		bclr	#5,$22(a1)
0000FCB8 4229 003C                  		clr.b	$3C(a1)
0000FCBC 117C 0001 001C             		move.b	#1,$1C(a0)
0000FCC2 303C 00B4                  		move.w	#$B4,d0
0000FCC6 4EB9 0000 132C             		jsr	(PlaySound_Special).l ;	play bumper sound
0000FCCC 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FCD0 7000                       		moveq	#0,d0
0000FCD2 1028 0023                  		move.b	$23(a0),d0
0000FCD6 6700                       		beq.s	Obj47_Score
0000FCD8 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0000FCDE 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0000FCE0 5232 0002                  		addq.b	#1,2(a2,d0.w)
0000FCE4                            
0000FCE4                            Obj47_Score:
0000FCE4 7001                       		moveq	#1,d0
0000FCE6 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0000FCEC 6100 EEF6                  		bsr.w	SingleObjLoad
0000FCF0 6600                       		bne.s	Obj47_Display
0000FCF2 137C 0029 0000             		move.b	#$29,0(a1)	; load points object
0000FCF8 3368 0008 0008             		move.w	8(a0),8(a1)
0000FCFE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FD04 137C 0004 001A             		move.b	#4,$1A(a1)
0000FD0A                            
0000FD0A                            Obj47_Display:
0000FD0A 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0000FD10 6100 BB4E                  		bsr.w	AnimateSprite
0000FD14 3028 0008                  		move.w	8(a0),d0
0000FD18 0240 FF80                  		andi.w	#$FF80,d0
0000FD1C 3238 F700                  		move.w	($FFFFF700).w,d1
0000FD20 0441 0080                  		subi.w	#$80,d1
0000FD24 0241 FF80                  		andi.w	#$FF80,d1
0000FD28 9041                       		sub.w	d1,d0
0000FD2A 0C40 0280                  		cmpi.w	#$280,d0
0000FD2E 6200                       		bhi.s	Obj47_ChkHit
0000FD30 6000 EA2A                  		bra.w	DisplaySprite
0000FD34                            ; ===========================================================================
0000FD34                            
0000FD34                            Obj47_ChkHit:				; XREF: Obj47_Display
0000FD34 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FD38 7000                       		moveq	#0,d0
0000FD3A 1028 0023                  		move.b	$23(a0),d0
0000FD3E 6700                       		beq.s	Obj47_Delete
0000FD40 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000FD46                            
0000FD46                            Obj47_Delete:
0000FD46 6000 EA50                  		bra.w	DeleteObject
0000FD4A                            ; ===========================================================================
0000FD4A                            Ani_obj47:
0000FD4A                            	include "_anim\obj47.asm"
0000FD4A                            ; ---------------------------------------------------------------------------
0000FD4A                            ; Animation script - flamethrower (SBZ)
0000FD4A                            ; ---------------------------------------------------------------------------
0000FD4A 0000                       		dc.w byte_EAF4-Ani_obj47
0000FD4C 0000                       		dc.w byte_EAF8-Ani_obj47
0000FD4E 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0000FD52 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
0000FD5A                            		even
0000FD5A                            		even
0000FD5A                            
0000FD5A                            ; ---------------------------------------------------------------------------
0000FD5A                            ; Sprite mappings - pinball bumper (SYZ)
0000FD5A                            ; ---------------------------------------------------------------------------
0000FD5A                            Map_obj47:
0000FD5A                            	include "_maps\obj47.asm"
0000FD5A                            ; ---------------------------------------------------------------------------
0000FD5A                            ; Sprite mappings - pinball bumper (SYZ)
0000FD5A                            ; ---------------------------------------------------------------------------
0000FD5A 0000                       		dc.w byte_EB06-Map_obj47
0000FD5C 0000                       		dc.w byte_EB11-Map_obj47
0000FD5E 0000                       		dc.w byte_EB1C-Map_obj47
0000FD60 02                         byte_EB06:	dc.b 2
0000FD61 F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
0000FD66 F007 0800 00               		dc.b $F0, 7, 8,	0, 0
0000FD6B 02                         byte_EB11:	dc.b 2
0000FD6C F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0000FD71 F402 0808 04               		dc.b $F4, 2, 8,	8, 4
0000FD76 02                         byte_EB1C:	dc.b 2
0000FD77 F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
0000FD7C F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0000FD82 00                         		even
0000FD82 00                         		even
0000FD82                            
0000FD82                            ; ===========================================================================
0000FD82                            ; ---------------------------------------------------------------------------
0000FD82                            ; Object 0D - signpost at the end of a level
0000FD82                            ; ---------------------------------------------------------------------------
0000FD82                            
0000FD82                            Obj0D:					; XREF: Obj_Index
0000FD82 7000                       		moveq	#0,d0
0000FD84 1028 0024                  		move.b	$24(a0),d0
0000FD88 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
0000FD8C 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
0000FD90 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
0000FD96 6100 BAC8                  		bsr.w	AnimateSprite
0000FD9A 6100 E9C0                  		bsr.w	DisplaySprite
0000FD9E 3028 0008                  		move.w	8(a0),d0
0000FDA2 0240 FF80                  		andi.w	#$FF80,d0
0000FDA6 3238 F700                  		move.w	($FFFFF700).w,d1
0000FDAA 0441 0080                  		subi.w	#$80,d1
0000FDAE 0241 FF80                  		andi.w	#$FF80,d1
0000FDB2 9041                       		sub.w	d1,d0
0000FDB4 0C40 0280                  		cmpi.w	#$280,d0
0000FDB8 6200 E9DE                  		bhi.w	DeleteObject
0000FDBC 4E75                       		rts	
0000FDBE                            ; ===========================================================================
0000FDBE 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
0000FDC0 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0000FDC2 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0000FDC4 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0000FDC6 0000                       		dc.w locret_ED1A-Obj0D_Index
0000FDC8                            ; ===========================================================================
0000FDC8                            
0000FDC8                            Obj0D_Main:				; XREF: Obj0D_Index
0000FDC8 5428 0024                  		addq.b	#2,$24(a0)
0000FDCC 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0000FDD4 317C 0680 0002             		move.w	#$680,2(a0)
0000FDDA 117C 0004 0001             		move.b	#4,1(a0)
0000FDE0 117C 0018 0019             		move.b	#$18,$19(a0)
0000FDE6 117C 0004 0018             		move.b	#4,$18(a0)
0000FDEC                            
0000FDEC                            Obj0D_Touch:				; XREF: Obj0D_Index
0000FDEC 3038 D008                  		move.w	($FFFFD008).w,d0
0000FDF0 9068 0008                  		sub.w	8(a0),d0
0000FDF4 6500                       		bcs.s	locret_EBBA
0000FDF6 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0000FDFA 6400                       		bcc.s	locret_EBBA	; if not, branch
0000FDFC 303C 00CF                  		move.w	#$CF,d0
0000FE00 4EB9 0000 1326             		jsr	(PlaySound).l	; play signpost	sound
0000FE06 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000FE0A 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0000FE10 5428 0024                  		addq.b	#2,$24(a0)
0000FE14                            
0000FE14                            locret_EBBA:
0000FE14 4E75                       		rts	
0000FE16                            ; ===========================================================================
0000FE16                            
0000FE16                            Obj0D_Spin:				; XREF: Obj0D_Index
0000FE16 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
0000FE1A 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
0000FE1C 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0000FE22 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0000FE26 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
0000FE2C 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
0000FE2E 5428 0024                  		addq.b	#2,$24(a0)
0000FE32                            
0000FE32                            Obj0D_Sparkle:
0000FE32 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000FE36 6A00                       		bpl.s	locret_EC42	; if time remains, branch
0000FE38 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
0000FE3E 7000                       		moveq	#0,d0
0000FE40 1028 0034                  		move.b	$34(a0),d0
0000FE44 5428 0034                  		addq.b	#2,$34(a0)
0000FE48 0228 000E 0034             		andi.b	#$E,$34(a0)
0000FE4E 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0000FE52 6100 ED90                  		bsr.w	SingleObjLoad
0000FE56 6600                       		bne.s	locret_EC42
0000FE58 137C 0025 0000             		move.b	#$25,0(a1)	; load rings object
0000FE5E 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0000FE64 101A                       		move.b	(a2)+,d0
0000FE66 4880                       		ext.w	d0
0000FE68 D068 0008                  		add.w	8(a0),d0
0000FE6C 3340 0008                  		move.w	d0,8(a1)
0000FE70 101A                       		move.b	(a2)+,d0
0000FE72 4880                       		ext.w	d0
0000FE74 D068 000C                  		add.w	$C(a0),d0
0000FE78 3340 000C                  		move.w	d0,$C(a1)
0000FE7C 237C 0000 B068 0004        		move.l	#Map_obj25,4(a1)
0000FE84 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000FE8A 137C 0004 0001             		move.b	#4,1(a1)
0000FE90 137C 0002 0018             		move.b	#2,$18(a1)
0000FE96 137C 0008 0019             		move.b	#8,$19(a1)
0000FE9C                            
0000FE9C                            locret_EC42:
0000FE9C 4E75                       		rts	
0000FE9E                            ; ===========================================================================
0000FE9E E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
0000FEA0 0808                       		dc.b	8,   8
0000FEA2 F000                       		dc.b -$10,   0
0000FEA4 18F8                       		dc.b  $18,  -8
0000FEA6 00F8                       		dc.b	0,  -8
0000FEA8 1000                       		dc.b  $10,   0
0000FEAA E808                       		dc.b -$18,   8
0000FEAC 1810                       		dc.b  $18, $10
0000FEAE                            ; ===========================================================================
0000FEAE                            
0000FEAE                            Obj0D_SonicRun:				; XREF: Obj0D_Index
0000FEAE 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0000FEB2 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0000FEB6                            	;	btst	#1,($FFFFD022).w ; remove run off screen in act clear
0000FEB6                            	;	bne.s	loc_EC70
0000FEB6                            	;	move.b	#1,($FFFFF7CC).w ; lock	controls
0000FEB6                            	;	move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0000FEB6                            
0000FEB6                            ;loc_EC70:
0000FEB6                            ;		tst.b	($FFFFD000).w
0000FEB6                            ;		beq.s	loc_EC86
0000FEB6                            ;		move.w	($FFFFD008).w,d0
0000FEB6                            ;		move.w	($FFFFF72A).w,d1
0000FEB6                            ;		addi.w	#$128,d1
0000FEB6                            ;		cmp.w	d1,d0
0000FEB6                            ;		bcs.s	locret_ECEE
0000FEB6                            
0000FEB6                            ;loc_EC86:
0000FEB6                            ;		addq.b	#2,$24(a0)
0000FEB6                            
0000FEB6                            ; ---------------------------------------------------------------------------
0000FEB6                            ; Subroutine to	set up bonuses at the end of an	act
0000FEB6                            ; ---------------------------------------------------------------------------
0000FEB6                            
0000FEB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FEB6                            
0000FEB6                            
0000FEB6                            GotThroughAct:				; XREF: Obj3E_EndAct
0000FEB6 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0000FEBA 6600                       		bne.s	locret_ECEE
0000FEBC 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0000FEC2 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0000FEC6 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000FECA 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
0000FED0 7010                       		moveq	#$10,d0
0000FED2 4EB9 0000 1564             		jsr	(LoadPLC2).l	; load title card patterns
0000FED8 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0000FEDE 7000                       		moveq	#0,d0
0000FEE0 1038 FE23                  		move.b	($FFFFFE23).w,d0
0000FEE4 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0000FEE8 7200                       		moveq	#0,d1
0000FEEA 1238 FE24                  		move.b	($FFFFFE24).w,d1
0000FEEE D041                       		add.w	d1,d0		; add up your time
0000FEF0 80FC 000F                  		divu.w	#15,d0		; divide by 15
0000FEF4 7214                       		moveq	#$14,d1
0000FEF6 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0000FEF8 6500                       		bcs.s	loc_ECD0	; if not, branch
0000FEFA 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0000FEFC                            
0000FEFC                            loc_ECD0:
0000FEFC D040                       		add.w	d0,d0
0000FEFE 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0000FF04 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
0000FF08 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0000FF0C 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0000FF10 303C 008E                  		move.w	#$8E,d0
0000FF14 4EB9 0000 132C             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
0000FF1A                            
0000FF1A                            locret_ECEE:
0000FF1A 4E75                       		rts	
0000FF1C                            ; End of function GotThroughAct
0000FF1C                            
0000FF1C                            ; ===========================================================================
0000FF1C 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0000FF30 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0000FF46                            ; ===========================================================================
0000FF46                            
0000FF46                            locret_ED1A:				; XREF: Obj0D_Index
0000FF46 4E75                       		rts	
0000FF48                            ; ===========================================================================
0000FF48                            Ani_obj0D:
0000FF48                            	include "_anim\obj0D.asm"
0000FF48                            ; ---------------------------------------------------------------------------
0000FF48                            ; Animation script - signpost
0000FF48                            ; ---------------------------------------------------------------------------
0000FF48 0000                       		dc.w byte_ED24-Ani_obj0D
0000FF4A 0000                       		dc.w byte_ED28-Ani_obj0D
0000FF4C 0000                       		dc.w byte_ED2E-Ani_obj0D
0000FF4E 0000                       		dc.w byte_ED34-Ani_obj0D
0000FF50 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0000FF54 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
0000FF5A 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
0000FF60 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0000FF64 00                         		even
0000FF64 00                         		even
0000FF64                            
0000FF64                            ; ---------------------------------------------------------------------------
0000FF64                            ; Sprite mappings - signpost
0000FF64                            ; ---------------------------------------------------------------------------
0000FF64                            Map_obj0D:
0000FF64                            	include "_maps\obj0D.asm"
0000FF64                            ; ---------------------------------------------------------------------------
0000FF64                            ; Sprite mappings - signpost
0000FF64                            ; ---------------------------------------------------------------------------
0000FF64 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0000FF68 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
0000FF6C 0000                       		dc.w byte_ED73-Map_obj0D
0000FF6E 03                         byte_ED42:	dc.b 3
0000FF6F F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000FF74 F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0000FF79 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000FF7E 02                         byte_ED52:	dc.b 2
0000FF7F F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0000FF84 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000FF89 02                         byte_ED5D:	dc.b 2
0000FF8A F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0000FF8F 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000FF94 02                         byte_ED68:	dc.b 2
0000FF95 F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
0000FF9A 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000FF9F 03                         byte_ED73:	dc.b 3
0000FFA0 F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0000FFA5 F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
0000FFAA 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000FFB0 00                         		even
0000FFB0 00                         		even
0000FFB0                            
0000FFB0                            ; ===========================================================================
0000FFB0                            ; ---------------------------------------------------------------------------
0000FFB0                            ; Object 4C - lava geyser / lavafall producer (MZ)
0000FFB0                            ; ---------------------------------------------------------------------------
0000FFB0                            
0000FFB0                            Obj4C:					; XREF: Obj_Index
0000FFB0 7000                       		moveq	#0,d0
0000FFB2 1028 0024                  		move.b	$24(a0),d0
0000FFB6 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
0000FFBA 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0000FFBE 6000 0000                  		bra.w	Obj4D_ChkDel
0000FFC2                            ; ===========================================================================
0000FFC2 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0000FFC4 0000                       		dc.w loc_EDCC-Obj4C_Index
0000FFC6 0000                       		dc.w loc_EE3E-Obj4C_Index
0000FFC8 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
0000FFCA 0000                       		dc.w Obj4C_Display-Obj4C_Index
0000FFCC 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0000FFCE                            ; ===========================================================================
0000FFCE                            
0000FFCE                            Obj4C_Main:				; XREF: Obj4C_Index
0000FFCE 5428 0024                  		addq.b	#2,$24(a0)
0000FFD2 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
0000FFDA 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0000FFE0 117C 0004 0001             		move.b	#4,1(a0)
0000FFE6 117C 0001 0018             		move.b	#1,$18(a0)
0000FFEC 117C 0038 0019             		move.b	#$38,$19(a0)
0000FFF2 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
0000FFF8                            
0000FFF8                            loc_EDCC:				; XREF: Obj4C_Index
0000FFF8 5368 0032                  		subq.w	#1,$32(a0)
0000FFFC 6A00                       		bpl.s	locret_EDF0
0000FFFE 3168 0034 0032             		move.w	$34(a0),$32(a0)
00010004 3038 D00C                  		move.w	($FFFFD00C).w,d0
00010008 3228 000C                  		move.w	$C(a0),d1
0001000C B041                       		cmp.w	d1,d0
0001000E 6400                       		bcc.s	locret_EDF0
00010010 0441 0170                  		subi.w	#$170,d1
00010014 B041                       		cmp.w	d1,d0
00010016 6500                       		bcs.s	locret_EDF0
00010018 5428 0024                  		addq.b	#2,$24(a0)
0001001C                            
0001001C                            locret_EDF0:
0001001C 4E75                       		rts	
0001001E                            ; ===========================================================================
0001001E                            
0001001E                            Obj4C_MakeLava:				; XREF: Obj4C_Index
0001001E 5428 0024                  		addq.b	#2,$24(a0)
00010022 6100 EBD6                  		bsr.w	SingleObjLoad2
00010026 6600                       		bne.s	loc_EE18
00010028 137C 004D 0000             		move.b	#$4D,0(a1)	; load lavafall	object
0001002E 3368 0008 0008             		move.w	8(a0),8(a1)
00010034 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001003A 1368 0028 0028             		move.b	$28(a0),$28(a1)
00010040 2348 003C                  		move.l	a0,$3C(a1)
00010044                            
00010044                            loc_EE18:
00010044 117C 0001 001C             		move.b	#1,$1C(a0)
0001004A 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0001004E 6700                       		beq.s	Obj4C_Type00	; if yes, branch
00010050 117C 0004 001C             		move.b	#4,$1C(a0)
00010056 6000                       		bra.s	Obj4C_Display
00010058                            ; ===========================================================================
00010058                            
00010058                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
00010058 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
0001005C 08E9 0001 0022             		bset	#1,$22(a1)
00010062 337C FA80 0012             		move.w	#-$580,$12(a1)
00010068 6000                       		bra.s	Obj4C_Display
0001006A                            ; ===========================================================================
0001006A                            
0001006A                            loc_EE3E:				; XREF: Obj4C_Index
0001006A 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0001006E 6700                       		beq.s	Obj4C_Display	; if yes, branch
00010070 5428 0024                  		addq.b	#2,$24(a0)
00010074 4E75                       		rts	
00010076                            ; ===========================================================================
00010076                            
00010076                            Obj4C_Display:				; XREF: Obj4C_Index
00010076 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0001007C 6100 B7E2                  		bsr.w	AnimateSprite
00010080 6100 E6DA                  		bsr.w	DisplaySprite
00010084 4E75                       		rts	
00010086                            ; ===========================================================================
00010086                            
00010086                            Obj4C_Delete:				; XREF: Obj4C_Index
00010086 117C 0000 001C             		move.b	#0,$1C(a0)
0001008C 117C 0002 0024             		move.b	#2,$24(a0)
00010092 4A28 0028                  		tst.b	$28(a0)
00010096 6700 E700                  		beq.w	DeleteObject
0001009A 4E75                       		rts	
0001009C                            ; ===========================================================================
0001009C                            ; ---------------------------------------------------------------------------
0001009C                            ; Object 4D - lava geyser / lavafall (MZ)
0001009C                            ; ---------------------------------------------------------------------------
0001009C                            
0001009C                            Obj4D:					; XREF: Obj_Index
0001009C 7000                       		moveq	#0,d0
0001009E 1028 0024                  		move.b	$24(a0),d0
000100A2 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
000100A6 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
000100AA 6000 E6B0                  		bra.w	DisplaySprite
000100AE                            ; ===========================================================================
000100AE 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
000100B0 0000                       		dc.w Obj4D_Action-Obj4D_Index
000100B2 0000                       		dc.w loc_EFFC-Obj4D_Index
000100B4 0000                       		dc.w Obj4D_Delete-Obj4D_Index
000100B6                            
000100B6 FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
000100BA                            ; ===========================================================================
000100BA                            
000100BA                            Obj4D_Main:				; XREF: Obj4D_Index
000100BA 5428 0024                  		addq.b	#2,$24(a0)
000100BE 3168 000C 0030             		move.w	$C(a0),$30(a0)
000100C4 4A28 0028                  		tst.b	$28(a0)
000100C8 6700                       		beq.s	loc_EEA4
000100CA 0468 0250 000C             		subi.w	#$250,$C(a0)
000100D0                            
000100D0                            loc_EEA4:
000100D0 7000                       		moveq	#0,d0
000100D2 1028 0028                  		move.b	$28(a0),d0
000100D6 D040                       		add.w	d0,d0
000100D8 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
000100DE 2248                       		movea.l	a0,a1
000100E0 7201                       		moveq	#1,d1
000100E2 6100                       		bsr.s	Obj4D_MakeLava
000100E4 6000                       		bra.s	loc_EF10
000100E6                            ; ===========================================================================
000100E6                            
000100E6                            Obj4D_Loop:
000100E6 6100 EB12                  		bsr.w	SingleObjLoad2
000100EA 6600                       		bne.s	loc_EF0A
000100EC                            
000100EC                            Obj4D_MakeLava:				; XREF: Obj4D_Main
000100EC 137C 004D 0000             		move.b	#$4D,0(a1)
000100F2 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
000100FA 337C 63A8 0002             		move.w	#$63A8,2(a1)
00010100 137C 0004 0001             		move.b	#4,1(a1)
00010106 137C 0020 0019             		move.b	#$20,$19(a1)
0001010C 3368 0008 0008             		move.w	8(a0),8(a1)
00010112 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010118 1368 0028 0028             		move.b	$28(a0),$28(a1)
0001011E 137C 0001 0018             		move.b	#1,$18(a1)
00010124 137C 0005 001C             		move.b	#5,$1C(a1)
0001012A 4A28 0028                  		tst.b	$28(a0)
0001012E 6700                       		beq.s	loc_EF0A
00010130 137C 0002 001C             		move.b	#2,$1C(a1)
00010136                            
00010136                            loc_EF0A:
00010136 51C9 FFAE                  		dbf	d1,Obj4D_Loop
0001013A 4E75                       		rts	
0001013C                            ; ===========================================================================
0001013C                            
0001013C                            loc_EF10:				; XREF: Obj4D_Main
0001013C 0669 0060 000C             		addi.w	#$60,$C(a1)
00010142 3368 0030 0030             		move.w	$30(a0),$30(a1)
00010148 0669 0060 0030             		addi.w	#$60,$30(a1)
0001014E 137C 0093 0020             		move.b	#$93,$20(a1)
00010154 137C 0080 0016             		move.b	#$80,$16(a1)
0001015A 08E9 0004 0001             		bset	#4,1(a1)
00010160 5829 0024                  		addq.b	#4,$24(a1)
00010164 2348 003C                  		move.l	a0,$3C(a1)
00010168 4A28 0028                  		tst.b	$28(a0)
0001016C 6700                       		beq.s	Obj4D_PlaySnd
0001016E 7200                       		moveq	#0,d1
00010170 6100 FF74                  		bsr.w	Obj4D_Loop
00010174 5429 0024                  		addq.b	#2,$24(a1)
00010178 08E9 0004 0002             		bset	#4,2(a1)
0001017E 0669 0100 000C             		addi.w	#$100,$C(a1)
00010184 137C 0000 0018             		move.b	#0,$18(a1)
0001018A 3368 0030 0030             		move.w	$30(a0),$30(a1)
00010190 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
00010196 117C 0000 0028             		move.b	#0,$28(a0)
0001019C                            
0001019C                            Obj4D_PlaySnd:
0001019C 303C 00C8                  		move.w	#$C8,d0
000101A0 4EB9 0000 132C             		jsr	(PlaySound_Special).l ;	play flame sound
000101A6                            
000101A6                            Obj4D_Action:				; XREF: Obj4D_Index
000101A6 7000                       		moveq	#0,d0
000101A8 1028 0028                  		move.b	$28(a0),d0
000101AC D040                       		add.w	d0,d0
000101AE 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
000101B2 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
000101B6 6100 E57E                  		bsr.w	SpeedToPos
000101BA 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
000101C0 6100 B69E                  		bsr.w	AnimateSprite
000101C4                            
000101C4                            Obj4D_ChkDel:				; XREF: Obj4C
000101C4 3028 0008                  		move.w	8(a0),d0
000101C8 0240 FF80                  		andi.w	#$FF80,d0
000101CC 3238 F700                  		move.w	($FFFFF700).w,d1
000101D0 0441 0080                  		subi.w	#$80,d1
000101D4 0241 FF80                  		andi.w	#$FF80,d1
000101D8 9041                       		sub.w	d1,d0
000101DA 0C40 0280                  		cmpi.w	#$280,d0
000101DE 6200 E5B8                  		bhi.w	DeleteObject
000101E2 4E75                       		rts	
000101E4                            ; ===========================================================================
000101E4 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
000101E6 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
000101E8                            ; ===========================================================================
000101E8                            
000101E8                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
000101E8 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
000101EE 3028 0030                  		move.w	$30(a0),d0
000101F2 B068 000C                  		cmp.w	$C(a0),d0
000101F6 6400                       		bcc.s	locret_EFDA
000101F8 5828 0024                  		addq.b	#4,$24(a0)
000101FC 2268 003C                  		movea.l	$3C(a0),a1
00010200 137C 0003 001C             		move.b	#3,$1C(a1)
00010206                            
00010206                            locret_EFDA:
00010206 4E75                       		rts	
00010208                            ; ===========================================================================
00010208                            
00010208                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
00010208 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0001020E 3028 0030                  		move.w	$30(a0),d0
00010212 B068 000C                  		cmp.w	$C(a0),d0
00010216 6400                       		bcc.s	locret_EFFA
00010218 5828 0024                  		addq.b	#4,$24(a0)
0001021C 2268 003C                  		movea.l	$3C(a0),a1
00010220 137C 0001 001C             		move.b	#1,$1C(a1)
00010226                            
00010226                            locret_EFFA:
00010226 4E75                       		rts	
00010228                            ; ===========================================================================
00010228                            
00010228                            loc_EFFC:				; XREF: Obj4D_Index
00010228 2268 003C                  		movea.l	$3C(a0),a1
0001022C 0C29 0006 0024             		cmpi.b	#6,$24(a1)
00010232 6700 0000                  		beq.w	Obj4D_Delete
00010236 3029 000C                  		move.w	$C(a1),d0
0001023A 0640 0060                  		addi.w	#$60,d0
0001023E 3140 000C                  		move.w	d0,$C(a0)
00010242 9068 0030                  		sub.w	$30(a0),d0
00010246 4440                       		neg.w	d0
00010248 7208                       		moveq	#8,d1
0001024A 0C40 0040                  		cmpi.w	#$40,d0
0001024E 6C00                       		bge.s	loc_F026
00010250 720B                       		moveq	#$B,d1
00010252                            
00010252                            loc_F026:
00010252 0C40 0080                  		cmpi.w	#$80,d0
00010256 6F00                       		ble.s	loc_F02E
00010258 720E                       		moveq	#$E,d1
0001025A                            
0001025A                            loc_F02E:
0001025A 5328 001E                  		subq.b	#1,$1E(a0)
0001025E 6A00                       		bpl.s	loc_F04C
00010260 117C 0007 001E             		move.b	#7,$1E(a0)
00010266 5228 001B                  		addq.b	#1,$1B(a0)
0001026A 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
00010270 6500                       		bcs.s	loc_F04C
00010272 117C 0000 001B             		move.b	#0,$1B(a0)
00010278                            
00010278                            loc_F04C:
00010278 1028 001B                  		move.b	$1B(a0),d0
0001027C D001                       		add.b	d1,d0
0001027E 1140 001A                  		move.b	d0,$1A(a0)
00010282 6000 FF40                  		bra.w	Obj4D_ChkDel
00010286                            ; ===========================================================================
00010286                            
00010286                            Obj4D_Delete:				; XREF: Obj4D_Index
00010286 6000 E510                  		bra.w	DeleteObject
0001028A                            ; ===========================================================================
0001028A                            ; ---------------------------------------------------------------------------
0001028A                            ; Object 4E - advancing	wall of	lava (MZ)
0001028A                            ; ---------------------------------------------------------------------------
0001028A                            
0001028A                            Obj4E:					; XREF: Obj_Index
0001028A 7000                       		moveq	#0,d0
0001028C 1028 0024                  		move.b	$24(a0),d0
00010290 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
00010294 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
00010298                            ; ===========================================================================
00010298 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
0001029A 0000                       		dc.w Obj4E_Solid-Obj4E_Index
0001029C 0000                       		dc.w Obj4E_Action-Obj4E_Index
0001029E 0000                       		dc.w Obj4E_Move2-Obj4E_Index
000102A0 0000                       		dc.w Obj4E_Delete-Obj4E_Index
000102A2                            ; ===========================================================================
000102A2                            
000102A2                            Obj4E_Main:				; XREF: Obj4E_Index
000102A2 5828 0024                  		addq.b	#4,$24(a0)
000102A6 2248                       		movea.l	a0,a1
000102A8 7201                       		moveq	#1,d1
000102AA 6000                       		bra.s	Obj4E_Main2
000102AC                            ; ===========================================================================
000102AC                            
000102AC                            Obj4E_Loop:
000102AC 6100 E94C                  		bsr.w	SingleObjLoad2
000102B0 6600                       		bne.s	loc_F0C8
000102B2                            
000102B2                            Obj4E_Main2:				; XREF: Obj4E_Main
000102B2 137C 004E 0000             		move.b	#$4E,0(a1)	; load object
000102B8 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
000102C0 337C 63A8 0002             		move.w	#$63A8,2(a1)
000102C6 137C 0004 0001             		move.b	#4,1(a1)
000102CC 137C 0050 0019             		move.b	#$50,$19(a1)
000102D2 3368 0008 0008             		move.w	8(a0),8(a1)
000102D8 3368 000C 000C             		move.w	$C(a0),$C(a1)
000102DE 137C 0001 0018             		move.b	#1,$18(a1)
000102E4 137C 0000 001C             		move.b	#0,$1C(a1)
000102EA 137C 0094 0020             		move.b	#$94,$20(a1)
000102F0 2348 003C                  		move.l	a0,$3C(a1)
000102F4                            
000102F4                            loc_F0C8:
000102F4 51C9 FFB6                  		dbf	d1,Obj4E_Loop	; repeat sequence once
000102F8                            
000102F8 5C29 0024                  		addq.b	#6,$24(a1)
000102FC 137C 0004 001A             		move.b	#4,$1A(a1)
00010302                            
00010302                            Obj4E_Action:				; XREF: Obj4E_Index
00010302 3038 D008                  		move.w	($FFFFD008).w,d0
00010306 9068 0008                  		sub.w	8(a0),d0
0001030A 6400                       		bcc.s	Obj4E_ChkSonic
0001030C 4440                       		neg.w	d0
0001030E                            
0001030E                            Obj4E_ChkSonic:
0001030E 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
00010312 6400                       		bcc.s	Obj4E_Move	; if not, branch
00010314 3038 D00C                  		move.w	($FFFFD00C).w,d0
00010318 9068 000C                  		sub.w	$C(a0),d0
0001031C 6400                       		bcc.s	loc_F0F4
0001031E 4440                       		neg.w	d0
00010320                            
00010320                            loc_F0F4:
00010320 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
00010324 6400                       		bcc.s	Obj4E_Move	; if not, branch
00010326 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
0001032C 6000                       		bra.s	Obj4E_Solid
0001032E                            ; ===========================================================================
0001032E                            
0001032E                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
0001032E 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
00010332 6700                       		beq.s	Obj4E_Solid	; if not, branch
00010334 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
0001033A 5528 0024                  		subq.b	#2,$24(a0)
0001033E                            
0001033E                            Obj4E_Solid:				; XREF: Obj4E_Index
0001033E 323C 002B                  		move.w	#$2B,d1
00010342 343C 0018                  		move.w	#$18,d2
00010346 3602                       		move.w	d2,d3
00010348 5243                       		addq.w	#1,d3
0001034A 3828 0008                  		move.w	8(a0),d4
0001034E 1028 0024                  		move.b	$24(a0),d0
00010352 3F00                       		move.w	d0,-(sp)
00010354 6100 0000                  		bsr.w	SolidObject
00010358 301F                       		move.w	(sp)+,d0
0001035A 1140 0024                  		move.b	d0,$24(a0)
0001035E 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
00010364 6600                       		bne.s	Obj4E_Animate	; if not, branch
00010366 4268 0010                  		clr.w	$10(a0)		; stop object moving
0001036A 4228 0036                  		clr.b	$36(a0)
0001036E                            
0001036E                            Obj4E_Animate:
0001036E 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
00010374 6100 B4EA                  		bsr.w	AnimateSprite
00010378 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001037E 6400                       		bcc.s	Obj4E_ChkDel
00010380 6100 E3B4                  		bsr.w	SpeedToPos
00010384                            
00010384                            Obj4E_ChkDel:
00010384 6100 E3D6                  		bsr.w	DisplaySprite
00010388 4A28 0036                  		tst.b	$36(a0)
0001038C 6600                       		bne.s	locret_F17E
0001038E 3028 0008                  		move.w	8(a0),d0
00010392 0240 FF80                  		andi.w	#$FF80,d0
00010396 3238 F700                  		move.w	($FFFFF700).w,d1
0001039A 0441 0080                  		subi.w	#$80,d1
0001039E 0241 FF80                  		andi.w	#$FF80,d1
000103A2 9041                       		sub.w	d1,d0
000103A4 0C40 0280                  		cmpi.w	#$280,d0
000103A8 6200                       		bhi.s	Obj4E_ChkGone
000103AA                            
000103AA                            locret_F17E:
000103AA 4E75                       		rts	
000103AC                            ; ===========================================================================
000103AC                            
000103AC                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
000103AC 45F8 FC00                  		lea	($FFFFFC00).w,a2
000103B0 7000                       		moveq	#0,d0
000103B2 1028 0023                  		move.b	$23(a0),d0
000103B6 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000103BC 117C 0008 0024             		move.b	#8,$24(a0)
000103C2 4E75                       		rts	
000103C4                            ; ===========================================================================
000103C4                            
000103C4                            Obj4E_Move2:				; XREF: Obj4E_Index
000103C4 2268 003C                  		movea.l	$3C(a0),a1
000103C8 0C29 0008 0024             		cmpi.b	#8,$24(a1)
000103CE 6700                       		beq.s	Obj4E_Delete
000103D0 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
000103D6 0468 0080 0008             		subi.w	#$80,8(a0)
000103DC 6000 E37E                  		bra.w	DisplaySprite
000103E0                            ; ===========================================================================
000103E0                            
000103E0                            Obj4E_Delete:				; XREF: Obj4E_Index
000103E0 6000 E3B6                  		bra.w	DeleteObject
000103E4                            ; ===========================================================================
000103E4                            ; ---------------------------------------------------------------------------
000103E4                            ; Object 54 - invisible	lava tag (MZ)
000103E4                            ; ---------------------------------------------------------------------------
000103E4                            
000103E4                            Obj54:					; XREF: Obj_Index
000103E4 7000                       		moveq	#0,d0
000103E6 1028 0024                  		move.b	$24(a0),d0
000103EA 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
000103EE 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
000103F2                            ; ===========================================================================
000103F2 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
000103F4 0000                       		dc.w Obj54_ChkDel-Obj54_Index
000103F6                            
000103F6 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
000103FA                            ; ===========================================================================
000103FA                            
000103FA                            Obj54_Main:				; XREF: Obj54_Index
000103FA 5428 0024                  		addq.b	#2,$24(a0)
000103FE 7000                       		moveq	#0,d0
00010400 1028 0028                  		move.b	$28(a0),d0
00010404 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
0001040A 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
00010412 117C 0084 0001             		move.b	#$84,1(a0)
00010418                            
00010418                            Obj54_ChkDel:				; XREF: Obj54_Index
00010418 3028 0008                  		move.w	8(a0),d0
0001041C 0240 FF80                  		andi.w	#$FF80,d0
00010420 3238 F700                  		move.w	($FFFFF700).w,d1
00010424 0441 0080                  		subi.w	#$80,d1
00010428 0241 FF80                  		andi.w	#$FF80,d1
0001042C 9041                       		sub.w	d1,d0
0001042E 6B00 E368                  		bmi.w	DeleteObject
00010432 0C40 0280                  		cmpi.w	#$280,d0
00010436 6200 E360                  		bhi.w	DeleteObject
0001043A 4E75                       		rts	
0001043C                            ; ===========================================================================
0001043C                            ; ---------------------------------------------------------------------------
0001043C                            ; Sprite mappings - invisible lava tag (MZ)
0001043C                            ; ---------------------------------------------------------------------------
0001043C                            Map_obj54:
0001043C                            	include "_maps\obj54.asm"
0001043C                            ; ---------------------------------------------------------------------------
0001043C                            ; Sprite mappings - invisible lava tag (MZ)
0001043C                            ; ---------------------------------------------------------------------------
0001043C 0000                       		dc.w byte_F212-Map_obj54
0001043E 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
00010440 00                         		even
00010440 00                         		even
00010440                            
00010440                            Ani_obj4C:
00010440                            	include "_anim\obj4C.asm"
00010440                            ; ---------------------------------------------------------------------------
00010440                            ; Animation script - geyser of lava (MZ)
00010440                            ; ---------------------------------------------------------------------------
00010440 0000                       		dc.w byte_F220-Ani_obj4C
00010442 0000                       		dc.w byte_F22A-Ani_obj4C
00010444 0000                       		dc.w byte_F22E-Ani_obj4C
00010446 0000                       		dc.w byte_F232-Ani_obj4C
00010448 0000                       		dc.w byte_F23A-Ani_obj4C
0001044A 0000                       		dc.w byte_F23E-Ani_obj4C
0001044C 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
00010456 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
0001045A 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
0001045E 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
00010466 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
0001046A 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
0001046E                            		even
0001046E                            		even
0001046E                            
0001046E                            Ani_obj4E:
0001046E                            	include "_anim\obj4E.asm"
0001046E                            ; ---------------------------------------------------------------------------
0001046E                            ; Animation script - advancing wall of lava (MZ)
0001046E                            ; ---------------------------------------------------------------------------
0001046E 0000                       		dc.w byte_F244-Ani_obj4E
00010470 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
00010476                            		even
00010476                            		even
00010476                            
00010476                            ; ---------------------------------------------------------------------------
00010476                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
00010476                            ; ---------------------------------------------------------------------------
00010476                            Map_obj4C:
00010476                            	include "_maps\obj4C.asm"
00010476                            ; ---------------------------------------------------------------------------
00010476                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
00010476                            ; ---------------------------------------------------------------------------
00010476 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
0001047A 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
0001047E 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
00010482 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
00010486 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
0001048A 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
0001048E 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
00010492 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
00010496 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
0001049A 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
0001049E 02                         byte_F272:	dc.b 2
0001049F EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
000104A4 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
000104A9 02                         byte_F27D:	dc.b 2
000104AA EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
000104AF EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
000104B4 04                         byte_F288:	dc.b 4
000104B5 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
000104BA F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
000104BF F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
000104C4 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
000104C9 04                         byte_F29D:	dc.b 4
000104CA EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
000104CF F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
000104D4 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
000104D9 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
000104DE 06                         byte_F2B2:	dc.b 6
000104DF EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
000104E4 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
000104E9 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
000104EE EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
000104F3 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
000104F8 E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
000104FD 06                         byte_F2D1:	dc.b 6
000104FE EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
00010503 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
00010508 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0001050D EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
00010512 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
00010517 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0001051C 02                         byte_F2F0:	dc.b 2
0001051D E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
00010522 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
00010527 02                         byte_F2FB:	dc.b 2
00010528 E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0001052D E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
00010532 0A                         byte_F306:	dc.b $A
00010533 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00010538 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0001053D B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00010542 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00010547 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0001054C D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00010551 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
00010556 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0001055B 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
00010560 100F 0840 00               		dc.b $10, $F, 8, $40, 0
00010565 0A                         byte_F339:	dc.b $A
00010566 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0001056B 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00010570 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00010575 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0001057A D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0001057F D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00010584 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
00010589 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0001058E 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
00010593 100F 0850 00               		dc.b $10, $F, 8, $50, 0
00010598 0A                         byte_F36C:	dc.b $A
00010599 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0001059E 900F 0860 00               		dc.b $90, $F, 8, $60, 0
000105A3 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
000105A8 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
000105AD D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
000105B2 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
000105B7 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
000105BC F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
000105C1 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
000105C6 100F 0860 00               		dc.b $10, $F, 8, $60, 0
000105CB 06                         byte_F39F:	dc.b 6
000105CC 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
000105D1 900F 0840 00               		dc.b $90, $F, 8, $40, 0
000105D6 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
000105DB B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
000105E0 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
000105E5 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
000105EA 06                         byte_F3BE:	dc.b 6
000105EB 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
000105F0 900F 0850 00               		dc.b $90, $F, 8, $50, 0
000105F5 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
000105FA B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
000105FF D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00010604 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00010609 06                         byte_F3DD:	dc.b 6
0001060A 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0001060F 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00010614 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00010619 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0001061E D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00010623 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00010628 10                         byte_F3FC:	dc.b $10
00010629 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0001062E 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00010633 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00010638 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0001063D D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00010642 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00010647 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0001064C F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
00010651 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
00010656 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0001065B 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
00010660 300F 0840 00               		dc.b $30, $F, 8, $40, 0
00010665 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0001066A 500F 0840 00               		dc.b $50, $F, 8, $40, 0
0001066F 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
00010674 700F 0840 00               		dc.b $70, $F, 8, $40, 0
00010679 10                         byte_F44D:	dc.b $10
0001067A 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0001067F 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00010684 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00010689 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0001068E D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00010693 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00010698 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0001069D F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
000106A2 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
000106A7 100F 0850 00               		dc.b $10, $F, 8, $50, 0
000106AC 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
000106B1 300F 0850 00               		dc.b $30, $F, 8, $50, 0
000106B6 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
000106BB 500F 0850 00               		dc.b $50, $F, 8, $50, 0
000106C0 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
000106C5 700F 0850 00               		dc.b $70, $F, 8, $50, 0
000106CA 10                         byte_F49E:	dc.b $10
000106CB 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
000106D0 900F 0860 00               		dc.b $90, $F, 8, $60, 0
000106D5 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
000106DA B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
000106DF D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
000106E4 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
000106E9 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
000106EE F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
000106F3 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
000106F8 100F 0860 00               		dc.b $10, $F, 8, $60, 0
000106FD 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
00010702 300F 0860 00               		dc.b $30, $F, 8, $60, 0
00010707 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
0001070C 500F 0860 00               		dc.b $50, $F, 8, $60, 0
00010711 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
00010716 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0001071B 06                         byte_F4EF:	dc.b 6
0001071C E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
00010721 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
00010726 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0001072B E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
00010730 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
00010735 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
0001073A 06                         byte_F50E:	dc.b 6
0001073B E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
00010740 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
00010745 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
0001074A E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
0001074F D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
00010754 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
00010759 00                         byte_F52D:	dc.b 0
0001075A                            		even
0001075A                            		even
0001075A                            
0001075A                            ; ---------------------------------------------------------------------------
0001075A                            ; Sprite mappings - advancing wall of lava (MZ)
0001075A                            ; ---------------------------------------------------------------------------
0001075A                            Map_obj4E:
0001075A                            	include "_maps\obj4E.asm"
0001075A                            ; ---------------------------------------------------------------------------
0001075A                            ; Sprite mappings - advancing wall of lava (MZ)
0001075A                            ; ---------------------------------------------------------------------------
0001075A 0000                       		dc.w byte_F538-Map_obj4E
0001075C 0000                       		dc.w byte_F566-Map_obj4E
0001075E 0000                       		dc.w byte_F594-Map_obj4E
00010760 0000                       		dc.w byte_F5C2-Map_obj4E
00010762 0000                       		dc.w byte_F5F0-Map_obj4E
00010764 09                         byte_F538:	dc.b 9
00010765 E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
0001076A 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0001076F 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010774 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010779 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0001077E E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010783 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010788 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0001078D 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010792 09                         byte_F566:	dc.b 9
00010793 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
00010798 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
0001079D 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
000107A2 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
000107A7 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
000107AC E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
000107B1 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
000107B6 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
000107BB 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
000107C0 09                         byte_F594:	dc.b 9
000107C1 E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
000107C6 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
000107CB 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
000107D0 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
000107D5 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
000107DA E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
000107DF 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
000107E4 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
000107E9 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
000107EE 09                         byte_F5C2:	dc.b 9
000107EF E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
000107F4 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
000107F9 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
000107FE E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010803 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010808 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0001080D 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010812 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010817 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0001081C 08                         byte_F5F0:	dc.b 8
0001081D E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
00010822 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010827 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0001082C 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010831 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010836 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0001083B E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010840 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010846 00                         		even
00010846 00                         		even
00010846                            
00010846                            ; ===========================================================================
00010846                            ; ---------------------------------------------------------------------------
00010846                            ; Object 40 - Moto Bug enemy (GHZ)
00010846                            ; ---------------------------------------------------------------------------
00010846                            
00010846                            Obj40:					; XREF: Obj_Index
00010846 7000                       		moveq	#0,d0
00010848 1028 0024                  		move.b	$24(a0),d0
0001084C 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
00010850 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
00010854                            ; ===========================================================================
00010854 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
00010856 0000                       		dc.w Obj40_Action-Obj40_Index
00010858 0000                       		dc.w Obj40_Animate-Obj40_Index
0001085A 0000                       		dc.w Obj40_Delete-Obj40_Index
0001085C                            ; ===========================================================================
0001085C                            
0001085C                            Obj40_Main:				; XREF: Obj40_Index
0001085C 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
00010864 317C 04F0 0002             		move.w	#$4F0,2(a0)
0001086A 117C 0004 0001             		move.b	#4,1(a0)
00010870 117C 0004 0018             		move.b	#4,$18(a0)
00010876 117C 0014 0019             		move.b	#$14,$19(a0)
0001087C 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
00010880 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
00010882 117C 000E 0016             		move.b	#$E,$16(a0)
00010888 117C 0008 0017             		move.b	#8,$17(a0)
0001088E 117C 000C 0020             		move.b	#$C,$20(a0)
00010894 6100 DE74                  		bsr.w	ObjectFall
00010898 4EB9 0000 0000             		jsr	ObjHitFloor
0001089E 4A41                       		tst.w	d1
000108A0 6A00                       		bpl.s	locret_F68A
000108A2 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
000108A6 317C 0000 0012             		move.w	#0,$12(a0)
000108AC 5428 0024                  		addq.b	#2,$24(a0)
000108B0 0868 0000 0022             		bchg	#0,$22(a0)
000108B6                            
000108B6                            locret_F68A:
000108B6 4E75                       		rts	
000108B8                            ; ===========================================================================
000108B8                            
000108B8                            Obj40_SetSmoke:				; XREF: Obj40_Main
000108B8 5828 0024                  		addq.b	#4,$24(a0)
000108BC 6000 0000                  		bra.w	Obj40_Animate
000108C0                            ; ===========================================================================
000108C0                            
000108C0                            Obj40_Action:				; XREF: Obj40_Index
000108C0 7000                       		moveq	#0,d0
000108C2 1028 0025                  		move.b	$25(a0),d0
000108C6 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
000108CA 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
000108CE 43F9 0000 0000             		lea	(Ani_obj40).l,a1
000108D4 6100 AF8A                  		bsr.w	AnimateSprite
000108D8                            
000108D8                            ; ---------------------------------------------------------------------------
000108D8                            ; Routine to mark an enemy/monitor/ring	as destroyed
000108D8                            ; ---------------------------------------------------------------------------
000108D8                            
000108D8                            MarkObjGone:
000108D8 3028 0008                  		move.w	8(a0),d0
000108DC 0240 FF80                  		andi.w	#$FF80,d0
000108E0 3238 F700                  		move.w	($FFFFF700).w,d1
000108E4 0441 0080                  		subi.w	#$80,d1
000108E8 0241 FF80                  		andi.w	#$FF80,d1
000108EC 9041                       		sub.w	d1,d0
000108EE 0C40 0280                  		cmpi.w	#$280,d0
000108F2 6200 0000                  		bhi.w	Mark_ChkGone
000108F6 6000 DE64                  		bra.w	DisplaySprite
000108FA                            ; ===========================================================================
000108FA                            
000108FA                            Mark_ChkGone:
000108FA 45F8 FC00                  		lea	($FFFFFC00).w,a2
000108FE 7000                       		moveq	#0,d0
00010900 1028 0023                  		move.b	$23(a0),d0
00010904 6700                       		beq.s	Mark_Delete
00010906 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001090C                            
0001090C                            Mark_Delete:
0001090C 6000 DE8A                  		bra.w	DeleteObject
00010910                            
00010910                            ; ===========================================================================
00010910 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
00010912 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
00010914                            ; ===========================================================================
00010914                            
00010914                            Obj40_Move:				; XREF: Obj40_Index2
00010914 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
00010918 6A00                       		bpl.s	locret_F70A	; if time remains, branch
0001091A 5428 0025                  		addq.b	#2,$25(a0)
0001091E 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
00010924 117C 0001 001C             		move.b	#1,$1C(a0)
0001092A 0868 0000 0022             		bchg	#0,$22(a0)
00010930 6600                       		bne.s	locret_F70A
00010932 4468 0010                  		neg.w	$10(a0)		; change direction
00010936                            
00010936                            locret_F70A:
00010936 4E75                       		rts	
00010938                            ; ===========================================================================
00010938                            
00010938                            Obj40_FixToFloor:			; XREF: Obj40_Index2
00010938 6100 DDFC                  		bsr.w	SpeedToPos
0001093C 4EB9 0000 0000             		jsr	ObjHitFloor
00010942 0C41 FFF8                  		cmpi.w	#-8,d1
00010946 6D00                       		blt.s	Obj40_Pause
00010948 0C41 000C                  		cmpi.w	#$C,d1
0001094C 6C00                       		bge.s	Obj40_Pause
0001094E D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00010952 5328 0033                  		subq.b	#1,$33(a0)
00010956 6A00                       		bpl.s	locret_F756
00010958 117C 000F 0033             		move.b	#$F,$33(a0)
0001095E 6100 E284                  		bsr.w	SingleObjLoad
00010962 6600                       		bne.s	locret_F756
00010964 137C 0040 0000             		move.b	#$40,0(a1)	; load exhaust smoke object
0001096A 3368 0008 0008             		move.w	8(a0),8(a1)
00010970 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010976 1368 0022 0022             		move.b	$22(a0),$22(a1)
0001097C 137C 0002 001C             		move.b	#2,$1C(a1)
00010982                            
00010982                            locret_F756:
00010982 4E75                       		rts	
00010984                            ; ===========================================================================
00010984                            
00010984                            Obj40_Pause:				; XREF: Obj40_FixToFloor
00010984 5528 0025                  		subq.b	#2,$25(a0)
00010988 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0001098E 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
00010994 117C 0000 001C             		move.b	#0,$1C(a0)
0001099A 4E75                       		rts	
0001099C                            ; ===========================================================================
0001099C                            
0001099C                            Obj40_Animate:				; XREF: Obj40_Index
0001099C 43F9 0000 0000             		lea	(Ani_obj40).l,a1
000109A2 6100 AEBC                  		bsr.w	AnimateSprite
000109A6 6000 DDB4                  		bra.w	DisplaySprite
000109AA                            ; ===========================================================================
000109AA                            
000109AA                            Obj40_Delete:				; XREF: Obj40_Index
000109AA 6000 DDEC                  		bra.w	DeleteObject
000109AE                            ; ===========================================================================
000109AE                            Ani_obj40:
000109AE                            	include "_anim\obj40.asm"
000109AE                            ; ---------------------------------------------------------------------------
000109AE                            ; Animation script - Motobug enemy
000109AE                            ; ---------------------------------------------------------------------------
000109AE 0000                       		dc.w byte_F788-Ani_obj40
000109B0 0000                       		dc.w byte_F78C-Ani_obj40
000109B2 0000                       		dc.w byte_F792-Ani_obj40
000109B4 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
000109B8 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
000109BE 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
000109CC                            		even
000109CC                            		even
000109CC                            
000109CC                            ; ---------------------------------------------------------------------------
000109CC                            ; Sprite mappings - Moto Bug enemy (GHZ)
000109CC                            ; ---------------------------------------------------------------------------
000109CC                            Map_obj40:
000109CC                            	include "_maps\obj40.asm"
000109CC                            ; ---------------------------------------------------------------------------
000109CC                            ; Sprite mappings - Moto Bug enemy (GHZ)
000109CC                            ; ---------------------------------------------------------------------------
000109CC 0000 0000                  		dc.w byte_F7AE-Map_obj40, byte_F7C3-Map_obj40
000109D0 0000 0000                  		dc.w byte_F7D8-Map_obj40, byte_F7F2-Map_obj40
000109D4 0000 0000                  		dc.w byte_F7F8-Map_obj40, byte_F7FE-Map_obj40
000109D8 0000                       		dc.w byte_F804-Map_obj40
000109DA 04                         byte_F7AE:	dc.b 4
000109DB F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
000109E0 000C 0008 EC               		dc.b 0,	$C, 0, 8, $EC
000109E5 F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
000109EA 0808 000E F4               		dc.b 8,	8, 0, $E, $F4
000109EF 04                         byte_F7C3:	dc.b 4
000109F0 F10D 0000 EC               		dc.b $F1, $D, 0, 0, $EC
000109F5 010C 0008 EC               		dc.b 1,	$C, 0, 8, $EC
000109FA F901 000C 0C               		dc.b $F9, 1, 0,	$C, $C
000109FF 0908 0011 F4               		dc.b 9,	8, 0, $11, $F4
00010A04 05                         byte_F7D8:	dc.b 5
00010A05 F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
00010A0A 000C 0014 EC               		dc.b 0,	$C, 0, $14, $EC
00010A0F F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
00010A14 0804 0018 EC               		dc.b 8,	4, 0, $18, $EC
00010A19 0804 0012 FC               		dc.b 8,	4, 0, $12, $FC
00010A1E 01                         byte_F7F2:	dc.b 1
00010A1F FA00 001A 10               		dc.b $FA, 0, 0,	$1A, $10
00010A24 01                         byte_F7F8:	dc.b 1
00010A25 FA00 001B 10               		dc.b $FA, 0, 0,	$1B, $10
00010A2A 01                         byte_F7FE:	dc.b 1
00010A2B FA00 001C 10               		dc.b $FA, 0, 0,	$1C, $10
00010A30 00                         byte_F804:	dc.b 0
00010A32 00                         		even
00010A32 00                         		even
00010A32                            
00010A32                            ; ===========================================================================
00010A32                            ; ---------------------------------------------------------------------------
00010A32                            ; Object 4F - blank
00010A32                            ; ---------------------------------------------------------------------------
00010A32                            
00010A32                            Obj4F:					; XREF: Obj_Index
00010A32 4E75                       		rts	
00010A34                            
00010A34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010A34                            
00010A34                            
00010A34                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
00010A34 3038 FE04                  		move.w	($FFFFFE04).w,d0
00010A38 D047                       		add.w	d7,d0
00010A3A 0240 0003                  		andi.w	#3,d0
00010A3E 6600                       		bne.s	loc_F836
00010A40 7600                       		moveq	#0,d3
00010A42 1628 0019                  		move.b	$19(a0),d3
00010A46 4A68 0010                  		tst.w	$10(a0)
00010A4A 6B00                       		bmi.s	loc_F82C
00010A4C 6100 0000                  		bsr.w	ObjHitWallRight
00010A50 4A41                       		tst.w	d1
00010A52 6A00                       		bpl.s	loc_F836
00010A54                            
00010A54                            loc_F828:
00010A54 7001                       		moveq	#1,d0
00010A56 4E75                       		rts	
00010A58                            ; ===========================================================================
00010A58                            
00010A58                            loc_F82C:
00010A58 4643                       		not.w	d3
00010A5A 6100 0000                  		bsr.w	ObjHitWallLeft
00010A5E 4A41                       		tst.w	d1
00010A60 6BF2                       		bmi.s	loc_F828
00010A62                            
00010A62                            loc_F836:
00010A62 7000                       		moveq	#0,d0
00010A64 4E75                       		rts	
00010A66                            ; End of function Obj50_ChkWall
00010A66                            
00010A66                            ; ===========================================================================
00010A66                            ; ---------------------------------------------------------------------------
00010A66                            ; Object 50 - Yadrin enemy (SYZ)
00010A66                            ; ---------------------------------------------------------------------------
00010A66                            
00010A66                            Obj50:					; XREF: Obj_Index
00010A66 7000                       		moveq	#0,d0
00010A68 1028 0024                  		move.b	$24(a0),d0
00010A6C 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
00010A70 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
00010A74                            ; ===========================================================================
00010A74 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
00010A76 0000                       		dc.w Obj50_Action-Obj50_Index
00010A78                            ; ===========================================================================
00010A78                            
00010A78                            Obj50_Main:				; XREF: Obj50_Index
00010A78 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
00010A80 317C 247B 0002             		move.w	#$247B,2(a0)
00010A86 117C 0004 0001             		move.b	#4,1(a0)
00010A8C 117C 0004 0018             		move.b	#4,$18(a0)
00010A92 117C 0014 0019             		move.b	#$14,$19(a0)
00010A98 117C 0011 0016             		move.b	#$11,$16(a0)
00010A9E 117C 0008 0017             		move.b	#8,$17(a0)
00010AA4 117C 00CC 0020             		move.b	#$CC,$20(a0)
00010AAA 6100 DC5E                  		bsr.w	ObjectFall
00010AAE 6100 0000                  		bsr.w	ObjHitFloor
00010AB2 4A41                       		tst.w	d1
00010AB4 6A00                       		bpl.s	locret_F89E
00010AB6 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00010ABA 317C 0000 0012             		move.w	#0,$12(a0)
00010AC0 5428 0024                  		addq.b	#2,$24(a0)
00010AC4 0868 0000 0022             		bchg	#0,$22(a0)
00010ACA                            
00010ACA                            locret_F89E:
00010ACA 4E75                       		rts	
00010ACC                            ; ===========================================================================
00010ACC                            
00010ACC                            Obj50_Action:				; XREF: Obj50_Index
00010ACC 7000                       		moveq	#0,d0
00010ACE 1028 0025                  		move.b	$25(a0),d0
00010AD2 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
00010AD6 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
00010ADA 43F9 0000 0000             		lea	(Ani_obj50).l,a1
00010AE0 6100 AD7E                  		bsr.w	AnimateSprite
00010AE4 6000 FDF2                  		bra.w	MarkObjGone
00010AE8                            ; ===========================================================================
00010AE8 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
00010AEA 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
00010AEC                            ; ===========================================================================
00010AEC                            
00010AEC                            Obj50_Move:				; XREF: Obj50_Index2
00010AEC 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
00010AF0 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
00010AF2 5428 0025                  		addq.b	#2,$25(a0)
00010AF6 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
00010AFC 117C 0001 001C             		move.b	#1,$1C(a0)
00010B02 0868 0000 0022             		bchg	#0,$22(a0)
00010B08 6600                       		bne.s	locret_F8E2
00010B0A 4468 0010                  		neg.w	$10(a0)		; change direction
00010B0E                            
00010B0E                            locret_F8E2:
00010B0E 4E75                       		rts	
00010B10                            ; ===========================================================================
00010B10                            
00010B10                            Obj50_FixToFloor:			; XREF: Obj50_Index2
00010B10 6100 DC24                  		bsr.w	SpeedToPos
00010B14 6100 0000                  		bsr.w	ObjHitFloor
00010B18 0C41 FFF8                  		cmpi.w	#-8,d1
00010B1C 6D00                       		blt.s	Obj50_Pause
00010B1E 0C41 000C                  		cmpi.w	#$C,d1
00010B22 6C00                       		bge.s	Obj50_Pause
00010B24 D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
00010B28 6100 FF0A                  		bsr.w	Obj50_ChkWall
00010B2C 6600                       		bne.s	Obj50_Pause
00010B2E 4E75                       		rts	
00010B30                            ; ===========================================================================
00010B30                            
00010B30                            Obj50_Pause:				; XREF: Obj50_FixToFloor
00010B30 5528 0025                  		subq.b	#2,$25(a0)
00010B34 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
00010B3A 317C 0000 0010             		move.w	#0,$10(a0)
00010B40 117C 0000 001C             		move.b	#0,$1C(a0)
00010B46 4E75                       		rts	
00010B48                            ; ===========================================================================
00010B48                            Ani_obj50:
00010B48                            	include "_anim\obj50.asm"
00010B48                            ; ---------------------------------------------------------------------------
00010B48                            ; Animation script - Yadrin enemy
00010B48                            ; ---------------------------------------------------------------------------
00010B48 0000                       		dc.w byte_F920-Ani_obj50
00010B4A 0000                       		dc.w byte_F924-Ani_obj50
00010B4C 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
00010B50 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
00010B5A                            		even
00010B5A                            		even
00010B5A                            
00010B5A                            ; ---------------------------------------------------------------------------
00010B5A                            ; Sprite mappings - Yadrin enemy (SYZ)
00010B5A                            ; ---------------------------------------------------------------------------
00010B5A                            Map_obj50:
00010B5A                            	include "_maps\obj50.asm"
00010B5A                            ; ---------------------------------------------------------------------------
00010B5A                            ; Sprite mappings - Yadrin enemy (SYZ)
00010B5A                            ; ---------------------------------------------------------------------------
00010B5A 0000 0000                  		dc.w byte_F93A-Map_obj50, byte_F954-Map_obj50
00010B5E 0000 0000                  		dc.w byte_F96E-Map_obj50, byte_F988-Map_obj50
00010B62 0000 0000                  		dc.w byte_F9A2-Map_obj50, byte_F9BC-Map_obj50
00010B66 05                         byte_F93A:	dc.b 5
00010B67 F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
00010B6C FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
00010B71 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00010B76 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00010B7B 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
00010B80 05                         byte_F954:	dc.b 5
00010B81 F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
00010B86 FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
00010B8B EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00010B90 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00010B95 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
00010B9A 05                         byte_F96E:	dc.b 5
00010B9B F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
00010BA0 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
00010BA5 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00010BAA F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00010BAF 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
00010BB4 05                         byte_F988:	dc.b 5
00010BB5 F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
00010BBA FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
00010BBF EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00010BC4 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00010BC9 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
00010BCE 05                         byte_F9A2:	dc.b 5
00010BCF F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
00010BD4 FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
00010BD9 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00010BDE F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00010BE3 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
00010BE8 05                         byte_F9BC:	dc.b 5
00010BE9 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
00010BEE 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
00010BF3 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00010BF8 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00010BFD 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
00010C02                            		even
00010C02                            		even
00010C02                            
00010C02                            ; ---------------------------------------------------------------------------
00010C02                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
00010C02                            ;
00010C02                            ; variables:
00010C02                            ; d1 = width
00010C02                            ; d2 = height /	2 (when	jumping)
00010C02                            ; d3 = height /	2 (when	walking)
00010C02                            ; d4 = x-axis position
00010C02                            ; ---------------------------------------------------------------------------
00010C02                            
00010C02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010C02                            
00010C02                            
00010C02                            SolidObject:
00010C02 4A28 0025                  		tst.b	$25(a0)
00010C06 6700 0000                  		beq.w	loc_FAC8
00010C0A 3401                       		move.w	d1,d2
00010C0C D442                       		add.w	d2,d2
00010C0E 43F8 D000                  		lea	($FFFFD000).w,a1
00010C12 0829 0001 0022             		btst	#1,$22(a1)
00010C18 6600                       		bne.s	loc_F9FE
00010C1A 3029 0008                  		move.w	8(a1),d0
00010C1E 9068 0008                  		sub.w	8(a0),d0
00010C22 D041                       		add.w	d1,d0
00010C24 6B00                       		bmi.s	loc_F9FE
00010C26 B042                       		cmp.w	d2,d0
00010C28 6500                       		bcs.s	loc_FA12
00010C2A                            
00010C2A                            loc_F9FE:
00010C2A 08A9 0003 0022             		bclr	#3,$22(a1)
00010C30 08A8 0003 0022             		bclr	#3,$22(a0)
00010C36 4228 0025                  		clr.b	$25(a0)
00010C3A 7800                       		moveq	#0,d4
00010C3C 4E75                       		rts	
00010C3E                            ; ===========================================================================
00010C3E                            
00010C3E                            loc_FA12:
00010C3E 3404                       		move.w	d4,d2
00010C40                            	;	bsr.w	MvSonicOnPtfm
00010C40 4EF9 0000 8BDE             		jmp	MvSonicOnPtfm
00010C46 7800                       		moveq	#0,d4
00010C48 4E75                       		rts	
00010C4A                            ; ===========================================================================
00010C4A                            
00010C4A                            SolidObject71:				; XREF: Obj71_Solid
00010C4A 4A28 0025                  		tst.b	$25(a0)
00010C4E 6700 0000                  		beq.w	loc_FAD0
00010C52 3401                       		move.w	d1,d2
00010C54 D442                       		add.w	d2,d2
00010C56 43F8 D000                  		lea	($FFFFD000).w,a1
00010C5A 0829 0001 0022             		btst	#1,$22(a1)
00010C60 6600                       		bne.s	loc_FA44
00010C62 3029 0008                  		move.w	8(a1),d0
00010C66 9068 0008                  		sub.w	8(a0),d0
00010C6A D041                       		add.w	d1,d0
00010C6C 6B00                       		bmi.s	loc_FA44
00010C6E B042                       		cmp.w	d2,d0
00010C70 6500                       		bcs.s	loc_FA58
00010C72                            
00010C72                            loc_FA44:
00010C72 08A9 0003 0022             		bclr	#3,$22(a1)
00010C78 08A8 0003 0022             		bclr	#3,$22(a0)
00010C7E 4228 0025                  		clr.b	$25(a0)
00010C82 7800                       		moveq	#0,d4
00010C84 4E75                       		rts	
00010C86                            ; ===========================================================================
00010C86                            
00010C86                            loc_FA58:
00010C86 3404                       		move.w	d4,d2
00010C88                            	;	bsr.w	MvSonicOnPtfm
00010C88 4EF9 0000 8BDE             		jmp	MvSonicOnPtfm
00010C8E 7800                       		moveq	#0,d4
00010C90 4E75                       		rts	
00010C92                            ; ===========================================================================
00010C92                            
00010C92                            SolidObject2F:				; XREF: Obj2F_Solid
00010C92 43F8 D000                  		lea	($FFFFD000).w,a1
00010C96 4A28 0001                  		tst.b	1(a0)
00010C9A 6A00 0000                  		bpl.w	loc_FB92
00010C9E 3029 0008                  		move.w	8(a1),d0
00010CA2 9068 0008                  		sub.w	8(a0),d0
00010CA6 D041                       		add.w	d1,d0
00010CA8 6B00 0000                  		bmi.w	loc_FB92
00010CAC 3601                       		move.w	d1,d3
00010CAE D643                       		add.w	d3,d3
00010CB0 B043                       		cmp.w	d3,d0
00010CB2 6200 0000                  		bhi.w	loc_FB92
00010CB6 3A00                       		move.w	d0,d5
00010CB8 0828 0000 0001             		btst	#0,1(a0)
00010CBE 6700                       		beq.s	loc_FA94
00010CC0 4645                       		not.w	d5
00010CC2 DA43                       		add.w	d3,d5
00010CC4                            
00010CC4                            loc_FA94:
00010CC4 E24D                       		lsr.w	#1,d5
00010CC6 7600                       		moveq	#0,d3
00010CC8 1632 5000                  		move.b	(a2,d5.w),d3
00010CCC 9612                       		sub.b	(a2),d3
00010CCE 3A28 000C                  		move.w	$C(a0),d5
00010CD2 9A43                       		sub.w	d3,d5
00010CD4 1629 0016                  		move.b	$16(a1),d3
00010CD8 4883                       		ext.w	d3
00010CDA D443                       		add.w	d3,d2
00010CDC 3629 000C                  		move.w	$C(a1),d3
00010CE0 9645                       		sub.w	d5,d3
00010CE2 5843                       		addq.w	#4,d3
00010CE4 D642                       		add.w	d2,d3
00010CE6 6B00 0000                  		bmi.w	loc_FB92
00010CEA 3802                       		move.w	d2,d4
00010CEC D844                       		add.w	d4,d4
00010CEE B644                       		cmp.w	d4,d3
00010CF0 6400 0000                  		bcc.w	loc_FB92
00010CF4 6000 0000                  		bra.w	loc_FB0E
00010CF8                            ; ===========================================================================
00010CF8                            
00010CF8                            loc_FAC8:
00010CF8 4A28 0001                  		tst.b	1(a0)
00010CFC 6A00 0000                  		bpl.w	loc_FB92
00010D00                            
00010D00                            loc_FAD0:
00010D00 43F8 D000                  		lea	($FFFFD000).w,a1
00010D04 3029 0008                  		move.w	8(a1),d0
00010D08 9068 0008                  		sub.w	8(a0),d0
00010D0C D041                       		add.w	d1,d0
00010D0E 6B00 0000                  		bmi.w	loc_FB92
00010D12 3601                       		move.w	d1,d3
00010D14 D643                       		add.w	d3,d3
00010D16 B043                       		cmp.w	d3,d0
00010D18 6200 0000                  		bhi.w	loc_FB92
00010D1C 1629 0016                  		move.b	$16(a1),d3
00010D20 4883                       		ext.w	d3
00010D22 D443                       		add.w	d3,d2
00010D24 3629 000C                  		move.w	$C(a1),d3
00010D28 9668 000C                  		sub.w	$C(a0),d3
00010D2C 5843                       		addq.w	#4,d3
00010D2E D642                       		add.w	d2,d3
00010D30 6B00 0000                  		bmi.w	loc_FB92
00010D34 3802                       		move.w	d2,d4
00010D36 D844                       		add.w	d4,d4
00010D38 B644                       		cmp.w	d4,d3
00010D3A 6400 0000                  		bcc.w	loc_FB92
00010D3E                            
00010D3E                            loc_FB0E:
00010D3E 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00010D42 6B00 0000                  		bmi.w	loc_FB92
00010D46 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00010D4C 6400 0000                  		bcc.w	loc_FB92
00010D50 4A78 FE08                  		tst.w	($FFFFFE08).w
00010D54 6600 0000                  		bne.w	loc_FBAC
00010D58 3A00                       		move.w	d0,d5
00010D5A B240                       		cmp.w	d0,d1
00010D5C 6400                       		bcc.s	loc_FB36
00010D5E D241                       		add.w	d1,d1
00010D60 9041                       		sub.w	d1,d0
00010D62 3A00                       		move.w	d0,d5
00010D64 4445                       		neg.w	d5
00010D66                            
00010D66                            loc_FB36:
00010D66 3203                       		move.w	d3,d1
00010D68 B443                       		cmp.w	d3,d2
00010D6A 6400                       		bcc.s	loc_FB44
00010D6C 5943                       		subq.w	#4,d3
00010D6E 9644                       		sub.w	d4,d3
00010D70 3203                       		move.w	d3,d1
00010D72 4441                       		neg.w	d1
00010D74                            
00010D74                            loc_FB44:
00010D74 BA41                       		cmp.w	d1,d5
00010D76 6200 0000                  		bhi.w	loc_FBB0
00010D7A 0C41 0004                  		cmpi.w	#4,d1
00010D7E 6300                       		bls.s	loc_FB8C
00010D80 4A40                       		tst.w	d0
00010D82 6700                       		beq.s	loc_FB70
00010D84 6B00                       		bmi.s	loc_FB5E
00010D86 4A69 0010                  		tst.w	$10(a1)
00010D8A 6B00                       		bmi.s	loc_FB70
00010D8C 6000                       		bra.s	loc_FB64
00010D8E                            ; ===========================================================================
00010D8E                            
00010D8E                            loc_FB5E:
00010D8E 4A69 0010                  		tst.w	$10(a1)
00010D92 6A00                       		bpl.s	loc_FB70
00010D94                            
00010D94                            loc_FB64:
00010D94 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
00010D9A 337C 0000 0010             		move.w	#0,$10(a1)
00010DA0                            
00010DA0                            loc_FB70:
00010DA0 9169 0008                  		sub.w	d0,8(a1)
00010DA4 0829 0001 0022             		btst	#1,$22(a1)
00010DAA 6600                       		bne.s	loc_FB8C
00010DAC 08E9 0005 0022             		bset	#5,$22(a1)
00010DB2 08E8 0005 0022             		bset	#5,$22(a0)
00010DB8 7801                       		moveq	#1,d4
00010DBA 4E75                       		rts	
00010DBC                            ; ===========================================================================
00010DBC                            
00010DBC                            loc_FB8C:
00010DBC 6100                       		bsr.s	loc_FBA0
00010DBE 7801                       		moveq	#1,d4
00010DC0 4E75                       		rts	
00010DC2                            ; ===========================================================================
00010DC2                            
00010DC2                            loc_FB92:
00010DC2 0828 0005 0022             		btst	#5,$22(a0)
00010DC8 6700                       		beq.s	loc_FBAC
00010DCA 0C29 0002 001C             		cmp.b	#2,$1C(a1)	; check if in jumping/rolling animation
00010DD0 6700                       		beq.s	loc_FBA0
00010DD2 0C29 0017 001C             		cmp.b	#$17,$1C(a1)	; check if in drowning animation
00010DD8 6700                       		beq.s	loc_FBA0
00010DDA 0C29 001A 001C             		cmp.b	#$1A,$1C(a1)	; check if in hurt animation
00010DE0 6700                       		beq.s	loc_FBA0
00010DE2 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
00010DE8                            
00010DE8                            loc_FBA0:
00010DE8 08A8 0005 0022             		bclr	#5,$22(a0)
00010DEE 08A9 0005 0022             		bclr	#5,$22(a1)
00010DF4                            
00010DF4                            loc_FBAC:
00010DF4 7800                       		moveq	#0,d4
00010DF6 4E75                       		rts	
00010DF8                            ; ===========================================================================
00010DF8                            
00010DF8                            loc_FBB0:
00010DF8 4A43                       		tst.w	d3
00010DFA 6B00                       		bmi.s	loc_FBBC
00010DFC 0C43 0010                  		cmpi.w	#$10,d3
00010E00 6500                       		bcs.s	loc_FBEE
00010E02 60BE                       		bra.s	loc_FB92
00010E04                            ; ===========================================================================
00010E04                            
00010E04                            loc_FBBC:
00010E04 4A69 0012                  		tst.w	$12(a1)
00010E08 6700                       		beq.s	loc_FBD6
00010E0A 6A00                       		bpl.s	loc_FBD2
00010E0C 4A43                       		tst.w	d3
00010E0E 6A00                       		bpl.s	loc_FBD2
00010E10 9769 000C                  		sub.w	d3,$C(a1)
00010E14 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
00010E1A                            
00010E1A                            loc_FBD2:
00010E1A 78FF                       		moveq	#-1,d4
00010E1C 4E75                       		rts	
00010E1E                            ; ===========================================================================
00010E1E                            
00010E1E                            loc_FBD6:
00010E1E 0829 0001 0022             		btst	#1,$22(a1)
00010E24 66F4                       		bne.s	loc_FBD2
00010E26 2F08                       		move.l	a0,-(sp)
00010E28 2049                       		movea.l	a1,a0
00010E2A 4EB9 0000 0000             		jsr	KillSonic
00010E30 205F                       		movea.l	(sp)+,a0
00010E32 78FF                       		moveq	#-1,d4
00010E34 4E75                       		rts	
00010E36                            ; ===========================================================================
00010E36                            
00010E36                            loc_FBEE:
00010E36 5943                       		subq.w	#4,d3
00010E38 7200                       		moveq	#0,d1
00010E3A 1228 0019                  		move.b	$19(a0),d1
00010E3E 3401                       		move.w	d1,d2
00010E40 D442                       		add.w	d2,d2
00010E42 D269 0008                  		add.w	8(a1),d1
00010E46 9268 0008                  		sub.w	8(a0),d1
00010E4A 6B00                       		bmi.s	loc_FC28
00010E4C B242                       		cmp.w	d2,d1
00010E4E 6400                       		bcc.s	loc_FC28
00010E50 4A69 0012                  		tst.w	$12(a1)
00010E54 6B00                       		bmi.s	loc_FC28
00010E56 9769 000C                  		sub.w	d3,$C(a1)
00010E5A 5369 000C                  		subq.w	#1,$C(a1)
00010E5E 6100                       		bsr.s	sub_FC2C
00010E60 117C 0002 0025             		move.b	#2,$25(a0)
00010E66 08E8 0003 0022             		bset	#3,$22(a0)
00010E6C 78FF                       		moveq	#-1,d4
00010E6E 4E75                       		rts	
00010E70                            ; ===========================================================================
00010E70                            
00010E70                            loc_FC28:
00010E70 7800                       		moveq	#0,d4
00010E72 4E75                       		rts	
00010E74                            ; End of function SolidObject
00010E74                            
00010E74                            
00010E74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010E74                            
00010E74                            
00010E74                            sub_FC2C:				; XREF: SolidObject
00010E74 0829 0003 0022             		btst	#3,$22(a1)
00010E7A 6700                       		beq.s	loc_FC4E
00010E7C 7000                       		moveq	#0,d0
00010E7E 1029 003D                  		move.b	$3D(a1),d0
00010E82 ED48                       		lsl.w	#6,d0
00010E84 0680 00FF D000             		addi.l	#$FFD000,d0
00010E8A 2440                       		movea.l	d0,a2
00010E8C 08AA 0003 0022             		bclr	#3,$22(a2)
00010E92 422A 0025                  		clr.b	$25(a2)
00010E96                            
00010E96                            loc_FC4E:
00010E96 3008                       		move.w	a0,d0
00010E98 0440 D000                  		subi.w	#-$3000,d0
00010E9C EC48                       		lsr.w	#6,d0
00010E9E 0240 007F                  		andi.w	#$7F,d0
00010EA2 1340 003D                  		move.b	d0,$3D(a1)
00010EA6 137C 0000 0026             		move.b	#0,$26(a1)
00010EAC 337C 0000 0012             		move.w	#0,$12(a1)
00010EB2 3369 0010 0014             		move.w	$10(a1),$14(a1)
00010EB8 0829 0001 0022             		btst	#1,$22(a1)
00010EBE 6700                       		beq.s	loc_FC84
00010EC0 2F08                       		move.l	a0,-(sp)
00010EC2 2049                       		movea.l	a1,a0
00010EC4 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00010ECA 205F                       		movea.l	(sp)+,a0
00010ECC                            
00010ECC                            loc_FC84:
00010ECC 08E9 0003 0022             		bset	#3,$22(a1)
00010ED2 08E8 0003 0022             		bset	#3,$22(a0)
00010ED8 4E75                       		rts	
00010EDA                            ; End of function sub_FC2C
00010EDA                            
00010EDA                            ; ===========================================================================
00010EDA                            ; ---------------------------------------------------------------------------
00010EDA                            ; Object 51 - smashable	green block (MZ)
00010EDA                            ; ---------------------------------------------------------------------------
00010EDA                            
00010EDA                            Obj51:					; XREF: Obj_Index
00010EDA 7000                       		moveq	#0,d0
00010EDC 1028 0024                  		move.b	$24(a0),d0
00010EE0 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
00010EE4 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
00010EE8 6000 F9EE                  		bra.w	MarkObjGone
00010EEC                            ; ===========================================================================
00010EEC 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
00010EEE 0000                       		dc.w Obj51_Solid-Obj51_Index
00010EF0 0000                       		dc.w Obj51_Display-Obj51_Index
00010EF2                            ; ===========================================================================
00010EF2                            
00010EF2                            Obj51_Main:				; XREF: Obj51_Index
00010EF2 5428 0024                  		addq.b	#2,$24(a0)
00010EF6 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
00010EFE 317C 42B8 0002             		move.w	#$42B8,2(a0)
00010F04 117C 0004 0001             		move.b	#4,1(a0)
00010F0A 117C 0010 0019             		move.b	#$10,$19(a0)
00010F10 117C 0004 0018             		move.b	#4,$18(a0)
00010F16 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00010F1C                            
00010F1C                            Obj51_Solid:				; XREF: Obj51_Index
00010F1C 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
00010F22 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
00010F28 323C 001B                  		move.w	#$1B,d1
00010F2C 343C 0010                  		move.w	#$10,d2
00010F30 363C 0011                  		move.w	#$11,d3
00010F34 3828 0008                  		move.w	8(a0),d4
00010F38 6100 FCC8                  		bsr.w	SolidObject
00010F3C 0828 0003 0022             		btst	#3,$22(a0)
00010F42 6600                       		bne.s	Obj51_Smash
00010F44                            
00010F44                            locret_FCFC:
00010F44 4E75                       		rts	
00010F46                            ; ===========================================================================
00010F46                            
00010F46                            Obj51_Smash:				; XREF: Obj51_Solid
00010F46 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
00010F4C 66F6                       		bne.s	locret_FCFC	; if not, branch
00010F4E 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
00010F54 08E9 0002 0022             		bset	#2,$22(a1)
00010F5A 137C 000E 0016             		move.b	#$E,$16(a1)
00010F60 137C 0007 0017             		move.b	#7,$17(a1)
00010F66 137C 0002 001C             		move.b	#2,$1C(a1)
00010F6C 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
00010F72 08E9 0001 0022             		bset	#1,$22(a1)
00010F78 08A9 0003 0022             		bclr	#3,$22(a1)
00010F7E 137C 0002 0024             		move.b	#2,$24(a1)
00010F84 08A8 0003 0022             		bclr	#3,$22(a0)
00010F8A 4228 0025                  		clr.b	$25(a0)
00010F8E 117C 0001 001A             		move.b	#1,$1A(a0)
00010F94 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
00010F9A 7203                       		moveq	#3,d1		; set number of	fragments to 4
00010F9C 343C 0038                  		move.w	#$38,d2
00010FA0 6100 D3A4                  		bsr.w	SmashObject
00010FA4 6100 DC3E                  		bsr.w	SingleObjLoad
00010FA8 6600                       		bne.s	Obj51_Display
00010FAA 137C 0029 0000             		move.b	#$29,0(a1)	; load points object
00010FB0 3368 0008 0008             		move.w	8(a0),8(a1)
00010FB6 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010FBC 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
00010FC0 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
00010FC4 0C42 0006                  		cmpi.w	#6,d2
00010FC8 6500                       		bcs.s	Obj51_Bonus
00010FCA 7406                       		moveq	#6,d2
00010FCC                            
00010FCC                            Obj51_Bonus:
00010FCC 7000                       		moveq	#0,d0
00010FCE 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
00010FD2 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
00010FD8 6500                       		bcs.s	loc_FD98	; if not, branch
00010FDA 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
00010FDE 740A                       		moveq	#10,d2
00010FE0                            
00010FE0                            loc_FD98:
00010FE0 4EB9 0000 0000             		jsr	AddPoints
00010FE6 E24A                       		lsr.w	#1,d2
00010FE8 1342 001A                  		move.b	d2,$1A(a1)
00010FEC                            
00010FEC                            Obj51_Display:				; XREF: Obj51_Index
00010FEC 6100 D748                  		bsr.w	SpeedToPos
00010FF0 0668 0038 0012             		addi.w	#$38,$12(a0)
00010FF6 6100 D764                  		bsr.w	DisplaySprite
00010FFA 4A28 0001                  		tst.b	1(a0)
00010FFE 6A00 D798                  		bpl.w	DeleteObject
00011002 4E75                       		rts	
00011004                            ; ===========================================================================
00011004 FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
00011008 FF00 FF00                  		dc.w $FF00, $FF00
0001100C 0200 FE00                  		dc.w $200, $FE00
00011010 0100 FF00                  		dc.w $100, $FF00
00011014                            
00011014 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
0001101C                            ; ---------------------------------------------------------------------------
0001101C                            ; Sprite mappings - smashable green block (MZ)
0001101C                            ; ---------------------------------------------------------------------------
0001101C                            Map_obj51:
0001101C                            	include "_maps\obj51.asm"
0001101C                            ; ---------------------------------------------------------------------------
0001101C                            ; Sprite mappings - smashable green block (MZ)
0001101C                            ; ---------------------------------------------------------------------------
0001101C 0000                       		dc.w byte_FDD8-Map_obj51
0001101E 0000                       		dc.w byte_FDE3-Map_obj51
00011020 02                         byte_FDD8:	dc.b 2
00011021 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
00011026 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
0001102B 04                         byte_FDE3:	dc.b 4
0001102C F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
00011031 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
00011036 F005 8000 00               		dc.b $F0, 5, $80, 0, 0
0001103B 0005 8000 00               		dc.b 0,	5, $80,	0, 0
00011040                            		even
00011040                            		even
00011040                            
00011040                            ; ===========================================================================
00011040                            ; ---------------------------------------------------------------------------
00011040                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
00011040                            ; ---------------------------------------------------------------------------
00011040                            
00011040                            Obj52:					; XREF: Obj_Index
00011040 7000                       		moveq	#0,d0
00011042 1028 0024                  		move.b	$24(a0),d0
00011046 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
0001104A 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
0001104E                            ; ===========================================================================
0001104E 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
00011050 0000                       		dc.w Obj52_Platform-Obj52_Index
00011052 0000                       		dc.w Obj52_StandOn-Obj52_Index
00011054                            
00011054 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
00011056 2001                       		dc.b $20, 1
00011058 2002                       		dc.b $20, 2
0001105A 4003                       		dc.b $40, 3
0001105C 3004                       		dc.b $30, 4
0001105E                            ; ===========================================================================
0001105E                            
0001105E                            Obj52_Main:				; XREF: Obj52_Index
0001105E 5428 0024                  		addq.b	#2,$24(a0)
00011062 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
0001106A 317C 42B8 0002             		move.w	#$42B8,2(a0)
00011070 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011076 6600                       		bne.s	loc_FE44
00011078 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
00011080 317C 43BC 0002             		move.w	#$43BC,2(a0)
00011086 117C 0007 0016             		move.b	#7,$16(a0)
0001108C                            
0001108C                            loc_FE44:
0001108C 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00011092 6600                       		bne.s	loc_FE60
00011094 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
0001109A 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
000110A0 6700                       		beq.s	loc_FE60	; if yes, branch
000110A2 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
000110A8                            
000110A8                            loc_FE60:
000110A8 117C 0004 0001             		move.b	#4,1(a0)
000110AE 7000                       		moveq	#0,d0
000110B0 1028 0028                  		move.b	$28(a0),d0
000110B4 E648                       		lsr.w	#3,d0
000110B6 0240 001E                  		andi.w	#$1E,d0
000110BA 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
000110BE 115A 0019                  		move.b	(a2)+,$19(a0)
000110C2 115A 001A                  		move.b	(a2)+,$1A(a0)
000110C6 117C 0004 0018             		move.b	#4,$18(a0)
000110CC 3168 0008 0030             		move.w	8(a0),$30(a0)
000110D2 3168 000C 0032             		move.w	$C(a0),$32(a0)
000110D8 0228 000F 0028             		andi.b	#$F,$28(a0)
000110DE                            
000110DE                            Obj52_Platform:				; XREF: Obj52_Index
000110DE 6100 0000                  		bsr.w	Obj52_Move
000110E2 7200                       		moveq	#0,d1
000110E4 1228 0019                  		move.b	$19(a0),d1
000110E8 4EB9 0000 8508             		jsr	(PlatformObject).l
000110EE 6000                       		bra.s	Obj52_ChkDel
000110F0                            ; ===========================================================================
000110F0                            
000110F0                            Obj52_StandOn:				; XREF: Obj52_Index
000110F0 7200                       		moveq	#0,d1
000110F2 1228 0019                  		move.b	$19(a0),d1
000110F6 4EB9 0000 867C             		jsr	(ExitPlatform).l
000110FC 3F28 0008                  		move.w	8(a0),-(sp)
00011100 6100 0000                  		bsr.w	Obj52_Move
00011104 341F                       		move.w	(sp)+,d2
00011106 4EB9 0000 8BEA             		jsr	(MvSonicOnPtfm2).l
0001110C                            
0001110C                            Obj52_ChkDel:				; XREF: Obj52_Platform
0001110C 3028 0030                  		move.w	$30(a0),d0
00011110 0240 FF80                  		andi.w	#$FF80,d0
00011114 3238 F700                  		move.w	($FFFFF700).w,d1
00011118 0441 0080                  		subi.w	#$80,d1
0001111C 0241 FF80                  		andi.w	#$FF80,d1
00011120 9041                       		sub.w	d1,d0
00011122 0C40 0280                  		cmpi.w	#$280,d0
00011126 6200 D670                  		bhi.w	DeleteObject
0001112A 6000 D630                  		bra.w	DisplaySprite
0001112E                            ; ===========================================================================
0001112E                            
0001112E                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
0001112E 7000                       		moveq	#0,d0
00011130 1028 0028                  		move.b	$28(a0),d0
00011134 0240 000F                  		andi.w	#$F,d0
00011138 D040                       		add.w	d0,d0
0001113A 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
0001113E 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
00011142                            ; ===========================================================================
00011142 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
00011146 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
0001114A 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
0001114E 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
00011152 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
00011156 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
00011158                            ; ===========================================================================
00011158                            
00011158                            Obj52_Type00:				; XREF: Obj52_TypeIndex
00011158 4E75                       		rts	
0001115A                            ; ===========================================================================
0001115A                            
0001115A                            Obj52_Type01:				; XREF: Obj52_TypeIndex
0001115A 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0001115E 323C 0060                  		move.w	#$60,d1
00011162 0828 0000 0022             		btst	#0,$22(a0)
00011168 6700                       		beq.s	loc_FF26
0001116A 4440                       		neg.w	d0
0001116C D041                       		add.w	d1,d0
0001116E                            
0001116E                            loc_FF26:
0001116E 3228 0030                  		move.w	$30(a0),d1
00011172 9240                       		sub.w	d0,d1
00011174 3141 0008                  		move.w	d1,8(a0)
00011178 4E75                       		rts	
0001117A                            ; ===========================================================================
0001117A                            
0001117A                            Obj52_Type02:				; XREF: Obj52_TypeIndex
0001117A 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
00011180 6600                       		bne.s	Obj52_02_Wait
00011182 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00011186                            
00011186                            Obj52_02_Wait:
00011186 4E75                       		rts	
00011188                            ; ===========================================================================
00011188                            
00011188                            Obj52_Type03:				; XREF: Obj52_TypeIndex
00011188 7600                       		moveq	#0,d3
0001118A 1628 0019                  		move.b	$19(a0),d3
0001118E 6100 0000                  		bsr.w	ObjHitWallRight
00011192 4A41                       		tst.w	d1		; has the platform hit a wall?
00011194 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
00011196 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
0001119A 3168 0008 0030             		move.w	8(a0),$30(a0)
000111A0 4E75                       		rts	
000111A2                            ; ===========================================================================
000111A2                            
000111A2                            Obj52_03_End:
000111A2 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
000111A6 4E75                       		rts	
000111A8                            ; ===========================================================================
000111A8                            
000111A8                            Obj52_Type05:				; XREF: Obj52_TypeIndex
000111A8 7600                       		moveq	#0,d3
000111AA 1628 0019                  		move.b	$19(a0),d3
000111AE 6100 0000                  		bsr.w	ObjHitWallRight
000111B2 4A41                       		tst.w	d1		; has the platform hit a wall?
000111B4 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
000111B6 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
000111BA 3168 0008 0030             		move.w	8(a0),$30(a0)
000111C0 4E75                       		rts	
000111C2                            ; ===========================================================================
000111C2                            
000111C2                            Obj52_05_End:
000111C2 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
000111C6 4E75                       		rts	
000111C8                            ; ===========================================================================
000111C8                            
000111C8                            Obj52_Type06:				; XREF: Obj52_TypeIndex
000111C8 6100 D56C                  		bsr.w	SpeedToPos
000111CC 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
000111D2 6100 0000                  		bsr.w	ObjHitFloor
000111D6 4A41                       		tst.w	d1		; has platform hit the floor?
000111D8 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
000111DC D368 000C                  		add.w	d1,$C(a0)
000111E0 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
000111E4 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
000111E8                            
000111E8                            locret_FFA0:
000111E8 4E75                       		rts	
000111EA                            ; ===========================================================================
000111EA                            
000111EA                            Obj52_Type07:				; XREF: Obj52_TypeIndex
000111EA 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
000111EE 6700                       		beq.s	Obj52_07_ChkDel
000111F0 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
000111F4                            
000111F4                            Obj52_07_ChkDel:
000111F4 588F                       		addq.l	#4,sp
000111F6 3028 0030                  		move.w	$30(a0),d0
000111FA 0240 FF80                  		andi.w	#$FF80,d0
000111FE 3238 F700                  		move.w	($FFFFF700).w,d1
00011202 0441 0080                  		subi.w	#$80,d1
00011206 0241 FF80                  		andi.w	#$FF80,d1
0001120A 9041                       		sub.w	d1,d0
0001120C 0C40 0280                  		cmpi.w	#$280,d0
00011210 6200 D586                  		bhi.w	DeleteObject
00011214 4E75                       		rts	
00011216                            ; ===========================================================================
00011216                            
00011216                            Obj52_Type08:				; XREF: Obj52_TypeIndex
00011216 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
0001121A 323C 0080                  		move.w	#$80,d1
0001121E 0828 0000 0022             		btst	#0,$22(a0)
00011224 6700                       		beq.s	loc_FFE2
00011226 4440                       		neg.w	d0
00011228 D041                       		add.w	d1,d0
0001122A                            
0001122A                            loc_FFE2:
0001122A 3228 0032                  		move.w	$32(a0),d1
0001122E 9240                       		sub.w	d0,d1
00011230 3141 000C                  		move.w	d1,$C(a0)
00011234 4E75                       		rts	
00011236                            ; ===========================================================================
00011236                            
00011236                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
00011236 7600                       		moveq	#0,d3
00011238 1628 0019                  		move.b	$19(a0),d3
0001123C D643                       		add.w	d3,d3
0001123E 7208                       		moveq	#8,d1
00011240 0828 0000 0022             		btst	#0,$22(a0)
00011246 6700                       		beq.s	loc_10004
00011248 4441                       		neg.w	d1
0001124A 4443                       		neg.w	d3
0001124C                            
0001124C                            loc_10004:
0001124C 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
00011250 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
00011252 3028 0008                  		move.w	8(a0),d0
00011256 9068 0030                  		sub.w	$30(a0),d0
0001125A B043                       		cmp.w	d3,d0
0001125C 6700                       		beq.s	Obj52_0A_Wait
0001125E D368 0008                  		add.w	d1,8(a0)	; move platform
00011262 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
00011268 4E75                       		rts	
0001126A                            ; ===========================================================================
0001126A                            
0001126A                            Obj52_0A_Wait:
0001126A 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
0001126E 6600                       		bne.s	locret_1002E	; if time remains, branch
00011270 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
00011276                            
00011276                            locret_1002E:
00011276 4E75                       		rts	
00011278                            ; ===========================================================================
00011278                            
00011278                            Obj52_0A_Back:
00011278 3028 0008                  		move.w	8(a0),d0
0001127C 9068 0030                  		sub.w	$30(a0),d0
00011280 6700                       		beq.s	Obj52_0A_Reset
00011282 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
00011286 4E75                       		rts	
00011288                            ; ===========================================================================
00011288                            
00011288                            Obj52_0A_Reset:
00011288 4268 0036                  		clr.w	$36(a0)
0001128C 5328 0028                  		subq.b	#1,$28(a0)
00011290 4E75                       		rts	
00011292                            ; ===========================================================================
00011292                            ; ---------------------------------------------------------------------------
00011292                            ; Sprite mappings - moving blocks (MZ, SBZ)
00011292                            ; ---------------------------------------------------------------------------
00011292                            Map_obj52:
00011292                            	include "_maps\obj52mz.asm"
00011292                            ; ---------------------------------------------------------------------------
00011292                            ; Sprite mappings - moving blocks (MZ, SBZ)
00011292                            ; ---------------------------------------------------------------------------
00011292 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
00011296 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
0001129A 0000                       		dc.w byte_1008F-Map_obj52
0001129C 01                         byte_10054:	dc.b 1
0001129D F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
000112A2 02                         byte_1005A:	dc.b 2
000112A3 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
000112A8 F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
000112AD 04                         byte_10065:	dc.b 4
000112AE F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
000112B3 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
000112B8 F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
000112BD 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
000112C2 04                         byte_1007A:	dc.b 4
000112C3 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
000112C8 F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
000112CD F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
000112D2 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
000112D7 03                         byte_1008F:	dc.b 3
000112D8 F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
000112DD F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
000112E2 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
000112E8 00                         		even
000112E8 00                         		even
000112E8                            
000112E8                            ; ---------------------------------------------------------------------------
000112E8                            ; Sprite mappings - moving block (LZ)
000112E8                            ; ---------------------------------------------------------------------------
000112E8                            Map_obj52a:
000112E8                            	include "_maps\obj52lz.asm"
000112E8                            ; ---------------------------------------------------------------------------
000112E8                            ; Sprite mappings - moving block (LZ)
000112E8                            ; ---------------------------------------------------------------------------
000112E8 0000                       		dc.w byte_100A2-Map_obj52a
000112EA 01                         byte_100A2:	dc.b 1
000112EB F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
000112F0                            		even
000112F0                            		even
000112F0                            
000112F0                            ; ===========================================================================
000112F0                            ; ---------------------------------------------------------------------------
000112F0                            ; Object 55 - Basaran enemy (MZ)
000112F0                            ; ---------------------------------------------------------------------------
000112F0                            
000112F0                            Obj55:					; XREF: Obj_Index
000112F0 7000                       		moveq	#0,d0
000112F2 1028 0024                  		move.b	$24(a0),d0
000112F6 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
000112FA 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
000112FE                            ; ===========================================================================
000112FE 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
00011300 0000                       		dc.w Obj55_Action-Obj55_Index
00011302                            ; ===========================================================================
00011302                            
00011302                            Obj55_Main:				; XREF: Obj55_Index
00011302 5428 0024                  		addq.b	#2,$24(a0)
00011306 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
0001130E 317C 84B8 0002             		move.w	#$84B8,2(a0)
00011314 117C 0004 0001             		move.b	#4,1(a0)
0001131A 117C 000C 0016             		move.b	#$C,$16(a0)
00011320 117C 0002 0018             		move.b	#2,$18(a0)
00011326 117C 000B 0020             		move.b	#$B,$20(a0)
0001132C 117C 0010 0019             		move.b	#$10,$19(a0)
00011332                            
00011332                            Obj55_Action:				; XREF: Obj55_Index
00011332 7000                       		moveq	#0,d0
00011334 1028 0025                  		move.b	$25(a0),d0
00011338 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
0001133C 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
00011340 43F9 0000 0000             		lea	(Ani_obj55).l,a1
00011346 6100 A518                  		bsr.w	AnimateSprite
0001134A 6000 F58C                  		bra.w	MarkObjGone
0001134E                            ; ===========================================================================
0001134E 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
00011350 0000                       		dc.w Obj55_DropFly-Obj55_Index2
00011352 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
00011354 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
00011356                            ; ===========================================================================
00011356                            
00011356                            Obj55_ChkDrop:				; XREF: Obj55_Index2
00011356 343C 0080                  		move.w	#$80,d2
0001135A 6100 0000                  		bsr.w	Obj55_ChkSonic
0001135E 6400                       		bcc.s	Obj55_NoDrop
00011360 3038 D00C                  		move.w	($FFFFD00C).w,d0
00011364 3140 0036                  		move.w	d0,$36(a0)
00011368 9068 000C                  		sub.w	$C(a0),d0
0001136C 6500                       		bcs.s	Obj55_NoDrop
0001136E 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
00011372 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
00011374 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00011378 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
0001137A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0001137E D007                       		add.b	d7,d0
00011380 0200 0007                  		andi.b	#7,d0
00011384 6600                       		bne.s	Obj55_NoDrop
00011386 117C 0001 001C             		move.b	#1,$1C(a0)
0001138C 5428 0025                  		addq.b	#2,$25(a0)
00011390                            
00011390                            Obj55_NoDrop:
00011390 4E75                       		rts	
00011392                            ; ===========================================================================
00011392                            
00011392                            Obj55_DropFly:				; XREF: Obj55_Index2
00011392 6100 D3A2                  		bsr.w	SpeedToPos
00011396 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
0001139C 343C 0080                  		move.w	#$80,d2
000113A0 6100 0000                  		bsr.w	Obj55_ChkSonic
000113A4 3028 0036                  		move.w	$36(a0),d0
000113A8 9068 000C                  		sub.w	$C(a0),d0
000113AC 6500                       		bcs.s	Obj55_ChkDel
000113AE 0C40 0010                  		cmpi.w	#$10,d0
000113B2 6400                       		bcc.s	locret_10180
000113B4 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
000113B8 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
000113BE 117C 0002 001C             		move.b	#2,$1C(a0)
000113C4 5428 0025                  		addq.b	#2,$25(a0)
000113C8                            
000113C8                            locret_10180:
000113C8 4E75                       		rts	
000113CA                            ; ===========================================================================
000113CA                            
000113CA                            Obj55_ChkDel:				; XREF: Obj55_DropFly
000113CA 4A28 0001                  		tst.b	1(a0)
000113CE 6A00 D3C8                  		bpl.w	DeleteObject
000113D2 4E75                       		rts	
000113D4                            ; ===========================================================================
000113D4                            
000113D4                            Obj55_PlaySnd:				; XREF: Obj55_Index2
000113D4 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000113D8 0200 000F                  		andi.b	#$F,d0
000113DC 6600                       		bne.s	loc_101A0
000113DE 303C 00C0                  		move.w	#$C0,d0
000113E2 4EB9 0000 132C             		jsr	(PlaySound_Special).l ;	play flapping sound
000113E8                            
000113E8                            loc_101A0:
000113E8 6100 D34C                  		bsr.w	SpeedToPos
000113EC 3038 D008                  		move.w	($FFFFD008).w,d0
000113F0 9068 0008                  		sub.w	8(a0),d0
000113F4 6400                       		bcc.s	loc_101B0
000113F6 4440                       		neg.w	d0
000113F8                            
000113F8                            loc_101B0:
000113F8 0C40 0080                  		cmpi.w	#$80,d0
000113FC 6500                       		bcs.s	locret_101C6
000113FE 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00011402 D007                       		add.b	d7,d0
00011404 0200 0007                  		andi.b	#7,d0
00011408 6600                       		bne.s	locret_101C6
0001140A 5428 0025                  		addq.b	#2,$25(a0)
0001140E                            
0001140E                            locret_101C6:
0001140E 4E75                       		rts	
00011410                            ; ===========================================================================
00011410                            
00011410                            Obj55_FlyUp:				; XREF: Obj55_Index2
00011410 6100 D324                  		bsr.w	SpeedToPos
00011414 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
0001141A 6100 0000                  		bsr.w	ObjHitCeiling
0001141E 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00011420 6A00                       		bpl.s	locret_101F4	; if not, branch
00011422 9368 000C                  		sub.w	d1,$C(a0)
00011426 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
0001142C 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
00011430 4268 0012                  		clr.w	$12(a0)
00011434 4228 001C                  		clr.b	$1C(a0)
00011438 4228 0025                  		clr.b	$25(a0)
0001143C                            
0001143C                            locret_101F4:
0001143C 4E75                       		rts	
0001143E                            ; ===========================================================================
0001143E                            
0001143E                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
0001143E 323C 0100                  		move.w	#$100,d1
00011442 08E8 0000 0022             		bset	#0,$22(a0)
00011448 3038 D008                  		move.w	($FFFFD008).w,d0
0001144C 9068 0008                  		sub.w	8(a0),d0
00011450 6400                       		bcc.s	loc_10214
00011452 4440                       		neg.w	d0
00011454 4441                       		neg.w	d1
00011456 08A8 0000 0022             		bclr	#0,$22(a0)
0001145C                            
0001145C                            loc_10214:
0001145C B042                       		cmp.w	d2,d0
0001145E 4E75                       		rts	
00011460                            ; ===========================================================================
00011460 6100 D2D4                  		bsr.w	SpeedToPos
00011464 6100 D2F6                  		bsr.w	DisplaySprite
00011468 4A28 0001                  		tst.b	1(a0)
0001146C 6A00 D32A                  		bpl.w	DeleteObject
00011470 4E75                       		rts	
00011472                            ; ===========================================================================
00011472                            Ani_obj55:
00011472                            	include "_anim\obj55.asm"
00011472                            ; ---------------------------------------------------------------------------
00011472                            ; Animation script - Basaran enemy
00011472                            ; ---------------------------------------------------------------------------
00011472 0000                       		dc.w byte_10230-Ani_obj55
00011474 0000                       		dc.w byte_10234-Ani_obj55
00011476 0000                       		dc.w byte_10238-Ani_obj55
00011478 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
0001147C 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
00011480 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
00011486                            		even
00011486                            		even
00011486                            
00011486                            ; ---------------------------------------------------------------------------
00011486                            ; Sprite mappings - Basaran enemy (MZ)
00011486                            ; ---------------------------------------------------------------------------
00011486                            Map_obj55:
00011486                            	include "_maps\obj55.asm"
00011486                            ; ---------------------------------------------------------------------------
00011486                            ; Sprite mappings - Basaran enemy (MZ)
00011486                            ; ---------------------------------------------------------------------------
00011486 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
0001148A 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
0001148E 01                         byte_10246:	dc.b 1
0001148F F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00011494 03                         byte_1024C:	dc.b 3
00011495 F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
0001149A 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
0001149F 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
000114A4 04                         byte_1025C:	dc.b 4
000114A5 F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
000114AA 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
000114AF 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
000114B4 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
000114B9 04                         byte_10271:	dc.b 4
000114BA F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
000114BF 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
000114C4 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
000114C9 FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
000114CE                            		even
000114CE                            		even
000114CE                            
000114CE                            ; ===========================================================================
000114CE                            ; ---------------------------------------------------------------------------
000114CE                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
000114CE                            ; ---------------------------------------------------------------------------
000114CE                            
000114CE                            Obj56:					; XREF: Obj_Index
000114CE 7000                       		moveq	#0,d0
000114D0 1028 0024                  		move.b	$24(a0),d0
000114D4 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
000114D8 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
000114DC                            ; ===========================================================================
000114DC 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
000114DE 0000                       		dc.w Obj56_Action-Obj56_Index
000114E0                            
000114E0 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
000114E2 2020                       		dc.b  $20, $20
000114E4 1020                       		dc.b  $10, $20
000114E6 201A                       		dc.b  $20, $1A
000114E8 1027                       		dc.b  $10, $27
000114EA 1010                       		dc.b  $10, $10
000114EC 0820                       		dc.b	8, $20
000114EE 4010                       		dc.b  $40, $10
000114F0                            ; ===========================================================================
000114F0                            
000114F0                            Obj56_Main:				; XREF: Obj56_Index
000114F0 5428 0024                  		addq.b	#2,$24(a0)
000114F4 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
000114FC 317C 4000 0002             		move.w	#$4000,2(a0)
00011502 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011508 6600                       		bne.s	loc_102C8
0001150A 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
00011510                            
00011510                            loc_102C8:
00011510 117C 0004 0001             		move.b	#4,1(a0)
00011516 117C 0003 0018             		move.b	#3,$18(a0)
0001151C 7000                       		moveq	#0,d0
0001151E 1028 0028                  		move.b	$28(a0),d0
00011522 E648                       		lsr.w	#3,d0
00011524 0240 000E                  		andi.w	#$E,d0
00011528 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
0001152C 115A 0019                  		move.b	(a2)+,$19(a0)
00011530 1152 0016                  		move.b	(a2),$16(a0)
00011534 E248                       		lsr.w	#1,d0
00011536 1140 001A                  		move.b	d0,$1A(a0)
0001153A 3168 0008 0034             		move.w	8(a0),$34(a0)
00011540 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011546 7000                       		moveq	#0,d0
00011548 1012                       		move.b	(a2),d0
0001154A D040                       		add.w	d0,d0
0001154C 3140 003A                  		move.w	d0,$3A(a0)
00011550 7000                       		moveq	#0,d0
00011552 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011558 6700                       		beq.s	loc_10332
0001155A 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
0001155E 0240 000F                  		andi.w	#$F,d0
00011562 5140                       		subq.w	#8,d0
00011564 6500                       		bcs.s	loc_10332
00011566 E548                       		lsl.w	#2,d0
00011568 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
0001156C 45F2 0000                  		lea	(a2,d0.w),a2
00011570 4A52                       		tst.w	(a2)
00011572 6A00                       		bpl.s	loc_10332
00011574 0868 0000 0022             		bchg	#0,$22(a0)
0001157A                            
0001157A                            loc_10332:
0001157A 1028 0028                  		move.b	$28(a0),d0
0001157E 6A00                       		bpl.s	Obj56_Action
00011580 0200 000F                  		andi.b	#$F,d0
00011584 1140 003C                  		move.b	d0,$3C(a0)
00011588 117C 0005 0028             		move.b	#5,$28(a0)
0001158E 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
00011594 6600                       		bne.s	Obj56_ChkGone
00011596 117C 000C 0028             		move.b	#$C,$28(a0)
0001159C 317C 0080 003A             		move.w	#$80,$3A(a0)
000115A2                            
000115A2                            Obj56_ChkGone:
000115A2 45F8 FC00                  		lea	($FFFFFC00).w,a2
000115A6 7000                       		moveq	#0,d0
000115A8 1028 0023                  		move.b	$23(a0),d0
000115AC 6700                       		beq.s	Obj56_Action
000115AE 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000115B4 0832 0000 0002             		btst	#0,2(a2,d0.w)
000115BA 6700                       		beq.s	Obj56_Action
000115BC 5228 0028                  		addq.b	#1,$28(a0)
000115C0 4268 003A                  		clr.w	$3A(a0)
000115C4                            
000115C4                            Obj56_Action:				; XREF: Obj56_Index
000115C4 3F28 0008                  		move.w	8(a0),-(sp)
000115C8 7000                       		moveq	#0,d0
000115CA 1028 0028                  		move.b	$28(a0),d0	; get object type
000115CE 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000115D2 D040                       		add.w	d0,d0
000115D4 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
000115D8 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
000115DC 381F                       		move.w	(sp)+,d4
000115DE 4A28 0001                  		tst.b	1(a0)
000115E2 6A00                       		bpl.s	Obj56_ChkDel
000115E4 7200                       		moveq	#0,d1
000115E6 1228 0019                  		move.b	$19(a0),d1
000115EA 0641 000B                  		addi.w	#$B,d1
000115EE 7400                       		moveq	#0,d2
000115F0 1428 0016                  		move.b	$16(a0),d2
000115F4 3602                       		move.w	d2,d3
000115F6 5243                       		addq.w	#1,d3
000115F8 6100 F608                  		bsr.w	SolidObject
000115FC                            
000115FC                            Obj56_ChkDel:
000115FC 3028 0034                  		move.w	$34(a0),d0
00011600 0240 FF80                  		andi.w	#$FF80,d0
00011604 3238 F700                  		move.w	($FFFFF700).w,d1
00011608 0441 0080                  		subi.w	#$80,d1
0001160C 0241 FF80                  		andi.w	#$FF80,d1
00011610 9041                       		sub.w	d1,d0
00011612 0C40 0280                  		cmpi.w	#$280,d0
00011616 6200 D180                  		bhi.w	DeleteObject
0001161A 6000 D140                  		bra.w	DisplaySprite
0001161E                            ; ===========================================================================
0001161E 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
00011622 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
00011626 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
0001162A 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
0001162E 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
00011632 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
00011636 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
0001163A                            ; ===========================================================================
0001163A                            
0001163A                            Obj56_Type00:				; XREF: Obj56_TypeIndex
0001163A 4E75                       		rts	
0001163C                            ; ===========================================================================
0001163C                            
0001163C                            Obj56_Type01:				; XREF: Obj56_TypeIndex
0001163C 323C 0040                  		move.w	#$40,d1
00011640 7000                       		moveq	#0,d0
00011642 1038 FE68                  		move.b	($FFFFFE68).w,d0
00011646 6000                       		bra.s	Obj56_Move_LR
00011648                            ; ===========================================================================
00011648                            
00011648                            Obj56_Type02:				; XREF: Obj56_TypeIndex
00011648 323C 0080                  		move.w	#$80,d1
0001164C 7000                       		moveq	#0,d0
0001164E 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00011652                            
00011652                            Obj56_Move_LR:
00011652 0828 0000 0022             		btst	#0,$22(a0)
00011658 6700                       		beq.s	loc_10416
0001165A 4440                       		neg.w	d0
0001165C D041                       		add.w	d1,d0
0001165E                            
0001165E                            loc_10416:
0001165E 3228 0034                  		move.w	$34(a0),d1
00011662 9240                       		sub.w	d0,d1
00011664 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00011668 4E75                       		rts	
0001166A                            ; ===========================================================================
0001166A                            
0001166A                            Obj56_Type03:				; XREF: Obj56_TypeIndex
0001166A 323C 0040                  		move.w	#$40,d1
0001166E 7000                       		moveq	#0,d0
00011670 1038 FE68                  		move.b	($FFFFFE68).w,d0
00011674 6000                       		bra.s	Obj56_Move_UD
00011676                            ; ===========================================================================
00011676                            
00011676                            Obj56_Type04:				; XREF: Obj56_TypeIndex
00011676 323C 0080                  		move.w	#$80,d1
0001167A 7000                       		moveq	#0,d0
0001167C 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00011680                            
00011680                            Obj56_Move_UD:
00011680 0828 0000 0022             		btst	#0,$22(a0)
00011686 6700                       		beq.s	loc_10444
00011688 4440                       		neg.w	d0
0001168A D041                       		add.w	d1,d0
0001168C                            
0001168C                            loc_10444:
0001168C 3228 0030                  		move.w	$30(a0),d1
00011690 9240                       		sub.w	d0,d1
00011692 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00011696 4E75                       		rts	
00011698                            ; ===========================================================================
00011698                            
00011698                            Obj56_Type05:				; XREF: Obj56_TypeIndex
00011698 4A28 0038                  		tst.b	$38(a0)
0001169C 6600                       		bne.s	loc_104A4
0001169E 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
000116A4 6600                       		bne.s	loc_1047A	; if not, branch
000116A6 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
000116AC 6600                       		bne.s	loc_1047A
000116AE 4238 F7C9                  		clr.b	($FFFFF7C9).w
000116B2 3038 D008                  		move.w	($FFFFD008).w,d0
000116B6 B068 0008                  		cmp.w	8(a0),d0
000116BA 6400                       		bcc.s	loc_1047A
000116BC 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
000116C2                            
000116C2                            loc_1047A:
000116C2 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000116C6 7000                       		moveq	#0,d0
000116C8 1028 003C                  		move.b	$3C(a0),d0
000116CC 0832 0000 0000             		btst	#0,(a2,d0.w)
000116D2 6700                       		beq.s	loc_104AE
000116D4 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
000116DA 6600                       		bne.s	loc_1049E	; if not, branch
000116DC 0C00 0003                  		cmpi.b	#3,d0
000116E0 6600                       		bne.s	loc_1049E
000116E2 4238 F7C9                  		clr.b	($FFFFF7C9).w
000116E6                            
000116E6                            loc_1049E:
000116E6 117C 0001 0038             		move.b	#1,$38(a0)
000116EC                            
000116EC                            loc_104A4:
000116EC 4A68 003A                  		tst.w	$3A(a0)
000116F0 6700                       		beq.s	loc_104C8
000116F2 5568 003A                  		subq.w	#2,$3A(a0)
000116F6                            
000116F6                            loc_104AE:
000116F6 3028 003A                  		move.w	$3A(a0),d0
000116FA 0828 0000 0022             		btst	#0,$22(a0)
00011700 6700                       		beq.s	loc_104BC
00011702 4440                       		neg.w	d0
00011704                            
00011704                            loc_104BC:
00011704 3228 0030                  		move.w	$30(a0),d1
00011708 D240                       		add.w	d0,d1
0001170A 3141 000C                  		move.w	d1,$C(a0)
0001170E 4E75                       		rts	
00011710                            ; ===========================================================================
00011710                            
00011710                            loc_104C8:
00011710 5228 0028                  		addq.b	#1,$28(a0)
00011714 4228 0038                  		clr.b	$38(a0)
00011718 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001171C 7000                       		moveq	#0,d0
0001171E 1028 0023                  		move.b	$23(a0),d0
00011722 67D2                       		beq.s	loc_104AE
00011724 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001172A 60CA                       		bra.s	loc_104AE
0001172C                            ; ===========================================================================
0001172C                            
0001172C                            Obj56_Type06:				; XREF: Obj56_TypeIndex
0001172C 4A28 0038                  		tst.b	$38(a0)
00011730 6600                       		bne.s	loc_10500
00011732 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00011736 7000                       		moveq	#0,d0
00011738 1028 003C                  		move.b	$3C(a0),d0
0001173C 4A32 0000                  		tst.b	(a2,d0.w)
00011740 6A00                       		bpl.s	loc_10512
00011742 117C 0001 0038             		move.b	#1,$38(a0)
00011748                            
00011748                            loc_10500:
00011748 7000                       		moveq	#0,d0
0001174A 1028 0016                  		move.b	$16(a0),d0
0001174E D040                       		add.w	d0,d0
00011750 B068 003A                  		cmp.w	$3A(a0),d0
00011754 6700                       		beq.s	loc_1052C
00011756 5468 003A                  		addq.w	#2,$3A(a0)
0001175A                            
0001175A                            loc_10512:
0001175A 3028 003A                  		move.w	$3A(a0),d0
0001175E 0828 0000 0022             		btst	#0,$22(a0)
00011764 6700                       		beq.s	loc_10520
00011766 4440                       		neg.w	d0
00011768                            
00011768                            loc_10520:
00011768 3228 0030                  		move.w	$30(a0),d1
0001176C D240                       		add.w	d0,d1
0001176E 3141 000C                  		move.w	d1,$C(a0)
00011772 4E75                       		rts	
00011774                            ; ===========================================================================
00011774                            
00011774                            loc_1052C:
00011774 5328 0028                  		subq.b	#1,$28(a0)
00011778 4228 0038                  		clr.b	$38(a0)
0001177C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011780 7000                       		moveq	#0,d0
00011782 1028 0023                  		move.b	$23(a0),d0
00011786 67D2                       		beq.s	loc_10512
00011788 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0001178E 60CA                       		bra.s	loc_10512
00011790                            ; ===========================================================================
00011790                            
00011790                            Obj56_Type07:				; XREF: Obj56_TypeIndex
00011790 4A28 0038                  		tst.b	$38(a0)
00011794 6600                       		bne.s	loc_1055E
00011796 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
0001179A 6700                       		beq.s	locret_10578
0001179C 117C 0001 0038             		move.b	#1,$38(a0)
000117A2 4268 003A                  		clr.w	$3A(a0)
000117A6                            
000117A6                            loc_1055E:
000117A6 5268 0008                  		addq.w	#1,8(a0)
000117AA 3168 0008 0034             		move.w	8(a0),$34(a0)
000117B0 5268 003A                  		addq.w	#1,$3A(a0)
000117B4 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
000117BA 6600                       		bne.s	locret_10578
000117BC 4228 0028                  		clr.b	$28(a0)
000117C0                            
000117C0                            locret_10578:
000117C0 4E75                       		rts	
000117C2                            ; ===========================================================================
000117C2                            
000117C2                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
000117C2 4A28 0038                  		tst.b	$38(a0)
000117C6 6600                       		bne.s	loc_10598
000117C8 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000117CC 7000                       		moveq	#0,d0
000117CE 1028 003C                  		move.b	$3C(a0),d0
000117D2 0832 0000 0000             		btst	#0,(a2,d0.w)
000117D8 6700                       		beq.s	loc_105A2
000117DA 117C 0001 0038             		move.b	#1,$38(a0)
000117E0                            
000117E0                            loc_10598:
000117E0 4A68 003A                  		tst.w	$3A(a0)
000117E4 6700                       		beq.s	loc_105C0
000117E6 5568 003A                  		subq.w	#2,$3A(a0)
000117EA                            
000117EA                            loc_105A2:
000117EA 3028 003A                  		move.w	$3A(a0),d0
000117EE 0828 0000 0022             		btst	#0,$22(a0)
000117F4 6700                       		beq.s	loc_105B4
000117F6 4440                       		neg.w	d0
000117F8 0640 0080                  		addi.w	#$80,d0
000117FC                            
000117FC                            loc_105B4:
000117FC 3228 0034                  		move.w	$34(a0),d1
00011800 D240                       		add.w	d0,d1
00011802 3141 0008                  		move.w	d1,8(a0)
00011806 4E75                       		rts	
00011808                            ; ===========================================================================
00011808                            
00011808                            loc_105C0:
00011808 5228 0028                  		addq.b	#1,$28(a0)
0001180C 4228 0038                  		clr.b	$38(a0)
00011810 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011814 7000                       		moveq	#0,d0
00011816 1028 0023                  		move.b	$23(a0),d0
0001181A 67CE                       		beq.s	loc_105A2
0001181C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00011822 60C6                       		bra.s	loc_105A2
00011824                            ; ===========================================================================
00011824                            
00011824                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
00011824 4A28 0038                  		tst.b	$38(a0)
00011828 6600                       		bne.s	loc_105F8
0001182A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001182E 7000                       		moveq	#0,d0
00011830 1028 003C                  		move.b	$3C(a0),d0
00011834 4A32 0000                  		tst.b	(a2,d0.w)
00011838 6A00                       		bpl.s	loc_10606
0001183A 117C 0001 0038             		move.b	#1,$38(a0)
00011840                            
00011840                            loc_105F8:
00011840 303C 0080                  		move.w	#$80,d0
00011844 B068 003A                  		cmp.w	$3A(a0),d0
00011848 6700                       		beq.s	loc_10624
0001184A 5468 003A                  		addq.w	#2,$3A(a0)
0001184E                            
0001184E                            loc_10606:
0001184E 3028 003A                  		move.w	$3A(a0),d0
00011852 0828 0000 0022             		btst	#0,$22(a0)
00011858 6700                       		beq.s	loc_10618
0001185A 4440                       		neg.w	d0
0001185C 0640 0080                  		addi.w	#$80,d0
00011860                            
00011860                            loc_10618:
00011860 3228 0034                  		move.w	$34(a0),d1
00011864 D240                       		add.w	d0,d1
00011866 3141 0008                  		move.w	d1,8(a0)
0001186A 4E75                       		rts	
0001186C                            ; ===========================================================================
0001186C                            
0001186C                            loc_10624:
0001186C 5328 0028                  		subq.b	#1,$28(a0)
00011870 4228 0038                  		clr.b	$38(a0)
00011874 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011878 7000                       		moveq	#0,d0
0001187A 1028 0023                  		move.b	$23(a0),d0
0001187E 67CE                       		beq.s	loc_10606
00011880 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00011886 60C6                       		bra.s	loc_10606
00011888                            ; ===========================================================================
00011888                            
00011888                            Obj56_Type08:				; XREF: Obj56_TypeIndex
00011888 323C 0010                  		move.w	#$10,d1
0001188C 7000                       		moveq	#0,d0
0001188E 1038 FE88                  		move.b	($FFFFFE88).w,d0
00011892 E248                       		lsr.w	#1,d0
00011894 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
00011898 6000                       		bra.s	Obj56_Move_Sqr
0001189A                            ; ===========================================================================
0001189A                            
0001189A                            Obj56_Type09:				; XREF: Obj56_TypeIndex
0001189A 323C 0030                  		move.w	#$30,d1
0001189E 7000                       		moveq	#0,d0
000118A0 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
000118A4 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
000118A8 6000                       		bra.s	Obj56_Move_Sqr
000118AA                            ; ===========================================================================
000118AA                            
000118AA                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
000118AA 323C 0050                  		move.w	#$50,d1
000118AE 7000                       		moveq	#0,d0
000118B0 1038 FE90                  		move.b	($FFFFFE90).w,d0
000118B4 3638 FE92                  		move.w	($FFFFFE92).w,d3
000118B8 6000                       		bra.s	Obj56_Move_Sqr
000118BA                            ; ===========================================================================
000118BA                            
000118BA                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
000118BA 323C 0070                  		move.w	#$70,d1
000118BE 7000                       		moveq	#0,d0
000118C0 1038 FE94                  		move.b	($FFFFFE94).w,d0
000118C4 3638 FE96                  		move.w	($FFFFFE96).w,d3
000118C8                            
000118C8                            Obj56_Move_Sqr:
000118C8 4A43                       		tst.w	d3
000118CA 6600                       		bne.s	loc_1068E
000118CC 5228 0022                  		addq.b	#1,$22(a0)
000118D0 0228 0003 0022             		andi.b	#3,$22(a0)
000118D6                            
000118D6                            loc_1068E:
000118D6 1428 0022                  		move.b	$22(a0),d2
000118DA 0202 0003                  		andi.b	#3,d2
000118DE 6600                       		bne.s	loc_106AE
000118E0 9041                       		sub.w	d1,d0
000118E2 D068 0034                  		add.w	$34(a0),d0
000118E6 3140 0008                  		move.w	d0,8(a0)
000118EA 4441                       		neg.w	d1
000118EC D268 0030                  		add.w	$30(a0),d1
000118F0 3141 000C                  		move.w	d1,$C(a0)
000118F4 4E75                       		rts	
000118F6                            ; ===========================================================================
000118F6                            
000118F6                            loc_106AE:
000118F6 5302                       		subq.b	#1,d2
000118F8 6600                       		bne.s	loc_106CC
000118FA 5341                       		subq.w	#1,d1
000118FC 9041                       		sub.w	d1,d0
000118FE 4440                       		neg.w	d0
00011900 D068 0030                  		add.w	$30(a0),d0
00011904 3140 000C                  		move.w	d0,$C(a0)
00011908 5241                       		addq.w	#1,d1
0001190A D268 0034                  		add.w	$34(a0),d1
0001190E 3141 0008                  		move.w	d1,8(a0)
00011912 4E75                       		rts	
00011914                            ; ===========================================================================
00011914                            
00011914                            loc_106CC:
00011914 5302                       		subq.b	#1,d2
00011916 6600                       		bne.s	loc_106EA
00011918 5341                       		subq.w	#1,d1
0001191A 9041                       		sub.w	d1,d0
0001191C 4440                       		neg.w	d0
0001191E D068 0034                  		add.w	$34(a0),d0
00011922 3140 0008                  		move.w	d0,8(a0)
00011926 5241                       		addq.w	#1,d1
00011928 D268 0030                  		add.w	$30(a0),d1
0001192C 3141 000C                  		move.w	d1,$C(a0)
00011930 4E75                       		rts	
00011932                            ; ===========================================================================
00011932                            
00011932                            loc_106EA:
00011932 9041                       		sub.w	d1,d0
00011934 D068 0030                  		add.w	$30(a0),d0
00011938 3140 000C                  		move.w	d0,$C(a0)
0001193C 4441                       		neg.w	d1
0001193E D268 0034                  		add.w	$34(a0),d1
00011942 3141 0008                  		move.w	d1,8(a0)
00011946 4E75                       		rts	
00011948                            ; ===========================================================================
00011948                            ; ---------------------------------------------------------------------------
00011948                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00011948                            ; ---------------------------------------------------------------------------
00011948                            Map_obj56:
00011948                            	include "_maps\obj56.asm"
00011948                            ; ---------------------------------------------------------------------------
00011948                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00011948                            ; ---------------------------------------------------------------------------
00011948 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
0001194C 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
00011950 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
00011954 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
00011958 01                         byte_10710:	dc.b 1
00011959 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
0001195E 04                         byte_10716:	dc.b 4
0001195F E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
00011964 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00011969 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
0001196E 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00011973 02                         byte_1072B:	dc.b 2
00011974 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
00011979 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
0001197E 04                         byte_10736:	dc.b 4
0001197F E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
00011984 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00011989 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
0001198E 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00011993 03                         byte_1074B:	dc.b 3
00011994 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
00011999 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
0001199E 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
000119A3 01                         byte_1075B:	dc.b 1
000119A4 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
000119A9 02                         byte_10761:	dc.b 2
000119AA E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
000119AF 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
000119B4 04                         byte_1076C:	dc.b 4
000119B5 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
000119BA F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
000119BF F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
000119C4 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
000119CA 00                         		even
000119CA 00                         		even
000119CA                            
000119CA                            ; ===========================================================================
000119CA                            ; ---------------------------------------------------------------------------
000119CA                            ; Object 57 - spiked balls (SYZ, LZ)
000119CA                            ; ---------------------------------------------------------------------------
000119CA                            
000119CA                            Obj57:					; XREF: Obj_Index
000119CA 7000                       		moveq	#0,d0
000119CC 1028 0024                  		move.b	$24(a0),d0
000119D0 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
000119D4 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
000119D8                            ; ===========================================================================
000119D8 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
000119DA 0000                       		dc.w Obj57_Move-Obj57_Index
000119DC 0000                       		dc.w Obj57_Display-Obj57_Index
000119DE                            ; ===========================================================================
000119DE                            
000119DE                            Obj57_Main:				; XREF: Obj57_Index
000119DE 5428 0024                  		addq.b	#2,$24(a0)
000119E2 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
000119EA 317C 03BA 0002             		move.w	#$3BA,2(a0)
000119F0 117C 0004 0001             		move.b	#4,1(a0)
000119F6 117C 0004 0018             		move.b	#4,$18(a0)
000119FC 117C 0008 0019             		move.b	#8,$19(a0)
00011A02 3168 0008 003A             		move.w	8(a0),$3A(a0)
00011A08 3168 000C 0038             		move.w	$C(a0),$38(a0)
00011A0E 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
00011A14 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011A1A 6600                       		bne.s	loc_107E8
00011A1C 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
00011A22 317C 0310 0002             		move.w	#$310,2(a0)
00011A28 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
00011A30                            
00011A30                            loc_107E8:
00011A30 1228 0028                  		move.b	$28(a0),d1	; get object type
00011A34 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00011A38 4881                       		ext.w	d1
00011A3A E741                       		asl.w	#3,d1		; multiply by 8
00011A3C 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
00011A40 1028 0022                  		move.b	$22(a0),d0
00011A44 E418                       		ror.b	#2,d0
00011A46 0200 00C0                  		andi.b	#-$40,d0
00011A4A 1140 0026                  		move.b	d0,$26(a0)
00011A4E 45E8 0029                  		lea	$29(a0),a2
00011A52 1228 0028                  		move.b	$28(a0),d1	; get object type
00011A56 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
00011A5A 14FC 0000                  		move.b	#0,(a2)+
00011A5E 3601                       		move.w	d1,d3
00011A60 E94B                       		lsl.w	#4,d3
00011A62 1143 003C                  		move.b	d3,$3C(a0)
00011A66 5341                       		subq.w	#1,d1		; set chain length (type-1)
00011A68 6500                       		bcs.s	loc_10894
00011A6A 0828 0003 0028             		btst	#3,$28(a0)
00011A70 6700                       		beq.s	Obj57_MakeChain
00011A72 5341                       		subq.w	#1,d1
00011A74 6500                       		bcs.s	loc_10894
00011A76                            
00011A76                            Obj57_MakeChain:
00011A76 6100 D16C                  		bsr.w	SingleObjLoad
00011A7A 6600                       		bne.s	loc_10894
00011A7C 5228 0029                  		addq.b	#1,$29(a0)
00011A80 3A09                       		move.w	a1,d5
00011A82 0445 D000                  		subi.w	#-$3000,d5
00011A86 EC4D                       		lsr.w	#6,d5
00011A88 0245 007F                  		andi.w	#$7F,d5
00011A8C 14C5                       		move.b	d5,(a2)+
00011A8E 137C 0004 0024             		move.b	#4,$24(a1)
00011A94 1368 0000 0000             		move.b	0(a0),0(a1)
00011A9A 2368 0004 0004             		move.l	4(a0),4(a1)
00011AA0 3368 0002 0002             		move.w	2(a0),2(a1)
00011AA6 1368 0001 0001             		move.b	1(a0),1(a1)
00011AAC 1368 0018 0018             		move.b	$18(a0),$18(a1)
00011AB2 1368 0019 0019             		move.b	$19(a0),$19(a1)
00011AB8 1368 0020 0020             		move.b	$20(a0),$20(a1)
00011ABE 0403 0010                  		subi.b	#$10,d3
00011AC2 1343 003C                  		move.b	d3,$3C(a1)
00011AC6 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00011ACC 6600                       		bne.s	loc_10890
00011ACE 4A03                       		tst.b	d3
00011AD0 6600                       		bne.s	loc_10890
00011AD2 137C 0002 001A             		move.b	#2,$1A(a1)
00011AD8                            
00011AD8                            loc_10890:
00011AD8 51C9 FF9C                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
00011ADC                            
00011ADC                            loc_10894:
00011ADC 3A08                       		move.w	a0,d5
00011ADE 0445 D000                  		subi.w	#-$3000,d5
00011AE2 EC4D                       		lsr.w	#6,d5
00011AE4 0245 007F                  		andi.w	#$7F,d5
00011AE8 14C5                       		move.b	d5,(a2)+
00011AEA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011AF0 6600                       		bne.s	Obj57_Move
00011AF2 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
00011AF8 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
00011AFE                            
00011AFE                            Obj57_Move:				; XREF: Obj57_Index
00011AFE 6100 0000                  		bsr.w	Obj57_MoveSub
00011B02 6000 0000                  		bra.w	Obj57_ChkDel
00011B06                            ; ===========================================================================
00011B06                            
00011B06                            Obj57_MoveSub:				; XREF: Obj57_Move
00011B06 3028 003E                  		move.w	$3E(a0),d0
00011B0A D168 0026                  		add.w	d0,$26(a0)
00011B0E 1028 0026                  		move.b	$26(a0),d0
00011B12 4EB9 0000 3274             		jsr	(CalcSine).l
00011B18 3428 0038                  		move.w	$38(a0),d2
00011B1C 3628 003A                  		move.w	$3A(a0),d3
00011B20 45E8 0029                  		lea	$29(a0),a2
00011B24 7C00                       		moveq	#0,d6
00011B26 1C1A                       		move.b	(a2)+,d6
00011B28                            
00011B28                            Obj57_MoveLoop:
00011B28 7800                       		moveq	#0,d4
00011B2A 181A                       		move.b	(a2)+,d4
00011B2C ED4C                       		lsl.w	#6,d4
00011B2E 0684 00FF D000             		addi.l	#$FFD000,d4
00011B34 2244                       		movea.l	d4,a1
00011B36 7800                       		moveq	#0,d4
00011B38 1829 003C                  		move.b	$3C(a1),d4
00011B3C 2A04                       		move.l	d4,d5
00011B3E C9C0                       		muls.w	d0,d4
00011B40 E084                       		asr.l	#8,d4
00011B42 CBC1                       		muls.w	d1,d5
00011B44 E085                       		asr.l	#8,d5
00011B46 D842                       		add.w	d2,d4
00011B48 DA43                       		add.w	d3,d5
00011B4A 3344 000C                  		move.w	d4,$C(a1)
00011B4E 3345 0008                  		move.w	d5,8(a1)
00011B52 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
00011B56 4E75                       		rts	
00011B58                            ; ===========================================================================
00011B58                            
00011B58                            Obj57_ChkDel:				; XREF: Obj57_Move
00011B58 3028 003A                  		move.w	$3A(a0),d0
00011B5C 0240 FF80                  		andi.w	#$FF80,d0
00011B60 3238 F700                  		move.w	($FFFFF700).w,d1
00011B64 0441 0080                  		subi.w	#$80,d1
00011B68 0241 FF80                  		andi.w	#$FF80,d1
00011B6C 9041                       		sub.w	d1,d0
00011B6E 0C40 0280                  		cmpi.w	#$280,d0
00011B72 6200 0000                  		bhi.w	Obj57_Delete
00011B76 6000 CBE4                  		bra.w	DisplaySprite
00011B7A                            ; ===========================================================================
00011B7A                            
00011B7A                            Obj57_Delete:				; XREF: Obj57_ChkDel
00011B7A 7400                       		moveq	#0,d2
00011B7C 45E8 0029                  		lea	$29(a0),a2
00011B80 141A                       		move.b	(a2)+,d2
00011B82                            
00011B82                            Obj57_DelLoop:
00011B82 7000                       		moveq	#0,d0
00011B84 101A                       		move.b	(a2)+,d0
00011B86 ED48                       		lsl.w	#6,d0
00011B88 0680 00FF D000             		addi.l	#$FFD000,d0
00011B8E 2240                       		movea.l	d0,a1
00011B90 6100 CC08                  		bsr.w	DeleteObject2
00011B94 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
00011B98                            
00011B98 4E75                       		rts	
00011B9A                            ; ===========================================================================
00011B9A                            
00011B9A                            Obj57_Display:				; XREF: Obj57_Index
00011B9A 6000 CBC0                  		bra.w	DisplaySprite
00011B9E                            ; ===========================================================================
00011B9E                            ; ---------------------------------------------------------------------------
00011B9E                            ; Sprite mappings - chain of spiked balls (SYZ)
00011B9E                            ; ---------------------------------------------------------------------------
00011B9E                            Map_obj57:
00011B9E                            	include "_maps\obj57syz.asm"
00011B9E                            ; ---------------------------------------------------------------------------
00011B9E                            ; Sprite mappings - chain of spiked balls (SYZ)
00011B9E                            ; ---------------------------------------------------------------------------
00011B9E 0000                       		dc.w byte_10958-Map_obj57
00011BA0 01                         byte_10958:	dc.b 1
00011BA1 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00011BA6                            		even
00011BA6                            		even
00011BA6                            
00011BA6                            ; ---------------------------------------------------------------------------
00011BA6                            ; Sprite mappings - spiked ball	on a chain (LZ)
00011BA6                            ; ---------------------------------------------------------------------------
00011BA6                            Map_obj57a:
00011BA6                            	include "_maps\obj57lz.asm"
00011BA6                            ; ---------------------------------------------------------------------------
00011BA6                            ; Sprite mappings - spiked ball	on a chain (LZ)
00011BA6                            ; ---------------------------------------------------------------------------
00011BA6 0000                       		dc.w byte_10964-Map_obj57a
00011BA8 0000                       		dc.w byte_1096A-Map_obj57a
00011BAA 0000                       		dc.w byte_10970-Map_obj57a
00011BAC 01                         byte_10964:	dc.b 1
00011BAD F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00011BB2 01                         byte_1096A:	dc.b 1
00011BB3 F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
00011BB8 01                         byte_10970:	dc.b 1
00011BB9 F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
00011BBE                            		even
00011BBE                            		even
00011BBE                            
00011BBE                            ; ===========================================================================
00011BBE                            ; ---------------------------------------------------------------------------
00011BBE                            ; Object 58 - giant spiked balls (SYZ)
00011BBE                            ; ---------------------------------------------------------------------------
00011BBE                            
00011BBE                            Obj58:					; XREF: Obj_Index
00011BBE 7000                       		moveq	#0,d0
00011BC0 1028 0024                  		move.b	$24(a0),d0
00011BC4 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
00011BC8 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
00011BCC                            ; ===========================================================================
00011BCC 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
00011BCE 0000                       		dc.w Obj58_Move-Obj58_Index
00011BD0                            ; ===========================================================================
00011BD0                            
00011BD0                            Obj58_Main:				; XREF: Obj58_Index
00011BD0 5428 0024                  		addq.b	#2,$24(a0)
00011BD4 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
00011BDC 317C 0396 0002             		move.w	#$396,2(a0)
00011BE2 117C 0004 0001             		move.b	#4,1(a0)
00011BE8 117C 0004 0018             		move.b	#4,$18(a0)
00011BEE 117C 0018 0019             		move.b	#$18,$19(a0)
00011BF4 3168 0008 003A             		move.w	8(a0),$3A(a0)
00011BFA 3168 000C 0038             		move.w	$C(a0),$38(a0)
00011C00 117C 0086 0020             		move.b	#$86,$20(a0)
00011C06 1228 0028                  		move.b	$28(a0),d1	; get object type
00011C0A 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00011C0E 4881                       		ext.w	d1
00011C10 E741                       		asl.w	#3,d1		; multiply by 8
00011C12 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
00011C16 1028 0022                  		move.b	$22(a0),d0
00011C1A E418                       		ror.b	#2,d0
00011C1C 0200 00C0                  		andi.b	#$C0,d0
00011C20 1140 0026                  		move.b	d0,$26(a0)
00011C24 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
00011C2A                            
00011C2A                            Obj58_Move:				; XREF: Obj58_Index
00011C2A 7000                       		moveq	#0,d0
00011C2C 1028 0028                  		move.b	$28(a0),d0	; get object type
00011C30 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
00011C34 D040                       		add.w	d0,d0
00011C36 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
00011C3A 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
00011C3E 3028 003A                  		move.w	$3A(a0),d0
00011C42 0240 FF80                  		andi.w	#$FF80,d0
00011C46 3238 F700                  		move.w	($FFFFF700).w,d1
00011C4A 0441 0080                  		subi.w	#$80,d1
00011C4E 0241 FF80                  		andi.w	#$FF80,d1
00011C52 9041                       		sub.w	d1,d0
00011C54 0C40 0280                  		cmpi.w	#$280,d0
00011C58 6200 CB3E                  		bhi.w	DeleteObject
00011C5C 6000 CAFE                  		bra.w	DisplaySprite
00011C60                            ; ===========================================================================
00011C60 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
00011C62 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
00011C64 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
00011C66 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
00011C68                            ; ===========================================================================
00011C68                            
00011C68                            Obj58_Type00:				; XREF: Obj58_TypeIndex
00011C68 4E75                       		rts	
00011C6A                            ; ===========================================================================
00011C6A                            
00011C6A                            Obj58_Type01:				; XREF: Obj58_TypeIndex
00011C6A 323C 0060                  		move.w	#$60,d1
00011C6E 7000                       		moveq	#0,d0
00011C70 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00011C74 0828 0000 0022             		btst	#0,$22(a0)
00011C7A 6700                       		beq.s	loc_10A38
00011C7C 4440                       		neg.w	d0
00011C7E D041                       		add.w	d1,d0
00011C80                            
00011C80                            loc_10A38:
00011C80 3228 003A                  		move.w	$3A(a0),d1
00011C84 9240                       		sub.w	d0,d1
00011C86 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00011C8A 4E75                       		rts	
00011C8C                            ; ===========================================================================
00011C8C                            
00011C8C                            Obj58_Type02:				; XREF: Obj58_TypeIndex
00011C8C 323C 0060                  		move.w	#$60,d1
00011C90 7000                       		moveq	#0,d0
00011C92 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00011C96 0828 0000 0022             		btst	#0,$22(a0)
00011C9C 6700                       		beq.s	loc_10A5C
00011C9E 4440                       		neg.w	d0
00011CA0 0640 0080                  		addi.w	#$80,d0
00011CA4                            
00011CA4                            loc_10A5C:
00011CA4 3228 0038                  		move.w	$38(a0),d1
00011CA8 9240                       		sub.w	d0,d1
00011CAA 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00011CAE 4E75                       		rts	
00011CB0                            ; ===========================================================================
00011CB0                            
00011CB0                            Obj58_Type03:				; XREF: Obj58_TypeIndex
00011CB0 3028 003E                  		move.w	$3E(a0),d0
00011CB4 D168 0026                  		add.w	d0,$26(a0)
00011CB8 1028 0026                  		move.b	$26(a0),d0
00011CBC 4EB9 0000 3274             		jsr	(CalcSine).l
00011CC2 3428 0038                  		move.w	$38(a0),d2
00011CC6 3628 003A                  		move.w	$3A(a0),d3
00011CCA 7800                       		moveq	#0,d4
00011CCC 1828 003C                  		move.b	$3C(a0),d4
00011CD0 2A04                       		move.l	d4,d5
00011CD2 C9C0                       		muls.w	d0,d4
00011CD4 E084                       		asr.l	#8,d4
00011CD6 CBC1                       		muls.w	d1,d5
00011CD8 E085                       		asr.l	#8,d5
00011CDA D842                       		add.w	d2,d4
00011CDC DA43                       		add.w	d3,d5
00011CDE 3144 000C                  		move.w	d4,$C(a0)
00011CE2 3145 0008                  		move.w	d5,8(a0)
00011CE6 4E75                       		rts	
00011CE8                            ; ===========================================================================
00011CE8                            ; ---------------------------------------------------------------------------
00011CE8                            ; Sprite mappings - SBZ	spiked ball on a chain
00011CE8                            ; ---------------------------------------------------------------------------
00011CE8                            Map_obj15b:
00011CE8                            	include "_maps\obj15sbz.asm"
00011CE8                            ; ---------------------------------------------------------------------------
00011CE8                            ; Sprite mappings - spiked ball on a chain (SBZ)
00011CE8                            ; ---------------------------------------------------------------------------
00011CE8 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
00011CEC 0000                       		dc.w byte_10AC6-Map_obj15b
00011CEE 05                         byte_10AA6:	dc.b 5
00011CEF E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
00011CF4 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
00011CF9 F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
00011CFE F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
00011D03 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
00011D08 01                         byte_10AC0:	dc.b 1
00011D09 F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
00011D0E 02                         byte_10AC6:	dc.b 2
00011D0F F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
00011D14 E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
00011D1A 00                         		even
00011D1A 00                         		even
00011D1A                            
00011D1A                            ; ===========================================================================
00011D1A                            ; ---------------------------------------------------------------------------
00011D1A                            ; Object 59 - platforms	that move when you stand on them (SLZ)
00011D1A                            ; ---------------------------------------------------------------------------
00011D1A                            
00011D1A                            Obj59:					; XREF: Obj_Index
00011D1A 7000                       		moveq	#0,d0
00011D1C 1028 0024                  		move.b	$24(a0),d0
00011D20 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
00011D24 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
00011D28 3028 0032                  		move.w	$32(a0),d0
00011D2C 0240 FF80                  		andi.w	#$FF80,d0
00011D30 3238 F700                  		move.w	($FFFFF700).w,d1
00011D34 0441 0080                  		subi.w	#$80,d1
00011D38 0241 FF80                  		andi.w	#$FF80,d1
00011D3C 9041                       		sub.w	d1,d0
00011D3E 0C40 0280                  		cmpi.w	#$280,d0
00011D42 6200 CA54                  		bhi.w	DeleteObject
00011D46 6000 CA14                  		bra.w	DisplaySprite
00011D4A                            ; ===========================================================================
00011D4A 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
00011D4C 0000                       		dc.w Obj59_Platform-Obj59_Index
00011D4E 0000                       		dc.w Obj59_Action-Obj59_Index
00011D50 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
00011D52                            
00011D52 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
00011D54                            
00011D54 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
00011D56 2001                       		dc.b $20, 1
00011D58 3401                       		dc.b $34, 1
00011D5A 1003                       		dc.b $10, 3
00011D5C 2003                       		dc.b $20, 3
00011D5E 3403                       		dc.b $34, 3
00011D60 1401                       		dc.b $14, 1
00011D62 2401                       		dc.b $24, 1
00011D64 2C01                       		dc.b $2C, 1
00011D66 1403                       		dc.b $14, 3
00011D68 2403                       		dc.b $24, 3
00011D6A 2C03                       		dc.b $2C, 3
00011D6C 2005                       		dc.b $20, 5
00011D6E 2007                       		dc.b $20, 7
00011D70 3009                       		dc.b $30, 9
00011D72                            ; ===========================================================================
00011D72                            
00011D72                            Obj59_Main:				; XREF: Obj59_Index
00011D72 5428 0024                  		addq.b	#2,$24(a0)
00011D76 7000                       		moveq	#0,d0
00011D78 1028 0028                  		move.b	$28(a0),d0
00011D7C 6A00                       		bpl.s	Obj59_Main2
00011D7E 5828 0024                  		addq.b	#4,$24(a0)
00011D82 0240 007F                  		andi.w	#$7F,d0
00011D86 C0FC 0006                  		mulu.w	#6,d0
00011D8A 3140 003C                  		move.w	d0,$3C(a0)
00011D8E 3140 003E                  		move.w	d0,$3E(a0)
00011D92 588F                       		addq.l	#4,sp
00011D94 4E75                       		rts	
00011D96                            ; ===========================================================================
00011D96                            
00011D96                            Obj59_Main2:
00011D96 E648                       		lsr.w	#3,d0
00011D98 0240 001E                  		andi.w	#$1E,d0
00011D9C 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
00011DA0 115A 0019                  		move.b	(a2)+,$19(a0)
00011DA4 115A 001A                  		move.b	(a2)+,$1A(a0)
00011DA8 7000                       		moveq	#0,d0
00011DAA 1028 0028                  		move.b	$28(a0),d0
00011DAE D040                       		add.w	d0,d0
00011DB0 0240 001E                  		andi.w	#$1E,d0
00011DB4 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
00011DB8 101A                       		move.b	(a2)+,d0
00011DBA E548                       		lsl.w	#2,d0
00011DBC 3140 003C                  		move.w	d0,$3C(a0)
00011DC0 115A 0028                  		move.b	(a2)+,$28(a0)
00011DC4 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
00011DCC 317C 4000 0002             		move.w	#$4000,2(a0)
00011DD2 117C 0004 0001             		move.b	#4,1(a0)
00011DD8 117C 0004 0018             		move.b	#4,$18(a0)
00011DDE 3168 0008 0032             		move.w	8(a0),$32(a0)
00011DE4 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011DEA                            
00011DEA                            Obj59_Platform:				; XREF: Obj59_Index
00011DEA 7200                       		moveq	#0,d1
00011DEC 1228 0019                  		move.b	$19(a0),d1
00011DF0 4EB9 0000 8508             		jsr	(PlatformObject).l
00011DF6 6000 0000                  		bra.w	Obj59_Types
00011DFA                            ; ===========================================================================
00011DFA                            
00011DFA                            Obj59_Action:				; XREF: Obj59_Index
00011DFA 7200                       		moveq	#0,d1
00011DFC 1228 0019                  		move.b	$19(a0),d1
00011E00 4EB9 0000 867C             		jsr	(ExitPlatform).l
00011E06 3F28 0008                  		move.w	8(a0),-(sp)
00011E0A 6100 0000                  		bsr.w	Obj59_Types
00011E0E 341F                       		move.w	(sp)+,d2
00011E10 4A28 0000                  		tst.b	0(a0)
00011E14 6700                       		beq.s	locret_10BD4
00011E16 4EF9 0000 8BEA             		jmp	(MvSonicOnPtfm2).l
00011E1C                            ; ===========================================================================
00011E1C                            
00011E1C                            locret_10BD4:
00011E1C 4E75                       		rts	
00011E1E                            ; ===========================================================================
00011E1E                            
00011E1E                            Obj59_Types:
00011E1E 7000                       		moveq	#0,d0
00011E20 1028 0028                  		move.b	$28(a0),d0
00011E24 0240 000F                  		andi.w	#$F,d0
00011E28 D040                       		add.w	d0,d0
00011E2A 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
00011E2E 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
00011E32                            ; ===========================================================================
00011E32 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011E36 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011E3A 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011E3E 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011E42 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
00011E46                            ; ===========================================================================
00011E46                            
00011E46                            Obj59_Type00:				; XREF: Obj59_TypeIndex
00011E46 4E75                       		rts	
00011E48                            ; ===========================================================================
00011E48                            
00011E48                            Obj59_Type01:				; XREF: Obj59_TypeIndex
00011E48 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
00011E4E 6600                       		bne.s	locret_10C0C
00011E50 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00011E54                            
00011E54                            locret_10C0C:
00011E54 4E75                       		rts	
00011E56                            ; ===========================================================================
00011E56                            
00011E56                            Obj59_Type02:				; XREF: Obj59_TypeIndex
00011E56 6100 0000                  		bsr.w	Obj59_Move
00011E5A 3028 0034                  		move.w	$34(a0),d0
00011E5E 4440                       		neg.w	d0
00011E60 D068 0030                  		add.w	$30(a0),d0
00011E64 3140 000C                  		move.w	d0,$C(a0)
00011E68 4E75                       		rts	
00011E6A                            ; ===========================================================================
00011E6A                            
00011E6A                            Obj59_Type04:				; XREF: Obj59_TypeIndex
00011E6A 6100 0000                  		bsr.w	Obj59_Move
00011E6E 3028 0034                  		move.w	$34(a0),d0
00011E72 D068 0030                  		add.w	$30(a0),d0
00011E76 3140 000C                  		move.w	d0,$C(a0)
00011E7A 4E75                       		rts	
00011E7C                            ; ===========================================================================
00011E7C                            
00011E7C                            Obj59_Type06:				; XREF: Obj59_TypeIndex
00011E7C 6100 0000                  		bsr.w	Obj59_Move
00011E80 3028 0034                  		move.w	$34(a0),d0
00011E84 E240                       		asr.w	#1,d0
00011E86 4440                       		neg.w	d0
00011E88 D068 0030                  		add.w	$30(a0),d0
00011E8C 3140 000C                  		move.w	d0,$C(a0)
00011E90 3028 0034                  		move.w	$34(a0),d0
00011E94 D068 0032                  		add.w	$32(a0),d0
00011E98 3140 0008                  		move.w	d0,8(a0)
00011E9C 4E75                       		rts	
00011E9E                            ; ===========================================================================
00011E9E                            
00011E9E                            Obj59_Type08:				; XREF: Obj59_TypeIndex
00011E9E 6100 0000                  		bsr.w	Obj59_Move
00011EA2 3028 0034                  		move.w	$34(a0),d0
00011EA6 E240                       		asr.w	#1,d0
00011EA8 D068 0030                  		add.w	$30(a0),d0
00011EAC 3140 000C                  		move.w	d0,$C(a0)
00011EB0 3028 0034                  		move.w	$34(a0),d0
00011EB4 4440                       		neg.w	d0
00011EB6 D068 0032                  		add.w	$32(a0),d0
00011EBA 3140 0008                  		move.w	d0,8(a0)
00011EBE 4E75                       		rts	
00011EC0                            ; ===========================================================================
00011EC0                            
00011EC0                            Obj59_Type09:				; XREF: Obj59_TypeIndex
00011EC0 6100 0000                  		bsr.w	Obj59_Move
00011EC4 3028 0034                  		move.w	$34(a0),d0
00011EC8 4440                       		neg.w	d0
00011ECA D068 0030                  		add.w	$30(a0),d0
00011ECE 3140 000C                  		move.w	d0,$C(a0)
00011ED2 4A28 0028                  		tst.b	$28(a0)
00011ED6 6700 0000                  		beq.w	loc_10C94
00011EDA 4E75                       		rts	
00011EDC                            ; ===========================================================================
00011EDC                            
00011EDC                            loc_10C94:
00011EDC 0828 0003 0022             		btst	#3,$22(a0)
00011EE2 6700                       		beq.s	Obj59_Delete
00011EE4 08E9 0001 0022             		bset	#1,$22(a1)
00011EEA 08A9 0003 0022             		bclr	#3,$22(a1)
00011EF0 137C 0002 0024             		move.b	#2,$24(a1)
00011EF6                            
00011EF6                            Obj59_Delete:
00011EF6 6000 C8A0                  		bra.w	DeleteObject
00011EFA                            
00011EFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011EFA                            
00011EFA                            
00011EFA                            Obj59_Move:				; XREF: Obj59_Type02; et al
00011EFA 3028 0038                  		move.w	$38(a0),d0
00011EFE 4A28 003A                  		tst.b	$3A(a0)
00011F02 6600                       		bne.s	loc_10CC8
00011F04 0C40 0800                  		cmpi.w	#$800,d0
00011F08 6400                       		bcc.s	loc_10CD0
00011F0A 0640 0010                  		addi.w	#$10,d0
00011F0E 6000                       		bra.s	loc_10CD0
00011F10                            ; ===========================================================================
00011F10                            
00011F10                            loc_10CC8:
00011F10 4A40                       		tst.w	d0
00011F12 6700                       		beq.s	loc_10CD0
00011F14 0440 0010                  		subi.w	#$10,d0
00011F18                            
00011F18                            loc_10CD0:
00011F18 3140 0038                  		move.w	d0,$38(a0)
00011F1C 48C0                       		ext.l	d0
00011F1E E180                       		asl.l	#8,d0
00011F20 D0A8 0034                  		add.l	$34(a0),d0
00011F24 2140 0034                  		move.l	d0,$34(a0)
00011F28 4840                       		swap	d0
00011F2A 3428 003C                  		move.w	$3C(a0),d2
00011F2E B042                       		cmp.w	d2,d0
00011F30 6300                       		bls.s	loc_10CF0
00011F32 117C 0001 003A             		move.b	#1,$3A(a0)
00011F38                            
00011F38                            loc_10CF0:
00011F38 D442                       		add.w	d2,d2
00011F3A B042                       		cmp.w	d2,d0
00011F3C 6600                       		bne.s	locret_10CFA
00011F3E 4228 0028                  		clr.b	$28(a0)
00011F42                            
00011F42                            locret_10CFA:
00011F42 4E75                       		rts	
00011F44                            ; End of function Obj59_Move
00011F44                            
00011F44                            ; ===========================================================================
00011F44                            
00011F44                            Obj59_MakeMulti:			; XREF: Obj59_Index
00011F44 5368 003C                  		subq.w	#1,$3C(a0)
00011F48 6600                       		bne.s	Obj59_ChkDel
00011F4A 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
00011F50 6100 CC92                  		bsr.w	SingleObjLoad
00011F54 6600                       		bne.s	Obj59_ChkDel
00011F56 137C 0059 0000             		move.b	#$59,0(a1)	; duplicate the	object
00011F5C 3368 0008 0008             		move.w	8(a0),8(a1)
00011F62 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011F68 137C 000E 0028             		move.b	#$E,$28(a1)
00011F6E                            
00011F6E                            Obj59_ChkDel:
00011F6E 588F                       		addq.l	#4,sp
00011F70 3028 0008                  		move.w	8(a0),d0
00011F74 0240 FF80                  		andi.w	#$FF80,d0
00011F78 3238 F700                  		move.w	($FFFFF700).w,d1
00011F7C 0441 0080                  		subi.w	#$80,d1
00011F80 0241 FF80                  		andi.w	#$FF80,d1
00011F84 9041                       		sub.w	d1,d0
00011F86 0C40 0280                  		cmpi.w	#$280,d0
00011F8A 6200 C80C                  		bhi.w	DeleteObject
00011F8E 4E75                       		rts	
00011F90                            ; ===========================================================================
00011F90                            ; ---------------------------------------------------------------------------
00011F90                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00011F90                            ; ---------------------------------------------------------------------------
00011F90                            Map_obj59:
00011F90                            	include "_maps\obj59.asm"
00011F90                            ; ---------------------------------------------------------------------------
00011F90                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00011F90                            ; ---------------------------------------------------------------------------
00011F90 0000                       		dc.w byte_10D4A-Map_obj59
00011F92 03                         byte_10D4A:	dc.b 3
00011F93 F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
00011F98 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
00011F9D F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
00011FA2                            		even
00011FA2                            		even
00011FA2                            
00011FA2                            ; ===========================================================================
00011FA2                            ; ---------------------------------------------------------------------------
00011FA2                            ; Object 5A - platforms	moving in circles (SLZ)
00011FA2                            ; ---------------------------------------------------------------------------
00011FA2                            
00011FA2                            Obj5A:					; XREF: Obj_Index
00011FA2 7000                       		moveq	#0,d0
00011FA4 1028 0024                  		move.b	$24(a0),d0
00011FA8 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
00011FAC 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
00011FB0 3028 0032                  		move.w	$32(a0),d0
00011FB4 0240 FF80                  		andi.w	#$FF80,d0
00011FB8 3238 F700                  		move.w	($FFFFF700).w,d1
00011FBC 0441 0080                  		subi.w	#$80,d1
00011FC0 0241 FF80                  		andi.w	#$FF80,d1
00011FC4 9041                       		sub.w	d1,d0
00011FC6 0C40 0280                  		cmpi.w	#$280,d0
00011FCA 6200 C7CC                  		bhi.w	DeleteObject
00011FCE 6000 C78C                  		bra.w	DisplaySprite
00011FD2                            ; ===========================================================================
00011FD2 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
00011FD4 0000                       		dc.w Obj5A_Platform-Obj5A_Index
00011FD6 0000                       		dc.w Obj5A_Action-Obj5A_Index
00011FD8                            ; ===========================================================================
00011FD8                            
00011FD8                            Obj5A_Main:				; XREF: Obj5A_Index
00011FD8 5428 0024                  		addq.b	#2,$24(a0)
00011FDC 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
00011FE4 317C 4000 0002             		move.w	#$4000,2(a0)
00011FEA 117C 0004 0001             		move.b	#4,1(a0)
00011FF0 117C 0004 0018             		move.b	#4,$18(a0)
00011FF6 117C 0018 0019             		move.b	#$18,$19(a0)
00011FFC 3168 0008 0032             		move.w	8(a0),$32(a0)
00012002 3168 000C 0030             		move.w	$C(a0),$30(a0)
00012008                            
00012008                            Obj5A_Platform:				; XREF: Obj5A_Index
00012008 7200                       		moveq	#0,d1
0001200A 1228 0019                  		move.b	$19(a0),d1
0001200E 4EB9 0000 8508             		jsr	(PlatformObject).l
00012014 6000 0000                  		bra.w	Obj5A_Types
00012018                            ; ===========================================================================
00012018                            
00012018                            Obj5A_Action:				; XREF: Obj5A_Index
00012018 7200                       		moveq	#0,d1
0001201A 1228 0019                  		move.b	$19(a0),d1
0001201E 4EB9 0000 867C             		jsr	(ExitPlatform).l
00012024 3F28 0008                  		move.w	8(a0),-(sp)
00012028 6100 0000                  		bsr.w	Obj5A_Types
0001202C 341F                       		move.w	(sp)+,d2
0001202E 4EF9 0000 8BEA             		jmp	(MvSonicOnPtfm2).l
00012034                            ; ===========================================================================
00012034                            
00012034                            Obj5A_Types:
00012034 7000                       		moveq	#0,d0
00012036 1028 0028                  		move.b	$28(a0),d0
0001203A 0240 000C                  		andi.w	#$C,d0
0001203E E248                       		lsr.w	#1,d0
00012040 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
00012044 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
00012048                            ; ===========================================================================
00012048 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
0001204A 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
0001204C                            ; ===========================================================================
0001204C                            
0001204C                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
0001204C 1238 FE80                  		move.b	($FFFFFE80).w,d1
00012050 0401 0050                  		subi.b	#$50,d1
00012054 4881                       		ext.w	d1
00012056 1438 FE84                  		move.b	($FFFFFE84).w,d2
0001205A 0402 0050                  		subi.b	#$50,d2
0001205E 4882                       		ext.w	d2
00012060 0828 0000 0028             		btst	#0,$28(a0)
00012066 6700                       		beq.s	loc_10E24
00012068 4441                       		neg.w	d1
0001206A 4442                       		neg.w	d2
0001206C                            
0001206C                            loc_10E24:
0001206C 0828 0001 0028             		btst	#1,$28(a0)
00012072 6700                       		beq.s	loc_10E30
00012074 4441                       		neg.w	d1
00012076 C342                       		exg	d1,d2
00012078                            
00012078                            loc_10E30:
00012078 D268 0032                  		add.w	$32(a0),d1
0001207C 3141 0008                  		move.w	d1,8(a0)
00012080 D468 0030                  		add.w	$30(a0),d2
00012084 3142 000C                  		move.w	d2,$C(a0)
00012088 4E75                       		rts	
0001208A                            ; ===========================================================================
0001208A                            
0001208A                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
0001208A 1238 FE80                  		move.b	($FFFFFE80).w,d1
0001208E 0401 0050                  		subi.b	#$50,d1
00012092 4881                       		ext.w	d1
00012094 1438 FE84                  		move.b	($FFFFFE84).w,d2
00012098 0402 0050                  		subi.b	#$50,d2
0001209C 4882                       		ext.w	d2
0001209E 0828 0000 0028             		btst	#0,$28(a0)
000120A4 6700                       		beq.s	loc_10E62
000120A6 4441                       		neg.w	d1
000120A8 4442                       		neg.w	d2
000120AA                            
000120AA                            loc_10E62:
000120AA 0828 0001 0028             		btst	#1,$28(a0)
000120B0 6700                       		beq.s	loc_10E6E
000120B2 4441                       		neg.w	d1
000120B4 C342                       		exg	d1,d2
000120B6                            
000120B6                            loc_10E6E:
000120B6 4441                       		neg.w	d1
000120B8 D268 0032                  		add.w	$32(a0),d1
000120BC 3141 0008                  		move.w	d1,8(a0)
000120C0 D468 0030                  		add.w	$30(a0),d2
000120C4 3142 000C                  		move.w	d2,$C(a0)
000120C8 4E75                       		rts	
000120CA                            ; ===========================================================================
000120CA                            ; ---------------------------------------------------------------------------
000120CA                            ; Sprite mappings - platforms that move	in circles (SLZ)
000120CA                            ; ---------------------------------------------------------------------------
000120CA                            Map_obj5A:
000120CA                            	include "_maps\obj5A.asm"
000120CA                            ; ---------------------------------------------------------------------------
000120CA                            ; Sprite mappings - platforms that move	in circles (SLZ)
000120CA                            ; ---------------------------------------------------------------------------
000120CA 0000                       		dc.w byte_10E84-Map_obj5A
000120CC 02                         byte_10E84:	dc.b 2
000120CD F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
000120D2 F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
000120D8 00                         		even
000120D8 00                         		even
000120D8                            
000120D8                            ; ===========================================================================
000120D8                            ; ---------------------------------------------------------------------------
000120D8                            ; Object 5B - blocks that form a staircase (SLZ)
000120D8                            ; ---------------------------------------------------------------------------
000120D8                            
000120D8                            Obj5B:					; XREF: Obj_Index
000120D8 7000                       		moveq	#0,d0
000120DA 1028 0024                  		move.b	$24(a0),d0
000120DE 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
000120E2 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
000120E6 3028 0030                  		move.w	$30(a0),d0
000120EA 0240 FF80                  		andi.w	#$FF80,d0
000120EE 3238 F700                  		move.w	($FFFFF700).w,d1
000120F2 0441 0080                  		subi.w	#$80,d1
000120F6 0241 FF80                  		andi.w	#$FF80,d1
000120FA 9041                       		sub.w	d1,d0
000120FC 0C40 0280                  		cmpi.w	#$280,d0
00012100 6200 C696                  		bhi.w	DeleteObject
00012104 6000 C656                  		bra.w	DisplaySprite
00012108                            ; ===========================================================================
00012108 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
0001210A 0000                       		dc.w Obj5B_Move-Obj5B_Index
0001210C 0000                       		dc.w Obj5B_Solid-Obj5B_Index
0001210E                            ; ===========================================================================
0001210E                            
0001210E                            Obj5B_Main:				; XREF: Obj5B_Index
0001210E 5428 0024                  		addq.b	#2,$24(a0)
00012112 7638                       		moveq	#$38,d3
00012114 7801                       		moveq	#1,d4
00012116 0828 0000 0022             		btst	#0,$22(a0)
0001211C 6700                       		beq.s	loc_10EDA
0001211E 763B                       		moveq	#$3B,d3
00012120 78FF                       		moveq	#-1,d4
00012122                            
00012122                            loc_10EDA:
00012122 3428 0008                  		move.w	8(a0),d2
00012126 2248                       		movea.l	a0,a1
00012128 7203                       		moveq	#3,d1
0001212A 6000                       		bra.s	Obj5B_MakeBlocks
0001212C                            ; ===========================================================================
0001212C                            
0001212C                            Obj5B_Loop:
0001212C 6100 CACC                  		bsr.w	SingleObjLoad2
00012130 6600 0000                  		bne.w	Obj5B_Move
00012134 137C 0004 0024             		move.b	#4,$24(a1)
0001213A                            
0001213A                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
0001213A 137C 005B 0000             		move.b	#$5B,0(a1)	; load another block object
00012140 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
00012148 337C 4000 0002             		move.w	#$4000,2(a1)
0001214E 137C 0004 0001             		move.b	#4,1(a1)
00012154 137C 0003 0018             		move.b	#3,$18(a1)
0001215A 137C 0010 0019             		move.b	#$10,$19(a1)
00012160 1368 0028 0028             		move.b	$28(a0),$28(a1)
00012166 3342 0008                  		move.w	d2,8(a1)
0001216A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012170 3368 0008 0030             		move.w	8(a0),$30(a1)
00012176 3369 000C 0032             		move.w	$C(a1),$32(a1)
0001217C 0642 0020                  		addi.w	#$20,d2
00012180 1343 0037                  		move.b	d3,$37(a1)
00012184 2348 003C                  		move.l	a0,$3C(a1)
00012188 D604                       		add.b	d4,d3
0001218A 51C9 FFA0                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
0001218E                            
0001218E                            Obj5B_Move:				; XREF: Obj5B_Index
0001218E 7000                       		moveq	#0,d0
00012190 1028 0028                  		move.b	$28(a0),d0
00012194 0240 0007                  		andi.w	#7,d0
00012198 D040                       		add.w	d0,d0
0001219A 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
0001219E 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
000121A2                            
000121A2                            Obj5B_Solid:				; XREF: Obj5B_Index
000121A2 2468 003C                  		movea.l	$3C(a0),a2
000121A6 7000                       		moveq	#0,d0
000121A8 1028 0037                  		move.b	$37(a0),d0
000121AC 1032 0000                  		move.b	(a2,d0.w),d0
000121B0 D068 0032                  		add.w	$32(a0),d0
000121B4 3140 000C                  		move.w	d0,$C(a0)
000121B8 7200                       		moveq	#0,d1
000121BA 1228 0019                  		move.b	$19(a0),d1
000121BE 0641 000B                  		addi.w	#$B,d1
000121C2 343C 0010                  		move.w	#$10,d2
000121C6 363C 0011                  		move.w	#$11,d3
000121CA 3828 0008                  		move.w	8(a0),d4
000121CE 6100 EA32                  		bsr.w	SolidObject
000121D2 4A04                       		tst.b	d4
000121D4 6A00                       		bpl.s	loc_10F92
000121D6 1544 0036                  		move.b	d4,$36(a2)
000121DA                            
000121DA                            loc_10F92:
000121DA 0828 0003 0022             		btst	#3,$22(a0)
000121E0 6700                       		beq.s	locret_10FA0
000121E2 157C 0001 0036             		move.b	#1,$36(a2)
000121E8                            
000121E8                            locret_10FA0:
000121E8 4E75                       		rts	
000121EA                            ; ===========================================================================
000121EA 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
000121EC 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
000121EE 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
000121F0 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
000121F2                            ; ===========================================================================
000121F2                            
000121F2                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
000121F2 4A68 0034                  		tst.w	$34(a0)
000121F6 6600                       		bne.s	loc_10FC0
000121F8 0C28 0001 0036             		cmpi.b	#1,$36(a0)
000121FE 6600                       		bne.s	locret_10FBE
00012200 317C 001E 0034             		move.w	#$1E,$34(a0)
00012206                            
00012206                            locret_10FBE:
00012206 4E75                       		rts	
00012208                            ; ===========================================================================
00012208                            
00012208                            loc_10FC0:
00012208 5368 0034                  		subq.w	#1,$34(a0)
0001220C 66F8                       		bne.s	locret_10FBE
0001220E 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00012212 4E75                       		rts	
00012214                            ; ===========================================================================
00012214                            
00012214                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
00012214 4A68 0034                  		tst.w	$34(a0)
00012218 6600                       		bne.s	loc_10FE0
0001221A 4A28 0036                  		tst.b	$36(a0)
0001221E 6A00                       		bpl.s	locret_10FDE
00012220 317C 003C 0034             		move.w	#$3C,$34(a0)
00012226                            
00012226                            locret_10FDE:
00012226 4E75                       		rts	
00012228                            ; ===========================================================================
00012228                            
00012228                            loc_10FE0:
00012228 5368 0034                  		subq.w	#1,$34(a0)
0001222C 6600                       		bne.s	loc_10FEC
0001222E 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00012232 4E75                       		rts	
00012234                            ; ===========================================================================
00012234                            
00012234                            loc_10FEC:
00012234 43E8 0038                  		lea	$38(a0),a1
00012238 3028 0034                  		move.w	$34(a0),d0
0001223C E408                       		lsr.b	#2,d0
0001223E 0200 0001                  		andi.b	#1,d0
00012242 12C0                       		move.b	d0,(a1)+
00012244 0A00 0001                  		eori.b	#1,d0
00012248 12C0                       		move.b	d0,(a1)+
0001224A 0A00 0001                  		eori.b	#1,d0
0001224E 12C0                       		move.b	d0,(a1)+
00012250 0A00 0001                  		eori.b	#1,d0
00012254 12C0                       		move.b	d0,(a1)+
00012256 4E75                       		rts	
00012258                            ; ===========================================================================
00012258                            
00012258                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
00012258 43E8 0038                  		lea	$38(a0),a1
0001225C 0C11 0080                  		cmpi.b	#$80,(a1)
00012260 6700                       		beq.s	locret_11038
00012262 5211                       		addq.b	#1,(a1)
00012264 7200                       		moveq	#0,d1
00012266 1219                       		move.b	(a1)+,d1
00012268 4841                       		swap	d1
0001226A E289                       		lsr.l	#1,d1
0001226C 2401                       		move.l	d1,d2
0001226E E289                       		lsr.l	#1,d1
00012270 2601                       		move.l	d1,d3
00012272 D682                       		add.l	d2,d3
00012274 4841                       		swap	d1
00012276 4842                       		swap	d2
00012278 4843                       		swap	d3
0001227A 12C3                       		move.b	d3,(a1)+
0001227C 12C2                       		move.b	d2,(a1)+
0001227E 12C1                       		move.b	d1,(a1)+
00012280                            
00012280                            locret_11038:
00012280 4E75                       		rts	
00012282 4E75                       		rts	
00012284                            ; ===========================================================================
00012284                            ; ---------------------------------------------------------------------------
00012284                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00012284                            ; ---------------------------------------------------------------------------
00012284                            Map_obj5B:
00012284                            	include "_maps\obj5B.asm"
00012284                            ; ---------------------------------------------------------------------------
00012284                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00012284                            ; ---------------------------------------------------------------------------
00012284 0000                       		dc.w byte_1103E-Map_obj5B
00012286 01                         byte_1103E:	dc.b 1
00012287 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
0001228C                            		even
0001228C                            		even
0001228C                            
0001228C                            ; ===========================================================================
0001228C                            ; ---------------------------------------------------------------------------
0001228C                            ; Object 5C - metal girders in foreground (SLZ)
0001228C                            ; ---------------------------------------------------------------------------
0001228C                            
0001228C                            Obj5C:					; XREF: Obj_Index
0001228C 7000                       		moveq	#0,d0
0001228E 1028 0024                  		move.b	$24(a0),d0
00012292 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
00012296 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
0001229A                            ; ===========================================================================
0001229A 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
0001229C 0000                       		dc.w Obj5C_Display-Obj5C_Index
0001229E                            ; ===========================================================================
0001229E                            
0001229E                            Obj5C_Main:				; XREF: Obj5C_Index
0001229E 5428 0024                  		addq.b	#2,$24(a0)
000122A2 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
000122AA 317C 83CC 0002             		move.w	#$83CC,2(a0)
000122B0 117C 0010 0019             		move.b	#$10,$19(a0)
000122B6                            
000122B6                            Obj5C_Display:				; XREF: Obj5C_Index
000122B6 2238 F700                  		move.l	($FFFFF700).w,d1
000122BA D281                       		add.l	d1,d1
000122BC 4841                       		swap	d1
000122BE 4441                       		neg.w	d1
000122C0 3141 0008                  		move.w	d1,8(a0)
000122C4 2238 F704                  		move.l	($FFFFF704).w,d1
000122C8 D281                       		add.l	d1,d1
000122CA 4841                       		swap	d1
000122CC 0241 003F                  		andi.w	#$3F,d1
000122D0 4441                       		neg.w	d1
000122D2 0641 0100                  		addi.w	#$100,d1
000122D6 3141 000A                  		move.w	d1,$A(a0)
000122DA 6000 C480                  		bra.w	DisplaySprite
000122DE                            ; ===========================================================================
000122DE                            ; ---------------------------------------------------------------------------
000122DE                            ; Sprite mappings - metal girders in foreground	(SLZ)
000122DE                            ; ---------------------------------------------------------------------------
000122DE                            Map_obj5C:
000122DE                            	include "_maps\obj5C.asm"
000122DE                            ; ---------------------------------------------------------------------------
000122DE                            ; Sprite mappings - metal girders in foreground	(SLZ)
000122DE                            ; ---------------------------------------------------------------------------
000122DE 0000                       		dc.w byte_11098-Map_obj5C
000122E0 09                         byte_11098:	dc.b 9
000122E1 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
000122E6 A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
000122EB C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
000122F0 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
000122F5 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
000122FA 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
000122FF 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
00012304 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
00012309 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
0001230E                            		even
0001230E                            		even
0001230E                            
0001230E                            ; ===========================================================================
0001230E                            ; ---------------------------------------------------------------------------
0001230E                            ; Object 1B - water surface (LZ)
0001230E                            ; ---------------------------------------------------------------------------
0001230E                            
0001230E                            Obj1B:					; XREF: Obj_Index
0001230E 7000                       		moveq	#0,d0
00012310 1028 0024                  		move.b	$24(a0),d0
00012314 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
00012318 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
0001231C                            ; ===========================================================================
0001231C 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
0001231E 0000                       		dc.w Obj1B_Action-Obj1B_Index
00012320                            ; ===========================================================================
00012320                            
00012320                            Obj1B_Main:				; XREF: Obj1B_Index
00012320 5428 0024                  		addq.b	#2,$24(a0)
00012324 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
0001232C 317C C300 0002             		move.w	#$C300,2(a0)
00012332 117C 0004 0001             		move.b	#4,1(a0)
00012338 117C 0080 0019             		move.b	#$80,$19(a0)
0001233E 3168 0008 0030             		move.w	8(a0),$30(a0)
00012344                            
00012344                            Obj1B_Action:				; XREF: Obj1B_Index
00012344 3238 F700                  		move.w	($FFFFF700).w,d1
00012348 0241 FFE0                  		andi.w	#$FFE0,d1
0001234C D268 0030                  		add.w	$30(a0),d1
00012350 0838 0000 FE05             		btst	#0,($FFFFFE05).w
00012356 6700                       		beq.s	loc_11114
00012358 0641 0020                  		addi.w	#$20,d1
0001235C                            
0001235C                            loc_11114:
0001235C 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
00012360 3238 F646                  		move.w	($FFFFF646).w,d1
00012364 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
00012368 4A28 0032                  		tst.b	$32(a0)
0001236C 6600                       		bne.s	Obj1B_Animate
0001236E 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00012374 6700                       		beq.s	loc_1114A	; if not, branch
00012376 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
0001237A 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
00012380 6000                       		bra.s	Obj1B_Display
00012382                            ; ===========================================================================
00012382                            
00012382                            Obj1B_Animate:				; XREF: loc_11114
00012382 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
00012386 6600                       		bne.s	Obj1B_Display	; if yes, branch
00012388 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
0001238E 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
00012392                            
00012392                            loc_1114A:				; XREF: loc_11114
00012392 5328 001E                  		subq.b	#1,$1E(a0)
00012396 6A00                       		bpl.s	Obj1B_Display
00012398 117C 0007 001E             		move.b	#7,$1E(a0)
0001239E 5228 001A                  		addq.b	#1,$1A(a0)
000123A2 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
000123A8 6500                       		bcs.s	Obj1B_Display
000123AA 117C 0000 001A             		move.b	#0,$1A(a0)
000123B0                            
000123B0                            Obj1B_Display:
000123B0 6000 C3AA                  		bra.w	DisplaySprite
000123B4                            ; ===========================================================================
000123B4                            ; ---------------------------------------------------------------------------
000123B4                            ; Sprite mappings - water surface (LZ)
000123B4                            ; ---------------------------------------------------------------------------
000123B4                            Map_obj1B:
000123B4                            	include "_maps\obj1B.asm"
000123B4                            ; ---------------------------------------------------------------------------
000123B4                            ; Sprite mappings - water surface (LZ)
000123B4                            ; ---------------------------------------------------------------------------
000123B4 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
000123B8 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
000123BC 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
000123C0 03                         byte_11178:	dc.b 3
000123C1 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
000123C6 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
000123CB FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
000123D0 03                         byte_11188:	dc.b 3
000123D1 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
000123D6 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
000123DB FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
000123E0 03                         byte_11198:	dc.b 3
000123E1 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
000123E6 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
000123EB FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
000123F0 06                         byte_111A8:	dc.b 6
000123F1 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
000123F6 FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
000123FB FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00012400 FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
00012405 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
0001240A FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
0001240F 06                         byte_111C7:	dc.b 6
00012410 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00012415 FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
0001241A FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
0001241F FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
00012424 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00012429 FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
0001242E 06                         byte_111E6:	dc.b 6
0001242F FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00012434 FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
00012439 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
0001243E FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
00012443 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00012448 FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
0001244E 00                         		even
0001244E 00                         		even
0001244E                            
0001244E                            ; ===========================================================================
0001244E                            ; ---------------------------------------------------------------------------
0001244E                            ; Object 0B - pole that	breaks (LZ)
0001244E                            ; ---------------------------------------------------------------------------
0001244E                            
0001244E                            Obj0B:					; XREF: Obj_Index
0001244E 7000                       		moveq	#0,d0
00012450 1028 0024                  		move.b	$24(a0),d0
00012454 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
00012458 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
0001245C                            ; ===========================================================================
0001245C 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
0001245E 0000                       		dc.w Obj0B_Action-Obj0B_Index
00012460 0000                       		dc.w Obj0B_Display-Obj0B_Index
00012462                            ; ===========================================================================
00012462                            
00012462                            Obj0B_Main:				; XREF: Obj0B_Index
00012462 5428 0024                  		addq.b	#2,$24(a0)
00012466 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
0001246E 317C 43DE 0002             		move.w	#$43DE,2(a0)
00012474 117C 0004 0001             		move.b	#4,1(a0)
0001247A 117C 0008 0019             		move.b	#8,$19(a0)
00012480 117C 0004 0018             		move.b	#4,$18(a0)
00012486 117C 00E1 0020             		move.b	#$E1,$20(a0)
0001248C 7000                       		moveq	#0,d0
0001248E 1028 0028                  		move.b	$28(a0),d0	; get object type
00012492 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00012496 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
0001249A                            
0001249A                            Obj0B_Action:				; XREF: Obj0B_Index
0001249A 4A28 0032                  		tst.b	$32(a0)
0001249E 6700                       		beq.s	Obj0B_Grab
000124A0 4A68 0030                  		tst.w	$30(a0)
000124A4 6700                       		beq.s	Obj0B_MoveUp
000124A6 5368 0030                  		subq.w	#1,$30(a0)
000124AA 6600                       		bne.s	Obj0B_MoveUp
000124AC 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
000124B2 6000                       		bra.s	Obj0B_Release
000124B4                            ; ===========================================================================
000124B4                            
000124B4                            Obj0B_MoveUp:				; XREF: Obj0B_Action
000124B4 43F8 D000                  		lea	($FFFFD000).w,a1
000124B8 3028 000C                  		move.w	$C(a0),d0
000124BC 0440 0018                  		subi.w	#$18,d0
000124C0 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
000124C6 6700                       		beq.s	Obj0B_MoveDown
000124C8 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
000124CC B069 000C                  		cmp.w	$C(a1),d0
000124D0 6500                       		bcs.s	Obj0B_MoveDown
000124D2 3340 000C                  		move.w	d0,$C(a1)
000124D6                            
000124D6                            Obj0B_MoveDown:
000124D6 0640 0024                  		addi.w	#$24,d0
000124DA 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
000124E0 6700                       		beq.s	Obj0B_LetGo
000124E2 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
000124E6 B069 000C                  		cmp.w	$C(a1),d0
000124EA 6400                       		bcc.s	Obj0B_LetGo
000124EC 3340 000C                  		move.w	d0,$C(a1)
000124F0                            
000124F0                            Obj0B_LetGo:
000124F0 1038 F603                  		move.b	($FFFFF603).w,d0
000124F4 0240 0070                  		andi.w	#$70,d0
000124F8 6700                       		beq.s	Obj0B_Display
000124FA                            
000124FA                            Obj0B_Release:				; XREF: Obj0B_Action
000124FA 4228 0020                  		clr.b	$20(a0)
000124FE 5428 0024                  		addq.b	#2,$24(a0)
00012502 4238 F7C8                  		clr.b	($FFFFF7C8).w
00012506 4238 F7C9                  		clr.b	($FFFFF7C9).w
0001250A 4228 0032                  		clr.b	$32(a0)
0001250E 6000                       		bra.s	Obj0B_Display
00012510                            ; ===========================================================================
00012510                            
00012510                            Obj0B_Grab:				; XREF: Obj0B_Action
00012510 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
00012514 6700                       		beq.s	Obj0B_Display	; if not, branch
00012516 43F8 D000                  		lea	($FFFFD000).w,a1
0001251A 3028 0008                  		move.w	8(a0),d0
0001251E 0640 0014                  		addi.w	#$14,d0
00012522 B069 0008                  		cmp.w	8(a1),d0
00012526 6400                       		bcc.s	Obj0B_Display
00012528 4228 0021                  		clr.b	$21(a0)
0001252C 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00012532 6400                       		bcc.s	Obj0B_Display
00012534 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
00012538 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
0001253C 3028 0008                  		move.w	8(a0),d0
00012540 0640 0014                  		addi.w	#$14,d0
00012544 3340 0008                  		move.w	d0,8(a1)
00012548 08A9 0000 0022             		bclr	#0,$22(a1)
0001254E 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
00012554 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
0001255A 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00012560 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
00012566                            
00012566                            Obj0B_Display:				; XREF: Obj0B_Index
00012566 6000 E370                  		bra.w	MarkObjGone
0001256A                            ; ===========================================================================
0001256A                            ; ---------------------------------------------------------------------------
0001256A                            ; Sprite mappings - pole that breaks (LZ)
0001256A                            ; ---------------------------------------------------------------------------
0001256A                            Map_obj0B:
0001256A                            	include "_maps\obj0B.asm"
0001256A                            ; ---------------------------------------------------------------------------
0001256A                            ; Sprite mappings - pole that breaks (LZ)
0001256A                            ; ---------------------------------------------------------------------------
0001256A 0000                       		dc.w byte_11326-Map_obj0B
0001256C 0000                       		dc.w byte_11331-Map_obj0B
0001256E 02                         byte_11326:	dc.b 2			; normal pole
0001256F E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00012574 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00012579 04                         byte_11331:	dc.b 4			; broken pole
0001257A E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
0001257F F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00012584 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
00012589 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
0001258E                            		even
0001258E                            		even
0001258E                            
0001258E                            ; ===========================================================================
0001258E                            ; ---------------------------------------------------------------------------
0001258E                            ; Object 0C - flapping door (LZ)
0001258E                            ; ---------------------------------------------------------------------------
0001258E                            
0001258E                            Obj0C:					; XREF: Obj_Index
0001258E 7000                       		moveq	#0,d0
00012590 1028 0024                  		move.b	$24(a0),d0
00012594 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
00012598 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
0001259C                            ; ===========================================================================
0001259C 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
0001259E 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
000125A0                            ; ===========================================================================
000125A0                            
000125A0                            Obj0C_Main:				; XREF: Obj0C_Index
000125A0 5428 0024                  		addq.b	#2,$24(a0)
000125A4 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
000125AC 317C 4328 0002             		move.w	#$4328,2(a0)
000125B2 0028 0004 0001             		ori.b	#4,1(a0)
000125B8 117C 0028 0019             		move.b	#$28,$19(a0)
000125BE 7000                       		moveq	#0,d0
000125C0 1028 0028                  		move.b	$28(a0),d0	; get object type
000125C4 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
000125C8 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
000125CC                            
000125CC                            Obj0C_OpenClose:			; XREF: Obj0C_Index
000125CC 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000125D0 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
000125D2 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
000125D8 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
000125DE 4A28 0001                  		tst.b	1(a0)
000125E2 6A00                       		bpl.s	Obj0C_Solid
000125E4 303C 00BB                  		move.w	#$BB,d0
000125E8 4EB9 0000 132C             		jsr	(PlaySound_Special).l ;	play door sound
000125EE                            
000125EE                            Obj0C_Solid:
000125EE 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
000125F4 6100 926A                  		bsr.w	AnimateSprite
000125F8 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
000125FC 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00012600 6600                       		bne.s	Obj0C_Display	; if yes, branch
00012602 3038 D008                  		move.w	($FFFFD008).w,d0
00012606 B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
0001260A 6400                       		bcc.s	Obj0C_Display	; if yes, branch
0001260C 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00012612 323C 0013                  		move.w	#$13,d1
00012616 343C 0020                  		move.w	#$20,d2
0001261A 3602                       		move.w	d2,d3
0001261C 5243                       		addq.w	#1,d3
0001261E 3828 0008                  		move.w	8(a0),d4
00012622 6100 E5DE                  		bsr.w	SolidObject	; make the door	solid
00012626                            
00012626                            Obj0C_Display:
00012626 6000 E2B0                  		bra.w	MarkObjGone
0001262A                            ; ===========================================================================
0001262A                            Ani_obj0C:
0001262A                            	include "_anim\obj0C.asm"
0001262A                            ; ---------------------------------------------------------------------------
0001262A                            ; Animation script - flapping door (LZ)
0001262A                            ; ---------------------------------------------------------------------------
0001262A 0000                       		dc.w byte_113E6-Ani_obj0C
0001262C 0000                       		dc.w byte_113EC-Ani_obj0C
0001262E 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
00012634 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
0001263A                            		even
0001263A                            		even
0001263A                            
0001263A                            ; ---------------------------------------------------------------------------
0001263A                            ; Sprite mappings - flapping door (LZ)
0001263A                            ; ---------------------------------------------------------------------------
0001263A                            Map_obj0C:
0001263A                            	include "_maps\obj0C.asm"
0001263A                            ; ---------------------------------------------------------------------------
0001263A                            ; Sprite mappings - flapping door (LZ)
0001263A                            ; ---------------------------------------------------------------------------
0001263A 0000                       		dc.w byte_113F8-Map_obj0C
0001263C 0000                       		dc.w byte_11403-Map_obj0C
0001263E 0000                       		dc.w byte_1140E-Map_obj0C
00012640 02                         byte_113F8:	dc.b 2
00012641 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00012646 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
0001264B 02                         byte_11403:	dc.b 2
0001264C DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00012651 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00012656 02                         byte_1140E:	dc.b 2
00012657 D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
0001265C 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00012662 00                         		even
00012662 00                         		even
00012662                            
00012662                            ; ===========================================================================
00012662                            ; ---------------------------------------------------------------------------
00012662                            ; Object 71 - invisible	solid blocks
00012662                            ; ---------------------------------------------------------------------------
00012662                            
00012662                            Obj71:					; XREF: Obj_Index
00012662 7000                       		moveq	#0,d0
00012664 1028 0024                  		move.b	$24(a0),d0
00012668 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
0001266C 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
00012670                            ; ===========================================================================
00012670 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
00012672 0000                       		dc.w Obj71_Solid-Obj71_Index
00012674                            ; ===========================================================================
00012674                            
00012674                            Obj71_Main:				; XREF: Obj71_Index
00012674 5428 0024                  		addq.b	#2,$24(a0)
00012678 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
00012680 317C 8680 0002             		move.w	#$8680,2(a0)
00012686 0028 0004 0001             		ori.b	#4,1(a0)
0001268C 1028 0028                  		move.b	$28(a0),d0	; get object type
00012690 1200                       		move.b	d0,d1
00012692 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
00012696 0640 0010                  		addi.w	#$10,d0
0001269A E248                       		lsr.w	#1,d0
0001269C 1140 0019                  		move.b	d0,$19(a0)	; set object width
000126A0 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
000126A4 5241                       		addq.w	#1,d1
000126A6 E749                       		lsl.w	#3,d1
000126A8 1141 0016                  		move.b	d1,$16(a0)	; set object height
000126AC                            
000126AC                            Obj71_Solid:				; XREF: Obj71_Index
000126AC 6100 C328                  		bsr.w	ChkObjOnScreen
000126B0 6600                       		bne.s	Obj71_ChkDel
000126B2 7200                       		moveq	#0,d1
000126B4 1228 0019                  		move.b	$19(a0),d1
000126B8 0641 000B                  		addi.w	#$B,d1
000126BC 7400                       		moveq	#0,d2
000126BE 1428 0016                  		move.b	$16(a0),d2
000126C2 3602                       		move.w	d2,d3
000126C4 5243                       		addq.w	#1,d3
000126C6 3828 0008                  		move.w	8(a0),d4
000126CA 6100 E57E                  		bsr.w	SolidObject71
000126CE                            
000126CE                            Obj71_ChkDel:
000126CE 3028 0008                  		move.w	8(a0),d0
000126D2 0240 FF80                  		andi.w	#$FF80,d0
000126D6 3238 F700                  		move.w	($FFFFF700).w,d1
000126DA 0441 0080                  		subi.w	#$80,d1
000126DE 0241 FF80                  		andi.w	#$FF80,d1
000126E2 9041                       		sub.w	d1,d0
000126E4 0C40 0280                  		cmpi.w	#$280,d0
000126E8 6200                       		bhi.s	Obj71_Delete
000126EA 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
000126EE 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
000126F0 4EF9 0000 E75C             		jmp	DisplaySprite	; if yes, display the object
000126F6                            ; ===========================================================================
000126F6                            
000126F6                            Obj71_NoDisplay:
000126F6 4E75                       		rts	
000126F8                            ; ===========================================================================
000126F8                            
000126F8                            Obj71_Delete:
000126F8 4EF9 0000 E798             		jmp	DeleteObject
000126FE                            ; ===========================================================================
000126FE                            ; ---------------------------------------------------------------------------
000126FE                            ; Sprite mappings - invisible solid blocks
000126FE                            ; ---------------------------------------------------------------------------
000126FE                            Map_obj71:
000126FE                            	include "_maps\obj71.asm"
000126FE                            ; ---------------------------------------------------------------------------
000126FE                            ; Sprite mappings - invisible solid blocks
000126FE                            ; ---------------------------------------------------------------------------
000126FE 0000                       		dc.w byte_114BC-Map_obj71
00012700 0000                       		dc.w byte_114D1-Map_obj71
00012702 0000                       		dc.w byte_114E6-Map_obj71
00012704 04                         byte_114BC:	dc.b 4
00012705 F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
0001270A F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
0001270F 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
00012714 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00012719 04                         byte_114D1:	dc.b 4
0001271A E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
0001271F E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00012724 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00012729 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
0001272E 04                         byte_114E6:	dc.b 4
0001272F E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00012734 E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00012739 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
0001273E 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00012744 00                         		even
00012744 00                         		even
00012744                            
00012744                            ; ===========================================================================
00012744                            ; ---------------------------------------------------------------------------
00012744                            ; Object 5D - fans (SLZ)
00012744                            ; ---------------------------------------------------------------------------
00012744                            
00012744                            Obj5D:					; XREF: Obj_Index
00012744 7000                       		moveq	#0,d0
00012746 1028 0024                  		move.b	$24(a0),d0
0001274A 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
0001274E 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00012752                            ; ===========================================================================
00012752 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00012754 0000                       		dc.w Obj5D_Delay-Obj5D_Index
00012756                            ; ===========================================================================
00012756                            
00012756                            Obj5D_Main:				; XREF: Obj5D_Index
00012756 5428 0024                  		addq.b	#2,$24(a0)
0001275A 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
00012762 317C 43A0 0002             		move.w	#$43A0,2(a0)
00012768 0028 0004 0001             		ori.b	#4,1(a0)
0001276E 117C 0010 0019             		move.b	#$10,$19(a0)
00012774 117C 0004 0018             		move.b	#4,$18(a0)
0001277A                            
0001277A                            Obj5D_Delay:				; XREF: Obj5D_Index
0001277A 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
00012780 6600                       		bne.s	Obj5D_Blow	; if yes, branch
00012782 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012786 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
00012788 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
0001278E 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
00012794 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
00012796 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
0001279C                            
0001279C                            Obj5D_Blow:
0001279C 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
000127A0 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
000127A4 43F8 D000                  		lea	($FFFFD000).w,a1
000127A8 3029 0008                  		move.w	8(a1),d0
000127AC 9068 0008                  		sub.w	8(a0),d0
000127B0 0828 0000 0022             		btst	#0,$22(a0)
000127B6 6600                       		bne.s	Obj5D_ChkSonic
000127B8 4440                       		neg.w	d0
000127BA                            
000127BA                            Obj5D_ChkSonic:
000127BA 0640 0050                  		addi.w	#$50,d0
000127BE 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
000127C2 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
000127C4 3229 000C                  		move.w	$C(a1),d1
000127C8 0641 0060                  		addi.w	#$60,d1
000127CC 9268 000C                  		sub.w	$C(a0),d1
000127D0 6500                       		bcs.s	Obj5D_Animate
000127D2 0C41 0070                  		cmpi.w	#$70,d1
000127D6 6400                       		bcc.s	Obj5D_Animate
000127D8 0440 0050                  		subi.w	#$50,d0
000127DC 6400                       		bcc.s	loc_1159A
000127DE 4640                       		not.w	d0
000127E0 D040                       		add.w	d0,d0
000127E2                            
000127E2                            loc_1159A:
000127E2 0640 0060                  		addi.w	#$60,d0
000127E6 0828 0000 0022             		btst	#0,$22(a0)
000127EC 6600                       		bne.s	loc_115A8
000127EE 4440                       		neg.w	d0
000127F0                            
000127F0                            loc_115A8:
000127F0 4400                       		neg.b	d0
000127F2 E840                       		asr.w	#4,d0
000127F4 0828 0000 0028             		btst	#0,$28(a0)
000127FA 6700                       		beq.s	Obj5D_MoveSonic
000127FC 4440                       		neg.w	d0
000127FE                            
000127FE                            Obj5D_MoveSonic:
000127FE D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
00012802                            
00012802                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
00012802 5328 001E                  		subq.b	#1,$1E(a0)
00012806 6A00                       		bpl.s	Obj5D_ChkDel
00012808 117C 0000 001E             		move.b	#0,$1E(a0)
0001280E 5228 001B                  		addq.b	#1,$1B(a0)
00012812 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
00012818 6500                       		bcs.s	loc_115D8
0001281A 117C 0000 001B             		move.b	#0,$1B(a0)
00012820                            
00012820                            loc_115D8:
00012820 7000                       		moveq	#0,d0
00012822 0828 0000 0028             		btst	#0,$28(a0)
00012828 6700                       		beq.s	loc_115E4
0001282A 7002                       		moveq	#2,d0
0001282C                            
0001282C                            loc_115E4:
0001282C D028 001B                  		add.b	$1B(a0),d0
00012830 1140 001A                  		move.b	d0,$1A(a0)
00012834                            
00012834                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
00012834 6100 BF26                  		bsr.w	DisplaySprite
00012838 3028 0008                  		move.w	8(a0),d0
0001283C 0240 FF80                  		andi.w	#$FF80,d0
00012840 3238 F700                  		move.w	($FFFFF700).w,d1
00012844 0441 0080                  		subi.w	#$80,d1
00012848 0241 FF80                  		andi.w	#$FF80,d1
0001284C 9041                       		sub.w	d1,d0
0001284E 0C40 0280                  		cmpi.w	#$280,d0
00012852 6200 BF44                  		bhi.w	DeleteObject
00012856 4E75                       		rts	
00012858                            ; ===========================================================================
00012858                            ; ---------------------------------------------------------------------------
00012858                            ; Sprite mappings - fans (SLZ)
00012858                            ; ---------------------------------------------------------------------------
00012858                            Map_obj5D:
00012858                            	include "_maps\obj5D.asm"
00012858                            ; ---------------------------------------------------------------------------
00012858                            ; Sprite mappings - fans (SLZ)
00012858                            ; ---------------------------------------------------------------------------
00012858 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
0001285C 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
00012860 0000                       		dc.w byte_1161A-Map_obj5D
00012862 02                         byte_1161A:	dc.b 2
00012863 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00012868 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
0001286D 02                         byte_11625:	dc.b 2
0001286E F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00012873 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00012878 02                         byte_11630:	dc.b 2
00012879 F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
0001287E 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00012884 00                         		even
00012884 00                         		even
00012884                            
00012884                            ; ===========================================================================
00012884                            ; ---------------------------------------------------------------------------
00012884                            ; Object 5E - seesaws (SLZ)
00012884                            ; ---------------------------------------------------------------------------
00012884                            
00012884                            Obj5E:					; XREF: Obj_Index
00012884 7000                       		moveq	#0,d0
00012886 1028 0024                  		move.b	$24(a0),d0
0001288A 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
0001288E 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
00012892 3028 0030                  		move.w	$30(a0),d0
00012896 0240 FF80                  		andi.w	#$FF80,d0
0001289A 3238 F700                  		move.w	($FFFFF700).w,d1
0001289E 0441 0080                  		subi.w	#$80,d1
000128A2 0241 FF80                  		andi.w	#$FF80,d1
000128A6 9041                       		sub.w	d1,d0
000128A8 6B00 BEEE                  		bmi.w	DeleteObject
000128AC 0C40 0280                  		cmpi.w	#$280,d0
000128B0 6200 BEE6                  		bhi.w	DeleteObject
000128B4 6000 BEA6                  		bra.w	DisplaySprite
000128B8                            ; ===========================================================================
000128B8 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
000128BA 0000                       		dc.w Obj5E_Slope-Obj5E_Index
000128BC 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
000128BE 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
000128C0 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
000128C2 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
000128C4                            ; ===========================================================================
000128C4                            
000128C4                            Obj5E_Main:				; XREF: Obj5E_Index
000128C4 5428 0024                  		addq.b	#2,$24(a0)
000128C8 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
000128D0 317C 0374 0002             		move.w	#$374,2(a0)
000128D6 0028 0004 0001             		ori.b	#4,1(a0)
000128DC 117C 0004 0018             		move.b	#4,$18(a0)
000128E2 117C 0030 0019             		move.b	#$30,$19(a0)
000128E8 3168 0008 0030             		move.w	8(a0),$30(a0)
000128EE 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
000128F2 6600                       		bne.s	loc_116D2	; if not, branch
000128F4 6100 C304                  		bsr.w	SingleObjLoad2
000128F8 6600                       		bne.s	loc_116D2
000128FA 137C 005E 0000             		move.b	#$5E,0(a1)	; load spikeball object
00012900 5C29 0024                  		addq.b	#6,$24(a1)
00012904 3368 0008 0008             		move.w	8(a0),8(a1)
0001290A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012910 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012916 2348 003C                  		move.l	a0,$3C(a1)
0001291A                            
0001291A                            loc_116D2:
0001291A 0828 0000 0022             		btst	#0,$22(a0)
00012920 6700                       		beq.s	loc_116E0
00012922 117C 0002 001A             		move.b	#2,$1A(a0)
00012928                            
00012928                            loc_116E0:
00012928 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
0001292E                            
0001292E                            Obj5E_Slope:				; XREF: Obj5E_Index
0001292E 1228 003A                  		move.b	$3A(a0),d1
00012932 6100 0000                  		bsr.w	loc_11766
00012936 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
0001293C 0828 0000 001A             		btst	#0,$1A(a0)
00012942 6700                       		beq.s	loc_11702
00012944 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
0001294A                            
0001294A                            loc_11702:
0001294A 43F8 D000                  		lea	($FFFFD000).w,a1
0001294E 3169 0012 0038             		move.w	$12(a1),$38(a0)
00012954 323C 0030                  		move.w	#$30,d1
00012958 4EB9 0000 85DC             		jsr	(SlopeObject).l
0001295E 4E75                       		rts	
00012960                            ; ===========================================================================
00012960                            
00012960                            Obj5E_Slope2:				; XREF: Obj5E_Index
00012960 6100 0000                  		bsr.w	loc_1174A
00012964 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
0001296A 0828 0000 001A             		btst	#0,$1A(a0)
00012970 6700                       		beq.s	loc_11730
00012972 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00012978                            
00012978                            loc_11730:
00012978 323C 0030                  		move.w	#$30,d1
0001297C 4EB9 0000 867C             		jsr	(ExitPlatform).l
00012982 323C 0030                  		move.w	#$30,d1
00012986 3428 0008                  		move.w	8(a0),d2
0001298A 4EB9 0000 95E6             		jsr	SlopeObject2
00012990 4E75                       		rts	
00012992                            ; ===========================================================================
00012992                            
00012992                            loc_1174A:				; XREF: Obj5E_Slope2
00012992 7202                       		moveq	#2,d1
00012994 43F8 D000                  		lea	($FFFFD000).w,a1
00012998 3028 0008                  		move.w	8(a0),d0
0001299C 9069 0008                  		sub.w	8(a1),d0
000129A0 6400                       		bcc.s	loc_1175E
000129A2 4440                       		neg.w	d0
000129A4 7200                       		moveq	#0,d1
000129A6                            
000129A6                            loc_1175E:
000129A6 0C40 0008                  		cmpi.w	#8,d0
000129AA 6400                       		bcc.s	loc_11766
000129AC 7201                       		moveq	#1,d1
000129AE                            
000129AE                            loc_11766:
000129AE 1028 001A                  		move.b	$1A(a0),d0
000129B2 B001                       		cmp.b	d1,d0
000129B4 6700                       		beq.s	locret_11790
000129B6 6400                       		bcc.s	loc_11772
000129B8 5400                       		addq.b	#2,d0
000129BA                            
000129BA                            loc_11772:
000129BA 5300                       		subq.b	#1,d0
000129BC 1140 001A                  		move.b	d0,$1A(a0)
000129C0 1141 003A                  		move.b	d1,$3A(a0)
000129C4 08A8 0000 0001             		bclr	#0,1(a0)
000129CA 0828 0001 001A             		btst	#1,$1A(a0)
000129D0 6700                       		beq.s	locret_11790
000129D2 08E8 0000 0001             		bset	#0,1(a0)
000129D8                            
000129D8                            locret_11790:
000129D8 4E75                       		rts	
000129DA                            ; ===========================================================================
000129DA                            
000129DA                            Obj5E_Spikeball:			; XREF: Obj5E_Index
000129DA 5428 0024                  		addq.b	#2,$24(a0)
000129DE 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
000129E6 317C 04F0 0002             		move.w	#$4F0,2(a0)
000129EC 0028 0004 0001             		ori.b	#4,1(a0)
000129F2 117C 0004 0018             		move.b	#4,$18(a0)
000129F8 117C 008B 0020             		move.b	#$8B,$20(a0)
000129FE 117C 000C 0019             		move.b	#$C,$19(a0)
00012A04 3168 0008 0030             		move.w	8(a0),$30(a0)
00012A0A 0668 0028 0008             		addi.w	#$28,8(a0)
00012A10 3168 000C 0034             		move.w	$C(a0),$34(a0)
00012A16 117C 0001 001A             		move.b	#1,$1A(a0)
00012A1C 0828 0000 0022             		btst	#0,$22(a0)
00012A22 6700                       		beq.s	Obj5E_MoveSpike
00012A24 0468 0050 0008             		subi.w	#$50,8(a0)
00012A2A 117C 0002 003A             		move.b	#2,$3A(a0)
00012A30                            
00012A30                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
00012A30 2268 003C                  		movea.l	$3C(a0),a1
00012A34 7000                       		moveq	#0,d0
00012A36 1028 003A                  		move.b	$3A(a0),d0
00012A3A 9029 003A                  		sub.b	$3A(a1),d0
00012A3E 6700                       		beq.s	loc_1183E
00012A40 6400                       		bcc.s	loc_117FC
00012A42 4400                       		neg.b	d0
00012A44                            
00012A44                            loc_117FC:
00012A44 323C F7E8                  		move.w	#-$818,d1
00012A48 343C FEEC                  		move.w	#-$114,d2
00012A4C 0C00 0001                  		cmpi.b	#1,d0
00012A50 6700                       		beq.s	loc_11822
00012A52 323C F510                  		move.w	#-$AF0,d1
00012A56 343C FF34                  		move.w	#-$CC,d2
00012A5A 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00012A60 6D00                       		blt.s	loc_11822
00012A62 323C F200                  		move.w	#-$E00,d1
00012A66 343C FF60                  		move.w	#-$A0,d2
00012A6A                            
00012A6A                            loc_11822:
00012A6A 3141 0012                  		move.w	d1,$12(a0)
00012A6E 3142 0010                  		move.w	d2,$10(a0)
00012A72 3028 0008                  		move.w	8(a0),d0
00012A76 9068 0030                  		sub.w	$30(a0),d0
00012A7A 6400                       		bcc.s	loc_11838
00012A7C 4468 0010                  		neg.w	$10(a0)
00012A80                            
00012A80                            loc_11838:
00012A80 5428 0024                  		addq.b	#2,$24(a0)
00012A84 6000                       		bra.s	Obj5E_SpikeFall
00012A86                            ; ===========================================================================
00012A86                            
00012A86                            loc_1183E:				; XREF: Obj5E_MoveSpike
00012A86 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00012A8C 7000                       		moveq	#0,d0
00012A8E 1029 001A                  		move.b	$1A(a1),d0
00012A92 343C 0028                  		move.w	#$28,d2
00012A96 3228 0008                  		move.w	8(a0),d1
00012A9A 9268 0030                  		sub.w	$30(a0),d1
00012A9E 6400                       		bcc.s	loc_1185C
00012AA0 4442                       		neg.w	d2
00012AA2 5440                       		addq.w	#2,d0
00012AA4                            
00012AA4                            loc_1185C:
00012AA4 D040                       		add.w	d0,d0
00012AA6 3228 0034                  		move.w	$34(a0),d1
00012AAA D272 0000                  		add.w	(a2,d0.w),d1
00012AAE 3141 000C                  		move.w	d1,$C(a0)
00012AB2 D468 0030                  		add.w	$30(a0),d2
00012AB6 3142 0008                  		move.w	d2,8(a0)
00012ABA 4268 000E                  		clr.w	$E(a0)
00012ABE 4268 000A                  		clr.w	$A(a0)
00012AC2 4E75                       		rts	
00012AC4                            ; ===========================================================================
00012AC4                            
00012AC4                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
00012AC4 4A68 0012                  		tst.w	$12(a0)
00012AC8 6A00                       		bpl.s	loc_1189A
00012ACA 6100 BC3E                  		bsr.w	ObjectFall
00012ACE 3028 0034                  		move.w	$34(a0),d0
00012AD2 0440 002F                  		subi.w	#$2F,d0
00012AD6 B068 000C                  		cmp.w	$C(a0),d0
00012ADA 6E00                       		bgt.s	locret_11898
00012ADC 6100 BC2C                  		bsr.w	ObjectFall
00012AE0                            
00012AE0                            locret_11898:
00012AE0 4E75                       		rts	
00012AE2                            ; ===========================================================================
00012AE2                            
00012AE2                            loc_1189A:				; XREF: Obj5E_SpikeFall
00012AE2 6100 BC26                  		bsr.w	ObjectFall
00012AE6 2268 003C                  		movea.l	$3C(a0),a1
00012AEA 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00012AF0 7000                       		moveq	#0,d0
00012AF2 1029 001A                  		move.b	$1A(a1),d0
00012AF6 3228 0008                  		move.w	8(a0),d1
00012AFA 9268 0030                  		sub.w	$30(a0),d1
00012AFE 6400                       		bcc.s	loc_118BA
00012B00 5440                       		addq.w	#2,d0
00012B02                            
00012B02                            loc_118BA:
00012B02 D040                       		add.w	d0,d0
00012B04 3228 0034                  		move.w	$34(a0),d1
00012B08 D272 0000                  		add.w	(a2,d0.w),d1
00012B0C B268 000C                  		cmp.w	$C(a0),d1
00012B10 6E00                       		bgt.s	locret_11938
00012B12 2268 003C                  		movea.l	$3C(a0),a1
00012B16 7202                       		moveq	#2,d1
00012B18 4A68 0010                  		tst.w	$10(a0)
00012B1C 6B00                       		bmi.s	Obj5E_Spring
00012B1E 7200                       		moveq	#0,d1
00012B20                            
00012B20                            Obj5E_Spring:
00012B20 1341 003A                  		move.b	d1,$3A(a1)
00012B24 1141 003A                  		move.b	d1,$3A(a0)
00012B28 B229 001A                  		cmp.b	$1A(a1),d1
00012B2C 6700                       		beq.s	loc_1192C
00012B2E 08A9 0003 0022             		bclr	#3,$22(a1)
00012B34 6700                       		beq.s	loc_1192C
00012B36 4229 0025                  		clr.b	$25(a1)
00012B3A 137C 0002 0024             		move.b	#2,$24(a1)
00012B40 45F8 D000                  		lea	($FFFFD000).w,a2
00012B44 3568 0012 0012             		move.w	$12(a0),$12(a2)
00012B4A 446A 0012                  		neg.w	$12(a2)
00012B4E 08EA 0001 0022             		bset	#1,$22(a2)
00012B54 08AA 0003 0022             		bclr	#3,$22(a2)
00012B5A 422A 003C                  		clr.b	$3C(a2)
00012B5E 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
00012B64 157C 0002 0024             		move.b	#2,$24(a2)
00012B6A 303C 00CC                  		move.w	#$CC,d0
00012B6E 4EB9 0000 132C             		jsr	(PlaySound_Special).l ;	play spring sound
00012B74                            
00012B74                            loc_1192C:
00012B74 4268 0010                  		clr.w	$10(a0)
00012B78 4268 0012                  		clr.w	$12(a0)
00012B7C 5528 0024                  		subq.b	#2,$24(a0)
00012B80                            
00012B80                            locret_11938:
00012B80 4E75                       		rts	
00012B82                            ; ===========================================================================
00012B82 FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00012B8C                            
00012B8C                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
00012BBC                            		even
00012BBC                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
00012BEC                            		even
00012BEC                            ; ---------------------------------------------------------------------------
00012BEC                            ; Sprite mappings - seesaws (SLZ)
00012BEC                            ; ---------------------------------------------------------------------------
00012BEC                            Map_obj5E:
00012BEC                            	include "_maps\obj5E.asm"
00012BEC                            ; ---------------------------------------------------------------------------
00012BEC                            ; Sprite mappings - seesaws (SLZ)
00012BEC                            ; ---------------------------------------------------------------------------
00012BEC 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00012BF0 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00012BF4 07                         byte_119AC:	dc.b 7
00012BF5 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
00012BFA DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
00012BFF E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
00012C04 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00012C09 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
00012C0E F406 0006 13               		dc.b $F4, 6, 0,	6, $13
00012C13 FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00012C18 04                         byte_119D0:	dc.b 4
00012C19 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
00012C1E E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
00012C23 E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00012C28 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
00012C2E 00                         		even
00012C2E 00                         		even
00012C2E                            
00012C2E                            ; ---------------------------------------------------------------------------
00012C2E                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00012C2E                            ; ---------------------------------------------------------------------------
00012C2E                            Map_obj5Ea:
00012C2E                            	include "_maps\obj5Eballs.asm"
00012C2E                            ; ---------------------------------------------------------------------------
00012C2E                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00012C2E                            ; ---------------------------------------------------------------------------
00012C2E 0000                       		dc.w byte_119EA-Map_obj5Ea
00012C30 0000                       		dc.w byte_119F0-Map_obj5Ea
00012C32 01                         byte_119EA:	dc.b 1
00012C33 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00012C38 01                         byte_119F0:	dc.b 1
00012C39 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00012C3E                            		even
00012C3E                            		even
00012C3E                            
00012C3E                            ; ===========================================================================
00012C3E                            ; ---------------------------------------------------------------------------
00012C3E                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
00012C3E                            ; ---------------------------------------------------------------------------
00012C3E                            
00012C3E                            Obj5F:					; XREF: Obj_Index
00012C3E 7000                       		moveq	#0,d0
00012C40 1028 0024                  		move.b	$24(a0),d0
00012C44 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
00012C48 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
00012C4C                            ; ===========================================================================
00012C4C 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
00012C4E 0000                       		dc.w Obj5F_Action-Obj5F_Index
00012C50 0000                       		dc.w Obj5F_Display-Obj5F_Index
00012C52 0000                       		dc.w Obj5F_End-Obj5F_Index
00012C54                            ; ===========================================================================
00012C54                            
00012C54                            Obj5F_Main:				; XREF: Obj5F_Index
00012C54 5428 0024                  		addq.b	#2,$24(a0)
00012C58 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
00012C60 317C 0400 0002             		move.w	#$400,2(a0)
00012C66 0028 0004 0001             		ori.b	#4,1(a0)
00012C6C 117C 0003 0018             		move.b	#3,$18(a0)
00012C72 117C 000C 0019             		move.b	#$C,$19(a0)
00012C78 1028 0028                  		move.b	$28(a0),d0
00012C7C 6700                       		beq.s	loc_11A3C
00012C7E 1140 0024                  		move.b	d0,$24(a0)
00012C82 4E75                       		rts	
00012C84                            ; ===========================================================================
00012C84                            
00012C84                            loc_11A3C:
00012C84 117C 009A 0020             		move.b	#$9A,$20(a0)
00012C8A 0868 0000 0022             		bchg	#0,$22(a0)
00012C90                            
00012C90                            Obj5F_Action:				; XREF: Obj5F_Index
00012C90 7000                       		moveq	#0,d0
00012C92 1028 0025                  		move.b	$25(a0),d0
00012C96 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
00012C9A 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
00012C9E 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00012CA4 6100 8BBA                  		bsr.w	AnimateSprite
00012CA8 6000 DC2E                  		bra.w	MarkObjGone
00012CAC                            ; ===========================================================================
00012CAC 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
00012CAE 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
00012CB0 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
00012CB2                            ; ===========================================================================
00012CB2                            
00012CB2                            Obj5F_Walk:				; XREF: Obj5F_Index2
00012CB2 6100 0000                  		bsr.w	Obj5F_ChkSonic
00012CB6 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012CBA 6A00                       		bpl.s	locret_11A96	; if time remains, branch
00012CBC 5428 0025                  		addq.b	#2,$25(a0)
00012CC0 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
00012CC6 317C 0010 0010             		move.w	#$10,$10(a0)
00012CCC 117C 0001 001C             		move.b	#1,$1C(a0)
00012CD2 0868 0000 0022             		bchg	#0,$22(a0)
00012CD8 6700                       		beq.s	locret_11A96
00012CDA 4468 0010                  		neg.w	$10(a0)		; change direction
00012CDE                            
00012CDE                            locret_11A96:
00012CDE 4E75                       		rts	
00012CE0                            ; ===========================================================================
00012CE0                            
00012CE0                            Obj5F_Wait:				; XREF: Obj5F_Index2
00012CE0 6100 0000                  		bsr.w	Obj5F_ChkSonic
00012CE4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012CE8 6B00                       		bmi.s	loc_11AA8
00012CEA 6100 BA4A                  		bsr.w	SpeedToPos
00012CEE 4E75                       		rts	
00012CF0                            ; ===========================================================================
00012CF0                            
00012CF0                            loc_11AA8:
00012CF0 5528 0025                  		subq.b	#2,$25(a0)
00012CF4 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
00012CFA 4268 0010                  		clr.w	$10(a0)		; stop walking
00012CFE 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
00012D04 4E75                       		rts	
00012D06                            ; ===========================================================================
00012D06                            
00012D06                            Obj5F_Explode:				; XREF: Obj5F_Index2
00012D06 5368 0030                  		subq.w	#1,$30(a0)
00012D0A 6A00                       		bpl.s	locret_11AD0
00012D0C 117C 003F 0000             		move.b	#$3F,0(a0)	; change bomb into an explosion
00012D12 117C 0000 0024             		move.b	#0,$24(a0)
00012D18                            
00012D18                            locret_11AD0:
00012D18 4E75                       		rts	
00012D1A                            ; ===========================================================================
00012D1A                            
00012D1A                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
00012D1A 3038 D008                  		move.w	($FFFFD008).w,d0
00012D1E 9068 0008                  		sub.w	8(a0),d0
00012D22 6400                       		bcc.s	loc_11ADE
00012D24 4440                       		neg.w	d0
00012D26                            
00012D26                            loc_11ADE:
00012D26 0C40 0060                  		cmpi.w	#$60,d0
00012D2A 6400                       		bcc.s	locret_11B5E
00012D2C 3038 D00C                  		move.w	($FFFFD00C).w,d0
00012D30 9068 000C                  		sub.w	$C(a0),d0
00012D34 6400                       		bcc.s	Obj5F_MakeFuse
00012D36 4440                       		neg.w	d0
00012D38                            
00012D38                            Obj5F_MakeFuse:
00012D38 0C40 0060                  		cmpi.w	#$60,d0
00012D3C 6400                       		bcc.s	locret_11B5E
00012D3E 4A78 FE08                  		tst.w	($FFFFFE08).w
00012D42 6600                       		bne.s	locret_11B5E
00012D44 117C 0004 0025             		move.b	#4,$25(a0)
00012D4A 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
00012D50 4268 0010                  		clr.w	$10(a0)
00012D54 117C 0002 001C             		move.b	#2,$1C(a0)
00012D5A 6100 BE9E                  		bsr.w	SingleObjLoad2
00012D5E 6600                       		bne.s	locret_11B5E
00012D60 137C 005F 0000             		move.b	#$5F,0(a1)	; load fuse object
00012D66 3368 0008 0008             		move.w	8(a0),8(a1)
00012D6C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012D72 3368 000C 0034             		move.w	$C(a0),$34(a1)
00012D78 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012D7E 137C 0004 0028             		move.b	#4,$28(a1)
00012D84 137C 0003 001C             		move.b	#3,$1C(a1)
00012D8A 337C 0010 0012             		move.w	#$10,$12(a1)
00012D90 0828 0001 0022             		btst	#1,$22(a0)
00012D96 6700                       		beq.s	loc_11B54
00012D98 4469 0012                  		neg.w	$12(a1)
00012D9C                            
00012D9C                            loc_11B54:
00012D9C 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
00012DA2 2348 003C                  		move.l	a0,$3C(a1)
00012DA6                            
00012DA6                            locret_11B5E:
00012DA6 4E75                       		rts	
00012DA8                            ; ===========================================================================
00012DA8                            
00012DA8                            Obj5F_Display:				; XREF: Obj5F_Index
00012DA8 6100                       		bsr.s	loc_11B70
00012DAA 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00012DB0 6100 8AAE                  		bsr.w	AnimateSprite
00012DB4 6000 DB22                  		bra.w	MarkObjGone
00012DB8                            ; ===========================================================================
00012DB8                            
00012DB8                            loc_11B70:
00012DB8 5368 0030                  		subq.w	#1,$30(a0)
00012DBC 6B00                       		bmi.s	loc_11B7C
00012DBE 6100 B976                  		bsr.w	SpeedToPos
00012DC2 4E75                       		rts	
00012DC4                            ; ===========================================================================
00012DC4                            
00012DC4                            loc_11B7C:
00012DC4 4268 0030                  		clr.w	$30(a0)
00012DC8 4228 0024                  		clr.b	$24(a0)
00012DCC 3168 0034 000C             		move.w	$34(a0),$C(a0)
00012DD2 7203                       		moveq	#3,d1
00012DD4 2248                       		movea.l	a0,a1
00012DD6 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
00012DDC 6000                       		bra.s	Obj5F_MakeShrap
00012DDE                            ; ===========================================================================
00012DDE                            
00012DDE                            Obj5F_Loop:
00012DDE 6100 BE1A                  		bsr.w	SingleObjLoad2
00012DE2 6600                       		bne.s	loc_11BCE
00012DE4                            
00012DE4                            Obj5F_MakeShrap:			; XREF: loc_11B7C
00012DE4 137C 005F 0000             		move.b	#$5F,0(a1)	; load shrapnel	object
00012DEA 3368 0008 0008             		move.w	8(a0),8(a1)
00012DF0 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012DF6 137C 0006 0028             		move.b	#6,$28(a1)
00012DFC 137C 0004 001C             		move.b	#4,$1C(a1)
00012E02 335A 0010                  		move.w	(a2)+,$10(a1)
00012E06 335A 0012                  		move.w	(a2)+,$12(a1)
00012E0A 137C 0098 0020             		move.b	#$98,$20(a1)
00012E10 08E9 0007 0001             		bset	#7,1(a1)
00012E16                            
00012E16                            loc_11BCE:
00012E16 51C9 FFC6                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
00012E1A                            
00012E1A 117C 0006 0024             		move.b	#6,$24(a0)
00012E20                            
00012E20                            Obj5F_End:				; XREF: Obj5F_Index
00012E20 6100 B914                  		bsr.w	SpeedToPos
00012E24 0668 0018 0012             		addi.w	#$18,$12(a0)
00012E2A 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00012E30 6100 8A2E                  		bsr.w	AnimateSprite
00012E34 4A28 0001                  		tst.b	1(a0)
00012E38 6A00 B95E                  		bpl.w	DeleteObject
00012E3C 6000 B91E                  		bra.w	DisplaySprite
00012E40                            ; ===========================================================================
00012E40 FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
00012E50                            
00012E50                            Ani_obj5F:
00012E50                            	include "_anim\obj5F.asm"
00012E50                            ; ---------------------------------------------------------------------------
00012E50                            ; Animation script - Bomb enemy
00012E50                            ; ---------------------------------------------------------------------------
00012E50 0000                       		dc.w byte_11C12-Ani_obj5F
00012E52 0000                       		dc.w byte_11C16-Ani_obj5F
00012E54 0000                       		dc.w byte_11C1C-Ani_obj5F
00012E56 0000                       		dc.w byte_11C20-Ani_obj5F
00012E58 0000                       		dc.w byte_11C24-Ani_obj5F
00012E5A 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
00012E5E 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
00012E64 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
00012E68 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
00012E6C 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
00012E70                            		even
00012E70                            		even
00012E70                            
00012E70                            ; ---------------------------------------------------------------------------
00012E70                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00012E70                            ; ---------------------------------------------------------------------------
00012E70                            Map_obj5F:
00012E70                            	include "_maps\obj5F.asm"
00012E70                            ; ---------------------------------------------------------------------------
00012E70                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00012E70                            ; ---------------------------------------------------------------------------
00012E70 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
00012E74 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
00012E78 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
00012E7C 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
00012E80 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
00012E84 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
00012E88 03                         byte_11C40:	dc.b 3
00012E89 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00012E8E 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012E93 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012E98 03                         byte_11C50:	dc.b 3
00012E99 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012E9E 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012EA3 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012EA8 03                         byte_11C60:	dc.b 3
00012EA9 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00012EAE 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
00012EB3 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00012EB8 03                         byte_11C70:	dc.b 3
00012EB9 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012EBE 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
00012EC3 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012EC8 03                         byte_11C80:	dc.b 3
00012EC9 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00012ECE 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
00012ED3 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00012ED8 03                         byte_11C90:	dc.b 3
00012ED9 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012EDE 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
00012EE3 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012EE8 02                         byte_11CA0:	dc.b 2
00012EE9 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00012EEE 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012EF3 02                         byte_11CAB:	dc.b 2
00012EF4 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012EF9 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012EFE 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
00012EFF E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
00012F04 01                         byte_11CBC:	dc.b 1			; fuse
00012F05 E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
00012F0A 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
00012F0B FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00012F10 01                         byte_11CC8:	dc.b 1			; fireball
00012F11 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00012F16                            		even
00012F16                            		even
00012F16                            
00012F16                            ; ===========================================================================
00012F16                            ; ---------------------------------------------------------------------------
00012F16                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
00012F16                            ; ---------------------------------------------------------------------------
00012F16                            
00012F16                            Obj60:					; XREF: Obj_Index
00012F16 7000                       		moveq	#0,d0
00012F18 1028 0024                  		move.b	$24(a0),d0
00012F1C 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
00012F20 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
00012F24                            ; ===========================================================================
00012F24 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
00012F26 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
00012F28 0000                       		dc.w Obj60_Display-Obj60_Index
00012F2A 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
00012F2C 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
00012F2E                            ; ===========================================================================
00012F2E                            
00012F2E                            Obj60_Main:				; XREF: Obj60_Index
00012F2E 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
00012F36 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
00012F3C 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00012F42 6700                       		beq.s	loc_11D02
00012F44 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
00012F4A                            
00012F4A                            loc_11D02:
00012F4A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00012F50 6600                       		bne.s	loc_11D10
00012F52 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
00012F58                            
00012F58                            loc_11D10:
00012F58 0028 0004 0001             		ori.b	#4,1(a0)
00012F5E 117C 0004 0018             		move.b	#4,$18(a0)
00012F64 117C 000B 0020             		move.b	#$B,$20(a0)
00012F6A 117C 000C 0019             		move.b	#$C,$19(a0)
00012F70 7400                       		moveq	#0,d2
00012F72 45E8 0037                  		lea	$37(a0),a2
00012F76 264A                       		movea.l	a2,a3
00012F78 524A                       		addq.w	#1,a2
00012F7A 7203                       		moveq	#3,d1
00012F7C                            
00012F7C                            Obj60_MakeOrbs:
00012F7C 6100 BC7C                  		bsr.w	SingleObjLoad2
00012F80 6600                       		bne.s	loc_11D90
00012F82 5213                       		addq.b	#1,(a3)
00012F84 3A09                       		move.w	a1,d5
00012F86 0445 D000                  		subi.w	#-$3000,d5
00012F8A EC4D                       		lsr.w	#6,d5
00012F8C 0245 007F                  		andi.w	#$7F,d5
00012F90 14C5                       		move.b	d5,(a2)+
00012F92 1368 0000 0000             		move.b	0(a0),0(a1)	; load spiked orb object
00012F98 137C 0006 0024             		move.b	#6,$24(a1)
00012F9E 2368 0004 0004             		move.l	4(a0),4(a1)
00012FA4 3368 0002 0002             		move.w	2(a0),2(a1)
00012FAA 0029 0004 0001             		ori.b	#4,1(a1)
00012FB0 137C 0004 0018             		move.b	#4,$18(a1)
00012FB6 137C 0008 0019             		move.b	#8,$19(a1)
00012FBC 137C 0003 001A             		move.b	#3,$1A(a1)
00012FC2 137C 0098 0020             		move.b	#$98,$20(a1)
00012FC8 1342 0026                  		move.b	d2,$26(a1)
00012FCC 0602 0040                  		addi.b	#$40,d2
00012FD0 2348 003C                  		move.l	a0,$3C(a1)
00012FD4 51C9 FFA6                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
00012FD8                            
00012FD8                            loc_11D90:
00012FD8 7001                       		moveq	#1,d0
00012FDA 0828 0000 0022             		btst	#0,$22(a0)
00012FE0 6700                       		beq.s	Obj60_Move
00012FE2 4440                       		neg.w	d0
00012FE4                            
00012FE4                            Obj60_Move:
00012FE4 1140 0036                  		move.b	d0,$36(a0)
00012FE8 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
00012FEE 5428 0024                  		addq.b	#2,$24(a0)
00012FF2 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
00012FF8 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
00012FFE 6700                       		beq.s	locret_11DBC	; if not, branch
00013000 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
00013004                            
00013004                            locret_11DBC:
00013004 4E75                       		rts	
00013006                            ; ===========================================================================
00013006                            
00013006                            Obj60_ChkSonic:				; XREF: Obj60_Index
00013006 3038 D008                  		move.w	($FFFFD008).w,d0
0001300A 9068 0008                  		sub.w	8(a0),d0
0001300E 6400                       		bcc.s	loc_11DCA
00013010 4440                       		neg.w	d0
00013012                            
00013012                            loc_11DCA:
00013012 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
00013016 6400                       		bcc.s	Obj60_Animate	; if not, branch
00013018 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001301C 9068 000C                  		sub.w	$C(a0),d0
00013020 6400                       		bcc.s	loc_11DDC
00013022 4440                       		neg.w	d0
00013024                            
00013024                            loc_11DDC:
00013024 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
00013028 6400                       		bcc.s	Obj60_Animate	; if not, branch
0001302A 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0001302E 6600                       		bne.s	Obj60_Animate	; if yes, branch
00013030 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
00013036                            
00013036                            Obj60_Animate:
00013036 43F9 0000 0000             		lea	(Ani_obj60).l,a1
0001303C 6100 8822                  		bsr.w	AnimateSprite
00013040 6000 0000                  		bra.w	Obj60_ChkDel
00013044                            ; ===========================================================================
00013044                            
00013044                            Obj60_Display:				; XREF: Obj60_Index
00013044 6100 B6F0                  		bsr.w	SpeedToPos
00013048                            
00013048                            Obj60_ChkDel:				; XREF: Obj60_Animate
00013048 3028 0008                  		move.w	8(a0),d0
0001304C 0240 FF80                  		andi.w	#$FF80,d0
00013050 3238 F700                  		move.w	($FFFFF700).w,d1
00013054 0441 0080                  		subi.w	#$80,d1
00013058 0241 FF80                  		andi.w	#$FF80,d1
0001305C 9041                       		sub.w	d1,d0
0001305E 0C40 0280                  		cmpi.w	#$280,d0
00013062 6200 0000                  		bhi.w	Obj60_ChkGone
00013066 6000 B6F4                  		bra.w	DisplaySprite
0001306A                            ; ===========================================================================
0001306A                            
0001306A                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
0001306A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001306E 7000                       		moveq	#0,d0
00013070 1028 0023                  		move.b	$23(a0),d0
00013074 6700                       		beq.s	loc_11E34
00013076 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001307C                            
0001307C                            loc_11E34:
0001307C 45E8 0037                  		lea	$37(a0),a2
00013080 7400                       		moveq	#0,d2
00013082 141A                       		move.b	(a2)+,d2
00013084 5342                       		subq.w	#1,d2
00013086 6500                       		bcs.s	Obj60_Delete
00013088                            
00013088                            loc_11E40:
00013088 7000                       		moveq	#0,d0
0001308A 101A                       		move.b	(a2)+,d0
0001308C ED48                       		lsl.w	#6,d0
0001308E 0680 00FF D000             		addi.l	#$FFD000,d0
00013094 2240                       		movea.l	d0,a1
00013096 6100 B702                  		bsr.w	DeleteObject2
0001309A 51CA FFEC                  		dbf	d2,loc_11E40
0001309E                            
0001309E                            Obj60_Delete:
0001309E 6000 B6F8                  		bra.w	DeleteObject
000130A2                            ; ===========================================================================
000130A2                            
000130A2                            Obj60_MoveOrb:				; XREF: Obj60_Index
000130A2 2268 003C                  		movea.l	$3C(a0),a1
000130A6 0C29 0060 0000             		cmpi.b	#$60,0(a1)
000130AC 6600 B6EA                  		bne.w	DeleteObject
000130B0 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
000130B6 6600                       		bne.s	Obj60_Circle
000130B8 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
000130BE 6600                       		bne.s	Obj60_Circle
000130C0 5428 0024                  		addq.b	#2,$24(a0)
000130C4 5329 0037                  		subq.b	#1,$37(a1)
000130C8 6600                       		bne.s	Obj60_FireOrb
000130CA 5429 0024                  		addq.b	#2,$24(a1)
000130CE                            
000130CE                            Obj60_FireOrb:
000130CE 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
000130D4 0829 0000 0022             		btst	#0,$22(a1)
000130DA 6700                       		beq.s	Obj60_Display2
000130DC 4468 0010                  		neg.w	$10(a0)
000130E0                            
000130E0                            Obj60_Display2:
000130E0 6000 B67A                  		bra.w	DisplaySprite
000130E4                            ; ===========================================================================
000130E4                            
000130E4                            Obj60_Circle:				; XREF: Obj60_MoveOrb
000130E4 1028 0026                  		move.b	$26(a0),d0
000130E8 4EB9 0000 3274             		jsr	(CalcSine).l
000130EE E841                       		asr.w	#4,d1
000130F0 D269 0008                  		add.w	8(a1),d1
000130F4 3141 0008                  		move.w	d1,8(a0)
000130F8 E840                       		asr.w	#4,d0
000130FA D069 000C                  		add.w	$C(a1),d0
000130FE 3140 000C                  		move.w	d0,$C(a0)
00013102 1029 0036                  		move.b	$36(a1),d0
00013106 D128 0026                  		add.b	d0,$26(a0)
0001310A 6000 B650                  		bra.w	DisplaySprite
0001310E                            ; ===========================================================================
0001310E                            
0001310E                            Obj60_ChkDel2:				; XREF: Obj60_Index
0001310E 6100 B626                  		bsr.w	SpeedToPos
00013112 4A28 0001                  		tst.b	1(a0)
00013116 6A00 B680                  		bpl.w	DeleteObject
0001311A 6000 B640                  		bra.w	DisplaySprite
0001311E                            ; ===========================================================================
0001311E                            Ani_obj60:
0001311E                            	include "_anim\obj60.asm"
0001311E                            ; ---------------------------------------------------------------------------
0001311E                            ; Animation script - Orbinaut enemy
0001311E                            ; ---------------------------------------------------------------------------
0001311E 0000                       		dc.w byte_11EDA-Ani_obj60
00013120 0000                       		dc.w byte_11EDE-Ani_obj60
00013122 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
00013126 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
0001312C                            		even
0001312C                            		even
0001312C                            
0001312C                            ; ---------------------------------------------------------------------------
0001312C                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
0001312C                            ; ---------------------------------------------------------------------------
0001312C                            Map_obj60:
0001312C                            	include "_maps\obj60.asm"
0001312C                            ; ---------------------------------------------------------------------------
0001312C                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
0001312C                            ; ---------------------------------------------------------------------------
0001312C 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
00013130 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
00013134 01                         byte_11EEC:	dc.b 1
00013135 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001313A 01                         byte_11EF2:	dc.b 1
0001313B F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
00013140 01                         byte_11EF8:	dc.b 1
00013141 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00013146 01                         byte_11EFE:	dc.b 1
00013147 F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
0001314C                            		even
0001314C                            		even
0001314C                            
0001314C                            ; ===========================================================================
0001314C                            ; ---------------------------------------------------------------------------
0001314C                            ; Object 16 - harpoon (LZ)
0001314C                            ; ---------------------------------------------------------------------------
0001314C                            
0001314C                            Obj16:					; XREF: Obj_Index
0001314C 7000                       		moveq	#0,d0
0001314E 1028 0024                  		move.b	$24(a0),d0
00013152 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
00013156 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
0001315A                            ; ===========================================================================
0001315A 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
0001315C 0000                       		dc.w Obj16_Move-Obj16_Index
0001315E 0000                       		dc.w Obj16_Wait-Obj16_Index
00013160                            ; ===========================================================================
00013160                            
00013160                            Obj16_Main:				; XREF: Obj16_Index
00013160 5428 0024                  		addq.b	#2,$24(a0)
00013164 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
0001316C 317C 03CC 0002             		move.w	#$3CC,2(a0)
00013172 0028 0004 0001             		ori.b	#4,1(a0)
00013178 117C 0004 0018             		move.b	#4,$18(a0)
0001317E 1168 0028 001C             		move.b	$28(a0),$1C(a0)
00013184 117C 0014 0019             		move.b	#$14,$19(a0)
0001318A 317C 003C 0030             		move.w	#60,$30(a0)
00013190                            
00013190                            Obj16_Move:				; XREF: Obj16_Index
00013190 43F9 0000 0000             		lea	(Ani_obj16).l,a1
00013196 6100 86C8                  		bsr.w	AnimateSprite
0001319A 7000                       		moveq	#0,d0
0001319C 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
000131A0 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
000131A6 6000 D730                  		bra.w	MarkObjGone
000131AA                            ; ===========================================================================
000131AA 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
000131B0                            ; ===========================================================================
000131B0                            
000131B0                            Obj16_Wait:				; XREF: Obj16_Index
000131B0 5368 0030                  		subq.w	#1,$30(a0)
000131B4 6A00                       		bpl.s	Obj16_ChkDel
000131B6 317C 003C 0030             		move.w	#60,$30(a0)
000131BC 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
000131C0 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
000131C6                            
000131C6                            Obj16_ChkDel:
000131C6 6000 D710                  		bra.w	MarkObjGone
000131CA                            ; ===========================================================================
000131CA                            Ani_obj16:
000131CA                            	include "_anim\obj16.asm"
000131CA                            ; ---------------------------------------------------------------------------
000131CA                            ; Animation script - harpoon (LZ)
000131CA                            ; ---------------------------------------------------------------------------
000131CA 0000                       		dc.w byte_11F8A-Ani_obj16
000131CC 0000                       		dc.w byte_11F8E-Ani_obj16
000131CE 0000                       		dc.w byte_11F92-Ani_obj16
000131D0 0000                       		dc.w byte_11F96-Ani_obj16
000131D2 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
000131D6 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
000131DA 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
000131DE 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
000131E2                            		even
000131E2                            		even
000131E2                            
000131E2                            ; ---------------------------------------------------------------------------
000131E2                            ; Sprite mappings - harpoon (LZ)
000131E2                            ; ---------------------------------------------------------------------------
000131E2                            Map_obj16:
000131E2                            	include "_maps\obj16.asm"
000131E2                            ; ---------------------------------------------------------------------------
000131E2                            ; Sprite mappings - harpoon (LZ)
000131E2                            ; ---------------------------------------------------------------------------
000131E2 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
000131E6 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
000131EA 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
000131EE 01                         byte_11FA6:	dc.b 1
000131EF FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
000131F4 01                         byte_11FAC:	dc.b 1
000131F5 FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
000131FA 02                         byte_11FB2:	dc.b 2
000131FB FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
00013200 FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
00013205 01                         byte_11FBD:	dc.b 1
00013206 F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
0001320B 01                         byte_11FC3:	dc.b 1
0001320C E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
00013211 02                         byte_11FC9:	dc.b 2
00013212 D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
00013217 F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
0001321C                            		even
0001321C                            		even
0001321C                            
0001321C                            ; ===========================================================================
0001321C                            ; ---------------------------------------------------------------------------
0001321C                            ; Object 61 - blocks (LZ)
0001321C                            ; ---------------------------------------------------------------------------
0001321C                            
0001321C                            Obj61:					; XREF: Obj_Index
0001321C 7000                       		moveq	#0,d0
0001321E 1028 0024                  		move.b	$24(a0),d0
00013222 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
00013226 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
0001322A                            ; ===========================================================================
0001322A 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
0001322C 0000                       		dc.w Obj61_Action-Obj61_Index
0001322E                            
0001322E 1010                       Obj61_Var:	dc.b $10, $10		; width, height
00013230 200C                       		dc.b $20, $C
00013232 1010                       		dc.b $10, $10
00013234 1010                       		dc.b $10, $10
00013236                            ; ===========================================================================
00013236                            
00013236                            Obj61_Main:				; XREF: Obj61_Index
00013236 5428 0024                  		addq.b	#2,$24(a0)
0001323A 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
00013242 317C 43E6 0002             		move.w	#$43E6,2(a0)
00013248 117C 0004 0001             		move.b	#4,1(a0)
0001324E 117C 0003 0018             		move.b	#3,$18(a0)
00013254 7000                       		moveq	#0,d0
00013256 1028 0028                  		move.b	$28(a0),d0
0001325A E648                       		lsr.w	#3,d0
0001325C 0240 000E                  		andi.w	#$E,d0
00013260 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
00013264 115A 0019                  		move.b	(a2)+,$19(a0)
00013268 1152 0016                  		move.b	(a2),$16(a0)
0001326C E248                       		lsr.w	#1,d0
0001326E 1140 001A                  		move.b	d0,$1A(a0)
00013272 3168 0008 0034             		move.w	8(a0),$34(a0)
00013278 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001327E 1028 0028                  		move.b	$28(a0),d0
00013282 0200 000F                  		andi.b	#$F,d0
00013286 6700                       		beq.s	Obj61_Action
00013288 0C00 0007                  		cmpi.b	#7,d0
0001328C 6700                       		beq.s	Obj61_Action
0001328E 117C 0001 0038             		move.b	#1,$38(a0)
00013294                            
00013294                            Obj61_Action:				; XREF: Obj61_Index
00013294 3F28 0008                  		move.w	8(a0),-(sp)
00013298 7000                       		moveq	#0,d0
0001329A 1028 0028                  		move.b	$28(a0),d0
0001329E 0240 000F                  		andi.w	#$F,d0
000132A2 D040                       		add.w	d0,d0
000132A4 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
000132A8 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
000132AC 381F                       		move.w	(sp)+,d4
000132AE 4A28 0001                  		tst.b	1(a0)
000132B2 6A00                       		bpl.s	Obj61_ChkDel
000132B4 7200                       		moveq	#0,d1
000132B6 1228 0019                  		move.b	$19(a0),d1
000132BA 0641 000B                  		addi.w	#$B,d1
000132BE 7400                       		moveq	#0,d2
000132C0 1428 0016                  		move.b	$16(a0),d2
000132C4 3602                       		move.w	d2,d3
000132C6 5243                       		addq.w	#1,d3
000132C8 6100 D938                  		bsr.w	SolidObject
000132CC 1144 003F                  		move.b	d4,$3F(a0)
000132D0 6100 0000                  		bsr.w	loc_12180
000132D4                            
000132D4                            Obj61_ChkDel:
000132D4 3028 0034                  		move.w	$34(a0),d0
000132D8 0240 FF80                  		andi.w	#$FF80,d0
000132DC 3238 F700                  		move.w	($FFFFF700).w,d1
000132E0 0441 0080                  		subi.w	#$80,d1
000132E4 0241 FF80                  		andi.w	#$FF80,d1
000132E8 9041                       		sub.w	d1,d0
000132EA 0C40 0280                  		cmpi.w	#$280,d0
000132EE 6200 B4A8                  		bhi.w	DeleteObject
000132F2 6000 B468                  		bra.w	DisplaySprite
000132F6                            ; ===========================================================================
000132F6 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
000132FA 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
000132FE 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
00013302 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
00013306                            ; ===========================================================================
00013306                            
00013306                            Obj61_Type00:				; XREF: Obj61_TypeIndex
00013306 4E75                       		rts	
00013308                            ; ===========================================================================
00013308                            
00013308                            Obj61_Type01:				; XREF: Obj61_TypeIndex
00013308 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
0001330C 6600                       		bne.s	loc_120D6	; if yes, branch
0001330E 0828 0003 0022             		btst	#3,$22(a0)
00013314 6700                       		beq.s	locret_120D4
00013316 317C 001E 0036             		move.w	#30,$36(a0)	; wait for « second
0001331C                            
0001331C                            locret_120D4:
0001331C 4E75                       		rts	
0001331E                            ; ===========================================================================
0001331E                            
0001331E                            loc_120D6:
0001331E 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
00013322 66F8                       		bne.s	locret_120D4	; if time remains, branch
00013324 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00013328 4228 0038                  		clr.b	$38(a0)
0001332C 4E75                       		rts	
0001332E                            ; ===========================================================================
0001332E                            
0001332E                            Obj61_Type02:				; XREF: Obj61_TypeIndex
0001332E 6100 B406                  		bsr.w	SpeedToPos
00013332 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
00013336 6100 0000                  		bsr.w	ObjHitFloor
0001333A 4A41                       		tst.w	d1
0001333C 6A00 0000                  		bpl.w	locret_12106
00013340 5241                       		addq.w	#1,d1
00013342 D368 000C                  		add.w	d1,$C(a0)
00013346 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
0001334A 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
0001334E                            
0001334E                            locret_12106:
0001334E 4E75                       		rts	
00013350                            ; ===========================================================================
00013350                            
00013350                            Obj61_Type04:				; XREF: Obj61_TypeIndex
00013350 6100 B3E4                  		bsr.w	SpeedToPos
00013354 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
00013358 6100 0000                  		bsr.w	ObjHitCeiling
0001335C 4A41                       		tst.w	d1
0001335E 6A00 0000                  		bpl.w	locret_12126
00013362 9368 000C                  		sub.w	d1,$C(a0)
00013366 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
0001336A 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
0001336E                            
0001336E                            locret_12126:
0001336E 4E75                       		rts	
00013370                            ; ===========================================================================
00013370                            
00013370                            Obj61_Type05:				; XREF: Obj61_TypeIndex
00013370 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
00013376 6600                       		bne.s	locret_12138	; if not, branch
00013378 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
0001337C 4228 0038                  		clr.b	$38(a0)
00013380                            
00013380                            locret_12138:
00013380 4E75                       		rts	
00013382                            ; ===========================================================================
00013382                            
00013382                            Obj61_Type07:				; XREF: Obj61_TypeIndex
00013382 3038 F646                  		move.w	($FFFFF646).w,d0
00013386 9068 000C                  		sub.w	$C(a0),d0
0001338A 6700                       		beq.s	locret_1217E
0001338C 6400                       		bcc.s	loc_12162
0001338E 0C40 FFFE                  		cmpi.w	#-2,d0
00013392 6C00                       		bge.s	loc_1214E
00013394 70FE                       		moveq	#-2,d0
00013396                            
00013396                            loc_1214E:
00013396 D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
0001339A 6100 0000                  		bsr.w	ObjHitCeiling
0001339E 4A41                       		tst.w	d1
000133A0 6A00 0000                  		bpl.w	locret_12160
000133A4 9368 000C                  		sub.w	d1,$C(a0)
000133A8                            
000133A8                            locret_12160:
000133A8 4E75                       		rts	
000133AA                            ; ===========================================================================
000133AA                            
000133AA                            loc_12162:				; XREF: Obj61_Type07
000133AA 0C40 0002                  		cmpi.w	#2,d0
000133AE 6F00                       		ble.s	loc_1216A
000133B0 7002                       		moveq	#2,d0
000133B2                            
000133B2                            loc_1216A:
000133B2 D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
000133B6 6100 0000                  		bsr.w	ObjHitFloor
000133BA 4A41                       		tst.w	d1
000133BC 6A00 0000                  		bpl.w	locret_1217E
000133C0 5241                       		addq.w	#1,d1
000133C2 D368 000C                  		add.w	d1,$C(a0)
000133C6                            
000133C6                            locret_1217E:
000133C6 4E75                       		rts	
000133C8                            ; ===========================================================================
000133C8                            
000133C8                            loc_12180:				; XREF: Obj61_Action
000133C8 4A28 0038                  		tst.b	$38(a0)
000133CC 6700                       		beq.s	locret_121C0
000133CE 0828 0003 0022             		btst	#3,$22(a0)
000133D4 6600                       		bne.s	loc_1219A
000133D6 4A28 003E                  		tst.b	$3E(a0)
000133DA 6700                       		beq.s	locret_121C0
000133DC 5928 003E                  		subq.b	#4,$3E(a0)
000133E0 6000                       		bra.s	loc_121A6
000133E2                            ; ===========================================================================
000133E2                            
000133E2                            loc_1219A:
000133E2 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
000133E8 6700                       		beq.s	locret_121C0
000133EA 5828 003E                  		addq.b	#4,$3E(a0)
000133EE                            
000133EE                            loc_121A6:
000133EE 1028 003E                  		move.b	$3E(a0),d0
000133F2 4EB9 0000 3274             		jsr	(CalcSine).l
000133F8 323C 0400                  		move.w	#$400,d1
000133FC C1C1                       		muls.w	d1,d0
000133FE 4840                       		swap	d0
00013400 D068 0030                  		add.w	$30(a0),d0
00013404 3140 000C                  		move.w	d0,$C(a0)
00013408                            
00013408                            locret_121C0:
00013408 4E75                       		rts	
0001340A                            ; ===========================================================================
0001340A                            ; ---------------------------------------------------------------------------
0001340A                            ; Sprite mappings - blocks (LZ)
0001340A                            ; ---------------------------------------------------------------------------
0001340A                            Map_obj61:
0001340A                            	include "_maps\obj61.asm"
0001340A                            ; ---------------------------------------------------------------------------
0001340A                            ; Sprite mappings - blocks (LZ)
0001340A                            ; ---------------------------------------------------------------------------
0001340A 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
0001340E 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
00013412 01                         byte_121CA:	dc.b 1
00013413 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00013418 02                         byte_121D0:	dc.b 2
00013419 F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
0001341E F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
00013423 01                         byte_121DB:	dc.b 1
00013424 F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
00013429 01                         byte_121E1:	dc.b 1
0001342A F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
00013430 00                         		even
00013430 00                         		even
00013430                            
00013430                            ; ===========================================================================
00013430                            ; ---------------------------------------------------------------------------
00013430                            ; Object 62 - gargoyle head (LZ)
00013430                            ; ---------------------------------------------------------------------------
00013430                            
00013430                            Obj62:					; XREF: Obj_Index
00013430 7000                       		moveq	#0,d0
00013432 1028 0024                  		move.b	$24(a0),d0
00013436 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
0001343A 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
0001343E 6000 D498                  		bra.w	MarkObjGone
00013442                            ; ===========================================================================
00013442 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
00013444 0000                       		dc.w Obj62_MakeFire-Obj62_Index
00013446 0000                       		dc.w Obj62_FireBall-Obj62_Index
00013448 0000                       		dc.w Obj62_AniFire-Obj62_Index
0001344A                            
0001344A 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00013452                            ; ===========================================================================
00013452                            
00013452                            Obj62_Main:				; XREF: Obj62_Index
00013452 5428 0024                  		addq.b	#2,$24(a0)
00013456 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
0001345E 317C 42E9 0002             		move.w	#$42E9,2(a0)
00013464 0028 0004 0001             		ori.b	#4,1(a0)
0001346A 117C 0003 0018             		move.b	#3,$18(a0)
00013470 117C 0010 0019             		move.b	#$10,$19(a0)
00013476 1028 0028                  		move.b	$28(a0),d0	; get object type
0001347A 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001347E 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
00013484 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001348A 0228 000F 0028             		andi.b	#$F,$28(a0)
00013490                            
00013490                            Obj62_MakeFire:				; XREF: Obj62_Index
00013490 5328 001E                  		subq.b	#1,$1E(a0)
00013494 6600                       		bne.s	Obj62_NoFire
00013496 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001349C 6100 B538                  		bsr.w	ChkObjOnScreen
000134A0 6600                       		bne.s	Obj62_NoFire
000134A2 6100 B740                  		bsr.w	SingleObjLoad
000134A6 6600                       		bne.s	Obj62_NoFire
000134A8 137C 0062 0000             		move.b	#$62,0(a1)	; load fireball	object
000134AE 5829 0024                  		addq.b	#4,$24(a1)
000134B2 3368 0008 0008             		move.w	8(a0),8(a1)
000134B8 3368 000C 000C             		move.w	$C(a0),$C(a1)
000134BE 1368 0001 0001             		move.b	1(a0),1(a1)
000134C4 1368 0022 0022             		move.b	$22(a0),$22(a1)
000134CA                            
000134CA                            Obj62_NoFire:
000134CA 4E75                       		rts	
000134CC                            ; ===========================================================================
000134CC                            
000134CC                            Obj62_FireBall:				; XREF: Obj62_Index
000134CC 5428 0024                  		addq.b	#2,$24(a0)
000134D0 117C 0008 0016             		move.b	#8,$16(a0)
000134D6 117C 0008 0017             		move.b	#8,$17(a0)
000134DC 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
000134E4 317C 02E9 0002             		move.w	#$2E9,2(a0)
000134EA 0028 0004 0001             		ori.b	#4,1(a0)
000134F0 117C 0004 0018             		move.b	#4,$18(a0)
000134F6 117C 0098 0020             		move.b	#$98,$20(a0)
000134FC 117C 0008 0019             		move.b	#8,$19(a0)
00013502 117C 0002 001A             		move.b	#2,$1A(a0)
00013508 5068 000C                  		addq.w	#8,$C(a0)
0001350C 317C 0200 0010             		move.w	#$200,$10(a0)
00013512 0828 0000 0022             		btst	#0,$22(a0)
00013518 6600                       		bne.s	Obj62_Sound
0001351A 4468 0010                  		neg.w	$10(a0)
0001351E                            
0001351E                            Obj62_Sound:
0001351E 303C 00AE                  		move.w	#$AE,d0
00013522 4EB9 0000 132C             		jsr	(PlaySound_Special).l ;	play lava ball sound
00013528                            
00013528                            Obj62_AniFire:				; XREF: Obj62_Index
00013528 1038 FE05                  		move.b	($FFFFFE05).w,d0
0001352C 0200 0007                  		andi.b	#7,d0
00013530 6600                       		bne.s	Obj62_StopFire
00013532 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
00013538                            
00013538                            Obj62_StopFire:
00013538 6100 B1FC                  		bsr.w	SpeedToPos
0001353C 0828 0000 0022             		btst	#0,$22(a0)
00013542 6600                       		bne.s	Obj62_StopFire2
00013544 76F8                       		moveq	#-8,d3
00013546 6100 0000                  		bsr.w	ObjHitWallLeft
0001354A 4A41                       		tst.w	d1
0001354C 6B00 B24A                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00013550 4E75                       		rts	
00013552                            ; ===========================================================================
00013552                            
00013552                            Obj62_StopFire2:
00013552 7608                       		moveq	#8,d3
00013554 6100 0000                  		bsr.w	ObjHitWallRight
00013558 4A41                       		tst.w	d1
0001355A 6B00 B23C                  		bmi.w	DeleteObject
0001355E 4E75                       		rts	
00013560                            ; ===========================================================================
00013560                            ; ---------------------------------------------------------------------------
00013560                            ; Sprite mappings - gargoyle head (LZ)
00013560                            ; ---------------------------------------------------------------------------
00013560                            Map_obj62:
00013560                            	include "_maps\obj62.asm"
00013560                            ; ---------------------------------------------------------------------------
00013560                            ; Sprite mappings - gargoyle head (LZ)
00013560                            ; ---------------------------------------------------------------------------
00013560 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
00013564 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
00013568 03                         byte_12320:	dc.b 3
00013569 F004 0000 00               		dc.b $F0, 4, 0,	0, 0
0001356E F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00013573 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
00013578 01                         byte_12330:	dc.b 1
00013579 FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
0001357E 01                         byte_12336:	dc.b 1
0001357F FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00013584                            		even
00013584                            		even
00013584                            
00013584                            ; ===========================================================================
00013584                            ; ---------------------------------------------------------------------------
00013584                            ; Object 63 - platforms	on a conveyor belt (LZ)
00013584                            ; ---------------------------------------------------------------------------
00013584                            
00013584                            Obj63:					; XREF: Obj_Index
00013584 7000                       		moveq	#0,d0
00013586 1028 0024                  		move.b	$24(a0),d0
0001358A 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
0001358E 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
00013592 3028 0030                  		move.w	$30(a0),d0
00013596 0240 FF80                  		andi.w	#$FF80,d0
0001359A 3238 F700                  		move.w	($FFFFF700).w,d1
0001359E 0441 0080                  		subi.w	#$80,d1
000135A2 0241 FF80                  		andi.w	#$FF80,d1
000135A6 9041                       		sub.w	d1,d0
000135A8 0C40 0280                  		cmpi.w	#$280,d0
000135AC 6200                       		bhi.s	loc_1236A
000135AE                            
000135AE                            Obj63_Display:				; XREF: loc_1236A
000135AE 6000 B1AC                  		bra.w	DisplaySprite
000135B2                            ; ===========================================================================
000135B2                            
000135B2                            loc_1236A:				; XREF: Obj63
000135B2 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
000135B8 6600                       		bne.s	loc_12378
000135BA 0C40 FF80                  		cmpi.w	#-$80,d0
000135BE 64EE                       		bcc.s	Obj63_Display
000135C0                            
000135C0                            loc_12378:
000135C0 1028 002F                  		move.b	$2F(a0),d0
000135C4 6A00 B1D2                  		bpl.w	DeleteObject
000135C8 0240 007F                  		andi.w	#$7F,d0
000135CC 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000135D0 08B2 0000 0000             		bclr	#0,(a2,d0.w)
000135D6 6000 B1C0                  		bra.w	DeleteObject
000135DA                            ; ===========================================================================
000135DA 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
000135DC 0000                       		dc.w loc_124B2-Obj63_Index
000135DE 0000                       		dc.w loc_124C2-Obj63_Index
000135E0 0000                       		dc.w loc_124DE-Obj63_Index
000135E2                            ; ===========================================================================
000135E2                            
000135E2                            Obj63_Main:				; XREF: Obj63_Index
000135E2 1028 0028                  		move.b	$28(a0),d0
000135E6 6B00 0000                  		bmi.w	loc_12460
000135EA 5428 0024                  		addq.b	#2,$24(a0)
000135EE 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
000135F6 317C 43F6 0002             		move.w	#$43F6,2(a0)
000135FC 0028 0004 0001             		ori.b	#4,1(a0)
00013602 117C 0010 0019             		move.b	#$10,$19(a0)
00013608 117C 0004 0018             		move.b	#4,$18(a0)
0001360E 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
00013614 6600                       		bne.s	loc_123E2
00013616 5828 0024                  		addq.b	#4,$24(a0)
0001361A 317C 03F6 0002             		move.w	#$3F6,2(a0)
00013620 117C 0001 0018             		move.b	#1,$18(a0)
00013626 6000 0000                  		bra.w	loc_124DE
0001362A                            ; ===========================================================================
0001362A                            
0001362A                            loc_123E2:
0001362A 117C 0004 001A             		move.b	#4,$1A(a0)
00013630 7000                       		moveq	#0,d0
00013632 1028 0028                  		move.b	$28(a0),d0
00013636 3200                       		move.w	d0,d1
00013638 E648                       		lsr.w	#3,d0
0001363A 0240 001E                  		andi.w	#$1E,d0
0001363E 45FA 0000                  		lea	Obj63_Data(pc),a2
00013642 D4F2 0000                  		adda.w	(a2,d0.w),a2
00013646 315A 0038                  		move.w	(a2)+,$38(a0)
0001364A 315A 0030                  		move.w	(a2)+,$30(a0)
0001364E 214A 003C                  		move.l	a2,$3C(a0)
00013652 0241 000F                  		andi.w	#$F,d1
00013656 E549                       		lsl.w	#2,d1
00013658 1141 0038                  		move.b	d1,$38(a0)
0001365C 117C 0004 003A             		move.b	#4,$3A(a0)
00013662 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00013666 6700                       		beq.s	loc_1244C
00013668 117C 0001 003B             		move.b	#1,$3B(a0)
0001366E 4428 003A                  		neg.b	$3A(a0)
00013672 7200                       		moveq	#0,d1
00013674 1228 0038                  		move.b	$38(a0),d1
00013678 D228 003A                  		add.b	$3A(a0),d1
0001367C B228 0039                  		cmp.b	$39(a0),d1
00013680 6500                       		bcs.s	loc_12448
00013682 1001                       		move.b	d1,d0
00013684 7200                       		moveq	#0,d1
00013686 4A00                       		tst.b	d0
00013688 6A00                       		bpl.s	loc_12448
0001368A 1228 0039                  		move.b	$39(a0),d1
0001368E 5901                       		subq.b	#4,d1
00013690                            
00013690                            loc_12448:
00013690 1141 0038                  		move.b	d1,$38(a0)
00013694                            
00013694                            loc_1244C:
00013694 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
0001369A 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
000136A0 6100 0000                  		bsr.w	Obj63_ChangeDir
000136A4 6000 0000                  		bra.w	loc_124B2
000136A8                            ; ===========================================================================
000136A8                            
000136A8                            loc_12460:				; XREF: Obj63_Main
000136A8 1140 002F                  		move.b	d0,$2F(a0)
000136AC 0240 007F                  		andi.w	#$7F,d0
000136B0 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000136B4 08F2 0000 0000             		bset	#0,(a2,d0.w)
000136BA 6600 B0DC                  		bne.w	DeleteObject
000136BE D040                       		add.w	d0,d0
000136C0 0240 001E                  		andi.w	#$1E,d0
000136C4 0640 0070                  		addi.w	#$70,d0
000136C8 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
000136CE D4F2 0000                  		adda.w	(a2,d0.w),a2
000136D2 321A                       		move.w	(a2)+,d1
000136D4 2248                       		movea.l	a0,a1
000136D6 6000                       		bra.s	Obj63_MakePtfms
000136D8                            ; ===========================================================================
000136D8                            
000136D8                            Obj63_Loop:
000136D8 6100 B50A                  		bsr.w	SingleObjLoad
000136DC 6600                       		bne.s	loc_124AA
000136DE                            
000136DE                            Obj63_MakePtfms:			; XREF: loc_12460
000136DE 137C 0063 0000             		move.b	#$63,0(a1)
000136E4 335A 0008                  		move.w	(a2)+,8(a1)
000136E8 335A 000C                  		move.w	(a2)+,$C(a1)
000136EC 301A                       		move.w	(a2)+,d0
000136EE 1340 0028                  		move.b	d0,$28(a1)
000136F2                            
000136F2                            loc_124AA:
000136F2 51C9 FFE4                  		dbf	d1,Obj63_Loop
000136F6                            
000136F6 588F                       		addq.l	#4,sp
000136F8 4E75                       		rts	
000136FA                            ; ===========================================================================
000136FA                            
000136FA                            loc_124B2:				; XREF: Obj63_Index
000136FA 7200                       		moveq	#0,d1
000136FC 1228 0019                  		move.b	$19(a0),d1
00013700 4EB9 0000 8508             		jsr	(PlatformObject).l
00013706 6000 0000                  		bra.w	sub_12502
0001370A                            ; ===========================================================================
0001370A                            
0001370A                            loc_124C2:				; XREF: Obj63_Index
0001370A 7200                       		moveq	#0,d1
0001370C 1228 0019                  		move.b	$19(a0),d1
00013710 4EB9 0000 867C             		jsr	(ExitPlatform).l
00013716 3F28 0008                  		move.w	8(a0),-(sp)
0001371A 6100 0000                  		bsr.w	sub_12502
0001371E 341F                       		move.w	(sp)+,d2
00013720 4EF9 0000 8BEA             		jmp	(MvSonicOnPtfm2).l
00013726                            ; ===========================================================================
00013726                            
00013726                            loc_124DE:				; XREF: Obj63_Index
00013726 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001372A 0240 0003                  		andi.w	#3,d0
0001372E 6600                       		bne.s	loc_124FC
00013730 7201                       		moveq	#1,d1
00013732 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00013736 6700                       		beq.s	loc_124F2
00013738 4401                       		neg.b	d1
0001373A                            
0001373A                            loc_124F2:
0001373A D328 001A                  		add.b	d1,$1A(a0)
0001373E 0228 0003 001A             		andi.b	#3,$1A(a0)
00013744                            
00013744                            loc_124FC:
00013744 588F                       		addq.l	#4,sp
00013746 6000 D190                  		bra.w	MarkObjGone
0001374A                            
0001374A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001374A                            
0001374A                            
0001374A                            sub_12502:				; XREF: loc_124B2; loc_124C2
0001374A 4A38 F7EE                  		tst.b	($FFFFF7EE).w
0001374E 6700                       		beq.s	loc_12520
00013750 4A28 003B                  		tst.b	$3B(a0)
00013754 6600                       		bne.s	loc_12520
00013756 117C 0001 003B             		move.b	#1,$3B(a0)
0001375C 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
00013762 4428 003A                  		neg.b	$3A(a0)
00013766 6000                       		bra.s	loc_12534
00013768                            ; ===========================================================================
00013768                            
00013768                            loc_12520:
00013768 3028 0008                  		move.w	8(a0),d0
0001376C B068 0034                  		cmp.w	$34(a0),d0
00013770 6600                       		bne.s	loc_1256A
00013772 3028 000C                  		move.w	$C(a0),d0
00013776 B068 0036                  		cmp.w	$36(a0),d0
0001377A 6600                       		bne.s	loc_1256A
0001377C                            
0001377C                            loc_12534:
0001377C 7200                       		moveq	#0,d1
0001377E 1228 0038                  		move.b	$38(a0),d1
00013782 D228 003A                  		add.b	$3A(a0),d1
00013786 B228 0039                  		cmp.b	$39(a0),d1
0001378A 6500                       		bcs.s	loc_12552
0001378C 1001                       		move.b	d1,d0
0001378E 7200                       		moveq	#0,d1
00013790 4A00                       		tst.b	d0
00013792 6A00                       		bpl.s	loc_12552
00013794 1228 0039                  		move.b	$39(a0),d1
00013798 5901                       		subq.b	#4,d1
0001379A                            
0001379A                            loc_12552:
0001379A 1141 0038                  		move.b	d1,$38(a0)
0001379E 2268 003C                  		movea.l	$3C(a0),a1
000137A2 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
000137A8 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
000137AE 6100 0000                  		bsr.w	Obj63_ChangeDir
000137B2                            
000137B2                            loc_1256A:
000137B2 6100 AF82                  		bsr.w	SpeedToPos
000137B6 4E75                       		rts	
000137B8                            ; End of function sub_12502
000137B8                            
000137B8                            
000137B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000137B8                            
000137B8                            
000137B8                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
000137B8 7000                       		moveq	#0,d0
000137BA 343C FF00                  		move.w	#-$100,d2
000137BE 3028 0008                  		move.w	8(a0),d0
000137C2 9068 0034                  		sub.w	$34(a0),d0
000137C6 6400                       		bcc.s	loc_12584
000137C8 4440                       		neg.w	d0
000137CA 4442                       		neg.w	d2
000137CC                            
000137CC                            loc_12584:
000137CC 7200                       		moveq	#0,d1
000137CE 363C FF00                  		move.w	#-$100,d3
000137D2 3228 000C                  		move.w	$C(a0),d1
000137D6 9268 0036                  		sub.w	$36(a0),d1
000137DA 6400                       		bcc.s	loc_12598
000137DC 4441                       		neg.w	d1
000137DE 4443                       		neg.w	d3
000137E0                            
000137E0                            loc_12598:
000137E0 B240                       		cmp.w	d0,d1
000137E2 6500                       		bcs.s	loc_125C2
000137E4 3028 0008                  		move.w	8(a0),d0
000137E8 9068 0034                  		sub.w	$34(a0),d0
000137EC 6700                       		beq.s	loc_125AE
000137EE 48C0                       		ext.l	d0
000137F0 E180                       		asl.l	#8,d0
000137F2 81C1                       		divs.w	d1,d0
000137F4 4440                       		neg.w	d0
000137F6                            
000137F6                            loc_125AE:
000137F6 3140 0010                  		move.w	d0,$10(a0)
000137FA 3143 0012                  		move.w	d3,$12(a0)
000137FE 4840                       		swap	d0
00013800 3140 000A                  		move.w	d0,$A(a0)
00013804 4268 000E                  		clr.w	$E(a0)
00013808 4E75                       		rts	
0001380A                            ; ===========================================================================
0001380A                            
0001380A                            loc_125C2:				; XREF: Obj63_ChangeDir
0001380A 3228 000C                  		move.w	$C(a0),d1
0001380E 9268 0036                  		sub.w	$36(a0),d1
00013812 6700                       		beq.s	loc_125D4
00013814 48C1                       		ext.l	d1
00013816 E181                       		asl.l	#8,d1
00013818 83C0                       		divs.w	d0,d1
0001381A 4441                       		neg.w	d1
0001381C                            
0001381C                            loc_125D4:
0001381C 3141 0012                  		move.w	d1,$12(a0)
00013820 3142 0010                  		move.w	d2,$10(a0)
00013824 4841                       		swap	d1
00013826 3141 000E                  		move.w	d1,$E(a0)
0001382A 4268 000A                  		clr.w	$A(a0)
0001382E 4E75                       		rts	
00013830                            ; End of function Obj63_ChangeDir
00013830                            
00013830                            ; ===========================================================================
00013830 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
00013832 0000                       		dc.w word_12610-Obj63_Data
00013834 0000                       		dc.w word_12628-Obj63_Data
00013836 0000                       		dc.w word_1263C-Obj63_Data
00013838 0000                       		dc.w word_12650-Obj63_Data
0001383A 0000                       		dc.w word_12668-Obj63_Data
0001383C 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
0001384C 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00013858 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00013868 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00013870 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00013884 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00013898 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
000138B0 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
000138C4                            
000138C4                            ; ---------------------------------------------------------------------------
000138C4                            ; Sprite mappings - platforms on a conveyor belt (LZ)
000138C4                            ; ---------------------------------------------------------------------------
000138C4                            Map_obj63:
000138C4                            	include "_maps\obj63.asm"
000138C4                            ; ---------------------------------------------------------------------------
000138C4                            ; Sprite mappings - platforms on a conveyor belt (LZ)
000138C4                            ; ---------------------------------------------------------------------------
000138C4 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
000138C8 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
000138CC 0000                       		dc.w byte_1269E-Map_obj63
000138CE 01                         byte_12686:	dc.b 1
000138CF F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
000138D4 01                         byte_1268C:	dc.b 1
000138D5 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
000138DA 01                         byte_12692:	dc.b 1
000138DB F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
000138E0 01                         byte_12698:	dc.b 1
000138E1 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
000138E6 01                         byte_1269E:	dc.b 1
000138E7 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
000138EC                            		even
000138EC                            		even
000138EC                            
000138EC                            ; ===========================================================================
000138EC                            ; ---------------------------------------------------------------------------
000138EC                            ; Object 64 - bubbles (LZ)
000138EC                            ; ---------------------------------------------------------------------------
000138EC                            
000138EC                            Obj64:					; XREF: Obj_Index
000138EC 7000                       		moveq	#0,d0
000138EE 1028 0024                  		move.b	$24(a0),d0
000138F2 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
000138F6 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
000138FA                            ; ===========================================================================
000138FA 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
000138FC 0000                       		dc.w Obj64_Animate-Obj64_Index
000138FE 0000                       		dc.w Obj64_ChkWater-Obj64_Index
00013900 0000                       		dc.w Obj64_Display2-Obj64_Index
00013902 0000                       		dc.w Obj64_Delete3-Obj64_Index
00013904 0000                       		dc.w Obj64_BblMaker-Obj64_Index
00013906                            ; ===========================================================================
00013906                            
00013906                            Obj64_Main:				; XREF: Obj64_Index
00013906 5428 0024                  		addq.b	#2,$24(a0)
0001390A 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
00013912 317C 8348 0002             		move.w	#$8348,2(a0)
00013918 117C 0084 0001             		move.b	#$84,1(a0)
0001391E 117C 0010 0019             		move.b	#$10,$19(a0)
00013924 117C 0001 0018             		move.b	#1,$18(a0)
0001392A 1028 0028                  		move.b	$28(a0),d0	; get object type
0001392E 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
00013930 5028 0024                  		addq.b	#8,$24(a0)
00013934 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00013938 1140 0032                  		move.b	d0,$32(a0)
0001393C 1140 0033                  		move.b	d0,$33(a0)
00013940 117C 0006 001C             		move.b	#6,$1C(a0)
00013946 6000 0000                  		bra.w	Obj64_BblMaker
0001394A                            ; ===========================================================================
0001394A                            
0001394A                            Obj64_Bubble:				; XREF: Obj64_Main
0001394A 1140 001C                  		move.b	d0,$1C(a0)
0001394E 3168 0008 0030             		move.w	8(a0),$30(a0)
00013954 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
0001395A 4EB9 0000 324E             		jsr	(RandomNumber).l
00013960 1140 0026                  		move.b	d0,$26(a0)
00013964                            
00013964                            Obj64_Animate:				; XREF: Obj64_Index
00013964 43F9 0000 0000             		lea	(Ani_obj64).l,a1
0001396A 4EB9 0000 B860             		jsr	AnimateSprite
00013970 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
00013976 6600                       		bne.s	Obj64_ChkWater
00013978 117C 0001 002E             		move.b	#1,$2E(a0)
0001397E                            
0001397E                            Obj64_ChkWater:				; XREF: Obj64_Index
0001397E 3038 F646                  		move.w	($FFFFF646).w,d0
00013982 B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
00013986 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
00013988                            
00013988                            Obj64_Burst:				; XREF: Obj64_Wobble
00013988 117C 0006 0024             		move.b	#6,$24(a0)
0001398E 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
00013992 6000 0000                  		bra.w	Obj64_Display2
00013996                            ; ===========================================================================
00013996                            
00013996                            Obj64_Wobble:				; XREF: Obj64_ChkWater
00013996 1028 0026                  		move.b	$26(a0),d0
0001399A 5228 0026                  		addq.b	#1,$26(a0)
0001399E 0240 007F                  		andi.w	#$7F,d0
000139A2 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
000139A8 1031 0000                  		move.b	(a1,d0.w),d0
000139AC 4880                       		ext.w	d0
000139AE D068 0030                  		add.w	$30(a0),d0
000139B2 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
000139B6 4A28 002E                  		tst.b	$2E(a0)
000139BA 6700                       		beq.s	Obj64_Display
000139BC 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
000139C0 6700                       		beq.s	Obj64_Display	; if not, branch
000139C2                            
000139C2 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
000139C6 303C 00AD                  		move.w	#$AD,d0
000139CA 4EB9 0000 132C             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
000139D0 43F8 D000                  		lea	($FFFFD000).w,a1
000139D4 4269 0010                  		clr.w	$10(a1)
000139D8 4269 0012                  		clr.w	$12(a1)
000139DC 4269 0014                  		clr.w	$14(a1)
000139E0 137C 0015 001C             		move.b	#$15,$1C(a1)
000139E6 337C 0023 003E             		move.w	#$23,$3E(a1)
000139EC 137C 0000 003C             		move.b	#0,$3C(a1)
000139F2 08A9 0005 0022             		bclr	#5,$22(a1)
000139F8 08A9 0004 0022             		bclr	#4,$22(a1)
000139FE 0829 0002 0022             		btst	#2,$22(a1)
00013A04 6700 FF82                  		beq.w	Obj64_Burst
00013A08 08A9 0002 0022             		bclr	#2,$22(a1)
00013A0E 137C 0013 0016             		move.b	#$13,$16(a1)
00013A14 137C 0009 0017             		move.b	#9,$17(a1)
00013A1A 5B69 000C                  		subq.w	#5,$C(a1)
00013A1E 6000 FF68                  		bra.w	Obj64_Burst
00013A22                            ; ===========================================================================
00013A22                            
00013A22                            Obj64_Display:				; XREF: Obj64_Wobble
00013A22 6100 AD12                  		bsr.w	SpeedToPos
00013A26 4A28 0001                  		tst.b	1(a0)
00013A2A 6A00                       		bpl.s	Obj64_Delete
00013A2C 4EF9 0000 E75C             		jmp	DisplaySprite
00013A32                            ; ===========================================================================
00013A32                            
00013A32                            Obj64_Delete:
00013A32 4EF9 0000 E798             		jmp	DeleteObject
00013A38                            ; ===========================================================================
00013A38                            
00013A38                            Obj64_Display2:				; XREF: Obj64_Index
00013A38 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00013A3E 4EB9 0000 B860             		jsr	AnimateSprite
00013A44 4A28 0001                  		tst.b	1(a0)
00013A48 6A00                       		bpl.s	Obj64_Delete2
00013A4A 4EF9 0000 E75C             		jmp	DisplaySprite
00013A50                            ; ===========================================================================
00013A50                            
00013A50                            Obj64_Delete2:
00013A50 4EF9 0000 E798             		jmp	DeleteObject
00013A56                            ; ===========================================================================
00013A56                            
00013A56                            Obj64_Delete3:				; XREF: Obj64_Index
00013A56 6000 AD40                  		bra.w	DeleteObject
00013A5A                            ; ===========================================================================
00013A5A                            
00013A5A                            Obj64_BblMaker:				; XREF: Obj64_Index
00013A5A 4A68 0036                  		tst.w	$36(a0)
00013A5E 6600                       		bne.s	loc_12874
00013A60 3038 F646                  		move.w	($FFFFF646).w,d0
00013A64 B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
00013A68 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
00013A6C 4A28 0001                  		tst.b	1(a0)
00013A70 6A00 0000                  		bpl.w	Obj64_ChkDel
00013A74 5368 0038                  		subq.w	#1,$38(a0)
00013A78 6A00 0000                  		bpl.w	loc_12914
00013A7C 317C 0001 0036             		move.w	#1,$36(a0)
00013A82                            
00013A82                            loc_1283A:
00013A82 4EB9 0000 324E             		jsr	(RandomNumber).l
00013A88 3200                       		move.w	d0,d1
00013A8A 0240 0007                  		andi.w	#7,d0
00013A8E 0C40 0006                  		cmpi.w	#6,d0
00013A92 64EE                       		bcc.s	loc_1283A
00013A94                            
00013A94 1140 0034                  		move.b	d0,$34(a0)
00013A98 0241 000C                  		andi.w	#$C,d1
00013A9C 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
00013AA2 D2C1                       		adda.w	d1,a1
00013AA4 2149 003C                  		move.l	a1,$3C(a0)
00013AA8 5328 0032                  		subq.b	#1,$32(a0)
00013AAC 6A00                       		bpl.s	loc_12872
00013AAE 1168 0033 0032             		move.b	$33(a0),$32(a0)
00013AB4 08E8 0007 0036             		bset	#7,$36(a0)
00013ABA                            
00013ABA                            loc_12872:
00013ABA 6000                       		bra.s	loc_1287C
00013ABC                            ; ===========================================================================
00013ABC                            
00013ABC                            loc_12874:				; XREF: Obj64_BblMaker
00013ABC 5368 0038                  		subq.w	#1,$38(a0)
00013AC0 6A00 0000                  		bpl.w	loc_12914
00013AC4                            
00013AC4                            loc_1287C:
00013AC4 4EB9 0000 324E             		jsr	(RandomNumber).l
00013ACA 0240 001F                  		andi.w	#$1F,d0
00013ACE 3140 0038                  		move.w	d0,$38(a0)
00013AD2 6100 B110                  		bsr.w	SingleObjLoad
00013AD6 6600                       		bne.s	loc_128F8
00013AD8 137C 0064 0000             		move.b	#$64,0(a1)	; load bubble object
00013ADE 3368 0008 0008             		move.w	8(a0),8(a1)
00013AE4 4EB9 0000 324E             		jsr	(RandomNumber).l
00013AEA 0240 000F                  		andi.w	#$F,d0
00013AEE 5140                       		subq.w	#8,d0
00013AF0 D169 0008                  		add.w	d0,8(a1)
00013AF4 3368 000C 000C             		move.w	$C(a0),$C(a1)
00013AFA 7000                       		moveq	#0,d0
00013AFC 1028 0034                  		move.b	$34(a0),d0
00013B00 2468 003C                  		movea.l	$3C(a0),a2
00013B04 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
00013B0A 0828 0007 0036             		btst	#7,$36(a0)
00013B10 6700                       		beq.s	loc_128F8
00013B12 4EB9 0000 324E             		jsr	(RandomNumber).l
00013B18 0240 0003                  		andi.w	#3,d0
00013B1C 6600                       		bne.s	loc_128E4
00013B1E 08E8 0006 0036             		bset	#6,$36(a0)
00013B24 6600                       		bne.s	loc_128F8
00013B26 137C 0002 0028             		move.b	#2,$28(a1)
00013B2C                            
00013B2C                            loc_128E4:
00013B2C 4A28 0034                  		tst.b	$34(a0)
00013B30 6600                       		bne.s	loc_128F8
00013B32 08E8 0006 0036             		bset	#6,$36(a0)
00013B38 6600                       		bne.s	loc_128F8
00013B3A 137C 0002 0028             		move.b	#2,$28(a1)
00013B40                            
00013B40                            loc_128F8:
00013B40 5328 0034                  		subq.b	#1,$34(a0)
00013B44 6A00                       		bpl.s	loc_12914
00013B46 4EB9 0000 324E             		jsr	(RandomNumber).l
00013B4C 0240 007F                  		andi.w	#$7F,d0
00013B50 0640 0080                  		addi.w	#$80,d0
00013B54 D168 0038                  		add.w	d0,$38(a0)
00013B58 4268 0036                  		clr.w	$36(a0)
00013B5C                            
00013B5C                            loc_12914:
00013B5C 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00013B62 4EB9 0000 B860             		jsr	AnimateSprite
00013B68                            
00013B68                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
00013B68 3028 0008                  		move.w	8(a0),d0
00013B6C 0240 FF80                  		andi.w	#$FF80,d0
00013B70 3238 F700                  		move.w	($FFFFF700).w,d1
00013B74 0441 0080                  		subi.w	#$80,d1
00013B78 0241 FF80                  		andi.w	#$FF80,d1
00013B7C 9041                       		sub.w	d1,d0
00013B7E 0C40 0280                  		cmpi.w	#$280,d0
00013B82 6200 AC14                  		bhi.w	DeleteObject
00013B86 3038 F646                  		move.w	($FFFFF646).w,d0
00013B8A B068 000C                  		cmp.w	$C(a0),d0
00013B8E 6500 ABCC                  		bcs.w	DisplaySprite
00013B92 4E75                       		rts	
00013B94                            ; ===========================================================================
00013B94                            ; bubble production sequence
00013B94                            
00013B94                            ; 0 = small bubble, 1 =	large bubble
00013B94                            
00013B94 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00013BA6                            
00013BA6                            ; ===========================================================================
00013BA6                            
00013BA6                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
00013BA6 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00013BAA 6B00                       		bmi.s	loc_12998
00013BAC 43F8 D000                  		lea	($FFFFD000).w,a1
00013BB0 3029 0008                  		move.w	8(a1),d0
00013BB4 3228 0008                  		move.w	8(a0),d1
00013BB8 0441 0010                  		subi.w	#$10,d1
00013BBC B240                       		cmp.w	d0,d1
00013BBE 6400                       		bcc.s	loc_12998
00013BC0 0641 0020                  		addi.w	#$20,d1
00013BC4 B240                       		cmp.w	d0,d1
00013BC6 6500                       		bcs.s	loc_12998
00013BC8 3029 000C                  		move.w	$C(a1),d0
00013BCC 3228 000C                  		move.w	$C(a0),d1
00013BD0 B240                       		cmp.w	d0,d1
00013BD2 6400                       		bcc.s	loc_12998
00013BD4 0641 0010                  		addi.w	#$10,d1
00013BD8 B240                       		cmp.w	d0,d1
00013BDA 6500                       		bcs.s	loc_12998
00013BDC 7001                       		moveq	#1,d0
00013BDE 4E75                       		rts	
00013BE0                            ; ===========================================================================
00013BE0                            
00013BE0                            loc_12998:
00013BE0 7000                       		moveq	#0,d0
00013BE2 4E75                       		rts	
00013BE4                            ; ===========================================================================
00013BE4                            Ani_obj64:
00013BE4                            	include "_anim\obj64.asm"
00013BE4                            ; ---------------------------------------------------------------------------
00013BE4                            ; Animation script - bubbles (LZ)
00013BE4                            ; ---------------------------------------------------------------------------
00013BE4 0000                       		dc.w byte_129AA-Ani_obj64
00013BE6 0000                       		dc.w byte_129B0-Ani_obj64
00013BE8 0000                       		dc.w byte_129B6-Ani_obj64
00013BEA 0000                       		dc.w byte_129BE-Ani_obj64
00013BEC 0000                       		dc.w byte_129BE-Ani_obj64
00013BEE 0000                       		dc.w byte_129C0-Ani_obj64
00013BF0 0000                       		dc.w byte_129C6-Ani_obj64
00013BF2 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
00013BF8 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
00013BFE 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
00013C06 04FC                       byte_129BE:	dc.b 4,	$FC
00013C08 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
00013C0E 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
00013C14 00                         		even
00013C14 00                         		even
00013C14                            
00013C14                            ; ---------------------------------------------------------------------------
00013C14                            ; Sprite mappings - bubbles (LZ)
00013C14                            ; ---------------------------------------------------------------------------
00013C14                            Map_obj64:
00013C14                            	include "_maps\obj64.asm"
00013C14                            ; ---------------------------------------------------------------------------
00013C14                            ; Sprite mappings - bubbles (LZ)
00013C14                            ; ---------------------------------------------------------------------------
00013C14 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
00013C18 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
00013C1C 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
00013C20 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
00013C24 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
00013C28 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
00013C2C 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
00013C30 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
00013C34 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
00013C38 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
00013C3C 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
00013C40 0000                       		dc.w byte_12A9C-Map_obj64
00013C42 01                         byte_129FA:	dc.b 1
00013C43 FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
00013C48 01                         byte_12A00:	dc.b 1
00013C49 FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
00013C4E 01                         byte_12A06:	dc.b 1
00013C4F FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00013C54 01                         byte_12A0C:	dc.b 1
00013C55 F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
00013C5A 01                         byte_12A12:	dc.b 1
00013C5B F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00013C60 01                         byte_12A18:	dc.b 1
00013C61 F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00013C66 01                         byte_12A1E:	dc.b 1
00013C67 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00013C6C 04                         byte_12A24:	dc.b 4
00013C6D F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
00013C72 F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00013C77 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00013C7C 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00013C81 04                         byte_12A39:	dc.b 4
00013C82 F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00013C87 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00013C8C 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00013C91 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00013C96 01                         byte_12A4E:	dc.b 1
00013C97 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
00013C9C 01                         byte_12A54:	dc.b 1
00013C9D F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00013CA2 01                         byte_12A5A:	dc.b 1
00013CA3 F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00013CA8 01                         byte_12A60:	dc.b 1
00013CA9 F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00013CAE 01                         byte_12A66:	dc.b 1
00013CAF F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
00013CB4 01                         byte_12A6C:	dc.b 1
00013CB5 F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00013CBA 01                         byte_12A72:	dc.b 1
00013CBB F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
00013CC0 01                         byte_12A78:	dc.b 1
00013CC1 F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00013CC6 01                         byte_12A7E:	dc.b 1
00013CC7 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00013CCC 01                         byte_12A84:	dc.b 1
00013CCD F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
00013CD2 01                         byte_12A8A:	dc.b 1
00013CD3 F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
00013CD8 01                         byte_12A90:	dc.b 1
00013CD9 F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
00013CDE 01                         byte_12A96:	dc.b 1
00013CDF F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
00013CE4 00                         byte_12A9C:	dc.b 0
00013CE6 00                         		even
00013CE6 00                         		even
00013CE6                            
00013CE6                            ; ===========================================================================
00013CE6                            ; ---------------------------------------------------------------------------
00013CE6                            ; Object 65 - waterfalls (LZ)
00013CE6                            ; ---------------------------------------------------------------------------
00013CE6                            
00013CE6                            Obj65:					; XREF: Obj_Index
00013CE6 7000                       		moveq	#0,d0
00013CE8 1028 0024                  		move.b	$24(a0),d0
00013CEC 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
00013CF0 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
00013CF4                            ; ===========================================================================
00013CF4 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
00013CF6 0000                       		dc.w Obj65_Animate-Obj65_Index
00013CF8 0000                       		dc.w Obj65_ChkDel-Obj65_Index
00013CFA 0000                       		dc.w Obj65_FixHeight-Obj65_Index
00013CFC 0000                       		dc.w loc_12B36-Obj65_Index
00013CFE                            ; ===========================================================================
00013CFE                            
00013CFE                            Obj65_Main:				; XREF: Obj65_Index
00013CFE 5828 0024                  		addq.b	#4,$24(a0)
00013D02 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
00013D0A 317C 4259 0002             		move.w	#$4259,2(a0)
00013D10 0028 0004 0001             		ori.b	#4,1(a0)
00013D16 117C 0018 0019             		move.b	#$18,$19(a0)
00013D1C 117C 0001 0018             		move.b	#1,$18(a0)
00013D22 1028 0028                  		move.b	$28(a0),d0	; get object type
00013D26 6A00                       		bpl.s	loc_12AE6
00013D28 08E8 0007 0002             		bset	#7,2(a0)
00013D2E                            
00013D2E                            loc_12AE6:
00013D2E 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
00013D32 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
00013D36 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
00013D3A 6600                       		bne.s	Obj65_ChkDel	; if not, branch
00013D3C 4228 0018                  		clr.b	$18(a0)
00013D40 5528 0024                  		subq.b	#2,$24(a0)
00013D44 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
00013D4A 6700                       		beq.s	loc_12B0A	; if not, branch
00013D4C 117C 0006 0024             		move.b	#6,$24(a0)
00013D52                            
00013D52                            loc_12B0A:
00013D52 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
00013D58 6700                       		beq.s	Obj65_Animate	; if not, branch
00013D5A 117C 0008 0024             		move.b	#8,$24(a0)
00013D60                            
00013D60                            Obj65_Animate:				; XREF: Obj65_Index
00013D60 43F9 0000 0000             		lea	(Ani_obj65).l,a1
00013D66 4EB9 0000 B860             		jsr	AnimateSprite
00013D6C                            
00013D6C                            Obj65_ChkDel:				; XREF: Obj65_Index
00013D6C 6000 CB6A                  		bra.w	MarkObjGone
00013D70                            ; ===========================================================================
00013D70                            
00013D70                            Obj65_FixHeight:			; XREF: Obj65_Index
00013D70 3038 F646                  		move.w	($FFFFF646).w,d0
00013D74 0440 0010                  		subi.w	#$10,d0
00013D78 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
00013D7C 60E2                       		bra.s	Obj65_Animate
00013D7E                            ; ===========================================================================
00013D7E                            
00013D7E                            loc_12B36:				; XREF: Obj65_Index
00013D7E 08A8 0007 0002             		bclr	#7,2(a0)
00013D84 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
00013D8A 6600                       		bne.s	Obj65_Animate2
00013D8C 08E8 0007 0002             		bset	#7,2(a0)
00013D92                            
00013D92                            Obj65_Animate2:
00013D92 60CC                       		bra.s	Obj65_Animate
00013D94                            ; ===========================================================================
00013D94                            Ani_obj65:
00013D94                            	include "_anim\obj65.asm"
00013D94                            ; ---------------------------------------------------------------------------
00013D94                            ; Animation script - waterfall (LZ)
00013D94                            ; ---------------------------------------------------------------------------
00013D94 0000                       		dc.w byte_12B4E-Ani_obj65
00013D96 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
00013D9C 00                         		even
00013D9C 00                         		even
00013D9C                            
00013D9C                            ; ---------------------------------------------------------------------------
00013D9C                            ; Sprite mappings - waterfalls (LZ)
00013D9C                            ; ---------------------------------------------------------------------------
00013D9C                            Map_obj65:
00013D9C                            	include "_maps\obj65.asm"
00013D9C                            ; ---------------------------------------------------------------------------
00013D9C                            ; Sprite mappings - waterfalls (LZ)
00013D9C                            ; ---------------------------------------------------------------------------
00013D9C 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
00013DA0 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
00013DA4 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
00013DA8 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
00013DAC 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
00013DB0 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
00013DB4 01                         byte_12B6C:	dc.b 1
00013DB5 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00013DBA 02                         byte_12B72:	dc.b 2
00013DBB F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
00013DC0 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
00013DC5 02                         byte_12B7D:	dc.b 2
00013DC6 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00013DCB 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00013DD0 01                         byte_12B88:	dc.b 1
00013DD1 F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00013DD6 02                         byte_12B8E:	dc.b 2
00013DD7 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00013DDC 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00013DE1 01                         byte_12B99:	dc.b 1
00013DE2 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
00013DE7 01                         byte_12B9F:	dc.b 1
00013DE8 F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00013DED 01                         byte_12BA5:	dc.b 1
00013DEE F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
00013DF3 02                         byte_12BAB:	dc.b 2
00013DF4 F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
00013DF9 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
00013DFE 02                         byte_12BB6:	dc.b 2
00013DFF F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
00013E04 F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
00013E09 02                         byte_12BC1:	dc.b 2
00013E0A F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
00013E0F F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
00013E14 02                         byte_12BCC:	dc.b 2
00013E15 F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00013E1A F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
00013E20 00                         		even
00013E20 00                         		even
00013E20                            
00013E20                            ; ===========================================================================
00013E20                            
00013E20                            SpinDash_dust:
00013E20                            Sprite_1DD20:				; DATA XREF: ROM:0001600C?o
00013E20 7000                       		moveq	#0,d0
00013E22 1028 0024                  		move.b	$24(a0),d0
00013E26 323B 0000                  		move	off_1DD2E(pc,d0.w),d1
00013E2A 4EFB 1000                  		jmp	off_1DD2E(pc,d1.w)
00013E2E                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00013E2E 0000                       off_1DD2E:	dc loc_1DD36-off_1DD2E; 0 ; DATA XREF: h+6DBA?o h+6DBC?o ...
00013E30 0000                       		dc loc_1DD90-off_1DD2E; 1
00013E32 0000                       		dc loc_1DE46-off_1DD2E; 2
00013E34 0000                       		dc loc_1DE4A-off_1DD2E; 3
00013E36                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00013E36                             
00013E36                            loc_1DD36:				; DATA XREF: h+6DBA?o
00013E36 5428 0024                  		addq.b	#2,$24(a0)
00013E3A 217C 0000 0000 0004        		move.l	#MapUnc_1DF5E,4(a0)
00013E42 0028 0004 0001             		or.b	#4,1(a0)
00013E48 117C 0001 0018             		move.b	#1,$18(a0)
00013E4E 117C 0010 0019             		move.b	#$10,$19(a0)
00013E54 317C 07A0 0002             		move	#$7A0,2(a0)
00013E5A 317C D000 003E             		move	#-$3000,$3E(a0)
00013E60 317C F400 003C             		move	#$F400,$3C(a0)
00013E66 B0FC D1C0                  		cmp	#-$2E40,a0
00013E6A 6700                       		beq.s	loc_1DD8C
00013E6C 117C 0001 0034             		move.b	#1,$34(a0)
00013E72                            ;		cmp	#2,($FFFFFF70).w
00013E72                            ;		beq.s	loc_1DD8C
00013E72                            ;		move	#$48C,2(a0)
00013E72                            ;		move	#-$4FC0,$3E(a0)
00013E72                            ;		move	#-$6E80,$3C(a0)
00013E72                             
00013E72                            loc_1DD8C:				; CODE XREF: h+6DF6?j h+6E04?j
00013E72                            ;		bsr.w	sub_16D6E
00013E72                             
00013E72                            loc_1DD90:				; DATA XREF: h+6DBA?o
00013E72 3468 003E                  		movea.w	$3E(a0),a2
00013E76 7000                       		moveq	#0,d0
00013E78 1028 001C                  		move.b	$1C(a0),d0
00013E7C D040                       		add	d0,d0
00013E7E 323B 0000                  		move	off_1DDA4(pc,d0.w),d1
00013E82 4EFB 1000                  		jmp	off_1DDA4(pc,d1.w)
00013E86                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00013E86 0000                       off_1DDA4:	dc loc_1DE28-off_1DDA4; 0 ; DATA XREF: h+6E30?o h+6E32?o ...
00013E88 0000                       		dc loc_1DDAC-off_1DDA4; 1
00013E8A 0000                       		dc loc_1DDCC-off_1DDA4; 2
00013E8C 0000                       		dc loc_1DE20-off_1DDA4; 3
00013E8E                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00013E8E                             
00013E8E                            loc_1DDAC:				; DATA XREF: h+6E30?o
00013E8E 3178 F646 000C             		move	($FFFFF646).w,$C(a0)
00013E94 4A28 001D                  		tst.b	$1D(a0)
00013E98 6600                       		bne.s	loc_1DE28
00013E9A 316A 0008 0008             		move	8(a2),8(a0)
00013EA0 117C 0000 0022             		move.b	#0,$22(a0)
00013EA6 0268 7FFF 0002             		and	#$7FFF,2(a0)
00013EAC 6000                       		bra.s	loc_1DE28
00013EAE                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00013EAE                             
00013EAE                            loc_1DDCC:				; DATA XREF: h+6E30?o
00013EAE                            ;		cmp.b	#$C,$28(a2)
00013EAE                            ;		bcs.s	loc_1DE3E
00013EAE 0C2A 0004 0024             		cmp.b	#4,$24(a2)
00013EB4 6400                       		bcc.s	loc_1DE3E
00013EB6 4A2A 0039                  		tst.b	$39(a2)
00013EBA 6700                       		beq.s	loc_1DE3E
00013EBC 316A 0008 0008             		move	8(a2),8(a0)
00013EC2 316A 000C 000C             		move	$C(a2),$C(a0)
00013EC8 116A 0022 0022             		move.b	$22(a2),$22(a0)
00013ECE 0228 0001 0022             		and.b	#1,$22(a0)
00013ED4 4A28 0034                  		tst.b	$34(a0)
00013ED8 6700                       		beq.s	loc_1DE06
00013EDA 0468 0004 000C             		sub	#4,$C(a0)
00013EE0                             
00013EE0                            loc_1DE06:				; CODE XREF: h+6E8A?j
00013EE0 4A28 001D                  		tst.b	$1D(a0)
00013EE4 6600                       		bne.s	loc_1DE28
00013EE6 0268 7FFF 0002             		and	#$7FFF,2(a0)
00013EEC 4A6A 0002                  		tst	2(a2)
00013EF0 6A00                       		bpl.s	loc_1DE28
00013EF2 0068 8000 0002             		or	#-$8000,2(a0)
00013EF8                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00013EF8                             
00013EF8                            loc_1DE20:				; DATA XREF: h+6E30?o
00013EF8                            loc_1DE28:				; CODE XREF: h+6E42?j h+6E56?j ...
00013EF8 43F9 0000 0000             		lea	(off_1DF38).l,a1
00013EFE 4EB9 0000 B860             		jsr	AnimateSprite
00013F04 6100 0000                  		bsr.w	loc_1DEE4
00013F08 4EF9 0000 E75C             		jmp	DisplaySprite
00013F0E                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00013F0E                             
00013F0E                            loc_1DE3E:				; CODE XREF: h+6E5E?j h+6E66?j ...
00013F0E 117C 0000 001C             		move.b	#0,$1C(a0)
00013F14 4E75                       		rts	
00013F16                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00013F16                             
00013F16                            loc_1DE46:				; DATA XREF: h+6DBA?o
00013F16 6000 A880                  		bra.w	DeleteObject
00013F1A                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00013F1A                             
00013F1A                             
00013F1A                             
00013F1A                            loc_1DE4A:
00013F1A 3468 003E                  	movea.w	$3E(a0),a2
00013F1E 7210                       	moveq	#$10,d1
00013F20 0C2A 000D 001C             	cmp.b	#$D,$1C(a2)
00013F26 6700                       	beq.s	loc_1DE64
00013F28 7206                       	moveq	#$6,d1
00013F2A 0C2A 0003 0021             	cmp.b	#$3,$21(a2)
00013F30 6700                       	beq.s	loc_1DE64
00013F32 117C 0002 0024             	move.b	#2,$24(a0)
00013F38 117C 0000 0032             	move.b	#0,$32(a0)
00013F3E 4E75                       	rts
00013F40                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00013F40                             
00013F40                            loc_1DE64:				; CODE XREF: h+6EE0?j
00013F40 5328 0032                  		subq.b	#1,$32(a0)
00013F44 6A00                       		bpl.s	loc_1DEE0
00013F46 117C 0003 0032             		move.b	#3,$32(a0)
00013F4C 4EB9 0000 EBE4             		jsr	SingleObjLoad
00013F52 6600                       		bne.s	loc_1DEE0
00013F54 1368 0000 0000             		move.b	0(a0),0(a1)
00013F5A 336A 0008 0008             		move	8(a2),8(a1)
00013F60 336A 000C 000C             		move	$C(a2),$C(a1)
00013F66 4A28 0034                  		tst.b	$34(a0)
00013F6A 6700                       		beq.s	loc_1DE9A
00013F6C 0441 0004                  		sub	#4,d1
00013F70                             
00013F70                            loc_1DE9A:				; CODE XREF: h+6F1E?j
00013F70 D369 000C                  		add	d1,$C(a1)
00013F74 137C 0000 0022             		move.b	#0,$22(a1)
00013F7A 137C 0003 001C             		move.b	#3,$1C(a1)
00013F80 5429 0024                  		addq.b	#2,$24(a1)
00013F84 2368 0004 0004             		move.l	4(a0),4(a1)
00013F8A 1368 0001 0001             		move.b	1(a0),1(a1)
00013F90 137C 0001 0018             		move.b	#1,$18(a1)
00013F96 137C 0004 0019             		move.b	#4,$19(a1)
00013F9C 3368 0002 0002             		move	2(a0),2(a1)
00013FA2 3368 003E 003E             		move	$3E(a0),$3E(a1)
00013FA8 0269 7FFF 0002             		and	#$7FFF,2(a1)
00013FAE 4A6A 0002                  		tst	2(a2)
00013FB2 6A00                       		bpl.s	loc_1DEE0
00013FB4 0069 8000 0002             		or	#-$8000,2(a1)
00013FBA                             
00013FBA                            loc_1DEE0:				; CODE XREF: h+6EF4?j h+6F00?j ...
00013FBA 6100                       		bsr.s	loc_1DEE4
00013FBC 4E75                       		rts	
00013FBE                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00013FBE                             
00013FBE                            loc_1DEE4:				; CODE XREF: h+6EC0?p h+6F6C?p
00013FBE 7000                       		moveq	#0,d0
00013FC0 1028 001A                  		move.b	$1A(a0),d0
00013FC4 B028 0030                  		cmp.b	$30(a0),d0
00013FC8 6700 0000                  		beq.w	locret_1DF36
00013FCC 1140 0030                  		move.b	d0,$30(a0)
00013FD0 45F9 0000 0000             		lea	(off_1E074).l,a2
00013FD6 D040                       		add	d0,d0
00013FD8 D4F2 0000                  		add	(a2,d0.w),a2
00013FDC 3A1A                       		move	(a2)+,d5
00013FDE 5345                       		subq	#1,d5
00013FE0 6B00 0000                  		bmi.w	locret_1DF36
00013FE4 3828 003C                  		move $3C(a0),d4
00013FE8                             
00013FE8                            loc_1DF0A:				; CODE XREF: h+6FBE?j
00013FE8 7200                       		moveq	#0,d1
00013FEA 321A                       		move	(a2)+,d1
00013FEC 3601                       		move	d1,d3
00013FEE E04B                       		lsr.w	#8,d3
00013FF0 0243 00F0                  		and	#$F0,d3	; 'ð'
00013FF4 0643 0010                  		add	#$10,d3
00013FF8 0241 0FFF                  		and	#$FFF,d1
00013FFC EB89                       		lsl.l	#5,d1
00013FFE 0681 0000 0000             		add.l	#Art_Dust,d1
00014004 3404                       		move	d4,d2
00014006 D843                       		add	d3,d4
00014008 D843                       		add	d3,d4
0001400A 4EB9 0000 5234             		jsr	(QueueDMATransfer).l
00014010 51CD FFD6                  		dbf	d5,loc_1DF0A
00014014 4E75                           rts
00014016                             
00014016                            locret_1DF36:				; CODE XREF: h+6F7A?j h+6F90?j
00014016 4E75                       		rts	
00014018                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014018 0000                       off_1DF38:	dc byte_1DF40-off_1DF38; 0 ; DATA XREF: h+6EB4?o h+6FC4?o ...
0001401A 0000                       		dc byte_1DF43-off_1DF38; 1
0001401C 0000                       		dc byte_1DF4F-off_1DF38; 2
0001401E 0000                       		dc byte_1DF58-off_1DF38; 3
00014020 1F00 FF                    byte_1DF40:	dc.b $1F,  0,$FF	; 0 ; DATA XREF: h+6FC4?o
00014023 0301 0203 0405 0607 0809+  byte_1DF43:	dc.b   3,  1,  2,  3,  4,  5,  6,  7,  8,  9,$FD,  0; 0	; DATA XREF: h+6FC4?o
0001402F 010A 0B0C 0D0E 0F10 FF     byte_1DF4F:	dc.b   1, $A, $B, $C, $D, $E, $F,$10,$FF; 0 ; DATA XREF: h+6FC4?o
00014038 0311 1213 14FC             byte_1DF58:	dc.b   3,$11,$12,$13,$14,$FC; 0	; DATA XREF: h+6FC4?o
0001403E                            ; -------------------------------------------------------------------------------
0001403E                            ; Unknown Sprite Mappings
0001403E                            ; -------------------------------------------------------------------------------
0001403E                            MapUnc_1DF5E:
0001403E 0000                       	dc word_1DF8A-MapUnc_1DF5E; 0
00014040 0000                       	dc word_1DF8C-MapUnc_1DF5E; 1
00014042 0000                       	dc word_1DF96-MapUnc_1DF5E; 2
00014044 0000                       	dc word_1DFA0-MapUnc_1DF5E; 3
00014046 0000                       	dc word_1DFAA-MapUnc_1DF5E; 4
00014048 0000                       	dc word_1DFB4-MapUnc_1DF5E; 5
0001404A 0000                       	dc word_1DFBE-MapUnc_1DF5E; 6
0001404C 0000                       	dc word_1DFC8-MapUnc_1DF5E; 7
0001404E 0000                       	dc word_1DFD2-MapUnc_1DF5E; 8
00014050 0000                       	dc word_1DFDC-MapUnc_1DF5E; 9
00014052 0000                       	dc word_1DFE6-MapUnc_1DF5E; 10
00014054 0000                       	dc word_1DFF0-MapUnc_1DF5E; 11
00014056 0000                       	dc word_1DFFA-MapUnc_1DF5E; 12
00014058 0000                       	dc word_1E004-MapUnc_1DF5E; 13
0001405A 0000                       	dc word_1E016-MapUnc_1DF5E; 14
0001405C 0000                       	dc word_1E028-MapUnc_1DF5E; 15
0001405E 0000                       	dc word_1E03A-MapUnc_1DF5E; 16
00014060 0000                       	dc word_1E04C-MapUnc_1DF5E; 17
00014062 0000                       	dc word_1E056-MapUnc_1DF5E; 18
00014064 0000                       	dc word_1E060-MapUnc_1DF5E; 19
00014066 0000                       	dc word_1E06A-MapUnc_1DF5E; 20
00014068 0000                       	dc word_1DF8A-MapUnc_1DF5E; 21
0001406A 00                         word_1DF8A:	dc.b 0
0001406B 01                         word_1DF8C:	dc.b 1
0001406C F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00014071 01                         word_1DF96:	dc.b 1
00014072 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00014077 01                         word_1DFA0:	dc.b 1
00014078 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
0001407D 01                         word_1DFAA:	dc.b 1
0001407E E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00014083 01                         word_1DFB4:	dc.b 1
00014084 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00014089 01                         word_1DFBE:	dc.b 1
0001408A E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
0001408F 01                         word_1DFC8:	dc.b 1
00014090 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00014095 01                         word_1DFD2:	dc.b 1
00014096 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
0001409B 01                         word_1DFDC:	dc.b 1
0001409C F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
000140A1 01                         word_1DFE6:	dc.b 1
000140A2 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
000140A7 01                         word_1DFF0:	dc.b 1
000140A8 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
000140AD 01                         word_1DFFA:	dc.b 1
000140AE 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
000140B3 02                         word_1E004:	dc.b 2
000140B4 F401 0000 E8               	dc.b $F4, $01, $0, 0,$E8; 0
000140B9 040D 0002 E0               	dc.b $4, $0D, $0, 2,$E0; 4
000140BE 02                         word_1E016:	dc.b 2
000140BF F405 0000 E8               	dc.b $F4, $05, $0, 0,$E8; 0
000140C4 040D 0004 E0               	dc.b $4, $0D, $0, 4,$E0; 4
000140C9 02                         word_1E028:	dc.b 2
000140CA F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
000140CF 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
000140D4 02                         word_1E03A:	dc.b 2
000140D5 F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
000140DA 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
000140DF 01                         word_1E04C:	dc.b 1
000140E0 F805 0000 F8               	dc.b $F8, $05, $0, 0,$F8; 0
000140E5 01                         word_1E056:	dc.b 1
000140E6 F805 0004 F8               	dc.b $F8, $05, $0, 4,$F8; 0
000140EB 01                         word_1E060:	dc.b 1
000140EC F805 0008 F8               	dc.b $F8, $05, $0, 8,$F8; 0
000140F1 01                         word_1E06A:	dc.b 1
000140F2 F805 000C F8               	dc.b $F8, $05, $0, $C,$F8; 0
000140F7 00                         	dc.b 0
000140F8 0000                       off_1E074:	dc word_1E0A0-off_1E074; 0
000140FA 0000                       	dc word_1E0A2-off_1E074; 1
000140FC 0000                       	dc word_1E0A6-off_1E074; 2
000140FE 0000                       	dc word_1E0AA-off_1E074; 3
00014100 0000                       	dc word_1E0AE-off_1E074; 4
00014102 0000                       	dc word_1E0B2-off_1E074; 5
00014104 0000                       	dc word_1E0B6-off_1E074; 6
00014106 0000                       	dc word_1E0BA-off_1E074; 7
00014108 0000                       	dc word_1E0BE-off_1E074; 8
0001410A 0000                       	dc word_1E0C2-off_1E074; 9
0001410C 0000                       	dc word_1E0C6-off_1E074; 10
0001410E 0000                       	dc word_1E0CA-off_1E074; 11
00014110 0000                       	dc word_1E0CE-off_1E074; 12
00014112 0000                       	dc word_1E0D2-off_1E074; 13
00014114 0000                       	dc word_1E0D8-off_1E074; 14
00014116 0000                       	dc word_1E0DE-off_1E074; 15
00014118 0000                       	dc word_1E0E4-off_1E074; 16
0001411A 0000                       	dc word_1E0EA-off_1E074; 17
0001411C 0000                       	dc word_1E0EA-off_1E074; 18
0001411E 0000                       	dc word_1E0EA-off_1E074; 19
00014120 0000                       	dc word_1E0EA-off_1E074; 20
00014122 0000                       	dc word_1E0EC-off_1E074; 21
00014124 0000                       word_1E0A0:	dc 0
00014126 0001                       word_1E0A2:	dc 1
00014128 7000                       	dc $7000
0001412A 0001                       word_1E0A6:	dc 1
0001412C F008                       	dc $F008
0001412E 0001                       word_1E0AA:	dc 1
00014130 F018                       	dc $F018
00014132 0001                       word_1E0AE:	dc 1
00014134 F028                       	dc $F028
00014136 0001                       word_1E0B2:	dc 1
00014138 F038                       	dc $F038
0001413A 0001                       word_1E0B6:	dc 1
0001413C F048                       	dc $F048
0001413E 0001                       word_1E0BA:	dc 1
00014140 7058                       	dc $7058
00014142 0001                       word_1E0BE:	dc 1
00014144 7060                       	dc $7060
00014146 0001                       word_1E0C2:	dc 1
00014148 7068                       	dc $7068
0001414A 0001                       word_1E0C6:	dc 1
0001414C 7070                       	dc $7070
0001414E 0001                       word_1E0CA:	dc 1
00014150 7078                       	dc $7078
00014152 0001                       word_1E0CE:	dc 1
00014154 7080                       	dc $7080
00014156 0002                       word_1E0D2:	dc 2
00014158 1088                       	dc $1088
0001415A 708A                       	dc $708A
0001415C 0002                       word_1E0D8:	dc 2
0001415E 3092                       	dc $3092
00014160 7096                       	dc $7096
00014162 0002                       word_1E0DE:	dc 2
00014164 509E                       	dc $509E
00014166 70A4                       	dc $70A4
00014168 0002                       word_1E0E4:	dc 2
0001416A 50AC                       	dc $50AC
0001416C 70B2                       	dc $70B2
0001416E 0000                       word_1E0EA:	dc 0
00014170 0001                       word_1E0EC:	dc 1
00014172 F0BA                       	dc $F0BA
00014174                            	even
00014174                            ; ---------------------------------------------------------------------------
00014174                            ; Object 01 - Sonic
00014174                            ; ---------------------------------------------------------------------------
00014174                            
00014174                            Obj01:					; XREF: Obj_Index
00014174 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00014178 6700                       		beq.s	Obj01_Normal	; if not, branch
0001417A 4EF9 0000 0000             		jmp	DebugMode
00014180                            ; ===========================================================================
00014180                            
00014180                            Obj01_Normal:
00014180 7000                       		moveq	#0,d0
00014182 1028 0024                  		move.b	$24(a0),d0
00014186 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
0001418A 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
0001418E                            ; ===========================================================================
0001418E 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
00014190 0000                       		dc.w Obj01_Control-Obj01_Index
00014192 0000                       		dc.w Obj01_Hurt-Obj01_Index
00014194 0000                       		dc.w Obj01_Death-Obj01_Index
00014196 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
00014198                            ; ===========================================================================
00014198                            
00014198                            Obj01_Main:				; XREF: Obj01_Index
00014198 5428 0024                  		addq.b	#2,$24(a0)
0001419C 117C 0013 0016             		move.b	#$13,$16(a0)
000141A2 117C 0009 0017             		move.b	#9,$17(a0)
000141A8 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
000141B0 317C 0780 0002             		move.w	#$780,2(a0)
000141B6 117C 0002 0018             		move.b	#2,$18(a0)
000141BC 117C 0018 0019             		move.b	#$18,$19(a0)
000141C2 117C 0004 0001             		move.b	#4,1(a0)
000141C8 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
000141CE 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
000141D4 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
000141DA 11FC 0005 D1C0             		move.b	#5,$FFFFD1C0.w
000141E0                            		
000141E0                            Obj01_Control:				; XREF: Obj01_Index
000141E0 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
000141E4 6700                       		beq.s	loc_12C58	; if not, branch
000141E6 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
000141EC 6700                       		beq.s	loc_12C58	; if not, branch
000141EE 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
000141F4 4238 F7CC                  		clr.b	($FFFFF7CC).w
000141F8 4E75                       		rts	
000141FA                            ; ===========================================================================
000141FA                            
000141FA                            loc_12C58:
000141FA 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
000141FE 6600                       		bne.s	loc_12C64	; if yes, branch
00014200 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
00014206                            
00014206                            loc_12C64:
00014206 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
0001420C 6600                       		bne.s	loc_12C7E	; if yes, branch
0001420E 7000                       		moveq	#0,d0
00014210 1028 0022                  		move.b	$22(a0),d0
00014214 0240 0006                  		andi.w	#6,d0
00014218 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
0001421C 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
00014220                            
00014220                            loc_12C7E:
00014220 6100                       		bsr.s	Sonic_Display
00014222 6100 0000                  		bsr.w	Sonic_RecordPos
00014226 6100 0000                  		bsr.w	Sonic_Water
0001422A 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
00014230 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
00014236 4A38 F7C7                  		tst.b	($FFFFF7C7).w
0001423A 6700                       		beq.s	loc_12CA6
0001423C 4A28 001C                  		tst.b	$1C(a0)
00014240 6600                       		bne.s	loc_12CA6
00014242 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
00014248                            
00014248                            loc_12CA6:
00014248 6100 0000                  		bsr.w	Sonic_Animate
0001424C 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00014250 6B00                       		bmi.s	loc_12CB6
00014252 4EB9 0000 0000             		jsr	TouchResponse
00014258                            
00014258                            loc_12CB6:
00014258 6100 0000                  		bsr.w	Sonic_Loops
0001425C 6100 0000                  		bsr.w	LoadSonicDynPLC
00014260 4E75                       		rts	
00014262                            ; ===========================================================================
00014262 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
00014264 0000                       		dc.w Obj01_MdJump-Obj01_Modes
00014266 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
00014268 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
0001426A                            ; ===========================================================================
0001426A                            
0001426A                            Sonic_Display:				; XREF: loc_12C7E
0001426A 3028 0030                  		move.w	$30(a0),d0
0001426E 6700                       		beq.s	Obj01_Display
00014270 5368 0030                  		subq.w	#1,$30(a0)
00014274 E648                       		lsr.w	#3,d0
00014276 6400                       		bcc.s	Obj01_ChkInvin
00014278                            
00014278                            Obj01_Display:
00014278 4EB9 0000 E75C             		jsr	DisplaySprite
0001427E                            
0001427E                            Obj01_ChkInvin:
0001427E 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014282 6700                       		beq.s	Obj01_ChkShoes	; if not, branch
00014284 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
00014288 6700                       		beq.s	Obj01_ChkShoes	; if no	time remains, branch
0001428A 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
0001428E 6600                       		bne.b	Obj01_ChkShoes
00014290 0C38 0001 FFFF             		cmpi.b	#$1,($FFFFFFFF).w	; boss
00014296 6700                       		beq.b	Obj01_RmvInvin
00014298 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w	; underwater
0001429E 6500                       		bcs.b	Obj01_RmvInvin
000142A0                            
000142A0 0C38 0001 FE2E             		cmpi.b	#$1,($FFFFFE2E).w	; does Sonic have speed shoes?
000142A6 6600                       		bne.s	Obj01_Load_inv	; if no, branch, and load regular stage music
000142A8 103C 009A                  		move.b	#$9A,d0		; if yes, load regular speed shoes music
000142AC 6000                       		bra.b	Obj01_Play_inv
000142AE                            Obj01_Load_inv
000142AE 1039 FFFF FFFE             		move.b	$FFFFFFFE,d0	; loads song number from RAM
000142B4                            Obj01_Play_inv:
000142B4 4EB9 0000 1326             		jsr	(PlaySound).l	; play normal music
000142BA                            
000142BA                            Obj01_RmvInvin:
000142BA 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
000142C0                            
000142C0                            Obj01_ChkShoes:
000142C0 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
000142C4 6700                       		beq.s	Obj01_ExitChk	; if not, branch
000142C6 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
000142CA 6700                       		beq.s	Obj01_ExitChk
000142CC 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
000142D0 6600                       		bne.s	Obj01_ExitChk
000142D2 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
000142D8 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
000142DE 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
000142E4 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
000142EA                            
000142EA 0C38 0001 FFFF             		cmpi.b	#$1,($FFFFFFFF).w	; boss
000142F0 6700                       		beq.b	Obj01_ExitChk
000142F2                            
000142F2 0C38 0001 FE2D             		cmpi.b	#$1,($FFFFFE2D).w	; does Sonic have invincibility?
000142F8 6600                       		bne.s	Obj01_Load_spd	; if no, branch, and load regular stage music
000142FA 103C 0087                  		move.b	#$87,d0		; if yes, load regular invincibility music
000142FE 6000                       		bra.b	Obj01_Play_spd
00014300                            Obj01_Load_spd:
00014300 1039 FFFF FFFE             		move.b	$FFFFFFFE,d0	; loads song number from RAM
00014306                            Obj01_Play_spd:
00014306 4EF9 0000 1326             		jmp	(PlaySound).l	; run music at normal speed
0001430C                            ; ===========================================================================
0001430C                            
0001430C                            Obj01_ExitChk:
0001430C 4E75                       		rts
0001430E                            
0001430E                            ; ---------------------------------------------------------------------------
0001430E                            ; Subroutine to	record Sonic's previous positions for invincibility stars
0001430E                            ; ---------------------------------------------------------------------------
0001430E                            
0001430E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001430E                            
0001430E                            
0001430E                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
0001430E 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00014312 43F8 CB00                  		lea	($FFFFCB00).w,a1
00014316 43F1 0000                  		lea	(a1,d0.w),a1
0001431A 32E8 0008                  		move.w	8(a0),(a1)+
0001431E 32E8 000C                  		move.w	$C(a0),(a1)+
00014322 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
00014326 4E75                       		rts	
00014328                            ; End of function Sonic_RecordPos
00014328                            
00014328                            ; ---------------------------------------------------------------------------
00014328                            ; Subroutine for Sonic when he's underwater
00014328                            ; ---------------------------------------------------------------------------
00014328                            
00014328                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014328                            
00014328                            
00014328                            Sonic_Water:				; XREF: loc_12C7E
00014328 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
0001432E 6700                       		beq.s	Obj01_InWater	; if yes, branch
00014330                            
00014330                            locret_12D80:
00014330 4E75                       		rts	
00014332                            ; ===========================================================================
00014332                            
00014332                            Obj01_InWater:
00014332 3038 F646                  		move.w	($FFFFF646).w,d0
00014336 B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
0001433A 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
0001433C 08E8 0006 0022             		bset	#6,$22(a0)
00014342 66EC                       		bne.s	locret_12D80
00014344 6100 0000                  		bsr.w	ResumeMusic
00014348 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
0001434E 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
00014354 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
0001435A 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
00014360 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
00014366 E0E8 0010                  		asr	$10(a0)
0001436A E0E8 0012                  		asr	$12(a0)
0001436E E0E8 0012                  		asr	$12(a0)
00014372 67BC                       		beq.s	locret_12D80
00014374 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
0001437A 303C 00AA                  		move.w	#$AA,d0
0001437E 4EF9 0000 132C             		jmp	(PlaySound_Special).l ;	play splash sound
00014384                            ; ===========================================================================
00014384                            
00014384                            Obj01_OutWater:
00014384 08A8 0006 0022             		bclr	#6,$22(a0)
0001438A 67A4                       		beq.s	locret_12D80
0001438C 6100 0000                  		bsr.w	ResumeMusic
00014390 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00014396 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
0001439C 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
000143A2 E1E8 0012                  		asl	$12(a0)
000143A6 6700 FF88                  		beq.w	locret_12D80
000143AA 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
000143B0 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
000143B6 6E00                       		bgt.s	loc_12E0E
000143B8 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
000143BE                            
000143BE                            loc_12E0E:
000143BE 303C 00AA                  		move.w	#$AA,d0
000143C2 4EF9 0000 132C             		jmp	(PlaySound_Special).l ;	play splash sound
000143C8                            ; End of function Sonic_Water
000143C8                            
000143C8                            ; ===========================================================================
000143C8                            ; ---------------------------------------------------------------------------
000143C8                            ; Modes	for controlling	Sonic
000143C8                            ; ---------------------------------------------------------------------------
000143C8                            
000143C8                            Obj01_MdNormal:				; XREF: Obj01_Modes
000143C8 6100 0000                  		bsr.w	Sonic_SpinDash
000143CC 6100 0000                  		bsr.w	sonic_peelout
000143D0 6100 0000                  		bsr.w	Sonic_Jump
000143D4 6100 0000                  		bsr.w	Sonic_SlopeResist
000143D8 6100 0000                  		bsr.w	Sonic_Move
000143DC 6100 0000                  		bsr.w	Sonic_Roll
000143E0 6100 0000                  		bsr.w	Sonic_LevelBound
000143E4 4EB9 0000 E736             		jsr	SpeedToPos
000143EA 6100 0000                  		bsr.w	Sonic_AnglePos
000143EE 6100 0000                  		bsr.w	Sonic_SlopeRepel
000143F2 4E75                       		rts	
000143F4                            ; ===========================================================================
000143F4                            
000143F4                            Obj01_MdJump:				; XREF: Obj01_Modes
000143F4 4228 0039                  		clr.b	$39(a0)
000143F8 6100 0000                  		bsr.w	Sonic_JumpHeight
000143FC 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00014400 6100 0000                  		bsr.w	Sonic_LevelBound
00014404 4EB9 0000 E70A             		jsr	ObjectFall
0001440A 0828 0006 0022             		btst	#6,$22(a0)
00014410 6700                       		beq.s	loc_12E5C
00014412 0468 0028 0012             		subi.w	#$28,$12(a0)
00014418                            
00014418                            loc_12E5C:
00014418 6100 0000                  		bsr.w	Sonic_JumpAngle
0001441C 6100 0000                  		bsr.w	Sonic_Floor
00014420 4E75                       		rts	
00014422                            ; ===========================================================================
00014422                            
00014422                            Obj01_MdRoll:				; XREF: Obj01_Modes
00014422 6100 0000                  		bsr.w	Sonic_Jump
00014426 6100 0000                  		bsr.w	Sonic_RollRepel
0001442A 6100 0000                  		bsr.w	Sonic_RollSpeed
0001442E 6100 0000                  		bsr.w	Sonic_LevelBound
00014432 4EB9 0000 E736             		jsr	SpeedToPos
00014438 6100 0000                  		bsr.w	Sonic_AnglePos
0001443C 6100 0000                  		bsr.w	Sonic_SlopeRepel
00014440 4E75                       		rts	
00014442                            ; ===========================================================================
00014442                            
00014442                            Obj01_MdJump2:				; XREF: Obj01_Modes
00014442 4228 0039                  		clr.b	$39(a0)
00014446 6100 0000                  		bsr.w	Sonic_JumpHeight
0001444A 6100 0000                  		bsr.w	Sonic_ChgJumpDir
0001444E 6100 0000                  		bsr.w	Sonic_LevelBound
00014452 6100 0000                  		bsr.w	Sonic_HomingAttack
00014456 4EB9 0000 E70A             		jsr	ObjectFall
0001445C 0828 0006 0022             		btst	#6,$22(a0)
00014462 6700                       		beq.s	loc_12EA6
00014464 0468 0028 0012             		subi.w	#$28,$12(a0)
0001446A 3028 0010                  		move.w	$10(a0),d0		; move Sonic's X-velocity to d0 
0001446E 4A40                       		tst.w	d0			; is his speed positive? (is he running to the right?)
00014470 6A00                       		bpl.s	Obj01_MdJump2_Abs	; if yes, branch
00014472 4440                       		neg.w	d0			; otherwise negate it
00014474                            		
00014474                            Obj01_MdJump2_Abs:
00014474 0C40 0250                  		cmpi.w	#$250,d0		; if Sonic speed less than $250?
00014478 6D00                       		blt.s	loc_12EA6		; if yes, branch
0001447A 3028 000C                  		move.w	$C(a0),d0		; move sonic's Y-position to d0
0001447E 9078 F646                  		sub.w	($FFFFF646).w,d0	; sub the water height from it
00014482 0C40 000F                  		cmpi.w	#$F,d0			; is Sonic slightly in the water?
00014486 6E00                       		bgt.s	loc_12EA6		; if not, branch
00014488 0468 0090 0012             		subi.w	#$90,$12(a0)		; jump out of water
0001448E                            loc_12EA6:
0001448E 6100 0000                  		bsr.w	Sonic_JumpAngle
00014492 6100 0000                  		bsr.w	Sonic_Floor
00014496 4E75                       		rts	
00014498                            ; ---------------------------------------------------------------------------
00014498                            ; Subroutine to	make Sonic walk/run
00014498                            ; ---------------------------------------------------------------------------
00014498                            
00014498                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014498                            
00014498                            
00014498                            Sonic_Move:				; XREF: Obj01_MdNormal
00014498 3C38 F760                  		move.w	($FFFFF760).w,d6
0001449C 3A38 F762                  		move.w	($FFFFF762).w,d5
000144A0 3838 F764                  		move.w	($FFFFF764).w,d4
000144A4 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000144A8 6600 0000                  		bne.w	loc_12FEE
000144AC 4A68 003E                  		tst.w	$3E(a0)
000144B0 6600 0000                  		bne.w	Obj01_ResetScr
000144B4 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
000144BA 6700                       		beq.s	Obj01_NotLeft	; if not, branch
000144BC 6100 0000                  		bsr.w	Sonic_MoveLeft
000144C0                            
000144C0                            Obj01_NotLeft:
000144C0 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
000144C6 6700                       		beq.s	Obj01_NotRight	; if not, branch
000144C8 6100 0000                  		bsr.w	Sonic_MoveRight
000144CC                            
000144CC                            Obj01_NotRight:
000144CC 1028 0026                  		move.b	$26(a0),d0
000144D0 0600 0020                  		addi.b	#$20,d0
000144D4 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
000144D8 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
000144DC 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
000144E0 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
000144E4 08A8 0005 0022             		bclr	#5,$22(a0)
000144EA 117C 0005 001C             		move.b	#5,$1C(a0)	; use waiting animation
000144F0 0828 0003 0022             		btst	#3,$22(a0)
000144F6 6700                       		beq.s	Sonic_Balance
000144F8 7000                       		moveq	#0,d0
000144FA 1028 003D                  		move.b	$3D(a0),d0
000144FE ED48                       		lsl.w	#6,d0
00014500 43F8 D000                  		lea	($FFFFD000).w,a1
00014504 43F1 0000                  		lea	(a1,d0.w),a1
00014508 4A29 0022                  		tst.b	$22(a1)
0001450C 6B00 0000                  		bmi.w	Sonic_LookUp
00014510 7200                       		moveq	#0,d1
00014512 1229 0019                  		move.b	$19(a1),d1
00014516 3401                       		move.w	d1,d2
00014518 D442                       		add.w	d2,d2
0001451A 5942                       		subq.w	#4,d2
0001451C D268 0008                  		add.w	8(a0),d1
00014520 9269 0008                  		sub.w	8(a1),d1
00014524 0C41 0004                  		cmpi.w	#4,d1
00014528 6D00                       		blt.s	loc_12F6A
0001452A B242                       		cmp.w	d2,d1
0001452C 6C00                       		bge.s	loc_12F5A
0001452E 6000 0000                  		bra.w	Sonic_LookUp
00014532                            ; ===========================================================================
00014532                            
00014532                            Sonic_Balance:
00014532 4EB9 0000 0000             		jsr	ObjHitFloor
00014538 0C41 000C                  		cmpi.w	#$C,d1
0001453C 6D00 0000                  		blt.w	Sonic_LookUp
00014540 0C28 0003 0036             		cmpi.b	#3,$36(a0)
00014546 6600                       		bne.s	loc_12F62
00014548                            
00014548                            loc_12F5A:
00014548 08A8 0000 0022             		bclr	#0,$22(a0)
0001454E 6000                       		bra.s	loc_12F70
00014550                            ; ===========================================================================
00014550                            
00014550                            loc_12F62:
00014550 0C28 0003 0037             		cmpi.b	#3,$37(a0)
00014556 6600 0000                  		bne.w	Sonic_LookUp
0001455A                            
0001455A                            loc_12F6A:
0001455A 08E8 0000 0022             		bset	#0,$22(a0)
00014560                            
00014560                            loc_12F70:
00014560 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
00014566 6000 0000                  		bra.w	Obj01_ResetScr
0001456A                            ; ===========================================================================
0001456A                            ; ---------------------------------------------------------------------------
0001456A                            ; Subroutine to make Sonic perform a peelout
0001456A                            ; ---------------------------------------------------------------------------
0001456A                             
0001456A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001456A                            
0001456A                            sonic_peelout:
0001456A                            	include "_New\peelout.asm"
0001456A                            ;Sonic_Dash:
0001456A 0828 0001 0039             		btst	#1,$39(a0)
00014570 6600                       		bne.s	Sonic_DashLaunch
00014572 0C28 0007 001C             		cmpi.b	#7,$1C(a0) ;check to see if your looking up
00014578 6600                       		bne.s	@return
0001457A 1038 F603                  		move.b	($FFFFF603).w,d0
0001457E 0200 0070                  		andi.b	#%01110000,d0
00014582 6700 0000                  		beq.w	@return
00014586 117C 0001 001C             		move.b	#1,$1C(a0)
0001458C 317C 0000 003A             		move.w	#0,$3A(a0)
00014592 303C 00D1                  		move.w	#$D1,d0
00014596 4EB9 0000 132C             		jsr		(PlaySound_Special).l
0001459C 588F                       		addq.l	#4,sp
0001459E 08E8 0001 0039             		bset	#1,$39(a0)
000145A4                             
000145A4 6100 0000                  		bsr.w	Sonic_LevelBound
000145A8 6100 0000                  		bsr.w	Sonic_AnglePos
000145AC                             
000145AC                            	@return:
000145AC 4E75                       		rts	
000145AE                            ; ---------------------------------------------------------------------------
000145AE                             
000145AE                            Sonic_DashLaunch:
000145AE 117C 0021 001C             		move.b	#$21,$1C(a0) ;charging peelout animation (walking to running to peelout sprites)
000145B4 1038 F602                  		move.b	($FFFFF602).w,d0
000145B8 0800 0000                  		btst	#0,d0
000145BC 6600 0000                  		bne.w	Sonic_DashCharge
000145C0 08A8 0001 0039             		bclr	#1,$39(a0)	; stop Dashing
000145C6 0C28 001E 003A             		cmpi.b	#$1E,$3A(a0)	; have we been charging long enough?
000145CC 6600                       		bne.s	Sonic_DashResetScr
000145CE 117C 0000 001C             		move.b	#0,$1C(a0)	; launches here (peelout sprites)
000145D4 317C 0001 0010             		move.w	#1,$10(a0)	; force X speed to nonzero for camera lag's benefit
000145DA 317C 0C00 0014             		move.w	#$0C00,$14(a0)
000145E0 3028 0014                  		move.w	$14(a0),d0
000145E4 0440 0800                  		subi.w	#$800,d0
000145E8 D040                       		add.w	d0,d0
000145EA 0240 1F00                  		andi.w	#$1F00,d0
000145EE 4440                       		neg.w	d0
000145F0 0640 2000                  		addi.w	#$2000,d0
000145F4                            		;move.w	d0,(v_cameralag).w
000145F4 0828 0000 0022             		btst	#0,$22(a0)
000145FA 6700                       		beq.s	@dontflip
000145FC 4468 0014                  		neg.w	$14(a0)
00014600                             
00014600                            @dontflip:
00014600                            		;bset	#2,$22(a0)
00014600 08A8 0007 0022             		bclr	#7,$22(a0)
00014606 303C 00BC                  		move.w	#$BC,d0
0001460A 4EB9 0000 132C             		jsr		(PlaySound_Special).l
00014610 6000 0000                  		bra.w	Sonic_DashResetScr
00014614                            ; ---------------------------------------------------------------------------
00014614                             
00014614                            Sonic_DashCharge:				; If still charging the dash...
00014614 0C28 001E 003A             		cmpi.b	#$1E,$3A(a0)
0001461A 6700                       		beq.s	Sonic_DashResetScr
0001461C 0628 0001 003A             		addi.b	#1,$3A(a0)
00014622                            		
00014622                             
00014622                            Sonic_DashResetScr:
00014622 588F                       		addq.l	#4,sp			; increase stack ptr
00014624 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
0001462A 6700                       		beq.s	@finish
0001462C 6400                       		bcc.s	@skip
0001462E 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00014632                             
00014632                            	@skip:
00014632 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00014636                             
00014636                            	@finish:
00014636 6100 0000                  		bsr.w	Sonic_LevelBound
0001463A 6100 0000                  		bsr.w	Sonic_AnglePos
0001463E 4E75                       		rts
00014640                            		
00014640                            		
00014640                            
00014640                            ; End of Subroutine Peelout
00014640                            Sonic_LookUp:
00014640 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
00014646 6700                       		beq.s	Sonic_Duck	; if not, branch
00014648 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
0001464E 5238 C903                  		addq.b	#1,($FFFFC903).w
00014652 0C38 0078 C903             		cmp.b	#$78,($FFFFC903).w
00014658 6500                       		bcs.s	Obj01_ResetScr_Part2
0001465A 11FC 0078 C903             		move.b	#$78,($FFFFC903).w
00014660 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
00014666 6700                       		beq.s	loc_12FC2
00014668 5478 F73E                  		addq.w	#2,($FFFFF73E).w
0001466C 6000                       		bra.s	loc_12FC2
0001466E                             ;===========================================================================
0001466E                             
0001466E                            Sonic_Duck:
0001466E 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00014674 6700                       		beq.s	Obj01_ResetScr	; if not, branch
00014676 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
0001467C 5238 C903                  		addq.b	#1,($FFFFC903).w
00014680 0C38 0078 C903             		cmpi.b	#$78,($FFFFC903).w
00014686 6500                       		bcs.s	Obj01_ResetScr_Part2
00014688 11FC 0078 C903             		move.b	#$78,($FFFFC903).w
0001468E 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
00014694 6700                       		beq.s	loc_12FC2
00014696 5578 F73E                  		subq.w	#2,($FFFFF73E).w
0001469A 6000                       		bra.s	loc_12FC2
0001469C                            ; ===========================================================================
0001469C                             
0001469C                            Obj01_ResetScr:
0001469C 11FC 0000 C903             		move.b	#0,($FFFFC903).w
000146A2                             
000146A2                            Obj01_ResetScr_Part2:
000146A2 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
000146A8 6700                       		beq.s	loc_12FC2	; if yes, branch
000146AA 6400                       		bcc.s	loc_12FBE
000146AC 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
000146B0                             
000146B0                            loc_12FBE:
000146B0 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
000146B4                            
000146B4                            loc_12FC2:
000146B4 1038 F602                  		move.b	($FFFFF602).w,d0
000146B8 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
000146BC 6600                       		bne.s	loc_12FEE	; if yes, branch
000146BE 3028 0014                  		move.w	$14(a0),d0
000146C2 6700                       		beq.s	loc_12FEE
000146C4 6B00                       		bmi.s	loc_12FE2
000146C6 9045                       		sub.w	d5,d0
000146C8 6400                       		bcc.s	loc_12FDC
000146CA 303C 0000                  		move.w	#0,d0
000146CE                            
000146CE                            loc_12FDC:
000146CE 3140 0014                  		move.w	d0,$14(a0)
000146D2 6000                       		bra.s	loc_12FEE
000146D4                            ; ===========================================================================
000146D4                            
000146D4                            loc_12FE2:
000146D4 D045                       		add.w	d5,d0
000146D6 6400                       		bcc.s	loc_12FEA
000146D8 303C 0000                  		move.w	#0,d0
000146DC                            
000146DC                            loc_12FEA:
000146DC 3140 0014                  		move.w	d0,$14(a0)
000146E0                            
000146E0                            loc_12FEE:
000146E0 1028 0026                  		move.b	$26(a0),d0
000146E4 4EB9 0000 3274             		jsr	(CalcSine).l
000146EA C3E8 0014                  		muls.w	$14(a0),d1
000146EE E081                       		asr.l	#8,d1
000146F0 3141 0010                  		move.w	d1,$10(a0)
000146F4 C1E8 0014                  		muls.w	$14(a0),d0
000146F8 E080                       		asr.l	#8,d0
000146FA 3140 0012                  		move.w	d0,$12(a0)
000146FE                            
000146FE                            loc_1300C:
000146FE 1028 0026                  		move.b	$26(a0),d0
00014702 0600 0040                  		addi.b	#$40,d0
00014706 6B00                       		bmi.s	locret_1307C
00014708 123C 0040                  		move.b	#$40,d1
0001470C 4A68 0014                  		tst.w	$14(a0)
00014710 6700                       		beq.s	locret_1307C
00014712 6B00                       		bmi.s	loc_13024
00014714 4441                       		neg.w	d1
00014716                            
00014716                            loc_13024:
00014716 1028 0026                  		move.b	$26(a0),d0
0001471A D001                       		add.b	d1,d0
0001471C 3F00                       		move.w	d0,-(sp)
0001471E 6100 0000                  		bsr.w	Sonic_WalkSpeed
00014722 301F                       		move.w	(sp)+,d0
00014724 4A41                       		tst.w	d1
00014726 6A00                       		bpl.s	locret_1307C
00014728 E141                       		asl.w	#8,d1
0001472A 0600 0020                  		addi.b	#$20,d0
0001472E 0200 00C0                  		andi.b	#$C0,d0
00014732 6700                       		beq.s	loc_13078
00014734 0C00 0040                  		cmpi.b	#$40,d0
00014738 6700                       		beq.s	loc_13066
0001473A 0C00 0080                  		cmpi.b	#$80,d0
0001473E 6700                       		beq.s	loc_13060
00014740 D368 0010                  		add.w	d1,$10(a0)
00014744 08E8 0005 0022             		bset	#5,$22(a0)
0001474A 317C 0000 0014             		move.w	#0,$14(a0)
00014750 4E75                       		rts	
00014752                            ; ===========================================================================
00014752                            
00014752                            loc_13060:
00014752 9368 0012                  		sub.w	d1,$12(a0)
00014756 4E75                       		rts	
00014758                            ; ===========================================================================
00014758                            
00014758                            loc_13066:
00014758 9368 0010                  		sub.w	d1,$10(a0)
0001475C 08E8 0005 0022             		bset	#5,$22(a0)
00014762 317C 0000 0014             		move.w	#0,$14(a0)
00014768 4E75                       		rts	
0001476A                            ; ===========================================================================
0001476A                            
0001476A                            loc_13078:
0001476A D368 0012                  		add.w	d1,$12(a0)
0001476E                            
0001476E                            locret_1307C:
0001476E 4E75                       		rts	
00014770                            ; End of function Sonic_Move
00014770                            
00014770                            
00014770                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014770                            
00014770                            
00014770                            Sonic_MoveLeft:		   ; XREF: Sonic_Move
00014770 3028 0014                  		move.w	$14(a0),d0
00014774 6700                       		beq.s	loc_13086
00014776 6A00                       		bpl.s	loc_130B2
00014778                             
00014778                            loc_13086:
00014778 08E8 0000 0022             		bset	#0,$22(a0)
0001477E 6600                       		bne.s	loc_1309A
00014780 08A8 0005 0022             		bclr	#5,$22(a0)
00014786 117C 0001 001D             		move.b	#1,$1D(a0)
0001478C                             
0001478C                            loc_1309A:
0001478C 9045                       		sub.w	d5,d0
0001478E 3206                       		move.w	d6,d1
00014790 4441                       		neg.w	d1
00014792 B041                       		cmp.w	d1,d0
00014794 6E00                       		bgt.s	loc_130A6
00014796 D045                       		add.w	d5,d0
00014798 B041                       		cmp.w	d1,d0
0001479A 6F00                       		ble.s	loc_130A6
0001479C 3001                       		move.w	d1,d0
0001479E                             
0001479E                            loc_130A6:
0001479E 3140 0014                  		move.w	d0,$14(a0)
000147A2 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
000147A8 4E75                       		rts
000147AA                            ; ===========================================================================
000147AA                            
000147AA                            loc_130B2:				; XREF: Sonic_MoveLeft
000147AA 9044                       		sub.w	d4,d0
000147AC 6400                       		bcc.s	loc_130BA
000147AE 303C FF80                  		move.w	#-$80,d0
000147B2                            
000147B2                            loc_130BA:
000147B2 3140 0014                  		move.w	d0,$14(a0)
000147B6 1028 0026                  		move.b	$26(a0),d0
000147BA 0600 0020                  		addi.b	#$20,d0
000147BE 0200 00C0                  		andi.b	#$C0,d0
000147C2 6600                       		bne.s	locret_130E8
000147C4 0C40 0400                  		cmpi.w	#$400,d0
000147C8 6D00                       		blt.s	locret_130E8
000147CA 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
000147D0 08A8 0000 0022             		bclr	#0,$22(a0)
000147D6 303C 00A4                  		move.w	#$A4,d0
000147DA 4EB9 0000 132C             		jsr	(PlaySound_Special).l ;	play stopping sound
000147E0                            
000147E0                            locret_130E8:
000147E0 4E75                       		rts	
000147E2                            ; End of function Sonic_MoveLeft
000147E2                            
000147E2                            
000147E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000147E2                            
000147E2                            
000147E2                            Sonic_MoveRight:	   ; XREF: Sonic_Move
000147E2 3028 0014                  		move.w	$14(a0),d0
000147E6 6B00                       		bmi.s	loc_13118
000147E8 08A8 0000 0022             		bclr	#0,$22(a0)
000147EE 6700                       		beq.s	loc_13104
000147F0 08A8 0005 0022             		bclr	#5,$22(a0)
000147F6 117C 0001 001D             		move.b	#1,$1D(a0)
000147FC                             
000147FC                            loc_13104:
000147FC D045                       		add.w	d5,d0
000147FE B046                       		cmp.w	d6,d0
00014800 6D00                       		blt.s	loc_1310C
00014802 9045                       		sub.w	d5,d0
00014804 B046                       		cmp.w	d6,d0
00014806 6C00                       		bge.s	loc_1310C
00014808 3006                       		move.w	d6,d0
0001480A                             
0001480A                            loc_1310C:
0001480A 3140 0014                  		move.w	d0,$14(a0)
0001480E 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
00014814 4E75                       		rts
00014816                            ; ===========================================================================
00014816                            
00014816                            loc_13118:				; XREF: Sonic_MoveRight
00014816 D044                       		add.w	d4,d0
00014818 6400                       		bcc.s	loc_13120
0001481A 303C 0080                  		move.w	#$80,d0
0001481E                            
0001481E                            loc_13120:
0001481E 3140 0014                  		move.w	d0,$14(a0)
00014822 1028 0026                  		move.b	$26(a0),d0
00014826 0600 0020                  		addi.b	#$20,d0
0001482A 0200 00C0                  		andi.b	#$C0,d0
0001482E 6600                       		bne.s	locret_1314E
00014830 0C40 FC00                  		cmpi.w	#-$400,d0
00014834 6E00                       		bgt.s	locret_1314E
00014836 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
0001483C 08E8 0000 0022             		bset	#0,$22(a0)
00014842 303C 00A4                  		move.w	#$A4,d0
00014846 4EB9 0000 132C             		jsr	(PlaySound_Special).l ;	play stopping sound
0001484C                            
0001484C                            locret_1314E:
0001484C 4E75                       		rts	
0001484E                            ; End of function Sonic_MoveRight
0001484E                            
0001484E                            ; ---------------------------------------------------------------------------
0001484E                            ; Subroutine to	change Sonic's speed as he rolls
0001484E                            ; ---------------------------------------------------------------------------
0001484E                            
0001484E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001484E                            
0001484E                            
0001484E                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
0001484E 3C38 F760                  		move.w	($FFFFF760).w,d6
00014852 E346                       		asl.w	#1,d6
00014854 3A38 F762                  		move.w	($FFFFF762).w,d5
00014858 E245                       		asr.w	#1,d5
0001485A 3838 F764                  		move.w	($FFFFF764).w,d4
0001485E E444                       		asr.w	#2,d4
00014860 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00014864 6600 0000                  		bne.w	loc_131CC
00014868 4A68 003E                  		tst.w	$3E(a0)
0001486C 6600                       		bne.s	loc_13188
0001486E 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00014874 6700                       		beq.s	loc_1317C	; if not, branch
00014876 6100 0000                  		bsr.w	Sonic_RollLeft
0001487A                            
0001487A                            loc_1317C:
0001487A 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00014880 6700                       		beq.s	loc_13188	; if not, branch
00014882 6100 0000                  		bsr.w	Sonic_RollRight
00014886                            
00014886                            loc_13188:
00014886 3028 0014                  		move.w	$14(a0),d0
0001488A 6700                       		beq.s	loc_131AA
0001488C 6B00                       		bmi.s	loc_1319E
0001488E 9045                       		sub.w	d5,d0
00014890 6400                       		bcc.s	loc_13198
00014892 303C 0000                  		move.w	#0,d0
00014896                            
00014896                            loc_13198:
00014896 3140 0014                  		move.w	d0,$14(a0)
0001489A 6000                       		bra.s	loc_131AA
0001489C                            ; ===========================================================================
0001489C                            
0001489C                            loc_1319E:				; XREF: Sonic_RollSpeed
0001489C D045                       		add.w	d5,d0
0001489E 6400                       		bcc.s	loc_131A6
000148A0 303C 0000                  		move.w	#0,d0
000148A4                            
000148A4                            loc_131A6:
000148A4 3140 0014                  		move.w	d0,$14(a0)
000148A8                            
000148A8                            loc_131AA:
000148A8 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
000148AC 6600                       		bne.s	loc_131CC	; if yes, branch
000148AE 08A8 0002 0022             		bclr	#2,$22(a0)
000148B4 117C 0013 0016             		move.b	#$13,$16(a0)
000148BA 117C 0009 0017             		move.b	#9,$17(a0)
000148C0 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
000148C6 5B68 000C                  		subq.w	#5,$C(a0)
000148CA                            
000148CA                            loc_131CC:
000148CA 0C78 0060 F73E             		cmp.w	#$60,($FFFFF73E).w
000148D0 6700                       		beq.s	@cont2
000148D2 6400                       		bcc.s	@cont1
000148D4 5878 F73E                  		addq.w	#4,($FFFFF73E).w
000148D8                             
000148D8                            @cont1:
000148D8 5578 F73E                  		subq.w	#2,($FFFFF73E).w
000148DC                             
000148DC                            @cont2:
000148DC 1028 0026                  		move.b	$26(a0),d0
000148E0 4EB9 0000 3274             		jsr	(CalcSine).l
000148E6 C1E8 0014                  		muls.w	$14(a0),d0
000148EA E080                       		asr.l	#8,d0
000148EC 3140 0012                  		move.w	d0,$12(a0)
000148F0 C3E8 0014                  		muls.w	$14(a0),d1
000148F4 E081                       		asr.l	#8,d1
000148F6 0C41 1000                  		cmpi.w	#$1000,d1
000148FA 6F00                       		ble.s	loc_131F0
000148FC 323C 1000                  		move.w	#$1000,d1
00014900                            
00014900                            loc_131F0:
00014900 0C41 F000                  		cmpi.w	#-$1000,d1
00014904 6C00                       		bge.s	loc_131FA
00014906 323C F000                  		move.w	#-$1000,d1
0001490A                            
0001490A                            loc_131FA:
0001490A 3141 0010                  		move.w	d1,$10(a0)
0001490E 6000 FDEE                  		bra.w	loc_1300C
00014912                            ; End of function Sonic_RollSpeed
00014912                            
00014912                            
00014912                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014912                            
00014912                            
00014912                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
00014912 3028 0014                  		move.w	$14(a0),d0
00014916 6700                       		beq.s	loc_1320A
00014918 6A00                       		bpl.s	loc_13218
0001491A                            
0001491A                            loc_1320A:
0001491A 08E8 0000 0022             		bset	#0,$22(a0)
00014920 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00014926 4E75                       		rts	
00014928                            ; ===========================================================================
00014928                            
00014928                            loc_13218:
00014928 9044                       		sub.w	d4,d0
0001492A 6400                       		bcc.s	loc_13220
0001492C 303C FF80                  		move.w	#-$80,d0
00014930                            
00014930                            loc_13220:
00014930 3140 0014                  		move.w	d0,$14(a0)
00014934 4E75                       		rts	
00014936                            ; End of function Sonic_RollLeft
00014936                            
00014936                            
00014936                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014936                            
00014936                            
00014936                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
00014936 3028 0014                  		move.w	$14(a0),d0
0001493A 6B00                       		bmi.s	loc_1323A
0001493C 08A8 0000 0022             		bclr	#0,$22(a0)
00014942 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00014948 4E75                       		rts	
0001494A                            ; ===========================================================================
0001494A                            
0001494A                            loc_1323A:
0001494A D044                       		add.w	d4,d0
0001494C 6400                       		bcc.s	loc_13242
0001494E 303C 0080                  		move.w	#$80,d0
00014952                            
00014952                            loc_13242:
00014952 3140 0014                  		move.w	d0,$14(a0)
00014956 4E75                       		rts	
00014958                            ; End of function Sonic_RollRight
00014958                            
00014958                            ; ---------------------------------------------------------------------------
00014958                            ; Subroutine to	change Sonic's direction while jumping
00014958                            ; ---------------------------------------------------------------------------
00014958                            
00014958                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014958                            
00014958                            
00014958                            Sonic_ChgJumpDir:		; XREF: Obj01_MdJump; Obj01_MdJump2
00014958 3C38 F760                  		move.w	($FFFFF760).w,d6
0001495C 3A38 F762                  		move.w	($FFFFF762).w,d5
00014960 E345                       		asl.w	#1,d5
00014962 0828 0004 0022             		btst	#4,$22(a0)	
00014968 6600                       		bne.s	Obj01_ResetScr2	
0001496A 3028 0010                  		move.w	$10(a0),d0	
0001496E 0838 0002 F602             		btst	#2,($FFFFF602).w; is left being pressed?	
00014974 6700                       		beq.s	loc_13278; if not, branch	
00014976 08E8 0000 0022             		bset	#0,$22(a0)	
0001497C 9045                       		sub.w	d5,d0	
0001497E 3206                       		move.w	d6,d1	
00014980 4441                       		neg.w	d1	
00014982 B041                       		cmp.w	d1,d0	
00014984 6E00                       		bgt.s	loc_13278	
00014986 D045                       		add.w	d5,d0		; +++ remove this frame's acceleration change
00014988 B041                       		cmp.w	d1,d0		; +++ compare speed with top speed
0001498A 6F00                       		ble.s	loc_13278	; +++ if speed was already greater than the maximum, branch	
0001498C 3001                       		move.w	d1,d0
0001498E                             
0001498E                            loc_13278:
0001498E 0838 0003 F602             		btst	#3,($FFFFF602).w; is right being pressed?	
00014994 6700                       		beq.s	Obj01_JumpMove; if not, branch	
00014996 08A8 0000 0022             		bclr	#0,$22(a0)	
0001499C D045                       		add.w	d5,d0	
0001499E B046                       		cmp.w	d6,d0	
000149A0 6D00                       		blt.s	Obj01_JumpMove
000149A2 9045                       		sub.w	d5,d0		; +++ remove this frame's acceleration change
000149A4 B046                       		cmp.w	d6,d0		; +++ compare speed with top speed
000149A6 6C00                       		bge.s	Obj01_JumpMove	; +++ if speed was already greater than the maximum, branch
000149A8 3006                       		move.w	d6,d0
000149AA                            
000149AA                            Obj01_JumpMove:
000149AA 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
000149AE                            
000149AE                            Obj01_ResetScr2:
000149AE 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
000149B4 6700                       		beq.s	loc_132A4	; if yes, branch
000149B6 6400                       		bcc.s	loc_132A0
000149B8 5878 F73E                  		addq.w	#4,($FFFFF73E).w
000149BC                            
000149BC                            loc_132A0:
000149BC 5578 F73E                  		subq.w	#2,($FFFFF73E).w
000149C0                            
000149C0                            loc_132A4:
000149C0 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
000149C6 6500                       		bcs.s	locret_132D2	; if yes, branch
000149C8 3028 0010                  		move.w	$10(a0),d0
000149CC 3200                       		move.w	d0,d1
000149CE EA41                       		asr.w	#5,d1
000149D0 6700                       		beq.s	locret_132D2
000149D2 6B00                       		bmi.s	loc_132C6
000149D4 9041                       		sub.w	d1,d0
000149D6 6400                       		bcc.s	loc_132C0
000149D8 303C 0000                  		move.w	#0,d0
000149DC                            
000149DC                            loc_132C0:
000149DC 3140 0010                  		move.w	d0,$10(a0)
000149E0 4E75                       		rts	
000149E2                            ; ===========================================================================
000149E2                            
000149E2                            loc_132C6:
000149E2 9041                       		sub.w	d1,d0
000149E4 6500                       		bcs.s	loc_132CE
000149E6 303C 0000                  		move.w	#0,d0
000149EA                            
000149EA                            loc_132CE:
000149EA 3140 0010                  		move.w	d0,$10(a0)
000149EE                            
000149EE                            locret_132D2:
000149EE 4E75                       		rts	
000149F0                            ; End of function Sonic_ChgJumpDir
000149F0                            
000149F0                            ; ===========================================================================
000149F0                            ; ---------------------------------------------------------------------------
000149F0                            ; Unused subroutine to squash Sonic
000149F0                            ; ---------------------------------------------------------------------------
000149F0 1028 0026                  		move.b	$26(a0),d0
000149F4 0600 0020                  		addi.b	#$20,d0
000149F8 0200 00C0                  		andi.b	#$C0,d0
000149FC 6600                       		bne.s	locret_13302
000149FE 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00014A02 4A41                       		tst.w	d1
00014A04 6A00                       		bpl.s	locret_13302
00014A06 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
00014A0C 317C 0000 0010             		move.w	#0,$10(a0)
00014A12 317C 0000 0012             		move.w	#0,$12(a0)
00014A18 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
00014A1E                            
00014A1E                            locret_13302:
00014A1E 4E75                       		rts	
00014A20                            
00014A20                            ; ---------------------------------------------------------------------------
00014A20                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00014A20                            ; ---------------------------------------------------------------------------
00014A20                            
00014A20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014A20                            
00014A20                            
00014A20                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
00014A20 2228 0008                  		move.l	8(a0),d1
00014A24 3028 0010                  		move.w	$10(a0),d0
00014A28 48C0                       		ext.l	d0
00014A2A E180                       		asl.l	#8,d0
00014A2C D280                       		add.l	d0,d1
00014A2E 4841                       		swap	d1
00014A30 3038 F728                  		move.w	($FFFFF728).w,d0
00014A34 0640 0010                  		addi.w	#$10,d0
00014A38 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00014A3A 6200                       		bhi.s	Boundary_Sides	; if yes, branch
00014A3C 3038 F72A                  		move.w	($FFFFF72A).w,d0
00014A40 0640 0128                  		addi.w	#$128,d0
00014A44 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00014A48 6600                       		bne.s	loc_13332
00014A4A 0640 0040                  		addi.w	#$40,d0
00014A4E                            
00014A4E                            loc_13332:
00014A4E B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00014A50 6300                       		bls.s	Boundary_Sides	; if yes, branch
00014A52                            
00014A52                            loc_13336:
00014A52 3038 F72E                  		move.w	($FFFFF72E).w,d0
00014A56 0640 00E0                  		addi.w	#$E0,d0
00014A5A B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
00014A5E 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
00014A60 4E75                       		rts	
00014A62                            ; ===========================================================================
00014A62                            
00014A62                            Boundary_Bottom:
00014A62 3038 F726                  		move.w	($FFFFF726).w,d0
00014A66 3238 F72E                  		move.w	($FFFFF72E).w,d1
00014A6A B240                       		cmp.w	d0,d1			; screen still scrolling down?
00014A6C 6D00                       		blt.s	Boundary_Bottom_locret	; if so, don't kill Sonic
00014A6E 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w	; is level SBZ2 ?
00014A74 4EF9 0000 0000             		jmp	KillSonic		; if not, kill Sonic
00014A7A 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
00014A80 4EF9 0000 0000             		jmp	KillSonic
00014A86 4238 FE30                  		clr.b	($FFFFFE30).w		; clear lamppost counter
00014A8A 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w	; restart the level
00014A90 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w	; set level to SBZ3 (LZ4)
00014A96                             
00014A96                            Boundary_Bottom_locret:
00014A96 4E75                       		rts	
00014A98                            ; ===========================================================================
00014A98                            
00014A98                            Boundary_Sides:
00014A98 3140 0008                  		move.w	d0,8(a0)
00014A9C 317C 0000 000A             		move.w	#0,$A(a0)
00014AA2 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
00014AA8 317C 0000 0014             		move.w	#0,$14(a0)
00014AAE 60A2                       		bra.s	loc_13336
00014AB0                            ; End of function Sonic_LevelBound
00014AB0                            
00014AB0                            ; ---------------------------------------------------------------------------
00014AB0                            ; Subroutine allowing Sonic to roll when he's moving
00014AB0                            ; ---------------------------------------------------------------------------
00014AB0                            
00014AB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014AB0                            
00014AB0                            
00014AB0                            Sonic_Roll:				; XREF: Obj01_MdNormal
00014AB0 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00014AB4 6600                       		bne.s	Obj01_NoRoll
00014AB6 3028 0014                  		move.w	$14(a0),d0
00014ABA 6A00                       		bpl.s	loc_13392
00014ABC 4440                       		neg.w	d0
00014ABE                            
00014ABE                            loc_13392:
00014ABE 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00014AC2 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
00014AC4 1038 F602                  		move.b	($FFFFF602).w,d0
00014AC8 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
00014ACC 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
00014ACE 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00014AD4 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
00014AD6                            
00014AD6                            Obj01_NoRoll:
00014AD6 4E75                       		rts	
00014AD8                            ; ===========================================================================
00014AD8                            
00014AD8                            Obj01_ChkRoll:
00014AD8 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
00014ADE 6700                       		beq.s	Obj01_DoRoll	; if not, branch
00014AE0 4E75                       		rts	
00014AE2                            ; ===========================================================================
00014AE2                            
00014AE2                            Obj01_DoRoll:
00014AE2 08E8 0002 0022             		bset	#2,$22(a0)
00014AE8 117C 000E 0016             		move.b	#$E,$16(a0)
00014AEE 117C 0007 0017             		move.b	#7,$17(a0)
00014AF4 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00014AFA 5A68 000C                  		addq.w	#5,$C(a0)
00014AFE 303C 00BE                  		move.w	#$BE,d0
00014B02 4EB9 0000 132C             		jsr	(PlaySound_Special).l ;	play rolling sound
00014B08 4A68 0014                  		tst.w	$14(a0)
00014B0C 6600                       		bne.s	locret_133E8
00014B0E 317C 0200 0014             		move.w	#$200,$14(a0)
00014B14                            
00014B14                            locret_133E8:
00014B14 4E75                       		rts	
00014B16                            ; End of function Sonic_Roll
00014B16                            
00014B16                            ; ---------------------------------------------------------------------------
00014B16                            ; Subroutine allowing Sonic to jump
00014B16                            ; ---------------------------------------------------------------------------
00014B16                            
00014B16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014B16                            
00014B16                            
00014B16                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00014B16 1038 F603                  		move.b	($FFFFF603).w,d0
00014B1A 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00014B1E 6700 0000                  		beq.w	locret_1348E	; if not, branch
00014B22 7000                       		moveq	#0,d0
00014B24 1028 0026                  		move.b	$26(a0),d0
00014B28 0600 0080                  		addi.b	#$80,d0
00014B2C 6100 0000                  		bsr.w	sub_14D48
00014B30 0C41 0006                  		cmpi.w	#6,d1
00014B34 6D00 0000                  		blt.w	locret_1348E
00014B38 343C 0680                  		move.w	#$680,d2
00014B3C 0828 0006 0022             		btst	#6,$22(a0)
00014B42 6700                       		beq.s	loc_1341C
00014B44 343C 0380                  		move.w	#$380,d2
00014B48                            
00014B48                            loc_1341C:
00014B48 7000                       		moveq	#0,d0
00014B4A 1028 0026                  		move.b	$26(a0),d0
00014B4E 0400 0040                  		subi.b	#$40,d0
00014B52 4EB9 0000 3274             		jsr	(CalcSine).l
00014B58 C3C2                       		muls.w	d2,d1
00014B5A E081                       		asr.l	#8,d1
00014B5C D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
00014B60 C1C2                       		muls.w	d2,d0
00014B62 E080                       		asr.l	#8,d0
00014B64 D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
00014B68 08E8 0001 0022             		bset	#1,$22(a0)
00014B6E 08A8 0005 0022             		bclr	#5,$22(a0)
00014B74 588F                       		addq.l	#4,sp
00014B76 117C 0001 003C             		move.b	#1,$3C(a0)
00014B7C 4228 0038                  		clr.b	$38(a0)
00014B80 303C 00A0                  		move.w	#$A0,d0
00014B84 4EB9 0000 132C             		jsr	(PlaySound_Special).l ;	play jumping sound
00014B8A 117C 0013 0016             		move.b	#$13,$16(a0)
00014B90 117C 0009 0017             		move.b	#9,$17(a0)
00014B96 0828 0002 0022             		btst	#2,$22(a0)
00014B9C 6600                       		bne.s	loc_13490
00014B9E 117C 000E 0016             		move.b	#$E,$16(a0)
00014BA4 117C 0007 0017             		move.b	#7,$17(a0)
00014BAA 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
00014BB0 08E8 0002 0022             		bset	#2,$22(a0)
00014BB6 5A68 000C                  		addq.w	#5,$C(a0)
00014BBA                            
00014BBA                            locret_1348E:
00014BBA 4E75                       		rts	
00014BBC                            ; ===========================================================================
00014BBC                            
00014BBC                            loc_13490:
00014BBC 08E8 0004 0022             		bset	#4,$22(a0)
00014BC2 4E75                       		rts	
00014BC4                            ; End of function Sonic_Jump
00014BC4                            
00014BC4                            
00014BC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014BC4                            
00014BC4                            
00014BC4                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
00014BC4 4A28 003C                  		tst.b	$3C(a0)
00014BC8 6700                       		beq.s	loc_134C4
00014BCA 323C FC00                  		move.w	#-$400,d1
00014BCE 0828 0006 0022             		btst	#6,$22(a0)
00014BD4 6700                       		beq.s	loc_134AE
00014BD6 323C FE00                  		move.w	#-$200,d1
00014BDA                            
00014BDA                            loc_134AE:
00014BDA B268 0012                  		cmp.w	$12(a0),d1
00014BDE 6F00                       		ble.s	locret_134C2
00014BE0 1038 F602                  		move.b	($FFFFF602).w,d0
00014BE4 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00014BE8 6600                       		bne.s	locret_134C2	; if yes, branch
00014BEA 3141 0012                  		move.w	d1,$12(a0)
00014BEE                            
00014BEE                            locret_134C2:
00014BEE 4E75                       		rts	
00014BF0                            ; ===========================================================================
00014BF0                            
00014BF0                            loc_134C4:
00014BF0 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
00014BF6 6C00                       		bge.s	locret_134D2
00014BF8 317C F040 0012             		move.w	#-$FC0,$12(a0)
00014BFE                            
00014BFE                            locret_134D2:
00014BFE 4E75                       		rts	
00014C00                            ; End of function Sonic_JumpHeight
00014C00                            
00014C00                            ; ---------------------------------------------------------------------------
00014C00                            ; Subroutine to make Sonic perform a Homing Attack
00014C00                            ; ---------------------------------------------------------------------------
00014C00                             
00014C00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014C00                            
00014C00                            Sonic_HomingAttack:
00014C00                            	include "_New\ha.asm"
00014C00                            ; ===========================================================================
00014C00                            ; ---------------------------------------------------------------------------
00014C00                            ; Subroutine to perform Homing Attack
00014C00                            ; ---------------------------------------------------------------------------
00014C00                             
00014C00                            ;Sonic_HomingAttack:      
00014C00 0C38 0002 FFEB                             cmpi.b  #2,($FFFFFFEB).w        ; already Homing?
00014C06 6700                                       beq.s   @Homing_Process         ; if yes, branch
00014C08 1038 F603                  				move.b	($FFFFF603).w,d0	; Moves the controller state to d0 so it can be analyzed and modifies without affecting the controller input
00014C0C 0200 0070                  				andi.b	#$70,d0			; ANDs it with the immediate value of ABC
00014C10 6600                                       bne.s   @Homing_Perform
00014C12 4E75                                       rts
00014C14                             
00014C14                            ; ---------------------------------------------------------------------------
00014C14                            @Homing_Process:
00014C14 5328 001F                                  subq.b  #1,$1F(a0)              ; is timer over?
00014C18 6600                                       bne.s   @SetSpeeds              ; if not, branch
00014C1A 4238 FFEB                                  clr.b   ($FFFFFFEB).w
00014C1E 4E75                                       rts
00014C20                             
00014C20                                    @SetSpeeds:
00014C20 3268 003A                                  movea.w $3A(a0),a1              ; load object to follow
00014C24 3229 000C                                  move.w  $C(a1),d1
00014C28 9268 000C                                  sub.w   $C(a0),d1               ; d1 -> Ydist
00014C2C 3429 0008                                  move.w  8(a1),d2
00014C30 9468 0008                                  sub.w   8(a0),d2                ; d2 -> Xdist
00014C34 4EB9 0000 3542                             jsr     (CalcAngle).l           ; Calcuate Angle
00014C3A 4EB9 0000 3274                             jsr     (CalcSine).l            ; Get Sine
00014C40 363C 1000                                  move.w  #$1000,d3               ; d3 -> Homing Attack Speed
00014C44 C1C3                                       muls.w  d3,d0
00014C46 C3C3                                       muls.w  d3,d1
00014C48 E080                                       asr.l   #8,d0
00014C4A E081                                       asr.l   #8,d1
00014C4C 3141 0012                                  move.w  d1,$12(a0)              ; set speed
00014C50 3140 0010                                  move.w  d0,$10(a0)              ; set speed
00014C54 3140 0014                                  move.w  d0,$14(a0)
00014C58 4E75                                       rts
00014C5A                             
00014C5A                            ; ---------------------------------------------------------------------------
00014C5A                            @Homing_Perform:
00014C5A 76FF                                       moveq   #-1,d3                  ; d3 will contain the direct distance for current d4,d5 (Piphagor yay)
00014C5C 78FF                                       moveq   #-1,d4                  ; d4 will contain the shortest X-dist
00014C5E 7AFF                                       moveq   #-1,d5                  ; d5 will contain the shortest Y-dist
00014C60 3C3C 005F                                  move.w  #$5F,d6
00014C64 43F8 D800                                  lea     ($FFFFD800).w,a1        ; Load in-level objects RAM
00014C68 3C3C 005F                                  move.w  #$5F,d6                 ; do $60 objects
00014C6C                                           
00014C6C                                    @ObjectsLoop:                  
00014C6C 4A29 0001                                  tst.b   1(a1)                   ; is object on-screen?
00014C70 6A00                                       bpl.s   @NextObject             ; if yes, branch
00014C72 4A29 0020                                  tst.b   $20(a1)                 ; load touch response
00014C76 6600                                       bne.s   @Homing_TestObject      ; if touch response is not zero, branch
00014C78                             
00014C78                                    @NextObject:
00014C78 43E9 0040                                  lea     $40(a1),a1              ; load next object slot
00014C7C 51CE FFEE                                  dbf     d6,@ObjectsLoop         ; repeat for all objects in RAM
00014C80                                           
00014C80 0C83 0000 6400                             cmpi.l  #$A0*$A0,d3             ; if Distance ^ 2 > $A0 ^ 2, quit
00014C86 6200 0000                                  bhi.w   Sonic_JumpDash
00014C8A 117C 003C 001F                             move.b  #60,$1F(a0)             ; follow object for 60 frames
00014C90 11FC 0002 FFEB                             move.b  #2,($FFFFFFEB).w        ; set flag as #2 (Homming Attack)
00014C96 303C FF93                  				move.w   #$FFFFFF93,d0
00014C9A 4EF9 0000 1304             				jmp     PlaySample
00014CA0                                        ;    move.w  #$BC,d0                 ; play JD sound
00014CA0                                        ;    jmp     (PlaySound_Special).l   ;
00014CA0                             
00014CA0                            ; ---------------------------------------------------------------------------
00014CA0                            @Homing_TestObject:
00014CA0 45FA 0000                                  lea     @Homing_ObjectList(pc),a2
00014CA4 1011                                       move.b  (a1),d0
00014CA6                                           
00014CA6                                    @CheckID:
00014CA6 B01A                                       cmp.b   (a2)+,d0                ; compare current obj ID to one in list
00014CA8 6700                                       beq.s   @CalcXDist              ; if object is in list, branch
00014CAA 62FA                                       bhi.s   @CheckID                ; if current obj ID is higer, go on looking
00014CAC 60CA                                       bra.s   @NextObject             ; the object is not in list, quit
00014CAE                                           
00014CAE                                    @CalcXDist:
00014CAE 3229 0008                                  move.w  8(a1),d1                ; d1 -> ObjX
00014CB2 9268 0008                                  sub.w   8(a0),d1                ; d1 -> ObjX - SonX
00014CB6 6A00                                       bpl.s   @ObjAhead
00014CB8                             
00014CB8                                    ; Object is behind Sonic
00014CB8 0828 0000 0022                             btst    #0,$22(a0)              ; is Sonic faced left?
00014CBE 67B8                                       beq.s   @NextObject             ; if not, we can't home at object
00014CC0 6000                                       bra.s   @CalcYDist
00014CC2                             
00014CC2                                    @ObjAhead:
00014CC2 0828 0000 0022                             btst    #0,$22(a0)              ; is Sonic faced right?
00014CC8 66AE                                       bne.s   @NextObject             ; if not, we can't home at object
00014CCA                             
00014CCA                                    @CalcYDist:
00014CCA 3429 000C                                  move.w  $C(a1),d2               ; d2 -> ObjY
00014CCE 9468 000C                                  sub.w   $C(a0),d2               ; d2 -> ObjY - SonY
00014CD2                                           
00014CD2                                    ; Calculate absolute distance ( d1 * d1 + d2 * d2 )
00014CD2 3002                                       move.w  d2,d0                   ; d0 -> d2
00014CD4 4840                                       swap    d0
00014CD6 3001                                       move.w  d1,d0                   ; d0 -> d2 d1
00014CD8 C3C1                                       muls.w  d1,d1                   ; d1 -> d1 * d1
00014CDA C5C2                                       muls.w  d2,d2                   ; d2 -> d2 * d2
00014CDC D481                                       add.l   d1,d2                   ; d2 -> d1 * d1 + d2 * d2
00014CDE B483                                       cmp.l   d3,d2                   ; is new distance shorter after all?
00014CE0 6400 FF96                                  bcc.w   @NextObject             ; if not, branch
00014CE4                             
00014CE4 2602                                       move.l  d2,d3                   ; set new distance
00014CE6 3800                                       move.w  d0,d4                   ; set new Xdist
00014CE8 4840                                       swap    d0
00014CEA 3A00                                       move.w  d0,d5                   ; set new Ydist
00014CEC 3149 003A                                  move.w  a1,$3A(a0)              ; save obj ID
00014CF0 6000 FF86                                  bra.w   @NextObject
00014CF4                             
00014CF4                             
00014CF4                            ; ---------------------------------------------------------------------------
00014CF4                            ; Object ids that are available for homming
00014CF4                            ; NOTE: They should go in increasing order (1,2,3..)
00014CF4                            ; ---------------------------------------------------------------------------
00014CF4                             
00014CF4                            @Homing_ObjectList:
00014CF4 1E1F 2226 2B2C 2D40 4243                   dc.b    $1E, $1F, $22, $26, $2B, $2C, $2D, $40, $42, $43
00014CFE 5055 6078                                  dc.b    $50, $55, $60, $78
00014D02 FF                                         dc.b    -1      ; mark end of list
00014D04 00                                         even
00014D04                             
00014D04                             
00014D04                            ; ===========================================================================
00014D04                            ; ---------------------------------------------------------------------------
00014D04                            ; Subroutine to perform Jump Dash
00014D04                            ; ---------------------------------------------------------------------------
00014D04                             
00014D04                            Sonic_JumpDash:
00014D04 4A38 FFEB                                  tst.b   ($FFFFFFEB).w           ; already Jump Dashing?
00014D08 6600                                       bne.s   @Return                 ; if yes, branch
00014D0A 11FC 0001 FFEB                             move.b  #1,($FFFFFFEB).w
00014D10 303C 0A00                                  move.w  #$A00,d0                ; set Jump Dash speed
00014D14 0828 0006 0022                             btst    #6,$22(a0)              ; is Sonic underwater
00014D1A 6700                                       beq.s   @ChkShoes
00014D1C 303C 0600                                  move.w  #$600,d0                ; set JD speed for underwater
00014D20                                   
00014D20                                    @ChkShoes:
00014D20 4A38 FE2E                                  tst.b   ($FFFFFE2E).w           ; does Sonic have speed shoes?
00014D24 6700                                       beq.s   @ChkOrientation         ; if not, branch
00014D26 0640 0200                                  addi.w  #$200,d0
00014D2A                             
00014D2A                                    @ChkOrientation:
00014D2A 0828 0000 0022                             btst    #0,$22(a0)
00014D30 6700                                       beq.s   @SetSpeeds
00014D32 4440                                       neg.w   d0
00014D34                             
00014D34                                    @SetSpeeds:
00014D34 3140 0010                                  move.w  d0,$10(a0)
00014D38 3140 0014                                  move.w  d0,$14(a0)
00014D3C 317C 0000 0012                             move.w  #0,$12(a0)
00014D42 303C FF93                  				move.w   #$FFFFFF93,d0
00014D46 4EF9 0000 1304             				jmp     PlaySample
00014D4C                                        ;    move.w  #$BC,d0                 ; play JD sound
00014D4C                                        ;    jmp     (PlaySound_Special).l   ;
00014D4C                             
00014D4C                                    @Return:
00014D4C 4E75                                       rts
00014D4E                             
00014D4E                            ; -------------------------------------------------------------------------
00014D4E                            ; Subroutine to stop Sonic, bounce him up and to give him the ability to
00014D4E                            ; Jumpdash again when he has performed a Jumpdash
00014D4E                            ; -------------------------------------------------------------------------
00014D4E                             
00014D4E                            BounceJD:
00014D4E 0C38 0002 FFEB                             cmp.b   #2,($FFFFFFEB).w; was HA flag set?
00014D54 6600                                       bne.s   BounceJD_End    ; if not, branch
00014D56 4238 FFEB                                  clr.b   ($FFFFFFEB).w   ; if yes, clear HA flag (allow Sonic to HA again)
00014D5A 4268 0010                                  clr.w   $10(a0)         ; clear X-velocity (stop sonic)
00014D5E 317C FA10 0012                             move.w  #-$5F0,$12(a0)  ; move sonic upwards
00014D64 0828 0006 0022                             btst    #6,$22(a0)      ; is sonic underwater?
00014D6A 6700                                       beq.s   BounceJD_Shoes  ; if not, branch
00014D6C 317C FCE0 0012                             move.w  #-$320,$12(a0)
00014D72                                           
00014D72                            BounceJD_Shoes:
00014D72 4A38 FE2E                                  tst.b   ($FFFFFE2E).w   ; does sonic has speed shoes?
00014D76 6700                                       beq.s   BounceJD_End    ; if not, branch
00014D78 317C F9E0 0012                             move.w  #-$620,$12(a0)  ; use -$620 for Y-velocity (move sonic upwards)
00014D7E                                           
00014D7E                            BounceJD_End:
00014D7E 4E75                                       rts                     ; return
00014D80                            ; End of function BounceJD
00014D80                            ; End of function BounceJD
00014D80                            
00014D80                            ; ---------------------------------------------------------------------------
00014D80                            ; Subroutine to make Sonic perform a spindash
00014D80                            ; ---------------------------------------------------------------------------
00014D80                             
00014D80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014D80                            
00014D80                            Sonic_SpinDash:
00014D80                            	include "_New\spindash.asm"
00014D80                            ; ---------------------------------------------------------------------------
00014D80                            ; Subroutine to make Sonic perform a spindash
00014D80                            ; ---------------------------------------------------------------------------
00014D80                             
00014D80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014D80                            
00014D80 0828 0000 0039             		btst   	#0,$39(a0)
00014D86 6600                       		bne.s	loc_1AC8E
00014D88 0C28 0008 001C             		cmpi.b	#8,$1C(a0)
00014D8E 6600                       		bne.s	locret_1AC8C
00014D90 1038 F603                  		move.b	($FFFFF603).w,d0
00014D94 0200 0070                  		andi.b	#$70,d0
00014D98 6700 0000                  		beq.w	locret_1AC8C
00014D9C 117C 0020 001C             		move.b	#$20,$1C(a0)	; changed from #9
00014DA2 303C 00D1                  		move.w	#$D1,d0		; changed from #$E0
00014DA6 4EB9 0000 132C             		jsr	(PlaySound_Special).l
00014DAC 588F                       		addq.l	#4,sp
00014DAE 08E8 0000 0039             		bset 	#0,$39(a0)
00014DB4 317C 0000 003A             		move.w	#0,$3A(a0)
00014DBA 0C28 000C 0028             		cmpi.b	#$C,$28(a0)
00014DC0 11FC 0002 D1DC             		move.b	#2,($FFFFD1DC).w	; Set the Spin Dash dust animation to $2.
00014DC6                             
00014DC6                            loc_1AC84:
00014DC6 6100 FC58                  		bsr.w	Sonic_LevelBound
00014DCA 6100 0000                  		bsr.w	Sonic_AnglePos
00014DCE                             
00014DCE                            locret_1AC8C:
00014DCE 4E75                       		rts	
00014DD0                            ; ---------------------------------------------------------------------------
00014DD0                             
00014DD0                            loc_1AC8E:
00014DD0 117C 0020 001C             		move.b	#$20,$1C(a0)
00014DD6 1038 F602                  		move.b	($FFFFF602).w,d0
00014DDA 0800 0001                  		btst	#1,d0
00014DDE 6600 0000                  		bne.w	loc_1AD30
00014DE2 117C 000E 0016             		move.b	#$E,$16(a0)
00014DE8 117C 0007 0017             		move.b	#7,$17(a0)
00014DEE 117C 0002 001C             		move.b	#2,$1C(a0)
00014DF4 5A68 000C                  		addq.w	#5,$C(a0)
00014DF8 08A8 0000 0039             		bclr 	#0,$39(a0)
00014DFE 7000                       		moveq	#0,d0
00014E00 1028 003A                  		move.b	$3A(a0),d0
00014E04 D040                       		add.w	d0,d0
00014E06 317B 0000 0014             		move.w	Dash_Speeds(pc,d0.w),$14(a0)
00014E0C 3028 0014                  		move.w	$14(a0),d0
00014E10 0440 0800                  		subi.w	#$800,d0
00014E14 D040                       		add.w	d0,d0
00014E16 0240 1F00                  		andi.w	#$1F00,d0
00014E1A 4440                       		neg.w	d0
00014E1C 0640 2000                  		addi.w	#$2000,d0
00014E20 31C0 EED0                  		move.w	d0,($FFFFEED0).w
00014E24 0828 0000 0022             		btst	#0,$22(a0)
00014E2A 6700                       		beq.s	loc_1ACF4
00014E2C 4468 0014                  		neg.w	$14(a0)
00014E30                             
00014E30                            loc_1ACF4:
00014E30 08E8 0002 0022             		bset	#2,$22(a0)
00014E36 11FC 0000 D1DC             		move.b	#0,($FFFFD1DC).w	; clear Spin Dash dust animation.
00014E3C 303C 00BC                  		move.w	#$BC,d0
00014E40 4EB9 0000 132C             		jsr	(PlaySound_Special).l
00014E46 6000                       		bra.s	loc_1AD78
00014E48                            ; ===========================================================================
00014E48 0800                       Dash_Speeds:	dc.w  $800		; 0
00014E4A 0880                       		dc.w  $880		; 1
00014E4C 0900                       		dc.w  $900		; 2
00014E4E 0980                       		dc.w  $980		; 3
00014E50 0A00                       		dc.w  $A00		; 4
00014E52 0A80                       		dc.w  $A80		; 5
00014E54 0B00                       		dc.w  $B00		; 6
00014E56 0B80                       		dc.w  $B80		; 7
00014E58 0C00                       		dc.w  $C00		; 8
00014E5A                            ; ===========================================================================
00014E5A                             
00014E5A                            loc_1AD30:				; If still charging the dash...
00014E5A 4A68 003A                  		tst.w	$3A(a0)
00014E5E 6700                       		beq.s	loc_1AD48
00014E60 3028 003A                  		move.w	$3A(a0),d0
00014E64 EA48                       		lsr.w	#5,d0
00014E66 9168 003A                  		sub.w	d0,$3A(a0)
00014E6A 6400                       		bcc.s	loc_1AD48
00014E6C 317C 0000 003A             		move.w	#0,$3A(a0)
00014E72                             
00014E72                            loc_1AD48:
00014E72 1038 F603                  		move.b	($FFFFF603).w,d0
00014E76 0200 0070                  		andi.b	#$70,d0	; 'p'
00014E7A 6700 0000                  		beq.w	loc_1AD78
00014E7E 317C 2000 001C             		move.w	#$2000,$1C(a0)
00014E84 303C 00D1                  		move.w	#$D1,d0	; 'Ã '
00014E88 11FC 0002 D1DC             		move.b	#2,$FFFFD1DC.w	; Set the Spin Dash dust animation to $2.
00014E8E 4EB9 0000 132C             		jsr	(PlaySound_Special).l
00014E94 0668 0200 003A             		addi.w	#$200,$3A(a0)
00014E9A 0C68 0800 003A             		cmpi.w	#$800,$3A(a0)
00014EA0 6500                       		bcs.s	loc_1AD78
00014EA2 317C 0800 003A             		move.w	#$800,$3A(a0)
00014EA8                             
00014EA8                            loc_1AD78:
00014EA8 588F                       		addq.l	#4,sp			; increase stack ptr
00014EAA 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00014EB0 6700                       		beq.s	loc_1AD8C
00014EB2 6400                       		bcc.s	loc_1AD88
00014EB4 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00014EB8                             
00014EB8                            loc_1AD88:
00014EB8 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00014EBC                             
00014EBC                            loc_1AD8C:
00014EBC 6100 FB62                  		bsr.w	Sonic_LevelBound
00014EC0 6100 0000                  		bsr.w	Sonic_AnglePos
00014EC4                            		;move.w	#$60,($FFFFF73E).w	; reset looking up/down
00014EC4 4E75                       		rts
00014EC6                            ; End of subroutine Sonic_SpinDash
00014EC6                            ; End of subroutine Sonic_SpinDash
00014EC6                            
00014EC6                            ; ---------------------------------------------------------------------------
00014EC6                            ; Subroutine to	slow Sonic walking up a	slope
00014EC6                            ; ---------------------------------------------------------------------------
00014EC6                            
00014EC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014EC6                            
00014EC6                            
00014EC6                            
00014EC6                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
00014EC6 1028 0026                  		move.b	$26(a0),d0
00014ECA 0600 0060                  		addi.b	#$60,d0
00014ECE 0C00 00C0                  		cmpi.b	#$C0,d0
00014ED2 6400                       		bcc.s	locret_13508
00014ED4 1028 0026                  		move.b	$26(a0),d0
00014ED8 4EB9 0000 3274             		jsr	(CalcSine).l
00014EDE C1FC 0020                  		muls.w	#$20,d0
00014EE2 E080                       		asr.l	#8,d0
00014EE4 4A68 0014                  		tst.w	$14(a0)
00014EE8 6700                       		beq.s	locret_13508
00014EEA 6B00                       		bmi.s	loc_13504
00014EEC 4A40                       		tst.w	d0
00014EEE 6700                       		beq.s	locret_13502
00014EF0 D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
00014EF4                            
00014EF4                            locret_13502:
00014EF4 4E75                       		rts	
00014EF6                            ; ===========================================================================
00014EF6                            
00014EF6                            loc_13504:
00014EF6 D168 0014                  		add.w	d0,$14(a0)
00014EFA                            
00014EFA                            locret_13508:
00014EFA 4E75                       		rts	
00014EFC                            ; End of function Sonic_SlopeResist
00014EFC                            
00014EFC                            ; ---------------------------------------------------------------------------
00014EFC                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00014EFC                            ; ---------------------------------------------------------------------------
00014EFC                            
00014EFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014EFC                            
00014EFC                            
00014EFC                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
00014EFC 1028 0026                  		move.b	$26(a0),d0
00014F00 0600 0060                  		addi.b	#$60,d0
00014F04 0C00 00C0                  		cmpi.b	#-$40,d0
00014F08 6400                       		bcc.s	locret_13544
00014F0A 1028 0026                  		move.b	$26(a0),d0
00014F0E 4EB9 0000 3274             		jsr	(CalcSine).l
00014F14 C1FC 0050                  		muls.w	#$50,d0
00014F18 E080                       		asr.l	#8,d0
00014F1A 4A68 0014                  		tst.w	$14(a0)
00014F1E 6B00                       		bmi.s	loc_1353A
00014F20 4A40                       		tst.w	d0
00014F22 6A00                       		bpl.s	loc_13534
00014F24 E480                       		asr.l	#2,d0
00014F26                            
00014F26                            loc_13534:
00014F26 D168 0014                  		add.w	d0,$14(a0)
00014F2A 4E75                       		rts	
00014F2C                            ; ===========================================================================
00014F2C                            
00014F2C                            loc_1353A:
00014F2C 4A40                       		tst.w	d0
00014F2E 6B00                       		bmi.s	loc_13540
00014F30 E480                       		asr.l	#2,d0
00014F32                            
00014F32                            loc_13540:
00014F32 D168 0014                  		add.w	d0,$14(a0)
00014F36                            
00014F36                            locret_13544:
00014F36 4E75                       		rts	
00014F38                            ; End of function Sonic_RollRepel
00014F38                            
00014F38                            ; ---------------------------------------------------------------------------
00014F38                            ; Subroutine to	push Sonic down	a slope
00014F38                            ; ---------------------------------------------------------------------------
00014F38                            
00014F38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F38                            
00014F38                            
00014F38                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
00014F38 4E71                       		nop	
00014F3A 4A28 0038                  		tst.b	$38(a0)
00014F3E 6600                       		bne.s	locret_13580
00014F40 4A68 003E                  		tst.w	$3E(a0)
00014F44 6600                       		bne.s	loc_13582
00014F46 1028 0026                  		move.b	$26(a0),d0
00014F4A 0600 0020                  		addi.b	#$20,d0
00014F4E 0200 00C0                  		andi.b	#$C0,d0
00014F52 6700                       		beq.s	locret_13580
00014F54 3028 0014                  		move.w	$14(a0),d0
00014F58 6A00                       		bpl.s	loc_1356A
00014F5A 4440                       		neg.w	d0
00014F5C                            
00014F5C                            loc_1356A:
00014F5C 0C40 0280                  		cmpi.w	#$280,d0
00014F60 6400                       		bcc.s	locret_13580
00014F62 4268 0014                  		clr.w	$14(a0)
00014F66 08E8 0001 0022             		bset	#1,$22(a0)
00014F6C 317C 001E 003E             		move.w	#$1E,$3E(a0)
00014F72                            
00014F72                            locret_13580:
00014F72 4E75                       		rts	
00014F74                            ; ===========================================================================
00014F74                            
00014F74                            loc_13582:
00014F74 5368 003E                  		subq.w	#1,$3E(a0)
00014F78 4E75                       		rts	
00014F7A                            ; End of function Sonic_SlopeRepel
00014F7A                            
00014F7A                            ; ---------------------------------------------------------------------------
00014F7A                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00014F7A                            ; ---------------------------------------------------------------------------
00014F7A                            
00014F7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F7A                            
00014F7A                            
00014F7A                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
00014F7A 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00014F7E 6700                       		beq.s	locret_135A2	; if already 0,	branch
00014F80 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00014F82                            
00014F82 5400                       		addq.b	#2,d0		; increase angle
00014F84 6400                       		bcc.s	loc_13596
00014F86 7000                       		moveq	#0,d0
00014F88                            
00014F88                            loc_13596:
00014F88 6000                       		bra.s	loc_1359E
00014F8A                            ; ===========================================================================
00014F8A                            
00014F8A                            loc_13598:
00014F8A 5500                       		subq.b	#2,d0		; decrease angle
00014F8C 6400                       		bcc.s	loc_1359E
00014F8E 7000                       		moveq	#0,d0
00014F90                            
00014F90                            loc_1359E:
00014F90 1140 0026                  		move.b	d0,$26(a0)
00014F94                            
00014F94                            locret_135A2:
00014F94 4E75                       		rts	
00014F96                            ; End of function Sonic_JumpAngle
00014F96                            
00014F96                            ; ---------------------------------------------------------------------------
00014F96                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
00014F96                            ; ---------------------------------------------------------------------------
00014F96                            
00014F96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F96                            
00014F96                            
00014F96                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
00014F96 3228 0010                  		move.w	$10(a0),d1
00014F9A 3428 0012                  		move.w	$12(a0),d2
00014F9E 4EB9 0000 3542             		jsr	(CalcAngle).l
00014FA4 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
00014FA8 0400 0020                  		subi.b	#$20,d0
00014FAC 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00014FB0 0200 00C0                  		andi.b	#$C0,d0
00014FB4 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
00014FB8 0C00 0040                  		cmpi.b	#$40,d0
00014FBC 6700 0000                  		beq.w	loc_13680
00014FC0 0C00 0080                  		cmpi.b	#$80,d0
00014FC4 6700 0000                  		beq.w	loc_136E2
00014FC8 0C00 00C0                  		cmpi.b	#-$40,d0
00014FCC 6700 0000                  		beq.w	loc_1373E
00014FD0 6100 0000                  		bsr.w	Sonic_HitWall
00014FD4 4A41                       		tst.w	d1
00014FD6 6A00                       		bpl.s	loc_135F0
00014FD8 9368 0008                  		sub.w	d1,8(a0)
00014FDC 317C 0000 0010             		move.w	#0,$10(a0)
00014FE2                            
00014FE2                            loc_135F0:
00014FE2 6100 0000                  		bsr.w	sub_14EB4
00014FE6 4A41                       		tst.w	d1
00014FE8 6A00                       		bpl.s	loc_13602
00014FEA D368 0008                  		add.w	d1,8(a0)
00014FEE 317C 0000 0010             		move.w	#0,$10(a0)
00014FF4                            
00014FF4                            loc_13602:
00014FF4 6100 0000                  		bsr.w	Sonic_HitFloor
00014FF8 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00014FFC 4A41                       		tst.w	d1
00014FFE 6A00                       		bpl.s	locret_1367E
00015000 1428 0012                  		move.b	$12(a0),d2
00015004 5002                       		addq.b	#8,d2
00015006 4402                       		neg.b	d2
00015008 B202                       		cmp.b	d2,d1
0001500A 6C00                       		bge.s	loc_1361E
0001500C B002                       		cmp.b	d2,d0
0001500E 6D00                       		blt.s	locret_1367E
00015010                            
00015010                            loc_1361E:
00015010 D368 000C                  		add.w	d1,$C(a0)
00015014 1143 0026                  		move.b	d3,$26(a0)
00015018 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001501C 117C 0000 001C             		move.b	#0,$1C(a0)
00015022 1003                       		move.b	d3,d0
00015024 0600 0020                  		addi.b	#$20,d0
00015028 0200 0040                  		andi.b	#$40,d0
0001502C 6600                       		bne.s	loc_1365C
0001502E 1003                       		move.b	d3,d0
00015030 0600 0010                  		addi.b	#$10,d0
00015034 0200 0020                  		andi.b	#$20,d0
00015038 6700                       		beq.s	loc_1364E
0001503A E0E8 0012                  		asr	$12(a0)
0001503E 6000                       		bra.s	loc_13670
00015040                            ; ===========================================================================
00015040                            
00015040                            loc_1364E:
00015040 317C 0000 0012             		move.w	#0,$12(a0)
00015046 3168 0010 0014             		move.w	$10(a0),$14(a0)
0001504C 4E75                       		rts	
0001504E                            ; ===========================================================================
0001504E                            
0001504E                            loc_1365C:
0001504E 317C 0000 0010             		move.w	#0,$10(a0)
00015054 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
0001505A 6F00                       		ble.s	loc_13670
0001505C 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
00015062                            
00015062                            loc_13670:
00015062 3168 0012 0014             		move.w	$12(a0),$14(a0)
00015068 4A03                       		tst.b	d3
0001506A 6A00                       		bpl.s	locret_1367E
0001506C 4468 0014                  		neg.w	$14(a0)
00015070                            
00015070                            locret_1367E:
00015070 4E75                       		rts	
00015072                            ; ===========================================================================
00015072                            
00015072                            loc_13680:
00015072 6100 0000                  		bsr.w	Sonic_HitWall
00015076 4A41                       		tst.w	d1
00015078 6A00                       		bpl.s	loc_1369A
0001507A 9368 0008                  		sub.w	d1,8(a0)
0001507E 317C 0000 0010             		move.w	#0,$10(a0)
00015084 3168 0012 0014             		move.w	$12(a0),$14(a0)
0001508A 4E75                       		rts	
0001508C                            ; ===========================================================================
0001508C                            
0001508C                            loc_1369A:
0001508C 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00015090 4A41                       		tst.w	d1
00015092 6A00                       		bpl.s	loc_136B4
00015094 9368 000C                  		sub.w	d1,$C(a0)
00015098 4A68 0012                  		tst.w	$12(a0)
0001509C 6A00                       		bpl.s	locret_136B2
0001509E 317C 0000 0012             		move.w	#0,$12(a0)
000150A4                            
000150A4                            locret_136B2:
000150A4 4E75                       		rts	
000150A6                            ; ===========================================================================
000150A6                            
000150A6                            loc_136B4:
000150A6 4A68 0012                  		tst.w	$12(a0)
000150AA 6B00                       		bmi.s	locret_136E0
000150AC 6100 0000                  		bsr.w	Sonic_HitFloor
000150B0 4A41                       		tst.w	d1
000150B2 6A00                       		bpl.s	locret_136E0
000150B4 D368 000C                  		add.w	d1,$C(a0)
000150B8 1143 0026                  		move.b	d3,$26(a0)
000150BC 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000150C0 117C 0000 001C             		move.b	#0,$1C(a0)
000150C6 317C 0000 0012             		move.w	#0,$12(a0)
000150CC 3168 0010 0014             		move.w	$10(a0),$14(a0)
000150D2                            
000150D2                            locret_136E0:
000150D2 4E75                       		rts	
000150D4                            ; ===========================================================================
000150D4                            
000150D4                            loc_136E2:
000150D4 6100 0000                  		bsr.w	Sonic_HitWall
000150D8 4A41                       		tst.w	d1
000150DA 6A00                       		bpl.s	loc_136F4
000150DC 9368 0008                  		sub.w	d1,8(a0)
000150E0 317C 0000 0010             		move.w	#0,$10(a0)
000150E6                            
000150E6                            loc_136F4:
000150E6 6100 0000                  		bsr.w	sub_14EB4
000150EA 4A41                       		tst.w	d1
000150EC 6A00                       		bpl.s	loc_13706
000150EE D368 0008                  		add.w	d1,8(a0)
000150F2 317C 0000 0010             		move.w	#0,$10(a0)
000150F8                            
000150F8                            loc_13706:
000150F8 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000150FC 4A41                       		tst.w	d1
000150FE 6A00                       		bpl.s	locret_1373C
00015100 9368 000C                  		sub.w	d1,$C(a0)
00015104 1003                       		move.b	d3,d0
00015106 0600 0020                  		addi.b	#$20,d0
0001510A 0200 0040                  		andi.b	#$40,d0
0001510E 6600                       		bne.s	loc_13726
00015110 317C 0000 0012             		move.w	#0,$12(a0)
00015116 4E75                       		rts	
00015118                            ; ===========================================================================
00015118                            
00015118                            loc_13726:
00015118 1143 0026                  		move.b	d3,$26(a0)
0001511C 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00015120 3168 0012 0014             		move.w	$12(a0),$14(a0)
00015126 4A03                       		tst.b	d3
00015128 6A00                       		bpl.s	locret_1373C
0001512A 4468 0014                  		neg.w	$14(a0)
0001512E                            
0001512E                            locret_1373C:
0001512E 4E75                       		rts	
00015130                            ; ===========================================================================
00015130                            
00015130                            loc_1373E:
00015130 6100 0000                  		bsr.w	sub_14EB4
00015134 4A41                       		tst.w	d1
00015136 6A00                       		bpl.s	loc_13758
00015138 D368 0008                  		add.w	d1,8(a0)
0001513C 317C 0000 0010             		move.w	#0,$10(a0)
00015142 3168 0012 0014             		move.w	$12(a0),$14(a0)
00015148 4E75                       		rts	
0001514A                            ; ===========================================================================
0001514A                            
0001514A                            loc_13758:
0001514A 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
0001514E 4A41                       		tst.w	d1
00015150 6A00                       		bpl.s	loc_13772
00015152 9368 000C                  		sub.w	d1,$C(a0)
00015156 4A68 0012                  		tst.w	$12(a0)
0001515A 6A00                       		bpl.s	locret_13770
0001515C 317C 0000 0012             		move.w	#0,$12(a0)
00015162                            
00015162                            locret_13770:
00015162 4E75                       		rts	
00015164                            ; ===========================================================================
00015164                            
00015164                            loc_13772:
00015164 4A68 0012                  		tst.w	$12(a0)
00015168 6B00                       		bmi.s	locret_1379E
0001516A 6100 0000                  		bsr.w	Sonic_HitFloor
0001516E 4A41                       		tst.w	d1
00015170 6A00                       		bpl.s	locret_1379E
00015172 D368 000C                  		add.w	d1,$C(a0)
00015176 1143 0026                  		move.b	d3,$26(a0)
0001517A 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001517E 117C 0000 001C             		move.b	#0,$1C(a0)
00015184 317C 0000 0012             		move.w	#0,$12(a0)
0001518A 3168 0010 0014             		move.w	$10(a0),$14(a0)
00015190                            
00015190                            locret_1379E:
00015190 4E75                       		rts	
00015192                            ; End of function Sonic_Floor
00015192                            
00015192                            ; ---------------------------------------------------------------------------
00015192                            ; Subroutine to	reset Sonic's mode when he lands on the floor
00015192                            ; ---------------------------------------------------------------------------
00015192                            
00015192                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015192                            
00015192                            
00015192                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
00015192 4238 FFEB                  		clr.b	($FFFFFFEB).w	; clear jumpdash flag
00015196 0828 0004 0022             		btst	#4,$22(a0)
0001519C 6700                       		beq.s	loc_137AE
0001519E 4E71                       		nop	
000151A0 4E71                       		nop	
000151A2 4E71                       		nop	
000151A4                            
000151A4                            loc_137AE:
000151A4 08A8 0005 0022             		bclr	#5,$22(a0)
000151AA 08A8 0001 0022             		bclr	#1,$22(a0)
000151B0 08A8 0004 0022             		bclr	#4,$22(a0)
000151B6 0828 0002 0022             		btst	#2,$22(a0)
000151BC 6700                       		beq.s	loc_137E4
000151BE 08A8 0002 0022             		bclr	#2,$22(a0)
000151C4 117C 0013 0016             		move.b	#$13,$16(a0)
000151CA 117C 0009 0017             		move.b	#9,$17(a0)
000151D0 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
000151D6 5B68 000C                  		subq.w	#5,$C(a0)
000151DA                            
000151DA                            loc_137E4:
000151DA 117C 0000 003C             		move.b	#0,$3C(a0)
000151E0 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
000151E6 4E75                       		rts	
000151E8                            ; End of function Sonic_ResetOnFloor
000151E8                            
000151E8                            ; ===========================================================================
000151E8                            ; ---------------------------------------------------------------------------
000151E8                            ; Sonic	when he	gets hurt
000151E8                            ; ---------------------------------------------------------------------------
000151E8                            
000151E8                            Obj01_Hurt:				; XREF: Obj01_Index
000151E8 4EB9 0000 E736             		jsr	SpeedToPos
000151EE 0668 0030 0012             		addi.w	#$30,$12(a0)
000151F4 0828 0006 0022             		btst	#6,$22(a0)
000151FA 6700                       		beq.s	loc_1380C
000151FC 0468 0020 0012             		subi.w	#$20,$12(a0)
00015202                            
00015202                            loc_1380C:
00015202 6100 0000                  		bsr.w	Sonic_HurtStop
00015206 6100 F818                  		bsr.w	Sonic_LevelBound
0001520A 6100 F102                  		bsr.w	Sonic_RecordPos
0001520E 6100 F118                  		bsr.w 	Sonic_Water
00015212 6100 0000                  		bsr.w	Sonic_Animate
00015216 6100 0000                  		bsr.w	LoadSonicDynPLC
0001521A 4EF9 0000 E75C             		jmp	DisplaySprite
00015220                            
00015220                            ; ---------------------------------------------------------------------------
00015220                            ; Subroutine to	stop Sonic falling after he's been hurt
00015220                            ; ---------------------------------------------------------------------------
00015220                            
00015220                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015220                            
00015220                            
00015220                            Sonic_HurtStop:				; XREF: Obj01_Hurt
00015220 3038 F72E                  		move.w	($FFFFF72E).w,d0
00015224 0640 00E0                  		addi.w	#$E0,d0
00015228 B068 000C                  		cmp.w	$C(a0),d0
0001522C 6500 0000                  		bcs.w	KillSonic
00015230 6100 FD64                  		bsr.w	Sonic_Floor
00015234 0828 0001 0022             		btst	#1,$22(a0)
0001523A 6600                       		bne.s	locret_13860
0001523C 7000                       		moveq	#0,d0
0001523E 3140 0012                  		move.w	d0,$12(a0)
00015242 3140 0010                  		move.w	d0,$10(a0)
00015246 3140 0014                  		move.w	d0,$14(a0)
0001524A 117C 0000 001C             		move.b	#0,$1C(a0)
00015250 5528 0024                  		subq.b	#2,$24(a0)
00015254 317C 0078 0030             		move.w	#$78,$30(a0)
0001525A                            
0001525A                            locret_13860:
0001525A 4E75                       		rts	
0001525C                            ; End of function Sonic_HurtStop
0001525C                            
0001525C                            ; ===========================================================================
0001525C                            ; ---------------------------------------------------------------------------
0001525C                            ; Sonic	when he	dies
0001525C                            ; ---------------------------------------------------------------------------
0001525C                            
0001525C                            Obj01_Death:				; XREF: Obj01_Index
0001525C 6100 0000                  		bsr.w	GameOver
00015260 4EB9 0000 E70A             		jsr	ObjectFall
00015266 6100 F0A6                  		bsr.w	Sonic_RecordPos
0001526A 6100 0000                  		bsr.w	Sonic_Animate
0001526E 6100 0000                  		bsr.w	LoadSonicDynPLC
00015272 4EF9 0000 E75C             		jmp	DisplaySprite
00015278                            
00015278                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015278                            
00015278                            
00015278                            GameOver:				; XREF: Obj01_Death
00015278 3038 F704                  		move.w	($FFFFF704).w,d0
0001527C 0640 0100                  		addi.w	#$100,d0
00015280 B068 000C                  		cmp.w	$C(a0),d0
00015284 6C00 0000                  		bge.w	locret_13900
00015288 317C FFC8 0012             		move.w	#-$38,$12(a0)
0001528E 5428 0024                  		addq.b	#2,$24(a0)
00015292 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00015296 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
0001529A 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
0001529E 6600                       		bne.s	loc_138D4
000152A0 317C 0000 003A             		move.w	#0,$3A(a0)
000152A6 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
000152AC 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
000152B2 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
000152B8 4238 FE1A                  		clr.b	($FFFFFE1A).w
000152BC                            
000152BC                            loc_138C2:
000152BC 303C 008F                  		move.w	#$8F,d0
000152C0 4EB9 0000 1326             		jsr	(PlaySound).l	; play game over music
000152C6 7003                       		moveq	#3,d0
000152C8 4EF9 0000 1532             		jmp	(LoadPLC).l	; load game over patterns
000152CE                            ; ===========================================================================
000152CE                            
000152CE                            loc_138D4:
000152CE 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
000152D4 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
000152D8 6700                       		beq.s	locret_13900	; if not, branch
000152DA 317C 0000 003A             		move.w	#0,$3A(a0)
000152E0 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
000152E6 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
000152EC 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
000152F2 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
000152F8 60C2                       		bra.s	loc_138C2
000152FA                            ; ===========================================================================
000152FA                            
000152FA                            locret_13900:
000152FA 4E75                       		rts	
000152FC                            ; End of function GameOver
000152FC                            
000152FC                            ; ===========================================================================
000152FC                            ; ---------------------------------------------------------------------------
000152FC                            ; Sonic	when the level is restarted
000152FC                            ; ---------------------------------------------------------------------------
000152FC                            
000152FC                            Obj01_ResetLevel:			; XREF: Obj01_Index
000152FC 4A68 003A                  		tst.w	$3A(a0)
00015300 6700                       		beq.s	locret_13914
00015302 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00015306 6600                       		bne.s	locret_13914
00015308 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
0001530E                            
0001530E                            locret_13914:
0001530E 4E75                       		rts	
00015310                            
00015310                            ; ---------------------------------------------------------------------------
00015310                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
00015310                            ; ---------------------------------------------------------------------------
00015310                            
00015310                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015310                            
00015310                            
00015310                            Sonic_Loops:				; XREF: Obj01_Control
00015310 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
00015316 6700                       		beq.s	loc_13926	; if yes, branch
00015318 4A38 FE10                  		tst.b	($FFFFFE10).w	; is level GHZ ?
0001531C 6600 0000                  		bne.w	locret_139C2	; if not, branch
00015320                            
00015320                            loc_13926:
00015320 3028 000C                  		move.w	$C(a0),d0
00015324 E248                       		lsr.w	#1,d0
00015326 0240 0380                  		andi.w	#$380,d0
0001532A 1228 0008                  		move.b	8(a0),d1
0001532E 0241 007F                  		andi.w	#$7F,d1
00015332 D041                       		add.w	d1,d0
00015334 43F8 A400                  		lea	($FFFFA400).w,a1
00015338 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
0001533C B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
00015340 6700 F796                  		beq.w	Obj01_ChkRoll
00015344 B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
00015348 6700 F78E                  		beq.w	Obj01_ChkRoll
0001534C B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
00015350 6700                       		beq.s	loc_13976
00015352 B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
00015356 6700                       		beq.s	loc_13966
00015358 08A8 0006 0001             		bclr	#6,1(a0)
0001535E 4E75                       		rts	
00015360                            ; ===========================================================================
00015360                            
00015360                            loc_13966:
00015360 0828 0001 0022             		btst	#1,$22(a0)
00015366 6700                       		beq.s	loc_13976
00015368 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
0001536E 4E75                       		rts	
00015370                            ; ===========================================================================
00015370                            
00015370                            loc_13976:
00015370 3428 0008                  		move.w	8(a0),d2
00015374 0C02 002C                  		cmpi.b	#$2C,d2
00015378 6400                       		bcc.s	loc_13988
0001537A 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00015380 4E75                       		rts	
00015382                            ; ===========================================================================
00015382                            
00015382                            loc_13988:
00015382 0C02 00E0                  		cmpi.b	#-$20,d2
00015386 6500                       		bcs.s	loc_13996
00015388 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
0001538E 4E75                       		rts	
00015390                            ; ===========================================================================
00015390                            
00015390                            loc_13996:
00015390 0828 0006 0001             		btst	#6,1(a0)
00015396 6600                       		bne.s	loc_139B2
00015398 1228 0026                  		move.b	$26(a0),d1
0001539C 6700                       		beq.s	locret_139C2
0001539E 0C01 0080                  		cmpi.b	#-$80,d1
000153A2 6200                       		bhi.s	locret_139C2
000153A4 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
000153AA 4E75                       		rts	
000153AC                            ; ===========================================================================
000153AC                            
000153AC                            loc_139B2:
000153AC 1228 0026                  		move.b	$26(a0),d1
000153B0 0C01 0080                  		cmpi.b	#-$80,d1
000153B4 6300                       		bls.s	locret_139C2
000153B6 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
000153BC                            
000153BC                            locret_139C2:
000153BC 4E75                       		rts	
000153BE                            ; End of function Sonic_Loops
000153BE                            
000153BE                            ; ---------------------------------------------------------------------------
000153BE                            ; Subroutine to	animate	Sonic's sprites
000153BE                            ; ---------------------------------------------------------------------------
000153BE                            
000153BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000153BE                            
000153BE                            
000153BE                            Sonic_Animate:				; XREF: Obj01_Control; et al
000153BE 43F9 0000 0000             		lea	(SonicAniData).l,a1
000153C4 7000                       		moveq	#0,d0
000153C6 1028 001C                  		move.b	$1C(a0),d0
000153CA B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
000153CE 6700                       		beq.s	SAnim_Do	; if not, branch
000153D0 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
000153D4 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
000153DA 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
000153E0                            
000153E0                            SAnim_Do:
000153E0 D040                       		add.w	d0,d0
000153E2 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
000153E6 1011                       		move.b	(a1),d0
000153E8 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
000153EA 1228 0022                  		move.b	$22(a0),d1
000153EE 0201 0001                  		andi.b	#1,d1
000153F2 0228 00FC 0001             		andi.b	#$FC,1(a0)
000153F8 8328 0001                  		or.b	d1,1(a0)
000153FC 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00015400 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
00015402 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
00015406                            
00015406                            SAnim_Do2:
00015406 7200                       		moveq	#0,d1
00015408 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0001540C 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
00015410 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
00015412                            
00015412                            SAnim_Next:
00015412 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
00015416 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0001541A                            
0001541A                            SAnim_Delay:
0001541A 4E75                       		rts	
0001541C                            ; ===========================================================================
0001541C                            
0001541C                            SAnim_End_FF:
0001541C 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0001541E 6600                       		bne.s	SAnim_End_FE	; if not, branch
00015420 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
00015426 1029 0001                  		move.b	1(a1),d0	; read sprite number
0001542A 60E6                       		bra.s	SAnim_Next
0001542C                            ; ===========================================================================
0001542C                            
0001542C                            SAnim_End_FE:
0001542C 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0001542E 6600                       		bne.s	SAnim_End_FD	; if not, branch
00015430 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
00015434 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
00015438 9200                       		sub.b	d0,d1
0001543A 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0001543E 60D2                       		bra.s	SAnim_Next
00015440                            ; ===========================================================================
00015440                            
00015440                            SAnim_End_FD:
00015440 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
00015442 6600                       		bne.s	SAnim_End	; if not, branch
00015444 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0001544A                            
0001544A                            SAnim_End:
0001544A 4E75                       		rts	
0001544C                            ; ===========================================================================
0001544C                            
0001544C                            SAnim_WalkRun:				; XREF: SAnim_Do
0001544C 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00015450 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
00015452 5200                       		addq.b	#1,d0		; is animation walking/running?
00015454 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
00015458 7200                       		moveq	#0,d1
0001545A 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
0001545E 1428 0022                  		move.b	$22(a0),d2
00015462 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
00015466 6600                       		bne.s	loc_13A70	; if yes, branch
00015468 4600                       		not.b	d0		; reverse angle
0001546A                            
0001546A                            loc_13A70:
0001546A 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
0001546E 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
00015470 7203                       		moveq	#3,d1
00015472                            
00015472                            loc_13A78:
00015472 0228 00FC 0001             		andi.b	#$FC,1(a0)
00015478 B302                       		eor.b	d1,d2
0001547A 8528 0001                  		or.b	d2,1(a0)
0001547E 0828 0005 0022             		btst	#5,$22(a0)
00015484 6600 0000                  		bne.w	SAnim_Push
00015488 E808                       		lsr.b	#4,d0		; divide angle by $10
0001548A 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
0001548E 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00015492 6A00                       		bpl.s	loc_13A9C
00015494 4442                       		neg.w	d2
00015496                            
00015496                            loc_13A9C:
00015496 43F9 0000 0000             		lea (SonAni_3rdRun).l,a1
0001549C 0C42 0A00                  		cmpi.w #$A00,d2 ; is Sonic at super speed?
000154A0 6400                       		bcc.s loc_13AB4 ; if yes, branch
000154A2 43F9 0000 0000             		lea (SonAni_Run).l,a1 ; use running animation
000154A8 0C42 0600                  		cmpi.w #$600,d2 ; is Sonic at running speed?
000154AC 6400                       		bcc.s loc_13AB4 ; if yes, branch
000154AE 43F9 0000 0000             		lea (SonAni_Walk).l,a1 ; use walking animation
000154B4 1200                       		move.b d0,d1
000154B6 E209                       		lsr.b #1,d1
000154B8 D001                       		add.b d1,d0
000154BA                            
000154BA                            loc_13AB4:
000154BA D000                       		add.b	d0,d0
000154BC 1600                       		move.b	d0,d3
000154BE 4442                       		neg.w	d2
000154C0 0642 0800                  		addi.w	#$800,d2
000154C4 6A00                       		bpl.s	loc_13AC2
000154C6 7400                       		moveq	#0,d2
000154C8                            
000154C8                            loc_13AC2:
000154C8 E04A                       		lsr.w	#8,d2
000154CA 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000154CE 6100 FF36                  		bsr.w	SAnim_Do2
000154D2 D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
000154D6 4E75                       		rts	
000154D8                            ; ===========================================================================
000154D8                            
000154D8                            SAnim_RollJump:				; XREF: SAnim_WalkRun
000154D8 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
000154DA 6600                       		bne.s	SAnim_Push	; if not, branch
000154DC 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
000154E0 6A00                       		bpl.s	loc_13ADE
000154E2 4442                       		neg.w	d2
000154E4                            
000154E4                            loc_13ADE:
000154E4 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
000154EA 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
000154EE 6400                       		bcc.s	loc_13AF0	; if yes, branch
000154F0 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
000154F6                            
000154F6                            loc_13AF0:
000154F6 4442                       		neg.w	d2
000154F8 0642 0400                  		addi.w	#$400,d2
000154FC 6A00                       		bpl.s	loc_13AFA
000154FE 7400                       		moveq	#0,d2
00015500                            
00015500                            loc_13AFA:
00015500 E04A                       		lsr.w	#8,d2
00015502 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00015506 1228 0022                  		move.b	$22(a0),d1
0001550A 0201 0001                  		andi.b	#1,d1
0001550E 0228 00FC 0001             		andi.b	#$FC,1(a0)
00015514 8328 0001                  		or.b	d1,1(a0)
00015518 6000 FEEC                  		bra.w	SAnim_Do2
0001551C                            ; ===========================================================================
0001551C                            
0001551C                            SAnim_Push:				; XREF: SAnim_RollJump
0001551C 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00015520 6B00                       		bmi.s	loc_13B1E
00015522 4442                       		neg.w	d2
00015524                            
00015524                            loc_13B1E:
00015524 0642 0800                  		addi.w	#$800,d2
00015528 6A00                       		bpl.s	loc_13B26
0001552A 7400                       		moveq	#0,d2
0001552C                            
0001552C                            loc_13B26:
0001552C EC4A                       		lsr.w	#6,d2
0001552E 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00015532 43F9 0000 0000             		lea	(SonAni_Push).l,a1
00015538 1228 0022                  		move.b	$22(a0),d1
0001553C 0201 0001                  		andi.b	#1,d1
00015540 0228 00FC 0001             		andi.b	#$FC,1(a0)
00015546 8328 0001                  		or.b	d1,1(a0)
0001554A 6000 FEBA                  		bra.w	SAnim_Do2
0001554E                            ; End of function Sonic_Animate
0001554E                            
0001554E                            ; ===========================================================================
0001554E                            SonicAniData:
0001554E                            	include "_anim\Sonic.asm"
0001554E                            ; ---------------------------------------------------------------------------
0001554E                            ; Animation script - Sonic
0001554E                            ; ---------------------------------------------------------------------------
0001554E 0000                       		dc.w SonAni_Walk-SonicAniData
00015550 0000                       		dc.w SonAni_Run-SonicAniData
00015552 0000                       		dc.w SonAni_Roll-SonicAniData
00015554 0000                       		dc.w SonAni_Roll2-SonicAniData
00015556 0000                       		dc.w SonAni_Push-SonicAniData
00015558 0000                       		dc.w SonAni_Wait-SonicAniData
0001555A 0000                       		dc.w SonAni_Balance-SonicAniData
0001555C 0000                       		dc.w SonAni_LookUp-SonicAniData ;7
0001555E 0000                       		dc.w SonAni_Duck-SonicAniData
00015560 0000                       		dc.w SonAni_Warp1-SonicAniData
00015562 0000                       		dc.w SonAni_Warp2-SonicAniData
00015564 0000                       		dc.w SonAni_Warp3-SonicAniData
00015566 0000                       		dc.w SonAni_Warp4-SonicAniData
00015568 0000                       		dc.w SonAni_Stop-SonicAniData
0001556A 0000                       		dc.w SonAni_Float1-SonicAniData
0001556C 0000                       		dc.w SonAni_Float2-SonicAniData
0001556E 0000                       		dc.w SonAni_Spring-SonicAniData
00015570 0000                       		dc.w SonAni_LZHang-SonicAniData
00015572 0000                       		dc.w SonAni_Leap1-SonicAniData
00015574 0000                       		dc.w SonAni_Leap2-SonicAniData
00015576 0000                       		dc.w SonAni_Surf-SonicAniData
00015578 0000                       		dc.w SonAni_Bubble-SonicAniData
0001557A 0000                       		dc.w SonAni_Death1-SonicAniData
0001557C 0000                       		dc.w SonAni_Drown-SonicAniData
0001557E 0000                       		dc.w SonAni_Death2-SonicAniData
00015580 0000                       		dc.w SonAni_Shrink-SonicAniData
00015582 0000                       		dc.w SonAni_Hurt-SonicAniData
00015584 0000                       		dc.w SonAni_LZSlide-SonicAniData
00015586 0000                       		dc.w SonAni_Blank-SonicAniData
00015588 0000                       		dc.w SonAni_Float3-SonicAniData
0001558A 0000                       		dc.w SonAni_Float4-SonicAniData
0001558C 0000                       		dc.w SonAni_3rdRun-SonicAniData
0001558E 0000                       		dc.w SonAni_SpinDash-SonicAniData	;20
00015590 0000                       		dc.w SonAni_DashCharge-SonicAniData	;21
00015592                            
00015592 FF08 090A 0B06 07FF        SonAni_Walk:	dc.b $FF, 8, 9,	$A, $B,	6, 7, $FF
0001559A FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
000155A2 FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
000155AA FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
000155B2 FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
000155BA 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 3, 4, $FE, 2, 0
000155CE 1F3A 3BFF                  SonAni_Balance:	dc.b $1F, $3A, $3B, $FF
000155D2 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
000155D6 1739 58FF 00               SonAni_Duck:	dc.b $17, $39, $58, $FF, 0
000155DB 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
000155DF 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
000155E3 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
000155E7 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
000155EB 0737 38FF                  SonAni_Stop:	dc.b 7,	$37, $38, $FF
000155EF 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
000155F3 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
000155FB 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
000155FF 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
00015603 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
00015609 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
0001560F 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
00015613 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
0001561B 204B FF00                  SonAni_Death1:	dc.b $20, $4B, $FF, 0
0001561F 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
00015623 034D FF00                  SonAni_Death2:	dc.b 3,	$4D, $FF, 0
00015627 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
00015631 0355 FF00                  SonAni_Hurt:	dc.b 3,	$55, $FF, 0
00015635 0755 57FF                  SonAni_LZSlide:	dc.b 7, $55, $57, $FF
00015639 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
0001563D 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
00015645 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
00015649 FF59 5A5B 5CFF FFFF        SonAni_3rdRun:	dc.b $FF, $59, $5A, $5B, $5C, $FF, $FF,	$FF
00015651 0069 6A69 6B69 6C69 6D69+  SonAni_SpinDash:	dc.b 0, $69, $6A, $69, $6B, $69, $6C, $69, $6D, $69, $6E, $FF
0001565D 0008 0808 0808 0808 08     SonAni_DashCharge:	dc.b 0,  8, 8, 8, 8, 8, 8, 8, 8
00015666 0909 0909 0A0A 2121        		dc.b	9, 9, 9, 9, $A, $A, $21, $21
0001566E 1E1F 2021 1E1F 2021        		dc.b	$1E,  $1F,  $20,  $21, $1E,  $1F,  $20,  $21
00015676 595A 5B5C FE04 FE          		dc.b	$59,  $5A,  $5B,  $5C, -2, 4, $FE
0001567E 00                         		even
0001567E                            ;SonAni_SpinDash:	dc.b 0, $58, $59, $58, $5A, $58, $5B, $58, $5C, $58, $5D, $FF
0001567E                            		even
0001567E                            		even
0001567E                            
0001567E                            ; ---------------------------------------------------------------------------
0001567E                            ; Sonic	pattern	loading	subroutine
0001567E                            ; ---------------------------------------------------------------------------
0001567E                            
0001567E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001567E                            
0001567E                            
0001567E                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
0001567E 7000                       		moveq	#0,d0
00015680 1028 001A                  		move.b	$1A(a0),d0	; load frame number
00015684 B038 F766                  		cmp.b	($FFFFF766).w,d0
00015688 6700                       		beq.s	locret_13C96
0001568A 11C0 F766                  		move.b	d0,($FFFFF766).w
0001568E 45F9 0000 0000             		lea	(SonicDynPLC).l,a2
00015694 D040                       		add.w	d0,d0
00015696 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001569A 7A00                       		moveq	#0,d5
0001569C 1A1A                       		move.b	(a2)+,d5
0001569E 5345                       		subq.w	#1,d5
000156A0 6B00                       		bmi.s	locret_13C96
000156A2 383C F000                  		move.w	#$F000,d4
000156A6 2C3C 0000 0000             		move.l	#Art_Sonic,d6
000156AC                             
000156AC                            SPLC_ReadEntry:
000156AC 7200                       		moveq	#0,d1
000156AE 121A                       		move.b	(a2)+,d1
000156B0 E149                       		lsl.w	#8,d1
000156B2 121A                       		move.b	(a2)+,d1
000156B4 3601                       		move.w	d1,d3
000156B6 E04B                       		lsr.w	#8,d3
000156B8 0243 00F0                  		andi.w	#$F0,d3
000156BC 0643 0010                  		addi.w	#$10,d3
000156C0 0241 0FFF                  		andi.w	#$FFF,d1
000156C4 EB89                       		lsl.l	#5,d1
000156C6 D286                       		add.l	d6,d1
000156C8 3404                       		move.w	d4,d2
000156CA D843                       		add.w	d3,d4
000156CC D843                       		add.w	d3,d4
000156CE 4EB9 0000 5234             		jsr	(QueueDMATransfer).l
000156D4 51CD FFD6                  		dbf	d5,SPLC_ReadEntry	; repeat for number of entries
000156D8                             
000156D8                            locret_13C96:
000156D8 4E75                       		rts	
000156DA                            ; End of function LoadSonicDynPLC
000156DA                            
000156DA                            ; ===========================================================================
000156DA                            ; ---------------------------------------------------------------------------
000156DA                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
000156DA                            ; ---------------------------------------------------------------------------
000156DA                            
000156DA                            Obj0A:					; XREF: Obj_Index
000156DA 7000                       		moveq	#0,d0
000156DC 1028 0024                  		move.b	$24(a0),d0
000156E0 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
000156E4 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
000156E8                            ; ===========================================================================
000156E8 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
000156EC 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
000156F0 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
000156F4 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
000156F8 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
000156FA                            ; ===========================================================================
000156FA                            
000156FA                            Obj0A_Main:				; XREF: Obj0A_Index
000156FA 5428 0024                  		addq.b	#2,$24(a0)
000156FE 217C 0001 3C14 0004        		move.l	#Map_obj64,4(a0)
00015706 317C 8348 0002             		move.w	#$8348,2(a0)
0001570C 117C 0084 0001             		move.b	#$84,1(a0)
00015712 117C 0010 0019             		move.b	#$10,$19(a0)
00015718 117C 0001 0018             		move.b	#1,$18(a0)
0001571E 1028 0028                  		move.b	$28(a0),d0
00015722 6A00                       		bpl.s	loc_13D00
00015724 5028 0024                  		addq.b	#8,$24(a0)
00015728 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
00015730 317C 0440 0002             		move.w	#$440,2(a0)
00015736 0240 007F                  		andi.w	#$7F,d0
0001573A 1140 0033                  		move.b	d0,$33(a0)
0001573E 6000 0000                  		bra.w	Obj0A_Countdown
00015742                            ; ===========================================================================
00015742                            
00015742                            loc_13D00:
00015742 1140 001C                  		move.b	d0,$1C(a0)
00015746 3168 0008 0030             		move.w	8(a0),$30(a0)
0001574C 317C FF78 0012             		move.w	#-$88,$12(a0)
00015752                            
00015752                            Obj0A_Animate:				; XREF: Obj0A_Index
00015752 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00015758 4EB9 0000 B860             		jsr	AnimateSprite
0001575E                            
0001575E                            Obj0A_ChkWater:				; XREF: Obj0A_Index
0001575E 3038 F646                  		move.w	($FFFFF646).w,d0
00015762 B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
00015766 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
00015768 117C 0006 0024             		move.b	#6,$24(a0)
0001576E 5E28 001C                  		addq.b	#7,$1C(a0)
00015772 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
00015778 6700                       		beq.s	Obj0A_Display
0001577A 6000                       		bra.s	Obj0A_Display
0001577C                            ; ===========================================================================
0001577C                            
0001577C                            Obj0A_Wobble:
0001577C 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00015780 6700                       		beq.s	loc_13D44
00015782 5868 0030                  		addq.w	#4,$30(a0)
00015786                            
00015786                            loc_13D44:
00015786 1028 0026                  		move.b	$26(a0),d0
0001578A 5228 0026                  		addq.b	#1,$26(a0)
0001578E 0240 007F                  		andi.w	#$7F,d0
00015792 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00015798 1031 0000                  		move.b	(a1,d0.w),d0
0001579C 4880                       		ext.w	d0
0001579E D068 0030                  		add.w	$30(a0),d0
000157A2 3140 0008                  		move.w	d0,8(a0)
000157A6 6100                       		bsr.s	Obj0A_ShowNumber
000157A8 4EB9 0000 E736             		jsr	SpeedToPos
000157AE 4A28 0001                  		tst.b	1(a0)
000157B2 6A00                       		bpl.s	Obj0A_Delete
000157B4 4EF9 0000 E75C             		jmp	DisplaySprite
000157BA                            ; ===========================================================================
000157BA                            
000157BA                            Obj0A_Delete:
000157BA 4EF9 0000 E798             		jmp	DeleteObject
000157C0                            ; ===========================================================================
000157C0                            
000157C0                            Obj0A_Display:				; XREF: Obj0A_Index
000157C0 6100                       		bsr.s	Obj0A_ShowNumber
000157C2 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
000157C8 4EB9 0000 B860             		jsr	AnimateSprite
000157CE 4EF9 0000 E75C             		jmp	DisplaySprite
000157D4                            ; ===========================================================================
000157D4                            
000157D4                            Obj0A_Delete2:				; XREF: Obj0A_Index
000157D4 4EF9 0000 E798             		jmp	DeleteObject
000157DA                            ; ===========================================================================
000157DA                            
000157DA                            Obj0A_AirLeft:				; XREF: Obj0A_Index
000157DA 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
000157E0 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
000157E2 5368 0038                  		subq.w	#1,$38(a0)
000157E6 6600                       		bne.s	Obj0A_Display2
000157E8 117C 000E 0024             		move.b	#$E,$24(a0)
000157EE 5E28 001C                  		addq.b	#7,$1C(a0)
000157F2 60CC                       		bra.s	Obj0A_Display
000157F4                            ; ===========================================================================
000157F4                            
000157F4                            Obj0A_Display2:
000157F4 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
000157FA 4EB9 0000 B860             		jsr	AnimateSprite
00015800 4A28 0001                  		tst.b	1(a0)
00015804 6A00                       		bpl.s	Obj0A_Delete3
00015806 4EF9 0000 E75C             		jmp	DisplaySprite
0001580C                            ; ===========================================================================
0001580C                            
0001580C                            Obj0A_Delete3:
0001580C 4EF9 0000 E798             		jmp	DeleteObject
00015812                            ; ===========================================================================
00015812                            
00015812                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
00015812 4A68 0038                  		tst.w	$38(a0)
00015816 6700                       		beq.s	locret_13E1A
00015818 5368 0038                  		subq.w	#1,$38(a0)
0001581C 6600                       		bne.s	locret_13E1A
0001581E 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
00015824 6400                       		bcc.s	locret_13E1A
00015826 317C 000F 0038             		move.w	#$F,$38(a0)
0001582C 4268 0012                  		clr.w	$12(a0)
00015830 117C 0080 0001             		move.b	#$80,1(a0)
00015836 3028 0008                  		move.w	8(a0),d0
0001583A 9078 F700                  		sub.w	($FFFFF700).w,d0
0001583E 0640 0080                  		addi.w	#$80,d0
00015842 3140 0008                  		move.w	d0,8(a0)
00015846 3028 000C                  		move.w	$C(a0),d0
0001584A 9078 F704                  		sub.w	($FFFFF704).w,d0
0001584E 0640 0080                  		addi.w	#$80,d0
00015852 3140 000A                  		move.w	d0,$A(a0)
00015856 117C 000C 0024             		move.b	#$C,$24(a0)
0001585C                            
0001585C                            locret_13E1A:
0001585C 4E75                       		rts	
0001585E                            ; ===========================================================================
0001585E                            Obj0A_WobbleData:
0001585E 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
0001586F 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
00015880 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
00015891 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
000158A1 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
000158AE FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
000158BB FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
000158C8 FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
000158D5 FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
000158DE 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
000158EF 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
00015900 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
00015911 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
00015921 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
0001592E FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
0001593B FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00015948 FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
00015955 FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
0001595E                            ; ===========================================================================
0001595E                            
0001595E                            Obj0A_Countdown:			; XREF: Obj0A_Index
0001595E 4A68 002C                  		tst.w	$2C(a0)
00015962 6600 0000                  		bne.w	loc_13F86
00015966 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0001596C 6400 0000                  		bcc.w	locret_1408C
00015970 0838 0006 D022             		btst	#6,($FFFFD022).w
00015976 6700 0000                  		beq.w	locret_1408C
0001597A 5368 0038                  		subq.w	#1,$38(a0)
0001597E 6A00 0000                  		bpl.w	loc_13FAC
00015982 317C 003B 0038             		move.w	#59,$38(a0)
00015988 317C 0001 0036             		move.w	#1,$36(a0)
0001598E 4EB9 0000 324E             		jsr	(RandomNumber).l
00015994 0240 0001                  		andi.w	#1,d0
00015998 1140 0034                  		move.b	d0,$34(a0)
0001599C 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
000159A0 0C40 0019                  		cmpi.w	#$19,d0
000159A4 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
000159A6 0C40 0014                  		cmpi.w	#$14,d0
000159AA 6700                       		beq.s	Obj0A_WarnSound
000159AC 0C40 000F                  		cmpi.w	#$F,d0
000159B0 6700                       		beq.s	Obj0A_WarnSound
000159B2 0C40 000C                  		cmpi.w	#$C,d0
000159B6 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
000159B8 6600                       		bne.s	loc_13F02
000159BA 303C 0092                  		move.w	#$92,d0
000159BE 4EB9 0000 1326             		jsr	(PlaySound).l	; play countdown music
000159C4                            
000159C4                            loc_13F02:
000159C4 5328 0032                  		subq.b	#1,$32(a0)
000159C8 6A00                       		bpl.s	Obj0A_ReduceAir
000159CA 1168 0033 0032             		move.b	$33(a0),$32(a0)
000159D0 08E8 0007 0036             		bset	#7,$36(a0)
000159D6 6000                       		bra.s	Obj0A_ReduceAir
000159D8                            ; ===========================================================================
000159D8                            
000159D8                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
000159D8 303C 00C2                  		move.w	#$C2,d0
000159DC 4EB9 0000 132C             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
000159E2                            
000159E2                            Obj0A_ReduceAir:
000159E2 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
000159E6 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
000159EA 6100 0000                  		bsr.w	ResumeMusic
000159EE 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
000159F4 303C 00B2                  		move.w	#$B2,d0
000159F8 4EB9 0000 132C             		jsr	(PlaySound_Special).l ;	play drowning sound
000159FE 117C 000A 0034             		move.b	#$A,$34(a0)
00015A04 317C 0001 0036             		move.w	#1,$36(a0)
00015A0A 317C 0078 002C             		move.w	#$78,$2C(a0)
00015A10 2F08                       		move.l	a0,-(sp)
00015A12 41F8 D000                  		lea	($FFFFD000).w,a0
00015A16 6100 F77A                  		bsr.w	Sonic_ResetOnFloor
00015A1A 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
00015A20 08E8 0001 0022             		bset	#1,$22(a0)
00015A26 08E8 0007 0002             		bset	#7,2(a0)
00015A2C 317C 0000 0012             		move.w	#0,$12(a0)
00015A32 317C 0000 0010             		move.w	#0,$10(a0)
00015A38 317C 0000 0014             		move.w	#0,$14(a0)
00015A3E 11FC 0001 F744             		move.b	#1,($FFFFF744).w
00015A44 205F                       		movea.l	(sp)+,a0
00015A46 4E75                       		rts	
00015A48                            ; ===========================================================================
00015A48                            
00015A48                            loc_13F86:
00015A48 5368 002C                  		subq.w	#1,$2C(a0)
00015A4C 6600                       		bne.s	loc_13F94
00015A4E 11FC 0006 D024             		move.b	#6,($FFFFD024).w
00015A54 4E75                       		rts	
00015A56                            ; ===========================================================================
00015A56                            
00015A56                            loc_13F94:
00015A56 2F08                       		move.l	a0,-(sp)
00015A58 41F8 D000                  		lea	($FFFFD000).w,a0
00015A5C 4EB9 0000 E736             		jsr	SpeedToPos
00015A62 0668 0010 0012             		addi.w	#$10,$12(a0)
00015A68 205F                       		movea.l	(sp)+,a0
00015A6A 6000                       		bra.s	loc_13FAC
00015A6C                            ; ===========================================================================
00015A6C                            
00015A6C                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
00015A6C 6000                       		bra.s	Obj0A_MakeItem
00015A6E                            ; ===========================================================================
00015A6E                            
00015A6E                            loc_13FAC:
00015A6E 4A68 0036                  		tst.w	$36(a0)
00015A72 6700 0000                  		beq.w	locret_1408C
00015A76 5368 003A                  		subq.w	#1,$3A(a0)
00015A7A 6A00 0000                  		bpl.w	locret_1408C
00015A7E                            
00015A7E                            Obj0A_MakeItem:
00015A7E 4EB9 0000 324E             		jsr	(RandomNumber).l
00015A84 0240 000F                  		andi.w	#$F,d0
00015A88 3140 003A                  		move.w	d0,$3A(a0)
00015A8C 4EB9 0000 EBE4             		jsr	SingleObjLoad
00015A92 6600 0000                  		bne.w	locret_1408C
00015A96 137C 000A 0000             		move.b	#$A,0(a1)	; load object
00015A9C 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
00015AA2 7006                       		moveq	#6,d0
00015AA4 0838 0000 D022             		btst	#0,($FFFFD022).w
00015AAA 6700                       		beq.s	loc_13FF2
00015AAC 4440                       		neg.w	d0
00015AAE 137C 0040 0026             		move.b	#$40,$26(a1)
00015AB4                            
00015AB4                            loc_13FF2:
00015AB4 D169 0008                  		add.w	d0,8(a1)
00015AB8 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
00015ABE 137C 0006 0028             		move.b	#6,$28(a1)
00015AC4 4A68 002C                  		tst.w	$2C(a0)
00015AC8 6700 0000                  		beq.w	loc_1403E
00015ACC 0268 0007 003A             		andi.w	#7,$3A(a0)
00015AD2 0668 0000 003A             		addi.w	#0,$3A(a0)
00015AD8 3038 D00C                  		move.w	($FFFFD00C).w,d0
00015ADC 0440 000C                  		subi.w	#$C,d0
00015AE0 3340 000C                  		move.w	d0,$C(a1)
00015AE4 4EB9 0000 324E             		jsr	(RandomNumber).l
00015AEA 1340 0026                  		move.b	d0,$26(a1)
00015AEE 3038 FE04                  		move.w	($FFFFFE04).w,d0
00015AF2 0200 0003                  		andi.b	#3,d0
00015AF6 6600                       		bne.s	loc_14082
00015AF8 137C 000E 0028             		move.b	#$E,$28(a1)
00015AFE 6000                       		bra.s	loc_14082
00015B00                            ; ===========================================================================
00015B00                            
00015B00                            loc_1403E:
00015B00 0828 0007 0036             		btst	#7,$36(a0)
00015B06 6700                       		beq.s	loc_14082
00015B08 3438 FE14                  		move.w	($FFFFFE14).w,d2
00015B0C E24A                       		lsr.w	#1,d2
00015B0E 4EB9 0000 324E             		jsr	(RandomNumber).l
00015B14 0240 0003                  		andi.w	#3,d0
00015B18 6600                       		bne.s	loc_1406A
00015B1A 08E8 0006 0036             		bset	#6,$36(a0)
00015B20 6600                       		bne.s	loc_14082
00015B22 1342 0028                  		move.b	d2,$28(a1)
00015B26 337C 001C 0038             		move.w	#$1C,$38(a1)
00015B2C                            
00015B2C                            loc_1406A:
00015B2C 4A28 0034                  		tst.b	$34(a0)
00015B30 6600                       		bne.s	loc_14082
00015B32 08E8 0006 0036             		bset	#6,$36(a0)
00015B38 6600                       		bne.s	loc_14082
00015B3A 1342 0028                  		move.b	d2,$28(a1)
00015B3E 337C 001C 0038             		move.w	#$1C,$38(a1)
00015B44                            
00015B44                            loc_14082:
00015B44 5328 0034                  		subq.b	#1,$34(a0)
00015B48 6A00                       		bpl.s	locret_1408C
00015B4A 4268 0036                  		clr.w	$36(a0)
00015B4E                            
00015B4E                            locret_1408C:
00015B4E 4E75                       		rts	
00015B50                            
00015B50                            ; ---------------------------------------------------------------------------
00015B50                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00015B50                            ; ---------------------------------------------------------------------------
00015B50                            
00015B50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015B50                            
00015B50                            
00015B50                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
00015B50 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00015B56 6200                       		bhi.b	loc_140AC
00015B58                            
00015B58 0C38 0001 FFFF             		cmpi.b	#$1,($FFFFFFFF).w	; am I fighting the boss?
00015B5E 6600                       		bne.s	NotBoss	; if not, branch
00015B60 1038 FE10                  		move.b	($FFFFFE10).w,d0	; set boss number
00015B64 43F9 0000 4018             		lea	(MusicList8).l,a1	; load Music Playlist for bosses
00015B6A 1031 0000                  		move.b	(a1,d0.w),d0	; get d0-th entry from the playlist
00015B6E 6000                       		bra.s	loc_140A6
00015B70                            
00015B70                            NotBoss:
00015B70 0C38 0001 FE2D             		cmpi.b	#$1,($FFFFFE2D).w	; am I invincible?
00015B76 6600                       		bne.s	NotInv	; if not, branch
00015B78 103C 0087                  		move.b	#$87,d0
00015B7C 6000                       		bra.s	loc_140A6
00015B7E                            
00015B7E                            NotInv:
00015B7E 1039 FFFF FFFE             		move.b	$FFFFFFFE,d0	; loads song number from RAM
00015B84                            loc_140A6:
00015B84 4EB9 0000 1326             		jsr	(PlaySound).l
00015B8A                            
00015B8A                            loc_140AC:
00015B8A 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00015B90 4238 D372                  		clr.b	($FFFFD372).w
00015B94 4E75                       		rts	
00015B96                            ; End of function ResumeMusic
00015B96                            
00015B96                            ; ===========================================================================
00015B96                            Ani_obj0A:
00015B96                            	include "_anim\obj0A.asm"
00015B96                            ; ---------------------------------------------------------------------------
00015B96                            ; Animation script - countdown numbers and bubbles (LZ)
00015B96                            ; ---------------------------------------------------------------------------
00015B96 0000                       		dc.w byte_140D6-Ani_obj0A
00015B98 0000                       		dc.w byte_140E0-Ani_obj0A
00015B9A 0000                       		dc.w byte_140EA-Ani_obj0A
00015B9C 0000                       		dc.w byte_140F4-Ani_obj0A
00015B9E 0000                       		dc.w byte_140FE-Ani_obj0A
00015BA0 0000                       		dc.w byte_14108-Ani_obj0A
00015BA2 0000                       		dc.w byte_14112-Ani_obj0A
00015BA4 0000                       		dc.w byte_14118-Ani_obj0A
00015BA6 0000                       		dc.w byte_14120-Ani_obj0A
00015BA8 0000                       		dc.w byte_14128-Ani_obj0A
00015BAA 0000                       		dc.w byte_14130-Ani_obj0A
00015BAC 0000                       		dc.w byte_14138-Ani_obj0A
00015BAE 0000                       		dc.w byte_14140-Ani_obj0A
00015BB0 0000                       		dc.w byte_14148-Ani_obj0A
00015BB2 0000                       		dc.w byte_1414A-Ani_obj0A
00015BB4 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
00015BBE 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
00015BC8 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
00015BD2 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
00015BDC 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
00015BE6 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
00015BF0 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
00015BF6 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
00015BFE 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
00015C06 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
00015C0E 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
00015C16 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
00015C1E 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
00015C26 0EFC                       byte_14148:	dc.b $E, $FC
00015C28 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
00015C2E                            		even
00015C2E                            		even
00015C2E                            
00015C2E                            ; ---------------------------------------------------------------------------
00015C2E                            ; Sprite mappings - drowning countdown numbers (LZ)
00015C2E                            ; ---------------------------------------------------------------------------
00015C2E                            Map_obj0A:
00015C2E                            	include "_maps\obj0A.asm"
00015C2E                            ; ---------------------------------------------------------------------------
00015C2E                            ; Sprite mappings - drowning countdown numbers (LZ)
00015C2E                            ; ---------------------------------------------------------------------------
00015C2E 0000                       		dc.w byte_14152-Map_obj0A
00015C30 01                         byte_14152:	dc.b 1
00015C31 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00015C36                            		even
00015C36                            		even
00015C36                            
00015C36                            ; ===========================================================================
00015C36                            ; ---------------------------------------------------------------------------
00015C36                            ; Object 38 - shield
00015C36                            ; ---------------------------------------------------------------------------
00015C36                            
00015C36                            Obj38:					; XREF: Obj_Index
00015C36 223C 0000 0000             		move.l	#UnC_Shield,d1			        ; Call for Regular Shield Art
00015C3C 343C A820                  		move.w	#$A820,d2			        ; Load Art from this location (VRAM location*20)
00015C40                            								; In this case, VRAM = $541*20
00015C40 363C 0200                  		move.w	#$200,d3
00015C44 4EB9 0000 5234             		jsr	(QueueDMATransfer).l
00015C4A                            ; ---------------------------------------------------------------------------		
00015C4A                            ShieldObj_Main:	
00015C4A 7000                       		moveq	#0,d0
00015C4C 1028 0024                  		move.b	$24(a0),d0
00015C50 323B 0000                  		move.w  Shield_Index(pc,d0.w),d1
00015C54 4EFB 1000                  		jmp     Shield_Index(pc,d1.w)
00015C58                            ; ===========================================================================		
00015C58                            Shield_Index:                 
00015C58 0000                       		dc.w    Shield_Init-Shield_Index		
00015C5A 0000                       		dc.w    ShieldChecks-Shield_Index
00015C5C                            ; ===========================================================================		
00015C5C                            Shield_Init:
00015C5C 5428 0024                  		addq.b	#2,$24(a0)
00015C60 217C 0000 0000 0004        		move.l  #Map_Obj38, $0004(A0)			; Load Shield Map into place	
00015C68 117C 0004 0001             		move.b  #4,1(a0)						
00015C6E 117C 0001 0018             		move.b  #1,$18(a0)
00015C74 117C 0018 0019             		move.b  #$18,$19(a0)
00015C7A 317C 0541 0002             		move.w  #$541,2(a0)			        ; Set VRAM location
00015C80 0838 0007 D002             		btst    #7,($FFFFD002).w
00015C86 6700                       		beq.s   ShieldChecks
00015C88 08E8 0007 0002             		bset    #7,2(a0)
00015C8E                            ; ---------------------------------------------------------------------------		
00015C8E                            ShieldChecks:
00015C8E 4A38 FE2D                  		tst.b   ($FFFFFE2D).w				; Test if Sonic has a shield
00015C92 6600                       		bne.s   SonicHasShield			        ; If so, branch to do nothing
00015C94 4A38 FE2C                  		tst.b   ($FFFFFE2C).w				; Test if Sonic got invisibility
00015C98 6700                       		beq.s   jmp_DeleteObj38       			; If so, delete object temporarily
00015C9A                            ShieldProperties:		
00015C9A 3178 D008 0008             		move.w  ($FFFFD008).w,8(a0)			; Load Main Character X-position
00015CA0 3178 D00C 000C             		move.w  ($FFFFD00C).w,$C(a0)			; Load Main Character Y-position
00015CA6 1178 D022 0022             		move.b  ($FFFFD022).w,$22(a0)			; Something about Character status
00015CAC 43F9 0000 0000             		lea     (Ani_obj38).l, a1			; Load Animation Scripts into a1	
00015CB2 4EB9 0000 B860             		jsr     AnimateSprite           		
00015CB8 4EF9 0000 E75C             		jmp     DisplaySprite           		
00015CBE                            SonicHasShield:
00015CBE 4E75                       		rts    
00015CC0                            jmp_DeleteObj38: ; loc_12648:
00015CC0 4EF9 0000 E798             		jmp     DeleteObject  
00015CC6                            ; ===========================================================================
00015CC6                            ; ---------------------------------------------------------------------------
00015CC6                            ; Object 4A - New Invincibility Object
00015CC6                            ; ---------------------------------------------------------------------------
00015CC6                            
00015CC6                            Obj4A:					; XREF: Obj_Index
00015CC6 223C 0000 0000             		move.l	#UnC_Stars,d1
00015CCC 343C A820                  		move.w	#$A820,d2
00015CD0 363C 0200                  		move.w	#$200,d3
00015CD4 4EB9 0000 5234             		jsr	(QueueDMATransfer).l
00015CDA                            Invincibility_Main:
00015CDA 7000                       		moveq	#0,d0
00015CDC 1028 0024                  		move.b	$24(a0),d0
00015CE0                            Invincibility_Init:		
00015CE0 5428 0024                  		addq.b	#2,$24(a0)
00015CE4 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)	; loads mapping
00015CEC 117C 0004 0001             		move.b	#4,1(a0)
00015CF2 117C 0001 0018             		move.b	#1,$18(a0)
00015CF8 117C 0010 0019             		move.b	#$10,$19(a0)
00015CFE 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
00015D04                            ; ===========================================================================
00015D04                            
00015D04                            Obj4A_Stars:				; XREF: Obj38_Index
00015D04 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00015D08 6700                       		beq.s	Obj4A_Delete2	; if not, branch
00015D0A 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00015D0E 1228 001C                  		move.b	$1C(a0),d1
00015D12 5301                       		subq.b	#1,d1
00015D14 6000                       		bra.s	Obj4A_StarTrail
00015D16                            ; ===========================================================================
00015D16 E909                       		lsl.b	#4,d1
00015D18 5801                       		addq.b	#4,d1
00015D1A 9001                       		sub.b	d1,d0
00015D1C 1228 0030                  		move.b	$30(a0),d1
00015D20 9001                       		sub.b	d1,d0
00015D22 5801                       		addq.b	#4,d1
00015D24 0201 000F                  		andi.b	#$F,d1
00015D28 1141 0030                  		move.b	d1,$30(a0)
00015D2C 6000                       		bra.s	Obj4A_StarTrail2a
00015D2E                            ; ===========================================================================
00015D2E                            
00015D2E                            Obj4A_StarTrail:			; XREF: Obj4A_Stars
00015D2E E709                       		lsl.b	#3,d1
00015D30 1401                       		move.b	d1,d2
00015D32 D201                       		add.b	d1,d1
00015D34 D202                       		add.b	d2,d1
00015D36 5801                       		addq.b	#4,d1
00015D38 9001                       		sub.b	d1,d0
00015D3A 1228 0030                  		move.b	$30(a0),d1
00015D3E 9001                       		sub.b	d1,d0
00015D40 5801                       		addq.b	#4,d1
00015D42 0C01 0018                  		cmpi.b	#$18,d1
00015D46 6500                       		bcs.s	Obj4A_StarTrail2
00015D48 7200                       		moveq	#0,d1
00015D4A                            
00015D4A                            Obj4A_StarTrail2:
00015D4A 1141 0030                  		move.b	d1,$30(a0)
00015D4E                            
00015D4E                            Obj4A_StarTrail2a:
00015D4E 43F8 CB00                  		lea	($FFFFCB00).w,a1
00015D52 43F1 0000                  		lea	(a1,d0.w),a1
00015D56 3159 0008                  		move.w	(a1)+,8(a0)
00015D5A 3159 000C                  		move.w	(a1)+,$C(a0)
00015D5E 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00015D64 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
00015D6A 4EB9 0000 B860             		jsr	(AnimateSprite).l
00015D70 4EF9 0000 E75C             		jmp	(DisplaySprite).l
00015D76                            ; ===========================================================================
00015D76                            
00015D76                            Obj4A_Delete2:				; XREF: Obj4A_Stars
00015D76 4EF9 0000 E798             		jmp	(DeleteObject).l
00015D7C                            ; ===========================================================================
00015D7C                            ; ---------------------------------------------------------------------------
00015D7C                            ; Object 08 - water splash (LZ)
00015D7C                            ; ---------------------------------------------------------------------------
00015D7C                            
00015D7C                            Obj08:					; XREF: Obj_Index
00015D7C 7000                       		moveq	#0,d0
00015D7E 1028 0024                  		move.b	$24(a0),d0
00015D82 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
00015D86 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
00015D8A                            ; ===========================================================================
00015D8A 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
00015D8C 0000                       		dc.w Obj08_Display-Obj08_Index
00015D8E 0000                       		dc.w Obj08_Delete-Obj08_Index
00015D90                            ; ===========================================================================
00015D90                            
00015D90                            Obj08_Main:				; XREF: Obj08_Index
00015D90 5428 0024                  		addq.b	#2,$24(a0)
00015D94 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
00015D9C 0028 0004 0001             		ori.b	#4,1(a0)
00015DA2 117C 0001 0018             		move.b	#1,$18(a0)
00015DA8 117C 0010 0019             		move.b	#$10,$19(a0)
00015DAE 317C 4259 0002             		move.w	#$4259,2(a0)
00015DB4 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
00015DBA                            
00015DBA                            Obj08_Display:				; XREF: Obj08_Index
00015DBA 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
00015DC0 43F9 0000 0000             		lea	(Ani_obj08).l,a1
00015DC6 4EB9 0000 B860             		jsr	AnimateSprite
00015DCC 4EF9 0000 E75C             		jmp	DisplaySprite
00015DD2                            ; ===========================================================================
00015DD2                            
00015DD2                            Obj08_Delete:				; XREF: Obj08_Index
00015DD2 4EF9 0000 E798             		jmp	DeleteObject	; delete when animation	is complete
00015DD8                            ; ===========================================================================
00015DD8                            
00015DD8                            
00015DD8                            ; ---------------------------------------------------------------------------
00015DD8                            ; Sprite mappings - shield
00015DD8                            ; ---------------------------------------------------------------------------
00015DD8                            Map_obj38:
00015DD8                            	include "_maps\obj38.asm"
00015DD8                            ; ---------------------------------------------------------------------------
00015DD8                            ; Sprite mappings - shield
00015DD8                            ; ---------------------------------------------------------------------------
00015DD8 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
00015DDC 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
00015DE0 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
00015DE4 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
00015DE8 04                         byte_143C2:	dc.b 4
00015DE9 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00015DEE E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00015DF3 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
00015DF8 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00015DFD 04                         byte_143D7:	dc.b 4
00015DFE E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
00015E03 E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
00015E08 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
00015E0D 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
00015E12 04                         byte_143EC:	dc.b 4
00015E13 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00015E18 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00015E1D 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00015E22 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00015E27 04                         byte_14401:	dc.b 4
00015E28 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00015E2D E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00015E32 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00015E37 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00015E3C 04                         byte_14416:	dc.b 4
00015E3D E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00015E42 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00015E47 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00015E4C 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00015E51 04                         byte_1442B:	dc.b 4
00015E52 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00015E57 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00015E5C 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00015E61 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00015E66 04                         byte_14440:	dc.b 4
00015E67 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00015E6C E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00015E71 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00015E76 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00015E7C 00                         		even
00015E7C 00                         		even
00015E7C                            
00015E7C                            Ani_obj38:
00015E7C                            	include "_anim\obj38.asm"
00015E7C                            ; ---------------------------------------------------------------------------
00015E7C                            ; Animation script - shield
00015E7C                            ; ---------------------------------------------------------------------------
00015E7C 0000                       		dc.w byte_14356-Ani_obj38
00015E7E 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
00015E86                            		even
00015E86                            		even
00015E86                            
00015E86                            ; ---------------------------------------------------------------------------
00015E86                            ; Sprite mappings - Invincibility Stars
00015E86                            ; ---------------------------------------------------------------------------
00015E86                            Map_obj4A:
00015E86                            	include "_maps\obj4A.asm"
00015E86                            ; ---------------------------------------------------------------------------
00015E86                            ; Sprite mappings - invincibility stars
00015E86                            ; ---------------------------------------------------------------------------
00015E86 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
00015E8A 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
00015E8E 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
00015E92 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
00015E96 04                         byte_1447C:	dc.b 4
00015E97 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00015E9C E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00015EA1 000A 1000 E8               byte_1448C:	dc.b 0,	$A, $10, 0, $E8
00015EA6 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00015EAB 04                         byte_1449C:	dc.b 4
00015EAC E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
00015EB1 E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
00015EB6 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
00015EBB 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
00015EC0 04                         byte_144B6:	dc.b 4
00015EC1 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00015EC6 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00015ECB 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00015ED0 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00015ED5 04                         byte_144E4:	dc.b 4
00015ED6 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00015EDB E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00015EE0 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00015EE5 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00015EEA 04                         byte_1453F:	dc.b 4
00015EEB E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00015EF0 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00015EF5 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00015EFA 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00015EFF 04                         byte_14595:	dc.b 4
00015F00 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00015F05 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00015F0A 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00015F0F 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00015F14 04                         byte_145BF:	dc.b 4
00015F15 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00015F1A E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00015F1F 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00015F24 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00015F2A 00                         		even
00015F2A 00                         		even
00015F2A                            
00015F2A                            Ani_obj4A:
00015F2A                            	include "_anim\obj4A.asm"
00015F2A                            ; ---------------------------------------------------------------------------
00015F2A                            ; Animation script - invincibility stars
00015F2A                            ; ---------------------------------------------------------------------------
00015F2A 0000                       		dc.w byte2_14356-Ani_obj4A
00015F2C 0000                       		dc.w byte2_1435E-Ani_obj4A
00015F2E 0000                       		dc.w byte2_14364-Ani_obj4A
00015F30 0000                       		dc.w byte2_1437E-Ani_obj4A
00015F32 0000                       		dc.w byte2_14398-Ani_obj4A
00015F34 0101 0002 0003 00FF        byte2_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
00015F3C 0504 0506 07FF             byte2_1435E:	dc.b 5,	4, 5, 6, 7, $FF
00015F42 0004 0400 0404 0005 0500+  byte2_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
00015F53 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
00015F5C 0004 0400 0400 0005 0500+  byte2_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
00015F6D 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
00015F76 0004 0000 0400 0005 0000+  byte2_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
00015F87 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
00015F90                            		even
00015F90                            		even
00015F90                            
00015F90                            Ani_obj08:
00015F90                            	include "_anim\obj08.asm"
00015F90                            ; ---------------------------------------------------------------------------
00015F90                            ; Animation script - water splash (LZ)
00015F90                            ; ---------------------------------------------------------------------------
00015F90 0000                       		dc.w byte_145C6-Ani_obj08
00015F92 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
00015F98                            		even
00015F98                            		even
00015F98                            
00015F98                            ; ---------------------------------------------------------------------------
00015F98                            ; Sprite mappings - water splash (LZ)
00015F98                            ; ---------------------------------------------------------------------------
00015F98                            Map_obj08:
00015F98                            	include "_maps\obj08.asm"
00015F98                            ; ---------------------------------------------------------------------------
00015F98                            ; Sprite mappings - water splash (LZ)
00015F98                            ; ---------------------------------------------------------------------------
00015F98 0000                       		dc.w byte_145D2-Map_obj08
00015F9A 0000                       		dc.w byte_145DD-Map_obj08
00015F9C 0000                       		dc.w byte_145E8-Map_obj08
00015F9E 02                         byte_145D2:	dc.b 2
00015F9F F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
00015FA4 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
00015FA9 02                         byte_145DD:	dc.b 2
00015FAA E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
00015FAF EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
00015FB4 01                         byte_145E8:	dc.b 1
00015FB5 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
00015FBA                            		even
00015FBA                            		even
00015FBA                            
00015FBA                            ; ---------------------------------------------------------------------------
00015FBA                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
00015FBA                            ; ---------------------------------------------------------------------------
00015FBA                            
00015FBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015FBA                            
00015FBA                            
00015FBA                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00015FBA 0828 0003 0022             		btst	#3,$22(a0)
00015FC0 6700                       		beq.s	loc_14602
00015FC2 7000                       		moveq	#0,d0
00015FC4 11C0 F768                  		move.b	d0,($FFFFF768).w
00015FC8 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015FCC 4E75                       		rts	
00015FCE                            ; ===========================================================================
00015FCE                            
00015FCE                            loc_14602:
00015FCE 7003                       		moveq	#3,d0
00015FD0 11C0 F768                  		move.b	d0,($FFFFF768).w
00015FD4 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015FD8 1028 0026                  		move.b	$26(a0),d0
00015FDC 0600 0020                  		addi.b	#$20,d0
00015FE0 6A00                       		bpl.s	loc_14624
00015FE2 1028 0026                  		move.b	$26(a0),d0
00015FE6 6A00                       		bpl.s	loc_1461E
00015FE8 5300                       		subq.b	#1,d0
00015FEA                            
00015FEA                            loc_1461E:
00015FEA 0600 0020                  		addi.b	#$20,d0
00015FEE 6000                       		bra.s	loc_14630
00015FF0                            ; ===========================================================================
00015FF0                            
00015FF0                            loc_14624:
00015FF0 1028 0026                  		move.b	$26(a0),d0
00015FF4 6A00                       		bpl.s	loc_1462C
00015FF6 5200                       		addq.b	#1,d0
00015FF8                            
00015FF8                            loc_1462C:
00015FF8 0600 001F                  		addi.b	#$1F,d0
00015FFC                            
00015FFC                            loc_14630:
00015FFC 0200 00C0                  		andi.b	#$C0,d0
00016000 0C00 0040                  		cmpi.b	#$40,d0
00016004 6700 0000                  		beq.w	Sonic_WalkVertL
00016008 0C00 0080                  		cmpi.b	#$80,d0
0001600C 6700 0000                  		beq.w	Sonic_WalkCeiling
00016010 0C00 00C0                  		cmpi.b	#$C0,d0
00016014 6700 0000                  		beq.w	Sonic_WalkVertR
00016018 3428 000C                  		move.w	$C(a0),d2
0001601C 3628 0008                  		move.w	8(a0),d3
00016020 7000                       		moveq	#0,d0
00016022 1028 0016                  		move.b	$16(a0),d0
00016026 4880                       		ext.w	d0
00016028 D440                       		add.w	d0,d2
0001602A 1028 0017                  		move.b	$17(a0),d0
0001602E 4880                       		ext.w	d0
00016030 D640                       		add.w	d0,d3
00016032 49F8 F768                  		lea	($FFFFF768).w,a4
00016036 367C 0010                  		movea.w	#$10,a3
0001603A 3C3C 0000                  		move.w	#0,d6
0001603E 7A0D                       		moveq	#$D,d5
00016040 6100 0000                  		bsr.w	FindFloor
00016044 3F01                       		move.w	d1,-(sp)
00016046 3428 000C                  		move.w	$C(a0),d2
0001604A 3628 0008                  		move.w	8(a0),d3
0001604E 7000                       		moveq	#0,d0
00016050 1028 0016                  		move.b	$16(a0),d0
00016054 4880                       		ext.w	d0
00016056 D440                       		add.w	d0,d2
00016058 1028 0017                  		move.b	$17(a0),d0
0001605C 4880                       		ext.w	d0
0001605E 4440                       		neg.w	d0
00016060 D640                       		add.w	d0,d3
00016062 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016066 367C 0010                  		movea.w	#$10,a3
0001606A 3C3C 0000                  		move.w	#0,d6
0001606E 7A0D                       		moveq	#$D,d5
00016070 6100 0000                  		bsr.w	FindFloor
00016074 301F                       		move.w	(sp)+,d0
00016076 6100 0000                  		bsr.w	Sonic_Angle
0001607A 4A41                       		tst.w	d1
0001607C 6700                       		beq.s	locret_146BE
0001607E 6A00                       		bpl.s	loc_146C0
00016080 0C41 FFF2                  		cmpi.w	#-$E,d1
00016084 6D00                       		blt.s	locret_146E6
00016086 D368 000C                  		add.w	d1,$C(a0)
0001608A                            
0001608A                            locret_146BE:
0001608A 4E75                       		rts	
0001608C                            ; ===========================================================================
0001608C                            
0001608C                            loc_146C0:
0001608C 0C41 000E                  		cmpi.w	#$E,d1
00016090 6E00                       		bgt.s	loc_146CC
00016092                            
00016092                            loc_146C6:
00016092 D368 000C                  		add.w	d1,$C(a0)
00016096 4E75                       		rts	
00016098                            ; ===========================================================================
00016098                            
00016098                            loc_146CC:
00016098 4A28 0038                  		tst.b	$38(a0)
0001609C 66F4                       		bne.s	loc_146C6
0001609E 08E8 0001 0022             		bset	#1,$22(a0)
000160A4 08A8 0005 0022             		bclr	#5,$22(a0)
000160AA 117C 0001 001D             		move.b	#1,$1D(a0)
000160B0 4E75                       		rts	
000160B2                            ; ===========================================================================
000160B2                            
000160B2                            locret_146E6:
000160B2 4E75                       		rts	
000160B4                            ; End of function Sonic_AnglePos
000160B4                            
000160B4                            ; ===========================================================================
000160B4 2428 0008                  		move.l	8(a0),d2
000160B8 3028 0010                  		move.w	$10(a0),d0
000160BC 48C0                       		ext.l	d0
000160BE E180                       		asl.l	#8,d0
000160C0 9480                       		sub.l	d0,d2
000160C2 2142 0008                  		move.l	d2,8(a0)
000160C6 303C 0038                  		move.w	#$38,d0
000160CA 48C0                       		ext.l	d0
000160CC E180                       		asl.l	#8,d0
000160CE 9680                       		sub.l	d0,d3
000160D0 2143 000C                  		move.l	d3,$C(a0)
000160D4 4E75                       		rts	
000160D6                            ; ===========================================================================
000160D6                            
000160D6                            locret_1470A:
000160D6 4E75                       		rts	
000160D8                            ; ===========================================================================
000160D8 2628 000C                  		move.l	$C(a0),d3
000160DC 3028 0012                  		move.w	$12(a0),d0
000160E0 0440 0038                  		subi.w	#$38,d0
000160E4 3140 0012                  		move.w	d0,$12(a0)
000160E8 48C0                       		ext.l	d0
000160EA E180                       		asl.l	#8,d0
000160EC 9680                       		sub.l	d0,d3
000160EE 2143 000C                  		move.l	d3,$C(a0)
000160F2 4E75                       		rts	
000160F4 4E75                       		rts	
000160F6                            ; ===========================================================================
000160F6 2428 0008                  		move.l	8(a0),d2
000160FA 2628 000C                  		move.l	$C(a0),d3
000160FE 3028 0010                  		move.w	$10(a0),d0
00016102 48C0                       		ext.l	d0
00016104 E180                       		asl.l	#8,d0
00016106 9480                       		sub.l	d0,d2
00016108 3028 0012                  		move.w	$12(a0),d0
0001610C 48C0                       		ext.l	d0
0001610E E180                       		asl.l	#8,d0
00016110 9680                       		sub.l	d0,d3
00016112 2142 0008                  		move.l	d2,8(a0)
00016116 2143 000C                  		move.l	d3,$C(a0)
0001611A 4E75                       		rts	
0001611C                            
0001611C                            ; ---------------------------------------------------------------------------
0001611C                            ; Subroutine to	change Sonic's angle as he walks along the floor
0001611C                            ; ---------------------------------------------------------------------------
0001611C                            
0001611C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001611C                            
0001611C                            
0001611C                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
0001611C 1438 F76A                  		move.b	($FFFFF76A).w,d2
00016120 B240                       		cmp.w	d0,d1
00016122 6F00                       		ble.s	loc_1475E
00016124 1438 F768                  		move.b	($FFFFF768).w,d2
00016128 3200                       		move.w	d0,d1
0001612A                            
0001612A                            loc_1475E:
0001612A 0802 0000                  		btst	#0,d2
0001612E 6600                       		bne.s	loc_1476A
00016130 1142 0026                  		move.b	d2,$26(a0)
00016134 4E75                       		rts	
00016136                            ; ===========================================================================
00016136                            
00016136                            loc_1476A:
00016136 1428 0026                  		move.b	$26(a0),d2
0001613A 0602 0020                  		addi.b	#$20,d2
0001613E 0202 00C0                  		andi.b	#$C0,d2
00016142 1142 0026                  		move.b	d2,$26(a0)
00016146 4E75                       		rts	
00016148                            ; End of function Sonic_Angle
00016148                            
00016148                            ; ---------------------------------------------------------------------------
00016148                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
00016148                            ; ---------------------------------------------------------------------------
00016148                            
00016148                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016148                            
00016148                            
00016148                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
00016148 3428 000C                  		move.w	$C(a0),d2
0001614C 3628 0008                  		move.w	8(a0),d3
00016150 7000                       		moveq	#0,d0
00016152 1028 0017                  		move.b	$17(a0),d0
00016156 4880                       		ext.w	d0
00016158 4440                       		neg.w	d0
0001615A D440                       		add.w	d0,d2
0001615C 1028 0016                  		move.b	$16(a0),d0
00016160 4880                       		ext.w	d0
00016162 D640                       		add.w	d0,d3
00016164 49F8 F768                  		lea	($FFFFF768).w,a4
00016168 367C 0010                  		movea.w	#$10,a3
0001616C 3C3C 0000                  		move.w	#0,d6
00016170 7A0D                       		moveq	#$D,d5
00016172 6100 0000                  		bsr.w	FindWall
00016176 3F01                       		move.w	d1,-(sp)
00016178 3428 000C                  		move.w	$C(a0),d2
0001617C 3628 0008                  		move.w	8(a0),d3
00016180 7000                       		moveq	#0,d0
00016182 1028 0017                  		move.b	$17(a0),d0
00016186 4880                       		ext.w	d0
00016188 D440                       		add.w	d0,d2
0001618A 1028 0016                  		move.b	$16(a0),d0
0001618E 4880                       		ext.w	d0
00016190 D640                       		add.w	d0,d3
00016192 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016196 367C 0010                  		movea.w	#$10,a3
0001619A 3C3C 0000                  		move.w	#0,d6
0001619E 7A0D                       		moveq	#$D,d5
000161A0 6100 0000                  		bsr.w	FindWall
000161A4 301F                       		move.w	(sp)+,d0
000161A6 6100 FF74                  		bsr.w	Sonic_Angle
000161AA 4A41                       		tst.w	d1
000161AC 6700                       		beq.s	locret_147F0
000161AE 6A00                       		bpl.s	loc_147F2
000161B0 0C41 FFF2                  		cmpi.w	#-$E,d1
000161B4 6D00 FF20                  		blt.w	locret_1470A
000161B8 D368 0008                  		add.w	d1,8(a0)
000161BC                            
000161BC                            locret_147F0:
000161BC 4E75                       		rts	
000161BE                            ; ===========================================================================
000161BE                            
000161BE                            loc_147F2:
000161BE 0C41 000E                  		cmpi.w	#$E,d1
000161C2 6E00                       		bgt.s	loc_147FE
000161C4                            
000161C4                            loc_147F8:
000161C4 D368 0008                  		add.w	d1,8(a0)
000161C8 4E75                       		rts	
000161CA                            ; ===========================================================================
000161CA                            
000161CA                            loc_147FE:
000161CA 4A28 0038                  		tst.b	$38(a0)
000161CE 66F4                       		bne.s	loc_147F8
000161D0 08E8 0001 0022             		bset	#1,$22(a0)
000161D6 08A8 0005 0022             		bclr	#5,$22(a0)
000161DC 117C 0001 001D             		move.b	#1,$1D(a0)
000161E2 4E75                       		rts	
000161E4                            ; End of function Sonic_WalkVertR
000161E4                            
000161E4                            ; ---------------------------------------------------------------------------
000161E4                            ; Subroutine allowing Sonic to walk upside-down
000161E4                            ; ---------------------------------------------------------------------------
000161E4                            
000161E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000161E4                            
000161E4                            
000161E4                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
000161E4 3428 000C                  		move.w	$C(a0),d2
000161E8 3628 0008                  		move.w	8(a0),d3
000161EC 7000                       		moveq	#0,d0
000161EE 1028 0016                  		move.b	$16(a0),d0
000161F2 4880                       		ext.w	d0
000161F4 9440                       		sub.w	d0,d2
000161F6 0A42 000F                  		eori.w	#$F,d2
000161FA 1028 0017                  		move.b	$17(a0),d0
000161FE 4880                       		ext.w	d0
00016200 D640                       		add.w	d0,d3
00016202 49F8 F768                  		lea	($FFFFF768).w,a4
00016206 367C FFF0                  		movea.w	#-$10,a3
0001620A 3C3C 1000                  		move.w	#$1000,d6
0001620E 7A0D                       		moveq	#$D,d5
00016210 6100 0000                  		bsr.w	FindFloor
00016214 3F01                       		move.w	d1,-(sp)
00016216 3428 000C                  		move.w	$C(a0),d2
0001621A 3628 0008                  		move.w	8(a0),d3
0001621E 7000                       		moveq	#0,d0
00016220 1028 0016                  		move.b	$16(a0),d0
00016224 4880                       		ext.w	d0
00016226 9440                       		sub.w	d0,d2
00016228 0A42 000F                  		eori.w	#$F,d2
0001622C 1028 0017                  		move.b	$17(a0),d0
00016230 4880                       		ext.w	d0
00016232 9640                       		sub.w	d0,d3
00016234 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016238 367C FFF0                  		movea.w	#-$10,a3
0001623C 3C3C 1000                  		move.w	#$1000,d6
00016240 7A0D                       		moveq	#$D,d5
00016242 6100 0000                  		bsr.w	FindFloor
00016246 301F                       		move.w	(sp)+,d0
00016248 6100 FED2                  		bsr.w	Sonic_Angle
0001624C 4A41                       		tst.w	d1
0001624E 6700                       		beq.s	locret_14892
00016250 6A00                       		bpl.s	loc_14894
00016252 0C41 FFF2                  		cmpi.w	#-$E,d1
00016256 6D00 FE5A                  		blt.w	locret_146E6
0001625A 9368 000C                  		sub.w	d1,$C(a0)
0001625E                            
0001625E                            locret_14892:
0001625E 4E75                       		rts	
00016260                            ; ===========================================================================
00016260                            
00016260                            loc_14894:
00016260 0C41 000E                  		cmpi.w	#$E,d1
00016264 6E00                       		bgt.s	loc_148A0
00016266                            
00016266                            loc_1489A:
00016266 9368 000C                  		sub.w	d1,$C(a0)
0001626A 4E75                       		rts	
0001626C                            ; ===========================================================================
0001626C                            
0001626C                            loc_148A0:
0001626C 4A28 0038                  		tst.b	$38(a0)
00016270 66F4                       		bne.s	loc_1489A
00016272 08E8 0001 0022             		bset	#1,$22(a0)
00016278 08A8 0005 0022             		bclr	#5,$22(a0)
0001627E 117C 0001 001D             		move.b	#1,$1D(a0)
00016284 4E75                       		rts	
00016286                            ; End of function Sonic_WalkCeiling
00016286                            
00016286                            ; ---------------------------------------------------------------------------
00016286                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
00016286                            ; ---------------------------------------------------------------------------
00016286                            
00016286                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016286                            
00016286                            
00016286                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
00016286 3428 000C                  		move.w	$C(a0),d2
0001628A 3628 0008                  		move.w	8(a0),d3
0001628E 7000                       		moveq	#0,d0
00016290 1028 0017                  		move.b	$17(a0),d0
00016294 4880                       		ext.w	d0
00016296 9440                       		sub.w	d0,d2
00016298 1028 0016                  		move.b	$16(a0),d0
0001629C 4880                       		ext.w	d0
0001629E 9640                       		sub.w	d0,d3
000162A0 0A43 000F                  		eori.w	#$F,d3
000162A4 49F8 F768                  		lea	($FFFFF768).w,a4
000162A8 367C FFF0                  		movea.w	#-$10,a3
000162AC 3C3C 0800                  		move.w	#$800,d6
000162B0 7A0D                       		moveq	#$D,d5
000162B2 6100 0000                  		bsr.w	FindWall
000162B6 3F01                       		move.w	d1,-(sp)
000162B8 3428 000C                  		move.w	$C(a0),d2
000162BC 3628 0008                  		move.w	8(a0),d3
000162C0 7000                       		moveq	#0,d0
000162C2 1028 0017                  		move.b	$17(a0),d0
000162C6 4880                       		ext.w	d0
000162C8 D440                       		add.w	d0,d2
000162CA 1028 0016                  		move.b	$16(a0),d0
000162CE 4880                       		ext.w	d0
000162D0 9640                       		sub.w	d0,d3
000162D2 0A43 000F                  		eori.w	#$F,d3
000162D6 49F8 F76A                  		lea	($FFFFF76A).w,a4
000162DA 367C FFF0                  		movea.w	#-$10,a3
000162DE 3C3C 0800                  		move.w	#$800,d6
000162E2 7A0D                       		moveq	#$D,d5
000162E4 6100 0000                  		bsr.w	FindWall
000162E8 301F                       		move.w	(sp)+,d0
000162EA 6100 FE30                  		bsr.w	Sonic_Angle
000162EE 4A41                       		tst.w	d1
000162F0 6700                       		beq.s	locret_14934
000162F2 6A00                       		bpl.s	loc_14936
000162F4 0C41 FFF2                  		cmpi.w	#-$E,d1
000162F8 6D00 FDDC                  		blt.w	locret_1470A
000162FC 9368 0008                  		sub.w	d1,8(a0)
00016300                            
00016300                            locret_14934:
00016300 4E75                       		rts	
00016302                            ; ===========================================================================
00016302                            
00016302                            loc_14936:
00016302 0C41 000E                  		cmpi.w	#$E,d1
00016306 6E00                       		bgt.s	loc_14942
00016308                            
00016308                            loc_1493C:
00016308 9368 0008                  		sub.w	d1,8(a0)
0001630C 4E75                       		rts	
0001630E                            ; ===========================================================================
0001630E                            
0001630E                            loc_14942:
0001630E 4A28 0038                  		tst.b	$38(a0)
00016312 66F4                       		bne.s	loc_1493C
00016314 08E8 0001 0022             		bset	#1,$22(a0)
0001631A 08A8 0005 0022             		bclr	#5,$22(a0)
00016320 117C 0001 001D             		move.b	#1,$1D(a0)
00016326 4E75                       		rts	
00016328                            ; End of function Sonic_WalkVertL
00016328                            
00016328                            ; ---------------------------------------------------------------------------
00016328                            ; Subroutine to	find which tile	the object is standing on
00016328                            ; ---------------------------------------------------------------------------
00016328                            
00016328                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016328                            
00016328                            
00016328                            Floor_ChkTile:				; XREF: FindFloor; et al
00016328 3002                       		move.w	d2,d0
0001632A E248                       		lsr.w	#1,d0
0001632C 0240 0380                  		andi.w	#$380,d0
00016330 3203                       		move.w	d3,d1
00016332 E049                       		lsr.w	#8,d1
00016334 0241 007F                  		andi.w	#$7F,d1
00016338 D041                       		add.w	d1,d0
0001633A 72FF                       		moveq	#-1,d1
0001633C 43F8 A400                  		lea	($FFFFA400).w,a1
00016340 1231 0000                  		move.b	(a1,d0.w),d1
00016344 6700                       		beq.s	loc_14996
00016346 6B00                       		bmi.s	loc_1499A
00016348 5301                       		subq.b	#1,d1
0001634A 4881                       		ext.w	d1
0001634C EE59                       		ror.w	#7,d1
0001634E 3002                       		move.w	d2,d0
00016350 D040                       		add.w	d0,d0
00016352 0240 01E0                  		andi.w	#$1E0,d0
00016356 D240                       		add.w	d0,d1
00016358 3003                       		move.w	d3,d0
0001635A E648                       		lsr.w	#3,d0
0001635C 0240 001E                  		andi.w	#$1E,d0
00016360 D240                       		add.w	d0,d1
00016362                            
00016362                            loc_14996:
00016362 2241                       		movea.l	d1,a1
00016364 4E75                       		rts	
00016366                            ; ===========================================================================
00016366                            
00016366                            loc_1499A:
00016366 0241 007F                  		andi.w	#$7F,d1
0001636A 0828 0006 0001             		btst	#6,1(a0)
00016370 6700                       		beq.s	loc_149B2
00016372 5241                       		addq.w	#1,d1
00016374 0C41 0029                  		cmpi.w	#$29,d1
00016378 6600                       		bne.s	loc_149B2
0001637A 323C 0051                  		move.w	#$51,d1
0001637E                            
0001637E                            loc_149B2:
0001637E 5301                       		subq.b	#1,d1
00016380 EE59                       		ror.w	#7,d1
00016382 3002                       		move.w	d2,d0
00016384 D040                       		add.w	d0,d0
00016386 0240 01E0                  		andi.w	#$1E0,d0
0001638A D240                       		add.w	d0,d1
0001638C 3003                       		move.w	d3,d0
0001638E E648                       		lsr.w	#3,d0
00016390 0240 001E                  		andi.w	#$1E,d0
00016394 D240                       		add.w	d0,d1
00016396 2241                       		movea.l	d1,a1
00016398 4E75                       		rts	
0001639A                            ; End of function Floor_ChkTile
0001639A                            
0001639A                            
0001639A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001639A                            
0001639A                            
0001639A                            FindFloor:				; XREF: Sonic_AnglePos; et al
0001639A 618C                       		bsr.s	Floor_ChkTile
0001639C 3011                       		move.w	(a1),d0
0001639E 3800                       		move.w	d0,d4
000163A0 0240 07FF                  		andi.w	#$7FF,d0
000163A4 6700                       		beq.s	loc_149DE
000163A6 0B04                       		btst	d5,d4
000163A8 6600                       		bne.s	loc_149EC
000163AA                            
000163AA                            loc_149DE:
000163AA D44B                       		add.w	a3,d2
000163AC 6100 0000                  		bsr.w	FindFloor2
000163B0 944B                       		sub.w	a3,d2
000163B2 0641 0010                  		addi.w	#$10,d1
000163B6 4E75                       		rts	
000163B8                            ; ===========================================================================
000163B8                            
000163B8                            loc_149EC:
000163B8 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
000163BC 1032 0000                  		move.b	(a2,d0.w),d0
000163C0 0240 00FF                  		andi.w	#$FF,d0
000163C4 67E4                       		beq.s	loc_149DE
000163C6 45F9 0000 0000             		lea	(AngleMap).l,a2
000163CC 18B2 0000                  		move.b	(a2,d0.w),(a4)
000163D0 E948                       		lsl.w	#4,d0
000163D2 3203                       		move.w	d3,d1
000163D4 0804 000B                  		btst	#$B,d4
000163D8 6700                       		beq.s	loc_14A12
000163DA 4641                       		not.w	d1
000163DC 4414                       		neg.b	(a4)
000163DE                            
000163DE                            loc_14A12:
000163DE 0804 000C                  		btst	#$C,d4
000163E2 6700                       		beq.s	loc_14A22
000163E4 0614 0040                  		addi.b	#$40,(a4)
000163E8 4414                       		neg.b	(a4)
000163EA 0414 0040                  		subi.b	#$40,(a4)
000163EE                            
000163EE                            loc_14A22:
000163EE 0241 000F                  		andi.w	#$F,d1
000163F2 D240                       		add.w	d0,d1
000163F4 45F9 0000 0000             		lea	(CollArray1).l,a2
000163FA 1032 1000                  		move.b	(a2,d1.w),d0
000163FE 4880                       		ext.w	d0
00016400 BD44                       		eor.w	d6,d4
00016402 0804 000C                  		btst	#$C,d4
00016406 6700                       		beq.s	loc_14A3E
00016408 4440                       		neg.w	d0
0001640A                            
0001640A                            loc_14A3E:
0001640A 4A40                       		tst.w	d0
0001640C 679C                       		beq.s	loc_149DE
0001640E 6B00                       		bmi.s	loc_14A5A
00016410 0C00 0010                  		cmpi.b	#$10,d0
00016414 6700                       		beq.s	loc_14A66
00016416 3202                       		move.w	d2,d1
00016418 0241 000F                  		andi.w	#$F,d1
0001641C D041                       		add.w	d1,d0
0001641E 323C 000F                  		move.w	#$F,d1
00016422 9240                       		sub.w	d0,d1
00016424 4E75                       		rts	
00016426                            ; ===========================================================================
00016426                            
00016426                            loc_14A5A:
00016426 3202                       		move.w	d2,d1
00016428 0241 000F                  		andi.w	#$F,d1
0001642C D041                       		add.w	d1,d0
0001642E 6A00 FF7A                  		bpl.w	loc_149DE
00016432                            
00016432                            loc_14A66:
00016432 944B                       		sub.w	a3,d2
00016434 6100 0000                  		bsr.w	FindFloor2
00016438 D44B                       		add.w	a3,d2
0001643A 0441 0010                  		subi.w	#$10,d1
0001643E 4E75                       		rts	
00016440                            ; End of function FindFloor
00016440                            
00016440                            
00016440                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016440                            
00016440                            
00016440                            FindFloor2:				; XREF: FindFloor
00016440 6100 FEE6                  		bsr.w	Floor_ChkTile
00016444 3011                       		move.w	(a1),d0
00016446 3800                       		move.w	d0,d4
00016448 0240 07FF                  		andi.w	#$7FF,d0
0001644C 6700                       		beq.s	loc_14A86
0001644E 0B04                       		btst	d5,d4
00016450 6600                       		bne.s	loc_14A94
00016452                            
00016452                            loc_14A86:
00016452 323C 000F                  		move.w	#$F,d1
00016456 3002                       		move.w	d2,d0
00016458 0240 000F                  		andi.w	#$F,d0
0001645C 9240                       		sub.w	d0,d1
0001645E 4E75                       		rts	
00016460                            ; ===========================================================================
00016460                            
00016460                            loc_14A94:
00016460 2478 F796                  		movea.l	($FFFFF796).w,a2
00016464 1032 0000                  		move.b	(a2,d0.w),d0
00016468 0240 00FF                  		andi.w	#$FF,d0
0001646C 67E4                       		beq.s	loc_14A86
0001646E 45F9 0000 0000             		lea	(AngleMap).l,a2
00016474 18B2 0000                  		move.b	(a2,d0.w),(a4)
00016478 E948                       		lsl.w	#4,d0
0001647A 3203                       		move.w	d3,d1
0001647C 0804 000B                  		btst	#$B,d4
00016480 6700                       		beq.s	loc_14ABA
00016482 4641                       		not.w	d1
00016484 4414                       		neg.b	(a4)
00016486                            
00016486                            loc_14ABA:
00016486 0804 000C                  		btst	#$C,d4
0001648A 6700                       		beq.s	loc_14ACA
0001648C 0614 0040                  		addi.b	#$40,(a4)
00016490 4414                       		neg.b	(a4)
00016492 0414 0040                  		subi.b	#$40,(a4)
00016496                            
00016496                            loc_14ACA:
00016496 0241 000F                  		andi.w	#$F,d1
0001649A D240                       		add.w	d0,d1
0001649C 45F9 0000 0000             		lea	(CollArray1).l,a2
000164A2 1032 1000                  		move.b	(a2,d1.w),d0
000164A6 4880                       		ext.w	d0
000164A8 BD44                       		eor.w	d6,d4
000164AA 0804 000C                  		btst	#$C,d4
000164AE 6700                       		beq.s	loc_14AE6
000164B0 4440                       		neg.w	d0
000164B2                            
000164B2                            loc_14AE6:
000164B2 4A40                       		tst.w	d0
000164B4 679C                       		beq.s	loc_14A86
000164B6 6B00                       		bmi.s	loc_14AFC
000164B8 3202                       		move.w	d2,d1
000164BA 0241 000F                  		andi.w	#$F,d1
000164BE D041                       		add.w	d1,d0
000164C0 323C 000F                  		move.w	#$F,d1
000164C4 9240                       		sub.w	d0,d1
000164C6 4E75                       		rts	
000164C8                            ; ===========================================================================
000164C8                            
000164C8                            loc_14AFC:
000164C8 3202                       		move.w	d2,d1
000164CA 0241 000F                  		andi.w	#$F,d1
000164CE D041                       		add.w	d1,d0
000164D0 6A00 FF80                  		bpl.w	loc_14A86
000164D4 4641                       		not.w	d1
000164D6 4E75                       		rts	
000164D8                            ; End of function FindFloor2
000164D8                            
000164D8                            
000164D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000164D8                            
000164D8                            
000164D8                            FindWall:				; XREF: Sonic_WalkVertR; et al
000164D8 6100 FE4E                  		bsr.w	Floor_ChkTile
000164DC 3011                       		move.w	(a1),d0
000164DE 3800                       		move.w	d0,d4
000164E0 0240 07FF                  		andi.w	#$7FF,d0
000164E4 6700                       		beq.s	loc_14B1E
000164E6 0B04                       		btst	d5,d4
000164E8 6600                       		bne.s	loc_14B2C
000164EA                            
000164EA                            loc_14B1E:
000164EA D64B                       		add.w	a3,d3
000164EC 6100 0000                  		bsr.w	FindWall2
000164F0 964B                       		sub.w	a3,d3
000164F2 0641 0010                  		addi.w	#$10,d1
000164F6 4E75                       		rts	
000164F8                            ; ===========================================================================
000164F8                            
000164F8                            loc_14B2C:
000164F8 2478 F796                  		movea.l	($FFFFF796).w,a2
000164FC 1032 0000                  		move.b	(a2,d0.w),d0
00016500 0240 00FF                  		andi.w	#$FF,d0
00016504 67E4                       		beq.s	loc_14B1E
00016506 45F9 0000 0000             		lea	(AngleMap).l,a2
0001650C 18B2 0000                  		move.b	(a2,d0.w),(a4)
00016510 E948                       		lsl.w	#4,d0
00016512 3202                       		move.w	d2,d1
00016514 0804 000C                  		btst	#$C,d4
00016518 6700                       		beq.s	loc_14B5A
0001651A 4641                       		not.w	d1
0001651C 0614 0040                  		addi.b	#$40,(a4)
00016520 4414                       		neg.b	(a4)
00016522 0414 0040                  		subi.b	#$40,(a4)
00016526                            
00016526                            loc_14B5A:
00016526 0804 000B                  		btst	#$B,d4
0001652A 6700                       		beq.s	loc_14B62
0001652C 4414                       		neg.b	(a4)
0001652E                            
0001652E                            loc_14B62:
0001652E 0241 000F                  		andi.w	#$F,d1
00016532 D240                       		add.w	d0,d1
00016534 45F9 0000 0000             		lea	(CollArray2).l,a2
0001653A 1032 1000                  		move.b	(a2,d1.w),d0
0001653E 4880                       		ext.w	d0
00016540 BD44                       		eor.w	d6,d4
00016542 0804 000B                  		btst	#$B,d4
00016546 6700                       		beq.s	loc_14B7E
00016548 4440                       		neg.w	d0
0001654A                            
0001654A                            loc_14B7E:
0001654A 4A40                       		tst.w	d0
0001654C 679C                       		beq.s	loc_14B1E
0001654E 6B00                       		bmi.s	loc_14B9A
00016550 0C00 0010                  		cmpi.b	#$10,d0
00016554 6700                       		beq.s	loc_14BA6
00016556 3203                       		move.w	d3,d1
00016558 0241 000F                  		andi.w	#$F,d1
0001655C D041                       		add.w	d1,d0
0001655E 323C 000F                  		move.w	#$F,d1
00016562 9240                       		sub.w	d0,d1
00016564 4E75                       		rts	
00016566                            ; ===========================================================================
00016566                            
00016566                            loc_14B9A:
00016566 3203                       		move.w	d3,d1
00016568 0241 000F                  		andi.w	#$F,d1
0001656C D041                       		add.w	d1,d0
0001656E 6A00 FF7A                  		bpl.w	loc_14B1E
00016572                            
00016572                            loc_14BA6:
00016572 964B                       		sub.w	a3,d3
00016574 6100 0000                  		bsr.w	FindWall2
00016578 D64B                       		add.w	a3,d3
0001657A 0441 0010                  		subi.w	#$10,d1
0001657E 4E75                       		rts	
00016580                            ; End of function FindWall
00016580                            
00016580                            
00016580                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016580                            
00016580                            
00016580                            FindWall2:				; XREF: FindWall
00016580 6100 FDA6                  		bsr.w	Floor_ChkTile
00016584 3011                       		move.w	(a1),d0
00016586 3800                       		move.w	d0,d4
00016588 0240 07FF                  		andi.w	#$7FF,d0
0001658C 6700                       		beq.s	loc_14BC6
0001658E 0B04                       		btst	d5,d4
00016590 6600                       		bne.s	loc_14BD4
00016592                            
00016592                            loc_14BC6:
00016592 323C 000F                  		move.w	#$F,d1
00016596 3003                       		move.w	d3,d0
00016598 0240 000F                  		andi.w	#$F,d0
0001659C 9240                       		sub.w	d0,d1
0001659E 4E75                       		rts	
000165A0                            ; ===========================================================================
000165A0                            
000165A0                            loc_14BD4:
000165A0 2478 F796                  		movea.l	($FFFFF796).w,a2
000165A4 1032 0000                  		move.b	(a2,d0.w),d0
000165A8 0240 00FF                  		andi.w	#$FF,d0
000165AC 67E4                       		beq.s	loc_14BC6
000165AE 45F9 0000 0000             		lea	(AngleMap).l,a2
000165B4 18B2 0000                  		move.b	(a2,d0.w),(a4)
000165B8 E948                       		lsl.w	#4,d0
000165BA 3202                       		move.w	d2,d1
000165BC 0804 000C                  		btst	#$C,d4
000165C0 6700                       		beq.s	loc_14C02
000165C2 4641                       		not.w	d1
000165C4 0614 0040                  		addi.b	#$40,(a4)
000165C8 4414                       		neg.b	(a4)
000165CA 0414 0040                  		subi.b	#$40,(a4)
000165CE                            
000165CE                            loc_14C02:
000165CE 0804 000B                  		btst	#$B,d4
000165D2 6700                       		beq.s	loc_14C0A
000165D4 4414                       		neg.b	(a4)
000165D6                            
000165D6                            loc_14C0A:
000165D6 0241 000F                  		andi.w	#$F,d1
000165DA D240                       		add.w	d0,d1
000165DC 45F9 0000 0000             		lea	(CollArray2).l,a2
000165E2 1032 1000                  		move.b	(a2,d1.w),d0
000165E6 4880                       		ext.w	d0
000165E8 BD44                       		eor.w	d6,d4
000165EA 0804 000B                  		btst	#$B,d4
000165EE 6700                       		beq.s	loc_14C26
000165F0 4440                       		neg.w	d0
000165F2                            
000165F2                            loc_14C26:
000165F2 4A40                       		tst.w	d0
000165F4 679C                       		beq.s	loc_14BC6
000165F6 6B00                       		bmi.s	loc_14C3C
000165F8 3203                       		move.w	d3,d1
000165FA 0241 000F                  		andi.w	#$F,d1
000165FE D041                       		add.w	d1,d0
00016600 323C 000F                  		move.w	#$F,d1
00016604 9240                       		sub.w	d0,d1
00016606 4E75                       		rts	
00016608                            ; ===========================================================================
00016608                            
00016608                            loc_14C3C:
00016608 3203                       		move.w	d3,d1
0001660A 0241 000F                  		andi.w	#$F,d1
0001660E D041                       		add.w	d1,d0
00016610 6A00 FF80                  		bpl.w	loc_14BC6
00016614 4641                       		not.w	d1
00016616 4E75                       		rts	
00016618                            ; End of function FindWall2
00016618                            
00016618                            ; ---------------------------------------------------------------------------
00016618                            ; Unused floor/wall subroutine - logs something	to do with collision
00016618                            ; ---------------------------------------------------------------------------
00016618                            
00016618                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016618                            
00016618                            
00016618                            FloorLog_Unk:				; XREF: Level
00016618 4E75                       		rts	
0001661A                            
0001661A 43F9 0000 0000             		lea	(CollArray1).l,a1
00016620 45F9 0000 0000             		lea	(CollArray1).l,a2
00016626 363C 00FF                  		move.w	#$FF,d3
0001662A                            
0001662A                            loc_14C5E:
0001662A 7A10                       		moveq	#$10,d5
0001662C 343C 000F                  		move.w	#$F,d2
00016630                            
00016630                            loc_14C64:
00016630 7800                       		moveq	#0,d4
00016632 323C 000F                  		move.w	#$F,d1
00016636                            
00016636                            loc_14C6A:
00016636 3019                       		move.w	(a1)+,d0
00016638 EAA8                       		lsr.l	d5,d0
0001663A D944                       		addx.w	d4,d4
0001663C 51C9 FFF8                  		dbf	d1,loc_14C6A
00016640                            
00016640 34C4                       		move.w	d4,(a2)+
00016642 92FC 0020                  		suba.w	#$20,a1
00016646 5345                       		subq.w	#1,d5
00016648 51CA FFE6                  		dbf	d2,loc_14C64
0001664C                            
0001664C D2FC 0020                  		adda.w	#$20,a1
00016650 51CB FFD8                  		dbf	d3,loc_14C5E
00016654                            
00016654 43F9 0000 0000             		lea	(CollArray1).l,a1
0001665A 45F9 0000 0000             		lea	(CollArray2).l,a2
00016660 6100                       		bsr.s	FloorLog_Unk2
00016662 43F9 0000 0000             		lea	(CollArray1).l,a1
00016668 45F9 0000 0000             		lea	(CollArray1).l,a2
0001666E                            
0001666E                            ; End of function FloorLog_Unk
0001666E                            
0001666E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001666E                            
0001666E                            
0001666E                            FloorLog_Unk2:				; XREF: FloorLog_Unk
0001666E 363C 0FFF                  		move.w	#$FFF,d3
00016672                            
00016672                            loc_14CA6:
00016672 7400                       		moveq	#0,d2
00016674 323C 000F                  		move.w	#$F,d1
00016678 3019                       		move.w	(a1)+,d0
0001667A 6700                       		beq.s	loc_14CD4
0001667C 6B00                       		bmi.s	loc_14CBE
0001667E                            
0001667E                            loc_14CB2:
0001667E E248                       		lsr.w	#1,d0
00016680 6400                       		bcc.s	loc_14CB8
00016682 5202                       		addq.b	#1,d2
00016684                            
00016684                            loc_14CB8:
00016684 51C9 FFF8                  		dbf	d1,loc_14CB2
00016688                            
00016688 6000                       		bra.s	loc_14CD6
0001668A                            ; ===========================================================================
0001668A                            
0001668A                            loc_14CBE:
0001668A 0C40 FFFF                  		cmpi.w	#-1,d0
0001668E 6700                       		beq.s	loc_14CD0
00016690                            
00016690                            loc_14CC4:
00016690 E348                       		lsl.w	#1,d0
00016692 6400                       		bcc.s	loc_14CCA
00016694 5302                       		subq.b	#1,d2
00016696                            
00016696                            loc_14CCA:
00016696 51C9 FFF8                  		dbf	d1,loc_14CC4
0001669A                            
0001669A 6000                       		bra.s	loc_14CD6
0001669C                            ; ===========================================================================
0001669C                            
0001669C                            loc_14CD0:
0001669C 303C 0010                  		move.w	#$10,d0
000166A0                            
000166A0                            loc_14CD4:
000166A0 3400                       		move.w	d0,d2
000166A2                            
000166A2                            loc_14CD6:
000166A2 14C2                       		move.b	d2,(a2)+
000166A4 51CB FFCC                  		dbf	d3,loc_14CA6
000166A8                            
000166A8 4E75                       		rts	
000166AA                            
000166AA                            ; End of function FloorLog_Unk2
000166AA                            
000166AA                            
000166AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000166AA                            
000166AA                            
000166AA                            Sonic_WalkSpeed:			; XREF: Sonic_Move
000166AA 2628 0008                  		move.l	8(a0),d3
000166AE 2428 000C                  		move.l	$C(a0),d2
000166B2 3228 0010                  		move.w	$10(a0),d1
000166B6 48C1                       		ext.l	d1
000166B8 E181                       		asl.l	#8,d1
000166BA D681                       		add.l	d1,d3
000166BC 3228 0012                  		move.w	$12(a0),d1
000166C0 48C1                       		ext.l	d1
000166C2 E181                       		asl.l	#8,d1
000166C4 D481                       		add.l	d1,d2
000166C6 4842                       		swap	d2
000166C8 4843                       		swap	d3
000166CA 11C0 F768                  		move.b	d0,($FFFFF768).w
000166CE 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000166D2 1200                       		move.b	d0,d1
000166D4 0600 0020                  		addi.b	#$20,d0
000166D8 6A00                       		bpl.s	loc_14D1A
000166DA 1001                       		move.b	d1,d0
000166DC 6A00                       		bpl.s	loc_14D14
000166DE 5300                       		subq.b	#1,d0
000166E0                            
000166E0                            loc_14D14:
000166E0 0600 0020                  		addi.b	#$20,d0
000166E4 6000                       		bra.s	loc_14D24
000166E6                            ; ===========================================================================
000166E6                            
000166E6                            loc_14D1A:
000166E6 1001                       		move.b	d1,d0
000166E8 6A00                       		bpl.s	loc_14D20
000166EA 5200                       		addq.b	#1,d0
000166EC                            
000166EC                            loc_14D20:
000166EC 0600 001F                  		addi.b	#$1F,d0
000166F0                            
000166F0                            loc_14D24:
000166F0 0200 00C0                  		andi.b	#$C0,d0
000166F4 6700 0000                  		beq.w	loc_14DF0
000166F8 0C00 0080                  		cmpi.b	#$80,d0
000166FC 6700 0000                  		beq.w	loc_14F7C
00016700 0201 0038                  		andi.b	#$38,d1
00016704 6600                       		bne.s	loc_14D3C
00016706 5042                       		addq.w	#8,d2
00016708                            
00016708                            loc_14D3C:
00016708 0C00 0040                  		cmpi.b	#$40,d0
0001670C 6700 0000                  		beq.w	loc_1504A
00016710 6000 0000                  		bra.w	loc_14EBC
00016714                            
00016714                            ; End of function Sonic_WalkSpeed
00016714                            
00016714                            
00016714                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016714                            
00016714                            
00016714                            sub_14D48:				; XREF: Sonic_Jump
00016714 11C0 F768                  		move.b	d0,($FFFFF768).w
00016718 11C0 F76A                  		move.b	d0,($FFFFF76A).w
0001671C 0600 0020                  		addi.b	#$20,d0
00016720 0200 00C0                  		andi.b	#$C0,d0
00016724 0C00 0040                  		cmpi.b	#$40,d0
00016728 6700 0000                  		beq.w	loc_14FD6
0001672C 0C00 0080                  		cmpi.b	#$80,d0
00016730 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00016734 0C00 00C0                  		cmpi.b	#$C0,d0
00016738 6700 0000                  		beq.w	sub_14E50
0001673C                            
0001673C                            ; End of function sub_14D48
0001673C                            
0001673C                            ; ---------------------------------------------------------------------------
0001673C                            ; Subroutine to	make Sonic land	on the floor after jumping
0001673C                            ; ---------------------------------------------------------------------------
0001673C                            
0001673C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001673C                            
0001673C                            
0001673C                            Sonic_HitFloor:				; XREF: Sonic_Floor
0001673C 3428 000C                  		move.w	$C(a0),d2
00016740 3628 0008                  		move.w	8(a0),d3
00016744 7000                       		moveq	#0,d0
00016746 1028 0016                  		move.b	$16(a0),d0
0001674A 4880                       		ext.w	d0
0001674C D440                       		add.w	d0,d2
0001674E 1028 0017                  		move.b	$17(a0),d0
00016752 4880                       		ext.w	d0
00016754 D640                       		add.w	d0,d3
00016756 49F8 F768                  		lea	($FFFFF768).w,a4
0001675A 367C 0010                  		movea.w	#$10,a3
0001675E 3C3C 0000                  		move.w	#0,d6
00016762 7A0D                       		moveq	#$D,d5
00016764 6100 FC34                  		bsr.w	FindFloor
00016768 3F01                       		move.w	d1,-(sp)
0001676A 3428 000C                  		move.w	$C(a0),d2
0001676E 3628 0008                  		move.w	8(a0),d3
00016772 7000                       		moveq	#0,d0
00016774 1028 0016                  		move.b	$16(a0),d0
00016778 4880                       		ext.w	d0
0001677A D440                       		add.w	d0,d2
0001677C 1028 0017                  		move.b	$17(a0),d0
00016780 4880                       		ext.w	d0
00016782 9640                       		sub.w	d0,d3
00016784 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016788 367C 0010                  		movea.w	#$10,a3
0001678C 3C3C 0000                  		move.w	#0,d6
00016790 7A0D                       		moveq	#$D,d5
00016792 6100 FC06                  		bsr.w	FindFloor
00016796 301F                       		move.w	(sp)+,d0
00016798 143C 0000                  		move.b	#0,d2
0001679C                            
0001679C                            loc_14DD0:
0001679C 1638 F76A                  		move.b	($FFFFF76A).w,d3
000167A0 B240                       		cmp.w	d0,d1
000167A2 6F00                       		ble.s	loc_14DDE
000167A4 1638 F768                  		move.b	($FFFFF768).w,d3
000167A8 C141                       		exg	d0,d1
000167AA                            
000167AA                            loc_14DDE:
000167AA 0803 0000                  		btst	#0,d3
000167AE 6700                       		beq.s	locret_14DE6
000167B0 1602                       		move.b	d2,d3
000167B2                            
000167B2                            locret_14DE6:
000167B2 4E75                       		rts	
000167B4                            
000167B4                            ; End of function Sonic_HitFloor
000167B4                            
000167B4                            ; ===========================================================================
000167B4 3428 000C                  		move.w	$C(a0),d2
000167B8 3628 0008                  		move.w	8(a0),d3
000167BC                            
000167BC                            loc_14DF0:				; XREF: Sonic_WalkSpeed
000167BC 0642 000A                  		addi.w	#$A,d2
000167C0 49F8 F768                  		lea	($FFFFF768).w,a4
000167C4 367C 0010                  		movea.w	#$10,a3
000167C8 3C3C 0000                  		move.w	#0,d6
000167CC 7A0E                       		moveq	#$E,d5
000167CE 6100 FBCA                  		bsr.w	FindFloor
000167D2 143C 0000                  		move.b	#0,d2
000167D6                            
000167D6                            loc_14E0A:				; XREF: sub_14EB4
000167D6 1638 F768                  		move.b	($FFFFF768).w,d3
000167DA 0803 0000                  		btst	#0,d3
000167DE 6700                       		beq.s	locret_14E16
000167E0 1602                       		move.b	d2,d3
000167E2                            
000167E2                            locret_14E16:
000167E2 4E75                       		rts	
000167E4                            
000167E4                            ; ---------------------------------------------------------------------------
000167E4                            ; Subroutine allowing objects to interact with the floor
000167E4                            ; ---------------------------------------------------------------------------
000167E4                            
000167E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000167E4                            
000167E4                            
000167E4                            ObjHitFloor:
000167E4 3628 0008                  		move.w	8(a0),d3
000167E8                            
000167E8                            ; End of function ObjHitFloor
000167E8                            
000167E8                            
000167E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000167E8                            
000167E8                            
000167E8                            ObjHitFloor2:
000167E8 3428 000C                  		move.w	$C(a0),d2
000167EC 7000                       		moveq	#0,d0
000167EE 1028 0016                  		move.b	$16(a0),d0
000167F2 4880                       		ext.w	d0
000167F4 D440                       		add.w	d0,d2
000167F6 49F8 F768                  		lea	($FFFFF768).w,a4
000167FA 18BC 0000                  		move.b	#0,(a4)
000167FE 367C 0010                  		movea.w	#$10,a3
00016802 3C3C 0000                  		move.w	#0,d6
00016806 7A0D                       		moveq	#$D,d5
00016808 6100 FB90                  		bsr.w	FindFloor
0001680C 1638 F768                  		move.b	($FFFFF768).w,d3
00016810 0803 0000                  		btst	#0,d3
00016814 6700                       		beq.s	locret_14E4E
00016816 163C 0000                  		move.b	#0,d3
0001681A                            
0001681A                            locret_14E4E:
0001681A 4E75                       		rts	
0001681C                            ; End of function ObjHitFloor2
0001681C                            
0001681C                            
0001681C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001681C                            
0001681C                            
0001681C                            sub_14E50:				; XREF: sub_14D48
0001681C 3428 000C                  		move.w	$C(a0),d2
00016820 3628 0008                  		move.w	8(a0),d3
00016824 7000                       		moveq	#0,d0
00016826 1028 0017                  		move.b	$17(a0),d0
0001682A 4880                       		ext.w	d0
0001682C 9440                       		sub.w	d0,d2
0001682E 1028 0016                  		move.b	$16(a0),d0
00016832 4880                       		ext.w	d0
00016834 D640                       		add.w	d0,d3
00016836 49F8 F768                  		lea	($FFFFF768).w,a4
0001683A 367C 0010                  		movea.w	#$10,a3
0001683E 3C3C 0000                  		move.w	#0,d6
00016842 7A0E                       		moveq	#$E,d5
00016844 6100 FC92                  		bsr.w	FindWall
00016848 3F01                       		move.w	d1,-(sp)
0001684A 3428 000C                  		move.w	$C(a0),d2
0001684E 3628 0008                  		move.w	8(a0),d3
00016852 7000                       		moveq	#0,d0
00016854 1028 0017                  		move.b	$17(a0),d0
00016858 4880                       		ext.w	d0
0001685A D440                       		add.w	d0,d2
0001685C 1028 0016                  		move.b	$16(a0),d0
00016860 4880                       		ext.w	d0
00016862 D640                       		add.w	d0,d3
00016864 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016868 367C 0010                  		movea.w	#$10,a3
0001686C 3C3C 0000                  		move.w	#0,d6
00016870 7A0E                       		moveq	#$E,d5
00016872 6100 FC64                  		bsr.w	FindWall
00016876 301F                       		move.w	(sp)+,d0
00016878 143C 00C0                  		move.b	#-$40,d2
0001687C 6000 FF1E                  		bra.w	loc_14DD0
00016880                            
00016880                            ; End of function sub_14E50
00016880                            
00016880                            
00016880                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016880                            
00016880                            
00016880                            sub_14EB4:				; XREF: Sonic_Floor
00016880 3428 000C                  		move.w	$C(a0),d2
00016884 3628 0008                  		move.w	8(a0),d3
00016888                            
00016888                            loc_14EBC:
00016888 0643 000A                  		addi.w	#$A,d3
0001688C 49F8 F768                  		lea	($FFFFF768).w,a4
00016890 367C 0010                  		movea.w	#$10,a3
00016894 3C3C 0000                  		move.w	#0,d6
00016898 7A0E                       		moveq	#$E,d5
0001689A 6100 FC3C                  		bsr.w	FindWall
0001689E 143C 00C0                  		move.b	#-$40,d2
000168A2 6000 FF32                  		bra.w	loc_14E0A
000168A6                            
000168A6                            ; End of function sub_14EB4
000168A6                            
000168A6                            ; ---------------------------------------------------------------------------
000168A6                            ; Subroutine to	detect when an object hits a wall to its right
000168A6                            ; ---------------------------------------------------------------------------
000168A6                            
000168A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000168A6                            
000168A6                            
000168A6                            ObjHitWallRight:
000168A6 D668 0008                  		add.w	8(a0),d3
000168AA 3428 000C                  		move.w	$C(a0),d2
000168AE 49F8 F768                  		lea	($FFFFF768).w,a4
000168B2 18BC 0000                  		move.b	#0,(a4)
000168B6 367C 0010                  		movea.w	#$10,a3
000168BA 3C3C 0000                  		move.w	#0,d6
000168BE 7A0E                       		moveq	#$E,d5
000168C0 6100 FC16                  		bsr.w	FindWall
000168C4 1638 F768                  		move.b	($FFFFF768).w,d3
000168C8 0803 0000                  		btst	#0,d3
000168CC 6700                       		beq.s	locret_14F06
000168CE 163C 00C0                  		move.b	#-$40,d3
000168D2                            
000168D2                            locret_14F06:
000168D2 4E75                       		rts	
000168D4                            
000168D4                            ; End of function ObjHitWallRight
000168D4                            
000168D4                            ; ---------------------------------------------------------------------------
000168D4                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
000168D4                            ; touches them
000168D4                            ; ---------------------------------------------------------------------------
000168D4                            
000168D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000168D4                            
000168D4                            
000168D4                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
000168D4 3428 000C                  		move.w	$C(a0),d2
000168D8 3628 0008                  		move.w	8(a0),d3
000168DC 7000                       		moveq	#0,d0
000168DE 1028 0016                  		move.b	$16(a0),d0
000168E2 4880                       		ext.w	d0
000168E4 9440                       		sub.w	d0,d2
000168E6 0A42 000F                  		eori.w	#$F,d2
000168EA 1028 0017                  		move.b	$17(a0),d0
000168EE 4880                       		ext.w	d0
000168F0 D640                       		add.w	d0,d3
000168F2 49F8 F768                  		lea	($FFFFF768).w,a4
000168F6 367C FFF0                  		movea.w	#-$10,a3
000168FA 3C3C 1000                  		move.w	#$1000,d6
000168FE 7A0E                       		moveq	#$E,d5
00016900 6100 FA98                  		bsr.w	FindFloor
00016904 3F01                       		move.w	d1,-(sp)
00016906 3428 000C                  		move.w	$C(a0),d2
0001690A 3628 0008                  		move.w	8(a0),d3
0001690E 7000                       		moveq	#0,d0
00016910 1028 0016                  		move.b	$16(a0),d0
00016914 4880                       		ext.w	d0
00016916 9440                       		sub.w	d0,d2
00016918 0A42 000F                  		eori.w	#$F,d2
0001691C 1028 0017                  		move.b	$17(a0),d0
00016920 4880                       		ext.w	d0
00016922 9640                       		sub.w	d0,d3
00016924 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016928 367C FFF0                  		movea.w	#-$10,a3
0001692C 3C3C 1000                  		move.w	#$1000,d6
00016930 7A0E                       		moveq	#$E,d5
00016932 6100 FA66                  		bsr.w	FindFloor
00016936 301F                       		move.w	(sp)+,d0
00016938 143C 0080                  		move.b	#-$80,d2
0001693C 6000 FE5E                  		bra.w	loc_14DD0
00016940                            ; End of function Sonic_DontRunOnWalls
00016940                            
00016940                            ; ===========================================================================
00016940 3428 000C                  		move.w	$C(a0),d2
00016944 3628 0008                  		move.w	8(a0),d3
00016948                            
00016948                            loc_14F7C:
00016948 0442 000A                  		subi.w	#$A,d2
0001694C 0A42 000F                  		eori.w	#$F,d2
00016950 49F8 F768                  		lea	($FFFFF768).w,a4
00016954 367C FFF0                  		movea.w	#-$10,a3
00016958 3C3C 1000                  		move.w	#$1000,d6
0001695C 7A0E                       		moveq	#$E,d5
0001695E 6100 FA3A                  		bsr.w	FindFloor
00016962 143C 0080                  		move.b	#-$80,d2
00016966 6000 FE6E                  		bra.w	loc_14E0A
0001696A                            
0001696A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001696A                            
0001696A                            
0001696A                            ObjHitCeiling:
0001696A 3428 000C                  		move.w	$C(a0),d2
0001696E 3628 0008                  		move.w	8(a0),d3
00016972 7000                       		moveq	#0,d0
00016974 1028 0016                  		move.b	$16(a0),d0
00016978 4880                       		ext.w	d0
0001697A 9440                       		sub.w	d0,d2
0001697C 0A42 000F                  		eori.w	#$F,d2
00016980 49F8 F768                  		lea	($FFFFF768).w,a4
00016984 367C FFF0                  		movea.w	#-$10,a3
00016988 3C3C 1000                  		move.w	#$1000,d6
0001698C 7A0E                       		moveq	#$E,d5
0001698E 6100 FA0A                  		bsr.w	FindFloor
00016992 1638 F768                  		move.b	($FFFFF768).w,d3
00016996 0803 0000                  		btst	#0,d3
0001699A 6700                       		beq.s	locret_14FD4
0001699C 163C 0080                  		move.b	#-$80,d3
000169A0                            
000169A0                            locret_14FD4:
000169A0 4E75                       		rts	
000169A2                            ; End of function ObjHitCeiling
000169A2                            
000169A2                            ; ===========================================================================
000169A2                            
000169A2                            loc_14FD6:				; XREF: sub_14D48
000169A2 3428 000C                  		move.w	$C(a0),d2
000169A6 3628 0008                  		move.w	8(a0),d3
000169AA 7000                       		moveq	#0,d0
000169AC 1028 0017                  		move.b	$17(a0),d0
000169B0 4880                       		ext.w	d0
000169B2 9440                       		sub.w	d0,d2
000169B4 1028 0016                  		move.b	$16(a0),d0
000169B8 4880                       		ext.w	d0
000169BA 9640                       		sub.w	d0,d3
000169BC 0A43 000F                  		eori.w	#$F,d3
000169C0 49F8 F768                  		lea	($FFFFF768).w,a4
000169C4 367C FFF0                  		movea.w	#-$10,a3
000169C8 3C3C 0800                  		move.w	#$800,d6
000169CC 7A0E                       		moveq	#$E,d5
000169CE 6100 FB08                  		bsr.w	FindWall
000169D2 3F01                       		move.w	d1,-(sp)
000169D4 3428 000C                  		move.w	$C(a0),d2
000169D8 3628 0008                  		move.w	8(a0),d3
000169DC 7000                       		moveq	#0,d0
000169DE 1028 0017                  		move.b	$17(a0),d0
000169E2 4880                       		ext.w	d0
000169E4 D440                       		add.w	d0,d2
000169E6 1028 0016                  		move.b	$16(a0),d0
000169EA 4880                       		ext.w	d0
000169EC 9640                       		sub.w	d0,d3
000169EE 0A43 000F                  		eori.w	#$F,d3
000169F2 49F8 F76A                  		lea	($FFFFF76A).w,a4
000169F6 367C FFF0                  		movea.w	#-$10,a3
000169FA 3C3C 0800                  		move.w	#$800,d6
000169FE 7A0E                       		moveq	#$E,d5
00016A00 6100 FAD6                  		bsr.w	FindWall
00016A04 301F                       		move.w	(sp)+,d0
00016A06 143C 0040                  		move.b	#$40,d2
00016A0A 6000 FD90                  		bra.w	loc_14DD0
00016A0E                            
00016A0E                            ; ---------------------------------------------------------------------------
00016A0E                            ; Subroutine to	stop Sonic when	he jumps at a wall
00016A0E                            ; ---------------------------------------------------------------------------
00016A0E                            
00016A0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016A0E                            
00016A0E                            
00016A0E                            Sonic_HitWall:				; XREF: Sonic_Floor
00016A0E 3428 000C                  		move.w	$C(a0),d2
00016A12 3628 0008                  		move.w	8(a0),d3
00016A16                            
00016A16                            loc_1504A:
00016A16 0443 000A                  		subi.w	#$A,d3
00016A1A 0A43 000F                  		eori.w	#$F,d3
00016A1E 49F8 F768                  		lea	($FFFFF768).w,a4
00016A22 367C FFF0                  		movea.w	#-$10,a3
00016A26 3C3C 0800                  		move.w	#$800,d6
00016A2A 7A0E                       		moveq	#$E,d5
00016A2C 6100 FAAA                  		bsr.w	FindWall
00016A30 143C 0040                  		move.b	#$40,d2
00016A34 6000 FDA0                  		bra.w	loc_14E0A
00016A38                            ; End of function Sonic_HitWall
00016A38                            
00016A38                            ; ---------------------------------------------------------------------------
00016A38                            ; Subroutine to	detect when an object hits a wall to its left
00016A38                            ; ---------------------------------------------------------------------------
00016A38                            
00016A38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016A38                            
00016A38                            
00016A38                            ObjHitWallLeft:
00016A38 D668 0008                  		add.w	8(a0),d3
00016A3C 3428 000C                  		move.w	$C(a0),d2
00016A40 49F8 F768                  		lea	($FFFFF768).w,a4
00016A44 18BC 0000                  		move.b	#0,(a4)
00016A48 367C FFF0                  		movea.w	#-$10,a3
00016A4C 3C3C 0800                  		move.w	#$800,d6
00016A50 7A0E                       		moveq	#$E,d5
00016A52 6100 FA84                  		bsr.w	FindWall
00016A56 1638 F768                  		move.b	($FFFFF768).w,d3
00016A5A 0803 0000                  		btst	#0,d3
00016A5E 6700                       		beq.s	locret_15098
00016A60 163C 0040                  		move.b	#$40,d3
00016A64                            
00016A64                            locret_15098:
00016A64 4E75                       		rts	
00016A66                            ; End of function ObjHitWallLeft
00016A66                            
00016A66                            ; ===========================================================================
00016A66                            ; ---------------------------------------------------------------------------
00016A66                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
00016A66                            ; ---------------------------------------------------------------------------
00016A66                            
00016A66                            Obj66:					; XREF: Obj_Index
00016A66 7000                       		moveq	#0,d0
00016A68 1028 0024                  		move.b	$24(a0),d0
00016A6C 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
00016A70 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
00016A74                            ; ===========================================================================
00016A74 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
00016A76 0000                       		dc.w Obj66_Action-Obj66_Index
00016A78 0000                       		dc.w Obj66_Display-Obj66_Index
00016A7A 0000                       		dc.w Obj66_Release-Obj66_Index
00016A7C                            ; ===========================================================================
00016A7C                            
00016A7C                            Obj66_Main:				; XREF: Obj66_Index
00016A7C 5428 0024                  		addq.b	#2,$24(a0)
00016A80 323C 0001                  		move.w	#1,d1
00016A84 2248                       		movea.l	a0,a1
00016A86 6000                       		bra.s	Obj66_MakeItem
00016A88                            ; ===========================================================================
00016A88                            
00016A88                            Obj66_Loop:
00016A88 6100 815A                  		bsr.w	SingleObjLoad
00016A8C 6600                       		bne.s	loc_150FE
00016A8E 137C 0066 0000             		move.b	#$66,0(a1)
00016A94 5829 0024                  		addq.b	#4,$24(a1)
00016A98 3368 0008 0008             		move.w	8(a0),8(a1)
00016A9E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00016AA4 137C 0003 0018             		move.b	#3,$18(a1)
00016AAA 137C 0010 001A             		move.b	#$10,$1A(a1)
00016AB0                            
00016AB0                            Obj66_MakeItem:				; XREF: Obj66_Main
00016AB0 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
00016AB8 337C 4348 0002             		move.w	#$4348,2(a1)
00016ABE 0029 0004 0001             		ori.b	#4,1(a1)
00016AC4 137C 0038 0019             		move.b	#$38,$19(a1)
00016ACA                            
00016ACA                            loc_150FE:
00016ACA 51C9 FFBC                  		dbf	d1,Obj66_Loop
00016ACE                            
00016ACE 117C 0030 0019             		move.b	#$30,$19(a0)
00016AD4 117C 0004 0018             		move.b	#4,$18(a0)
00016ADA 317C 003C 0030             		move.w	#$3C,$30(a0)
00016AE0 117C 0001 0034             		move.b	#1,$34(a0)
00016AE6 1168 0028 0038             		move.b	$28(a0),$38(a0)
00016AEC                            
00016AEC                            Obj66_Action:				; XREF: Obj66_Index
00016AEC 6100 0000                  		bsr.w	Obj66_ChkSwitch
00016AF0 4A28 0001                  		tst.b	1(a0)
00016AF4 6A00 0000                  		bpl.w	Obj66_Display
00016AF8 323C 0030                  		move.w	#$30,d1
00016AFC 3401                       		move.w	d1,d2
00016AFE 3602                       		move.w	d2,d3
00016B00 5243                       		addq.w	#1,d3
00016B02 3828 0008                  		move.w	8(a0),d4
00016B06 6100 A0FA                  		bsr.w	SolidObject
00016B0A 0828 0005 0022             		btst	#5,$22(a0)
00016B10 6700 0000                  		beq.w	Obj66_Display
00016B14 43F8 D000                  		lea	($FFFFD000).w,a1
00016B18 720E                       		moveq	#$E,d1
00016B1A 3029 0008                  		move.w	8(a1),d0
00016B1E B068 0008                  		cmp.w	8(a0),d0
00016B22 6500                       		bcs.s	Obj66_GrabSonic
00016B24 7207                       		moveq	#7,d1
00016B26                            
00016B26                            Obj66_GrabSonic:
00016B26 B228 001A                  		cmp.b	$1A(a0),d1
00016B2A 6600                       		bne.s	Obj66_Display
00016B2C 1141 0032                  		move.b	d1,$32(a0)
00016B30 5828 0024                  		addq.b	#4,$24(a0)
00016B34 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00016B3A 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
00016B40 337C 0800 0014             		move.w	#$800,$14(a1)
00016B46 337C 0000 0010             		move.w	#0,$10(a1)
00016B4C 337C 0000 0012             		move.w	#0,$12(a1)
00016B52 08A8 0005 0022             		bclr	#5,$22(a0)
00016B58 08A9 0005 0022             		bclr	#5,$22(a1)
00016B5E 08E9 0001 0022             		bset	#1,$22(a1)
00016B64 3429 0008                  		move.w	8(a1),d2
00016B68 3629 000C                  		move.w	$C(a1),d3
00016B6C 6100 0000                  		bsr.w	Obj66_ChgPos
00016B70 D569 0008                  		add.w	d2,8(a1)
00016B74 D769 000C                  		add.w	d3,$C(a1)
00016B78 E0E9 0008                  		asr	8(a1)
00016B7C E0E9 000C                  		asr	$C(a1)
00016B80                            
00016B80                            Obj66_Display:				; XREF: Obj66_Index
00016B80 6000 9D56                  		bra.w	MarkObjGone
00016B84                            ; ===========================================================================
00016B84                            
00016B84                            Obj66_Release:				; XREF: Obj66_Index
00016B84 1028 001A                  		move.b	$1A(a0),d0
00016B88 0C00 0004                  		cmpi.b	#4,d0
00016B8C 6700                       		beq.s	loc_151C8
00016B8E 0C00 0007                  		cmpi.b	#7,d0
00016B92 6600                       		bne.s	loc_151F8
00016B94                            
00016B94                            loc_151C8:
00016B94 B028 0032                  		cmp.b	$32(a0),d0
00016B98 6700                       		beq.s	loc_151F8
00016B9A 43F8 D000                  		lea	($FFFFD000).w,a1
00016B9E 337C 0000 0010             		move.w	#0,$10(a1)
00016BA4 337C 0800 0012             		move.w	#$800,$12(a1)
00016BAA 0C00 0004                  		cmpi.b	#4,d0
00016BAE 6700                       		beq.s	loc_151F0
00016BB0 337C 0800 0010             		move.w	#$800,$10(a1)
00016BB6 337C 0800 0012             		move.w	#$800,$12(a1)
00016BBC                            
00016BBC                            loc_151F0:
00016BBC 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
00016BC0 5928 0024                  		subq.b	#4,$24(a0)
00016BC4                            
00016BC4                            loc_151F8:
00016BC4 6100                       		bsr.s	Obj66_ChkSwitch
00016BC6 6100                       		bsr.s	Obj66_ChgPos
00016BC8 6000 9D0E                  		bra.w	MarkObjGone
00016BCC                            
00016BCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016BCC                            
00016BCC                            
00016BCC                            Obj66_ChkSwitch:			; XREF: Obj66_Action
00016BCC 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00016BD0 7000                       		moveq	#0,d0
00016BD2 1028 0038                  		move.b	$38(a0),d0
00016BD6 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
00016BDC 6700                       		beq.s	loc_15224	; if not, branch
00016BDE 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
00016BE2 6600                       		bne.s	Obj66_Animate	; if yes, branch
00016BE4 4428 0034                  		neg.b	$34(a0)
00016BE8 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
00016BEE 6000                       		bra.s	Obj66_Animate
00016BF0                            ; ===========================================================================
00016BF0                            
00016BF0                            loc_15224:
00016BF0 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
00016BF4                            
00016BF4                            Obj66_Animate:
00016BF4 5328 001E                  		subq.b	#1,$1E(a0)
00016BF8 6A00                       		bpl.s	locret_15246
00016BFA 117C 0007 001E             		move.b	#7,$1E(a0)
00016C00 1228 0034                  		move.b	$34(a0),d1
00016C04 1028 001A                  		move.b	$1A(a0),d0
00016C08 D001                       		add.b	d1,d0
00016C0A 0200 000F                  		andi.b	#$F,d0
00016C0E 1140 001A                  		move.b	d0,$1A(a0)
00016C12                            
00016C12                            locret_15246:
00016C12 4E75                       		rts	
00016C14                            ; End of function Obj66_ChkSwitch
00016C14                            
00016C14                            
00016C14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016C14                            
00016C14                            
00016C14                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
00016C14 43F8 D000                  		lea	($FFFFD000).w,a1
00016C18 7000                       		moveq	#0,d0
00016C1A 1028 001A                  		move.b	$1A(a0),d0
00016C1E D040                       		add.w	d0,d0
00016C20 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
00016C24 101A                       		move.b	(a2)+,d0
00016C26 4880                       		ext.w	d0
00016C28 D068 0008                  		add.w	8(a0),d0
00016C2C 3340 0008                  		move.w	d0,8(a1)
00016C30 101A                       		move.b	(a2)+,d0
00016C32 4880                       		ext.w	d0
00016C34 D068 000C                  		add.w	$C(a0),d0
00016C38 3340 000C                  		move.w	d0,$C(a1)
00016C3C 4E75                       		rts	
00016C3E                            ; End of function Obj66_ChgPos
00016C3E                            
00016C3E                            ; ===========================================================================
00016C3E E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
00016C42 E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
00016C46 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
00016C4A 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
00016C4E 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
00016C52 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
00016C56 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
00016C5A E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
00016C5E                            ; ---------------------------------------------------------------------------
00016C5E                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00016C5E                            ; ---------------------------------------------------------------------------
00016C5E                            Map_obj66:
00016C5E                            	include "_maps\obj66.asm"
00016C5E                            ; ---------------------------------------------------------------------------
00016C5E                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00016C5E                            ; ---------------------------------------------------------------------------
00016C5E 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
00016C62 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
00016C66 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
00016C6A 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
00016C6E 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
00016C72 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
00016C76 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
00016C7A 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
00016C7E 0000                       		dc.w byte_154A4-Map_obj66
00016C80 06                         byte_152B4:	dc.b 6
00016C81 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00016C86 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
00016C8B E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
00016C90 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
00016C95 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
00016C9A 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
00016C9F 06                         byte_152D3:	dc.b 6
00016CA0 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
00016CA5 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
00016CAA F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
00016CAF F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
00016CB4 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
00016CB9 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
00016CBE 06                         byte_152F2:	dc.b 6
00016CBF 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
00016CC4 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
00016CC9 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
00016CCE 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
00016CD3 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
00016CD8 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
00016CDD 06                         byte_15311:	dc.b 6
00016CDE 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
00016CE3 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
00016CE8 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
00016CED 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00016CF2 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00016CF7 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00016CFC 06                         byte_15330:	dc.b 6
00016CFD 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00016D02 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00016D07 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00016D0C 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00016D11 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00016D16 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00016D1B 06                         byte_1534F:	dc.b 6
00016D1C 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00016D21 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00016D26 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00016D2B 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00016D30 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00016D35 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00016D3A 06                         byte_1536E:	dc.b 6
00016D3B 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00016D40 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00016D45 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00016D4A 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00016D4F 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00016D54 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00016D59 06                         byte_1538D:	dc.b 6
00016D5A 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
00016D5F F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00016D64 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00016D69 F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
00016D6E 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
00016D73 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
00016D78 06                         byte_153AC:	dc.b 6
00016D79 E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
00016D7E 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
00016D83 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00016D88 E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
00016D8D 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
00016D92 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00016D97 06                         byte_153CB:	dc.b 6
00016D98 D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
00016D9D E803 1826 28               		dc.b $E8, 3, $18, $26, $28
00016DA2 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00016DA7 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
00016DAC F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
00016DB1 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00016DB6 06                         byte_153EA:	dc.b 6
00016DB7 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
00016DBC E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00016DC1 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00016DC6 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
00016DCB E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00016DD0 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00016DD5 06                         byte_15409:	dc.b 6
00016DD6 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
00016DDB D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00016DE0 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00016DE5 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00016DEA E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00016DEF E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00016DF4 06                         byte_15428:	dc.b 6
00016DF5 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00016DFA D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00016DFF C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00016E04 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00016E09 E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00016E0E E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00016E13 06                         byte_15447:	dc.b 6
00016E14 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00016E19 D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00016E1E CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00016E23 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00016E28 E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00016E2D E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00016E32 06                         byte_15466:	dc.b 6
00016E33 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00016E38 D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00016E3D D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00016E42 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00016E47 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00016E4C E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00016E51 06                         byte_15485:	dc.b 6
00016E52 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00016E57 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00016E5C DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
00016E61 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00016E66 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
00016E6B F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00016E70 0C                         byte_154A4:	dc.b $C
00016E71 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00016E76 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
00016E7B E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00016E80 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00016E85 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00016E8A E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00016E8F 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00016E94 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00016E99 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00016E9E 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00016EA3 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00016EA8 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00016EAE 00                         		even
00016EAE 00                         		even
00016EAE                            
00016EAE                            ; ===========================================================================
00016EAE                            ; ---------------------------------------------------------------------------
00016EAE                            ; Object 67 - disc that	you run	around (SBZ)
00016EAE                            ; ---------------------------------------------------------------------------
00016EAE                            
00016EAE                            Obj67:					; XREF: Obj_Index
00016EAE 7000                       		moveq	#0,d0
00016EB0 1028 0024                  		move.b	$24(a0),d0
00016EB4 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
00016EB8 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
00016EBC                            ; ===========================================================================
00016EBC 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
00016EBE 0000                       		dc.w Obj67_Action-Obj67_Index
00016EC0                            ; ===========================================================================
00016EC0                            
00016EC0                            Obj67_Main:				; XREF: Obj67_Index
00016EC0 5428 0024                  		addq.b	#2,$24(a0)
00016EC4 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
00016ECC 317C C344 0002             		move.w	#$C344,2(a0)
00016ED2 117C 0004 0001             		move.b	#4,1(a0)
00016ED8 117C 0004 0018             		move.b	#4,$18(a0)
00016EDE 117C 0008 0019             		move.b	#8,$19(a0)
00016EE4 3168 0008 0032             		move.w	8(a0),$32(a0)
00016EEA 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016EF0 117C 0018 0034             		move.b	#$18,$34(a0)
00016EF6 117C 0048 0038             		move.b	#$48,$38(a0)
00016EFC 1228 0028                  		move.b	$28(a0),d1	; get object type
00016F00 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00016F04 6700                       		beq.s	loc_15546
00016F06 117C 0010 0034             		move.b	#$10,$34(a0)
00016F0C 117C 0038 0038             		move.b	#$38,$38(a0)
00016F12                            
00016F12                            loc_15546:
00016F12 1228 0028                  		move.b	$28(a0),d1	; get object type
00016F16 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00016F1A 4881                       		ext.w	d1
00016F1C E741                       		asl.w	#3,d1
00016F1E 3141 0036                  		move.w	d1,$36(a0)
00016F22 1028 0022                  		move.b	$22(a0),d0
00016F26 E418                       		ror.b	#2,d0
00016F28 0200 00C0                  		andi.b	#-$40,d0
00016F2C 1140 0026                  		move.b	d0,$26(a0)
00016F30                            
00016F30                            Obj67_Action:				; XREF: Obj67_Index
00016F30 6100 0000                  		bsr.w	Obj67_MoveSonic
00016F34 6100 0000                  		bsr.w	Obj67_MoveSpot
00016F38 6000 0000                  		bra.w	Obj67_ChkDel
00016F3C                            ; ===========================================================================
00016F3C                            
00016F3C                            Obj67_MoveSonic:			; XREF: Obj67_Action
00016F3C 7400                       		moveq	#0,d2
00016F3E 1428 0038                  		move.b	$38(a0),d2
00016F42 3602                       		move.w	d2,d3
00016F44 D643                       		add.w	d3,d3
00016F46 43F8 D000                  		lea	($FFFFD000).w,a1
00016F4A 3029 0008                  		move.w	8(a1),d0
00016F4E 9068 0032                  		sub.w	$32(a0),d0
00016F52 D042                       		add.w	d2,d0
00016F54 B043                       		cmp.w	d3,d0
00016F56 6400                       		bcc.s	loc_155A8
00016F58 3229 000C                  		move.w	$C(a1),d1
00016F5C 9268 0030                  		sub.w	$30(a0),d1
00016F60 D242                       		add.w	d2,d1
00016F62 B243                       		cmp.w	d3,d1
00016F64 6400                       		bcc.s	loc_155A8
00016F66 0829 0001 0022             		btst	#1,$22(a1)
00016F6C 6700                       		beq.s	loc_155B8
00016F6E 4228 003A                  		clr.b	$3A(a0)
00016F72 4E75                       		rts	
00016F74                            ; ===========================================================================
00016F74                            
00016F74                            loc_155A8:
00016F74 4A28 003A                  		tst.b	$3A(a0)
00016F78 6700                       		beq.s	locret_155B6
00016F7A 4229 0038                  		clr.b	$38(a1)
00016F7E 4228 003A                  		clr.b	$3A(a0)
00016F82                            
00016F82                            locret_155B6:
00016F82 4E75                       		rts	
00016F84                            ; ===========================================================================
00016F84                            
00016F84                            loc_155B8:
00016F84 4A28 003A                  		tst.b	$3A(a0)
00016F88 6600                       		bne.s	loc_155E2
00016F8A 117C 0001 003A             		move.b	#1,$3A(a0)
00016F90 0829 0002 0022             		btst	#2,$22(a1)
00016F96 6600                       		bne.s	loc_155D0
00016F98 4229 001C                  		clr.b	$1C(a1)
00016F9C                            
00016F9C                            loc_155D0:
00016F9C 08A9 0005 0022             		bclr	#5,$22(a1)
00016FA2 137C 0001 001D             		move.b	#1,$1D(a1)
00016FA8 137C 0001 0038             		move.b	#1,$38(a1)
00016FAE                            
00016FAE                            loc_155E2:
00016FAE 3029 0014                  		move.w	$14(a1),d0
00016FB2 4A68 0036                  		tst.w	$36(a0)
00016FB6 6A00                       		bpl.s	loc_15608
00016FB8 0C40 FC00                  		cmpi.w	#-$400,d0
00016FBC 6F00                       		ble.s	loc_155FA
00016FBE 337C FC00 0014             		move.w	#-$400,$14(a1)
00016FC4 4E75                       		rts	
00016FC6                            ; ===========================================================================
00016FC6                            
00016FC6                            loc_155FA:
00016FC6 0C40 F100                  		cmpi.w	#-$F00,d0
00016FCA 6C00                       		bge.s	locret_15606
00016FCC 337C F100 0014             		move.w	#-$F00,$14(a1)
00016FD2                            
00016FD2                            locret_15606:
00016FD2 4E75                       		rts	
00016FD4                            ; ===========================================================================
00016FD4                            
00016FD4                            loc_15608:
00016FD4 0C40 0400                  		cmpi.w	#$400,d0
00016FD8 6C00                       		bge.s	loc_15616
00016FDA 337C 0400 0014             		move.w	#$400,$14(a1)
00016FE0 4E75                       		rts	
00016FE2                            ; ===========================================================================
00016FE2                            
00016FE2                            loc_15616:
00016FE2 0C40 0F00                  		cmpi.w	#$F00,d0
00016FE6 6F00                       		ble.s	locret_15622
00016FE8 337C 0F00 0014             		move.w	#$F00,$14(a1)
00016FEE                            
00016FEE                            locret_15622:
00016FEE 4E75                       		rts	
00016FF0                            ; ===========================================================================
00016FF0                            
00016FF0                            Obj67_MoveSpot:				; XREF: Obj67_Action
00016FF0 3028 0036                  		move.w	$36(a0),d0
00016FF4 D168 0026                  		add.w	d0,$26(a0)
00016FF8 1028 0026                  		move.b	$26(a0),d0
00016FFC 4EB9 0000 3274             		jsr	(CalcSine).l
00017002 3428 0030                  		move.w	$30(a0),d2
00017006 3628 0032                  		move.w	$32(a0),d3
0001700A 7800                       		moveq	#0,d4
0001700C 1828 0034                  		move.b	$34(a0),d4
00017010 E14C                       		lsl.w	#8,d4
00017012 2A04                       		move.l	d4,d5
00017014 C9C0                       		muls.w	d0,d4
00017016 4844                       		swap	d4
00017018 CBC1                       		muls.w	d1,d5
0001701A 4845                       		swap	d5
0001701C D842                       		add.w	d2,d4
0001701E DA43                       		add.w	d3,d5
00017020 3144 000C                  		move.w	d4,$C(a0)
00017024 3145 0008                  		move.w	d5,8(a0)
00017028 4E75                       		rts	
0001702A                            ; ===========================================================================
0001702A                            
0001702A                            Obj67_ChkDel:				; XREF: Obj67_Action
0001702A 3028 0032                  		move.w	$32(a0),d0
0001702E 0240 FF80                  		andi.w	#-$80,d0
00017032 3238 F700                  		move.w	($FFFFF700).w,d1
00017036 0441 0080                  		subi.w	#$80,d1
0001703A 0241 FF80                  		andi.w	#-$80,d1
0001703E 9041                       		sub.w	d1,d0
00017040 0C40 0280                  		cmpi.w	#$280,d0
00017044 6200                       		bhi.s	Obj67_Delete
00017046 4EF9 0000 E75C             		jmp	DisplaySprite
0001704C                            ; ===========================================================================
0001704C                            
0001704C                            Obj67_Delete:
0001704C 4EF9 0000 E798             		jmp	DeleteObject
00017052                            ; ===========================================================================
00017052                            ; ---------------------------------------------------------------------------
00017052                            ; Sprite mappings - disc that you run around (SBZ)
00017052                            ; (It's just a small blob that moves around in a circle. The disc itself is
00017052                            ; part of the level tiles.)
00017052                            ; ---------------------------------------------------------------------------
00017052                            Map_obj67:
00017052                            	include "_maps\obj67.asm"
00017052                            ; ---------------------------------------------------------------------------
00017052                            ; Sprite mappings - disc that you run around (SBZ)
00017052                            ; (It's just a small blob that moves around in a circle. The disc itself is
00017052                            ; part of the level tiles.)
00017052                            ; ---------------------------------------------------------------------------
00017052 0000                       		dc.w byte_15688-Map_obj67
00017054 01                         byte_15688:	dc.b 1
00017055 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001705A                            		even
0001705A                            		even
0001705A                            
0001705A                            ; ===========================================================================
0001705A                            ; ---------------------------------------------------------------------------
0001705A                            ; Object 68 - conveyor belts (SBZ)
0001705A                            ; ---------------------------------------------------------------------------
0001705A                            
0001705A                            Obj68:					; XREF: Obj_Index
0001705A 7000                       		moveq	#0,d0
0001705C 1028 0024                  		move.b	$24(a0),d0
00017060 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
00017064 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
00017068                            ; ===========================================================================
00017068 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
0001706A 0000                       		dc.w Obj68_Action-Obj68_Index
0001706C                            ; ===========================================================================
0001706C                            
0001706C                            Obj68_Main:				; XREF: Obj68_Index
0001706C 5428 0024                  		addq.b	#2,$24(a0)
00017070 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
00017076 1228 0028                  		move.b	$28(a0),d1	; get object type
0001707A 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
0001707E 6700                       		beq.s	loc_156BA	; if zero, branch
00017080 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
00017086                            
00017086                            loc_156BA:
00017086 1228 0028                  		move.b	$28(a0),d1	; get object type
0001708A 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001708E 4881                       		ext.w	d1
00017090 E841                       		asr.w	#4,d1
00017092 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
00017096                            
00017096                            Obj68_Action:				; XREF: Obj68_Index
00017096 6100                       		bsr.s	Obj68_MoveSonic
00017098 3028 0008                  		move.w	8(a0),d0
0001709C 0240 FF80                  		andi.w	#$FF80,d0
000170A0 3238 F700                  		move.w	($FFFFF700).w,d1
000170A4 0441 0080                  		subi.w	#$80,d1
000170A8 0241 FF80                  		andi.w	#$FF80,d1
000170AC 9041                       		sub.w	d1,d0
000170AE 0C40 0280                  		cmpi.w	#$280,d0
000170B2 6200                       		bhi.s	Obj68_Delete
000170B4 4E75                       		rts	
000170B6                            ; ===========================================================================
000170B6                            
000170B6                            Obj68_Delete:
000170B6 4EF9 0000 E798             		jmp	DeleteObject
000170BC                            ; ===========================================================================
000170BC                            
000170BC                            Obj68_MoveSonic:			; XREF: Obj68_Action
000170BC 7400                       		moveq	#0,d2
000170BE 1428 0038                  		move.b	$38(a0),d2
000170C2 3602                       		move.w	d2,d3
000170C4 D643                       		add.w	d3,d3
000170C6 43F8 D000                  		lea	($FFFFD000).w,a1
000170CA 3029 0008                  		move.w	8(a1),d0
000170CE 9068 0008                  		sub.w	8(a0),d0
000170D2 D042                       		add.w	d2,d0
000170D4 B043                       		cmp.w	d3,d0
000170D6 6400                       		bcc.s	locret_1572E
000170D8 3229 000C                  		move.w	$C(a1),d1
000170DC 9268 000C                  		sub.w	$C(a0),d1
000170E0 0641 0030                  		addi.w	#$30,d1
000170E4 0C41 0030                  		cmpi.w	#$30,d1
000170E8 6400                       		bcc.s	locret_1572E
000170EA 0829 0001 0022             		btst	#1,$22(a1)
000170F0 6600                       		bne.s	locret_1572E
000170F2 3028 0036                  		move.w	$36(a0),d0
000170F6 D169 0008                  		add.w	d0,8(a1)
000170FA                            
000170FA                            locret_1572E:
000170FA 4E75                       		rts	
000170FC                            
000170FC                            ; ===========================================================================
000170FC                            ; ---------------------------------------------------------------------------
000170FC                            ; Object 69 - spinning platforms and trapdoors (SBZ)
000170FC                            ; ---------------------------------------------------------------------------
000170FC                            
000170FC                            Obj69:					; XREF: Obj_Index
000170FC 7000                       		moveq	#0,d0
000170FE 1028 0024                  		move.b	$24(a0),d0
00017102 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
00017106 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
0001710A                            ; ===========================================================================
0001710A 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
0001710C 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
0001710E 0000                       		dc.w Obj69_Spinner-Obj69_Index
00017110                            ; ===========================================================================
00017110                            
00017110                            Obj69_Main:				; XREF: Obj69_Index
00017110 5428 0024                  		addq.b	#2,$24(a0)
00017114 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
0001711C 317C 4492 0002             		move.w	#$4492,2(a0)
00017122 0028 0004 0001             		ori.b	#4,1(a0)
00017128 117C 0080 0019             		move.b	#$80,$19(a0)
0001712E 7000                       		moveq	#0,d0
00017130 1028 0028                  		move.b	$28(a0),d0
00017134 0240 000F                  		andi.w	#$F,d0
00017138 C0FC 003C                  		mulu.w	#$3C,d0
0001713C 3140 0032                  		move.w	d0,$32(a0)
00017140 4A28 0028                  		tst.b	$28(a0)
00017144 6A00                       		bpl.s	Obj69_Trapdoor
00017146 5428 0024                  		addq.b	#2,$24(a0)
0001714A 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
00017152 317C 04DF 0002             		move.w	#$4DF,2(a0)
00017158 117C 0010 0019             		move.b	#$10,$19(a0)
0001715E 117C 0002 001C             		move.b	#2,$1C(a0)
00017164 7000                       		moveq	#0,d0
00017166 1028 0028                  		move.b	$28(a0),d0	; get object type
0001716A 3200                       		move.w	d0,d1
0001716C 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00017170 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
00017174 3140 0030                  		move.w	d0,$30(a0)	; set time delay
00017178 3140 0032                  		move.w	d0,$32(a0)
0001717C 0241 0070                  		andi.w	#$70,d1
00017180 0641 0010                  		addi.w	#$10,d1
00017184 E549                       		lsl.w	#2,d1
00017186 5341                       		subq.w	#1,d1
00017188 3141 0036                  		move.w	d1,$36(a0)
0001718C 6000                       		bra.s	Obj69_Spinner
0001718E                            ; ===========================================================================
0001718E                            
0001718E                            Obj69_Trapdoor:				; XREF: Obj69_Index
0001718E 5368 0030                  		subq.w	#1,$30(a0)
00017192 6A00                       		bpl.s	Obj69_Animate
00017194 3168 0032 0030             		move.w	$32(a0),$30(a0)
0001719A 0868 0000 001C             		bchg	#0,$1C(a0)
000171A0 4A28 0001                  		tst.b	1(a0)
000171A4 6A00                       		bpl.s	Obj69_Animate
000171A6 303C 00BB                  		move.w	#$BB,d0
000171AA 4EB9 0000 132C             		jsr	(PlaySound_Special).l ;	play door sound
000171B0                            
000171B0                            Obj69_Animate:
000171B0 43F9 0000 0000             		lea	(Ani_obj69).l,a1
000171B6 4EB9 0000 B860             		jsr	AnimateSprite
000171BC 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
000171C0 6600                       		bne.s	Obj69_NotSolid	; if not, branch
000171C2 323C 004B                  		move.w	#$4B,d1
000171C6 343C 000C                  		move.w	#$C,d2
000171CA 3602                       		move.w	d2,d3
000171CC 5243                       		addq.w	#1,d3
000171CE 3828 0008                  		move.w	8(a0),d4
000171D2 6100 9A2E                  		bsr.w	SolidObject
000171D6 6000 9700                  		bra.w	MarkObjGone
000171DA                            ; ===========================================================================
000171DA                            
000171DA                            Obj69_NotSolid:
000171DA 0828 0003 0022             		btst	#3,$22(a0)
000171E0 6700                       		beq.s	Obj69_Display
000171E2 43F8 D000                  		lea	($FFFFD000).w,a1
000171E6 08A9 0003 0022             		bclr	#3,$22(a1)
000171EC 08A8 0003 0022             		bclr	#3,$22(a0)
000171F2 4228 0025                  		clr.b	$25(a0)
000171F6                            
000171F6                            Obj69_Display:
000171F6 6000 96E0                  		bra.w	MarkObjGone
000171FA                            ; ===========================================================================
000171FA                            
000171FA                            Obj69_Spinner:				; XREF: Obj69_Index
000171FA 3038 FE04                  		move.w	($FFFFFE04).w,d0
000171FE C068 0036                  		and.w	$36(a0),d0
00017202 6600                       		bne.s	Obj69_Delay
00017204 117C 0001 0034             		move.b	#1,$34(a0)
0001720A                            
0001720A                            Obj69_Delay:
0001720A 4A28 0034                  		tst.b	$34(a0)
0001720E 6700                       		beq.s	Obj69_Animate2
00017210 5368 0030                  		subq.w	#1,$30(a0)
00017214 6A00                       		bpl.s	Obj69_Animate2
00017216 3168 0032 0030             		move.w	$32(a0),$30(a0)
0001721C 4228 0034                  		clr.b	$34(a0)
00017220 0868 0000 001C             		bchg	#0,$1C(a0)
00017226                            
00017226                            Obj69_Animate2:
00017226 43F9 0000 0000             		lea	(Ani_obj69).l,a1
0001722C 4EB9 0000 B860             		jsr	AnimateSprite
00017232 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
00017236 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
00017238 323C 001B                  		move.w	#$1B,d1
0001723C 343C 0007                  		move.w	#7,d2
00017240 3602                       		move.w	d2,d3
00017242 5243                       		addq.w	#1,d3
00017244 3828 0008                  		move.w	8(a0),d4
00017248 6100 99B8                  		bsr.w	SolidObject
0001724C 6000 968A                  		bra.w	MarkObjGone
00017250                            ; ===========================================================================
00017250                            
00017250                            Obj69_NotSolid2:
00017250 0828 0003 0022             		btst	#3,$22(a0)
00017256 6700                       		beq.s	Obj69_Display2
00017258 43F8 D000                  		lea	($FFFFD000).w,a1
0001725C 08A9 0003 0022             		bclr	#3,$22(a1)
00017262 08A8 0003 0022             		bclr	#3,$22(a0)
00017268 4228 0025                  		clr.b	$25(a0)
0001726C                            
0001726C                            Obj69_Display2:
0001726C 6000 966A                  		bra.w	MarkObjGone
00017270                            ; ===========================================================================
00017270                            Ani_obj69:
00017270                            	include "_anim\obj69.asm"
00017270                            ; ---------------------------------------------------------------------------
00017270                            ; Animation script - trapdoor (SBZ)
00017270                            ; ---------------------------------------------------------------------------
00017270 0000                       		dc.w byte_158AC-Ani_obj69
00017272 0000                       		dc.w byte_158B2-Ani_obj69
00017274 0000                       		dc.w byte_158B8-Ani_obj69
00017276 0000                       		dc.w byte_158CC-Ani_obj69
00017278 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
0001727E 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
00017284 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00017291 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00017298 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
000172A5 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
000172AC                            		even
000172AC                            		even
000172AC                            
000172AC                            ; ---------------------------------------------------------------------------
000172AC                            ; Sprite mappings - trapdoor (SBZ)
000172AC                            ; ---------------------------------------------------------------------------
000172AC                            Map_obj69:
000172AC                            	include "_maps\obj69.asm"
000172AC                            ; ---------------------------------------------------------------------------
000172AC                            ; Sprite mappings - trapdoor (SBZ)
000172AC                            ; ---------------------------------------------------------------------------
000172AC 0000                       		dc.w byte_158E6-Map_obj69
000172AE 0000                       		dc.w byte_158FB-Map_obj69
000172B0 0000                       		dc.w byte_15924-Map_obj69
000172B2 04                         byte_158E6:	dc.b 4
000172B3 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
000172B8 F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
000172BD F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
000172C2 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
000172C7 08                         byte_158FB:	dc.b 8
000172C8 F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
000172CD 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
000172D2 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
000172D7 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
000172DC F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
000172E1 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
000172E6 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
000172EB 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
000172F0 04                         byte_15924:	dc.b 4
000172F1 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
000172F6 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
000172FB 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00017300 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
00017306 00                         		even
00017306 00                         		even
00017306                            
00017306                            ; ---------------------------------------------------------------------------
00017306                            ; Sprite mappings - spinning platforms (SBZ)
00017306                            ; ---------------------------------------------------------------------------
00017306                            Map_obj69a:
00017306                            	include "_maps\obj69a.asm"
00017306                            ; ---------------------------------------------------------------------------
00017306                            ; Sprite mappings - spinning platforms (SBZ)
00017306                            ; ---------------------------------------------------------------------------
00017306 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
0001730A 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
0001730E 0000                       		dc.w byte_15970-Map_obj69a
00017310 02                         byte_15944:	dc.b 2
00017311 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00017316 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
0001731B 02                         byte_1594F:	dc.b 2
0001731C F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
00017321 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
00017326 02                         byte_1595A:	dc.b 2
00017327 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
0001732C 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
00017331 02                         byte_15965:	dc.b 2
00017332 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
00017337 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
0001733C 02                         byte_15970:	dc.b 2
0001733D F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
00017342 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
00017348 00                         		even
00017348 00                         		even
00017348                            
00017348                            ; ===========================================================================
00017348                            ; ---------------------------------------------------------------------------
00017348                            ; Object 6A - ground saws and pizza cutters (SBZ)
00017348                            ; ---------------------------------------------------------------------------
00017348                            
00017348                            Obj6A:					; XREF: Obj_Index
00017348 7000                       		moveq	#0,d0
0001734A 1028 0024                  		move.b	$24(a0),d0
0001734E 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
00017352 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
00017356                            ; ===========================================================================
00017356 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
00017358 0000                       		dc.w Obj6A_Action-Obj6A_Index
0001735A                            ; ===========================================================================
0001735A                            
0001735A                            Obj6A_Main:				; XREF: Obj6A_Index
0001735A 5428 0024                  		addq.b	#2,$24(a0)
0001735E 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
00017366 317C 43B5 0002             		move.w	#$43B5,2(a0)
0001736C 117C 0004 0001             		move.b	#4,1(a0)
00017372 117C 0004 0018             		move.b	#4,$18(a0)
00017378 117C 0020 0019             		move.b	#$20,$19(a0)
0001737E 3168 0008 003A             		move.w	8(a0),$3A(a0)
00017384 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001738A 0C28 0003 0028             		cmpi.b	#3,$28(a0)
00017390 6400                       		bcc.s	Obj6A_Action
00017392 117C 00A2 0020             		move.b	#$A2,$20(a0)
00017398                            
00017398                            Obj6A_Action:				; XREF: Obj6A_Index
00017398 7000                       		moveq	#0,d0
0001739A 1028 0028                  		move.b	$28(a0),d0
0001739E 0240 0007                  		andi.w	#7,d0
000173A2 D040                       		add.w	d0,d0
000173A4 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
000173A8 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
000173AC 3028 003A                  		move.w	$3A(a0),d0
000173B0 0240 FF80                  		andi.w	#$FF80,d0
000173B4 3238 F700                  		move.w	($FFFFF700).w,d1
000173B8 0441 0080                  		subi.w	#$80,d1
000173BC 0241 FF80                  		andi.w	#$FF80,d1
000173C0 9041                       		sub.w	d1,d0
000173C2 0C40 0280                  		cmpi.w	#$280,d0
000173C6 6200                       		bhi.s	Obj6A_Delete
000173C8 4EF9 0000 E75C             		jmp	DisplaySprite
000173CE                            ; ===========================================================================
000173CE                            
000173CE                            Obj6A_Delete:
000173CE 4EF9 0000 E798             		jmp	DeleteObject
000173D4                            ; ===========================================================================
000173D4 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
000173D8 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
000173DC 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
000173DE                            ; ===========================================================================
000173DE                            
000173DE                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
000173DE 4E75                       		rts	
000173E0                            ; ===========================================================================
000173E0                            
000173E0                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
000173E0 323C 0060                  		move.w	#$60,d1
000173E4 7000                       		moveq	#0,d0
000173E6 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000173EA 0828 0000 0022             		btst	#0,$22(a0)
000173F0 6700                       		beq.s	Obj6A_Animate01
000173F2 4440                       		neg.w	d0
000173F4 D041                       		add.w	d1,d0
000173F6                            
000173F6                            Obj6A_Animate01:
000173F6 3228 003A                  		move.w	$3A(a0),d1
000173FA 9240                       		sub.w	d0,d1
000173FC 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
00017400 5328 001E                  		subq.b	#1,$1E(a0)
00017404 6A00                       		bpl.s	loc_15A46
00017406 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
0001740C 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00017412                            
00017412                            loc_15A46:
00017412 4A28 0001                  		tst.b	1(a0)
00017416 6A00                       		bpl.s	locret_15A60
00017418 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001741C 0240 000F                  		andi.w	#$F,d0
00017420 6600                       		bne.s	locret_15A60
00017422 303C 00B0                  		move.w	#$B0,d0
00017426 4EB9 0000 132C             		jsr	(PlaySound_Special).l ;	play saw sound
0001742C                            
0001742C                            locret_15A60:
0001742C 4E75                       		rts	
0001742E                            ; ===========================================================================
0001742E                            
0001742E                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
0001742E 323C 0030                  		move.w	#$30,d1
00017432 7000                       		moveq	#0,d0
00017434 1038 FE64                  		move.b	($FFFFFE64).w,d0
00017438 0828 0000 0022             		btst	#0,$22(a0)
0001743E 6700                       		beq.s	Obj6A_Animate02
00017440 4440                       		neg.w	d0
00017442 0640 0080                  		addi.w	#$80,d0
00017446                            
00017446                            Obj6A_Animate02:
00017446 3228 0038                  		move.w	$38(a0),d1
0001744A 9240                       		sub.w	d0,d1
0001744C 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
00017450 5328 001E                  		subq.b	#1,$1E(a0)
00017454 6A00                       		bpl.s	loc_15A96
00017456 117C 0002 001E             		move.b	#2,$1E(a0)
0001745C 0868 0000 001A             		bchg	#0,$1A(a0)
00017462                            
00017462                            loc_15A96:
00017462 4A28 0001                  		tst.b	1(a0)
00017466 6A00                       		bpl.s	locret_15AB0
00017468 1038 FE64                  		move.b	($FFFFFE64).w,d0
0001746C 0C00 0018                  		cmpi.b	#$18,d0
00017470 6600                       		bne.s	locret_15AB0
00017472 303C 00B0                  		move.w	#$B0,d0
00017476 4EB9 0000 132C             		jsr	(PlaySound_Special).l ;	play saw sound
0001747C                            
0001747C                            locret_15AB0:
0001747C 4E75                       		rts	
0001747E                            ; ===========================================================================
0001747E                            
0001747E                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
0001747E 4A28 003D                  		tst.b	$3D(a0)
00017482 6600                       		bne.s	Obj6A_Animate03
00017484 3038 D008                  		move.w	($FFFFD008).w,d0
00017488 0440 00C0                  		subi.w	#$C0,d0
0001748C 6500                       		bcs.s	loc_15B02
0001748E 9068 0008                  		sub.w	8(a0),d0
00017492 6500                       		bcs.s	loc_15B02
00017494 3038 D00C                  		move.w	($FFFFD00C).w,d0
00017498 0440 0080                  		subi.w	#$80,d0
0001749C B068 000C                  		cmp.w	$C(a0),d0
000174A0 6400                       		bcc.s	locret_15B04
000174A2 0640 0100                  		addi.w	#$100,d0
000174A6 B068 000C                  		cmp.w	$C(a0),d0
000174AA 6500                       		bcs.s	locret_15B04
000174AC 117C 0001 003D             		move.b	#1,$3D(a0)
000174B2 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
000174B8 117C 00A2 0020             		move.b	#$A2,$20(a0)
000174BE 117C 0002 001A             		move.b	#2,$1A(a0)
000174C4 303C 00B0                  		move.w	#$B0,d0
000174C8 4EB9 0000 132C             		jsr	(PlaySound_Special).l ;	play saw sound
000174CE                            
000174CE                            loc_15B02:
000174CE 588F                       		addq.l	#4,sp
000174D0                            
000174D0                            locret_15B04:
000174D0 4E75                       		rts	
000174D2                            ; ===========================================================================
000174D2                            
000174D2                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
000174D2 4EB9 0000 E736             		jsr	SpeedToPos
000174D8 3168 0008 003A             		move.w	8(a0),$3A(a0)
000174DE 5328 001E                  		subq.b	#1,$1E(a0)
000174E2 6A00                       		bpl.s	locret_15B24
000174E4 117C 0002 001E             		move.b	#2,$1E(a0)
000174EA 0868 0000 001A             		bchg	#0,$1A(a0)
000174F0                            
000174F0                            locret_15B24:
000174F0 4E75                       		rts	
000174F2                            ; ===========================================================================
000174F2                            
000174F2                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
000174F2 4A28 003D                  		tst.b	$3D(a0)
000174F6 6600                       		bne.s	Obj6A_Animate04
000174F8 3038 D008                  		move.w	($FFFFD008).w,d0
000174FC 0640 00E0                  		addi.w	#$E0,d0
00017500 9068 0008                  		sub.w	8(a0),d0
00017504 6400                       		bcc.s	loc_15B74
00017506 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001750A 0440 0080                  		subi.w	#$80,d0
0001750E B068 000C                  		cmp.w	$C(a0),d0
00017512 6400                       		bcc.s	locret_15B76
00017514 0640 0100                  		addi.w	#$100,d0
00017518 B068 000C                  		cmp.w	$C(a0),d0
0001751C 6500                       		bcs.s	locret_15B76
0001751E 117C 0001 003D             		move.b	#1,$3D(a0)
00017524 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
0001752A 117C 00A2 0020             		move.b	#$A2,$20(a0)
00017530 117C 0002 001A             		move.b	#2,$1A(a0)
00017536 303C 00B0                  		move.w	#$B0,d0
0001753A 4EB9 0000 132C             		jsr	(PlaySound_Special).l ;	play saw sound
00017540                            
00017540                            loc_15B74:
00017540 588F                       		addq.l	#4,sp
00017542                            
00017542                            locret_15B76:
00017542 4E75                       		rts	
00017544                            ; ===========================================================================
00017544                            
00017544                            Obj6A_Animate04:
00017544 4EB9 0000 E736             		jsr	SpeedToPos
0001754A 3168 0008 003A             		move.w	8(a0),$3A(a0)
00017550 5328 001E                  		subq.b	#1,$1E(a0)
00017554 6A00                       		bpl.s	locret_15B96
00017556 117C 0002 001E             		move.b	#2,$1E(a0)
0001755C 0868 0000 001A             		bchg	#0,$1A(a0)
00017562                            
00017562                            locret_15B96:
00017562 4E75                       		rts	
00017564                            ; ===========================================================================
00017564                            ; ---------------------------------------------------------------------------
00017564                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00017564                            ; ---------------------------------------------------------------------------
00017564                            Map_obj6A:
00017564                            	include "_maps\obj6A.asm"
00017564                            ; ---------------------------------------------------------------------------
00017564                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00017564                            ; ---------------------------------------------------------------------------
00017564 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
00017568 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
0001756C 07                         byte_15BA0:	dc.b 7
0001756D C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00017572 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00017577 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
0001757C E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00017581 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00017586 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
0001758B 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00017590 07                         byte_15BC4:	dc.b 7
00017591 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00017596 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
0001759B E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
000175A0 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
000175A5 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
000175AA 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
000175AF 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
000175B4 04                         byte_15BE8:	dc.b 4
000175B5 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
000175BA E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
000175BF 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
000175C4 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
000175C9 04                         byte_15BFD:	dc.b 4
000175CA E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
000175CF E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
000175D4 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
000175D9 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
000175DE                            		even
000175DE                            		even
000175DE                            
000175DE                            ; ===========================================================================
000175DE                            ; ---------------------------------------------------------------------------
000175DE                            ; Object 6B - stomper (SBZ)
000175DE                            ; ---------------------------------------------------------------------------
000175DE                            
000175DE                            Obj6B:					; XREF: Obj_Index
000175DE 7000                       		moveq	#0,d0
000175E0 1028 0024                  		move.b	$24(a0),d0
000175E4 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
000175E8 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
000175EC                            ; ===========================================================================
000175EC 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
000175EE 0000                       		dc.w Obj6B_Action-Obj6B_Index
000175F0                            
000175F0 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
000175F4 1C20 3803                  		dc.b  $1C, $20,	$38,   3
000175F8 1C20 4004                  		dc.b  $1C, $20,	$40,   4
000175FC 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00017600 8040 0005                  		dc.b  $80, $40,	  0,   5
00017604                            ; ===========================================================================
00017604                            
00017604                            Obj6B_Main:				; XREF: Obj6B_Index
00017604 5428 0024                  		addq.b	#2,$24(a0)
00017608 7000                       		moveq	#0,d0
0001760A 1028 0028                  		move.b	$28(a0),d0
0001760E E448                       		lsr.w	#2,d0
00017610 0240 001C                  		andi.w	#$1C,d0
00017614 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
00017618 115B 0019                  		move.b	(a3)+,$19(a0)
0001761C 115B 0016                  		move.b	(a3)+,$16(a0)
00017620 E448                       		lsr.w	#2,d0
00017622 1140 001A                  		move.b	d0,$1A(a0)
00017626 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
0001762E 317C 22C0 0002             		move.w	#$22C0,2(a0)
00017634 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
0001763A 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
0001763C 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
00017642 6700                       		beq.s	Obj6B_SBZ3
00017644                            
00017644                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
00017644 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017648 7000                       		moveq	#0,d0
0001764A 1028 0023                  		move.b	$23(a0),d0
0001764E 6700                       		beq.s	Obj6B_Delete
00017650 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00017656                            
00017656                            Obj6B_Delete:
00017656 4EF9 0000 E798             		jmp	DeleteObject
0001765C                            ; ===========================================================================
0001765C                            
0001765C                            Obj6B_SBZ3:				; XREF: Obj6B_Main
0001765C 317C 41F0 0002             		move.w	#$41F0,2(a0)
00017662 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
00017668 6600                       		bne.s	Obj6B_SBZ12
0001766A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001766E 7000                       		moveq	#0,d0
00017670 1028 0023                  		move.b	$23(a0),d0
00017674 6700                       		beq.s	Obj6B_SBZ12
00017676 0832 0000 0002             		btst	#0,2(a2,d0.w)
0001767C 6700                       		beq.s	Obj6B_SBZ12
0001767E 4238 F7CB                  		clr.b	($FFFFF7CB).w
00017682 60C0                       		bra.s	Obj6B_ChkGone
00017684                            ; ===========================================================================
00017684                            
00017684                            Obj6B_SBZ12:				; XREF: Obj6B_Main
00017684 0028 0004 0001             		ori.b	#4,1(a0)
0001768A 117C 0004 0018             		move.b	#4,$18(a0)
00017690 3168 0008 0034             		move.w	8(a0),$34(a0)
00017696 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001769C 7000                       		moveq	#0,d0
0001769E 101B                       		move.b	(a3)+,d0
000176A0 3140 003C                  		move.w	d0,$3C(a0)
000176A4 7000                       		moveq	#0,d0
000176A6 1028 0028                  		move.b	$28(a0),d0
000176AA 6A00                       		bpl.s	Obj6B_Action
000176AC 0200 000F                  		andi.b	#$F,d0
000176B0 1140 003E                  		move.b	d0,$3E(a0)
000176B4 1153 0028                  		move.b	(a3),$28(a0)
000176B8 0C13 0005                  		cmpi.b	#5,(a3)
000176BC 6600                       		bne.s	Obj6B_ChkGone2
000176BE 08E8 0004 0001             		bset	#4,1(a0)
000176C4                            
000176C4                            Obj6B_ChkGone2:
000176C4 45F8 FC00                  		lea	($FFFFFC00).w,a2
000176C8 7000                       		moveq	#0,d0
000176CA 1028 0023                  		move.b	$23(a0),d0
000176CE 6700                       		beq.s	Obj6B_Action
000176D0 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000176D6                            
000176D6                            Obj6B_Action:				; XREF: Obj6B_Index
000176D6 3F28 0008                  		move.w	8(a0),-(sp)
000176DA 7000                       		moveq	#0,d0
000176DC 1028 0028                  		move.b	$28(a0),d0
000176E0 0240 000F                  		andi.w	#$F,d0
000176E4 D040                       		add.w	d0,d0
000176E6 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
000176EA 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
000176EE 381F                       		move.w	(sp)+,d4
000176F0 4A28 0001                  		tst.b	1(a0)
000176F4 6A00                       		bpl.s	Obj6B_ChkDel
000176F6 7200                       		moveq	#0,d1
000176F8 1228 0019                  		move.b	$19(a0),d1
000176FC 0641 000B                  		addi.w	#$B,d1
00017700 7400                       		moveq	#0,d2
00017702 1428 0016                  		move.b	$16(a0),d2
00017706 3602                       		move.w	d2,d3
00017708 5243                       		addq.w	#1,d3
0001770A 6100 94F6                  		bsr.w	SolidObject
0001770E                            
0001770E                            Obj6B_ChkDel:
0001770E 3028 0034                  		move.w	$34(a0),d0
00017712 0240 FF80                  		andi.w	#$FF80,d0
00017716 3238 F700                  		move.w	($FFFFF700).w,d1
0001771A 0441 0080                  		subi.w	#$80,d1
0001771E 0241 FF80                  		andi.w	#$FF80,d1
00017722 9041                       		sub.w	d1,d0
00017724 0C40 0280                  		cmpi.w	#$280,d0
00017728 6200                       		bhi.s	loc_15D64
0001772A 4EF9 0000 E75C             		jmp	DisplaySprite
00017730                            ; ===========================================================================
00017730                            
00017730                            loc_15D64:
00017730 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00017736 6600                       		bne.s	Obj6B_Delete2
00017738 4238 F7CB                  		clr.b	($FFFFF7CB).w
0001773C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017740 7000                       		moveq	#0,d0
00017742 1028 0023                  		move.b	$23(a0),d0
00017746 6700                       		beq.s	Obj6B_Delete2
00017748 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001774E                            
0001774E                            Obj6B_Delete2:
0001774E 4EF9 0000 E798             		jmp	DeleteObject
00017754                            ; ===========================================================================
00017754 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
00017758 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
0001775C 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
00017760                            ; ===========================================================================
00017760                            
00017760                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
00017760 4E75                       		rts	
00017762                            ; ===========================================================================
00017762                            
00017762                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
00017762 4A28 0038                  		tst.b	$38(a0)
00017766 6600                       		bne.s	loc_15DB4
00017768 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001776C 7000                       		moveq	#0,d0
0001776E 1028 003E                  		move.b	$3E(a0),d0
00017772 0832 0000 0000             		btst	#0,(a2,d0.w)
00017778 6700                       		beq.s	loc_15DC2
0001777A 117C 0001 0038             		move.b	#1,$38(a0)
00017780                            
00017780                            loc_15DB4:
00017780 3028 003C                  		move.w	$3C(a0),d0
00017784 B068 003A                  		cmp.w	$3A(a0),d0
00017788 6700                       		beq.s	loc_15DE0
0001778A 5468 003A                  		addq.w	#2,$3A(a0)
0001778E                            
0001778E                            loc_15DC2:
0001778E 3028 003A                  		move.w	$3A(a0),d0
00017792 0828 0000 0022             		btst	#0,$22(a0)
00017798 6700                       		beq.s	loc_15DD4
0001779A 4440                       		neg.w	d0
0001779C 0640 0080                  		addi.w	#$80,d0
000177A0                            
000177A0                            loc_15DD4:
000177A0 3228 0034                  		move.w	$34(a0),d1
000177A4 9240                       		sub.w	d0,d1
000177A6 3141 0008                  		move.w	d1,8(a0)
000177AA 4E75                       		rts	
000177AC                            ; ===========================================================================
000177AC                            
000177AC                            loc_15DE0:
000177AC 5228 0028                  		addq.b	#1,$28(a0)
000177B0 317C 00B4 0036             		move.w	#$B4,$36(a0)
000177B6 4228 0038                  		clr.b	$38(a0)
000177BA 45F8 FC00                  		lea	($FFFFFC00).w,a2
000177BE 7000                       		moveq	#0,d0
000177C0 1028 0023                  		move.b	$23(a0),d0
000177C4 67C8                       		beq.s	loc_15DC2
000177C6 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000177CC 60C0                       		bra.s	loc_15DC2
000177CE                            ; ===========================================================================
000177CE                            
000177CE                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
000177CE 4A28 0038                  		tst.b	$38(a0)
000177D2 6600                       		bne.s	loc_15E14
000177D4 5368 0036                  		subq.w	#1,$36(a0)
000177D8 6600                       		bne.s	loc_15E1E
000177DA 117C 0001 0038             		move.b	#1,$38(a0)
000177E0                            
000177E0                            loc_15E14:
000177E0 4A68 003A                  		tst.w	$3A(a0)
000177E4 6700                       		beq.s	loc_15E3C
000177E6 5568 003A                  		subq.w	#2,$3A(a0)
000177EA                            
000177EA                            loc_15E1E:
000177EA 3028 003A                  		move.w	$3A(a0),d0
000177EE 0828 0000 0022             		btst	#0,$22(a0)
000177F4 6700                       		beq.s	loc_15E30
000177F6 4440                       		neg.w	d0
000177F8 0640 0080                  		addi.w	#$80,d0
000177FC                            
000177FC                            loc_15E30:
000177FC 3228 0034                  		move.w	$34(a0),d1
00017800 9240                       		sub.w	d0,d1
00017802 3141 0008                  		move.w	d1,8(a0)
00017806 4E75                       		rts	
00017808                            ; ===========================================================================
00017808                            
00017808                            loc_15E3C:
00017808 5328 0028                  		subq.b	#1,$28(a0)
0001780C 4228 0038                  		clr.b	$38(a0)
00017810 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017814 7000                       		moveq	#0,d0
00017816 1028 0023                  		move.b	$23(a0),d0
0001781A 67CE                       		beq.s	loc_15E1E
0001781C 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00017822 60C6                       		bra.s	loc_15E1E
00017824                            ; ===========================================================================
00017824                            
00017824                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
00017824 4A28 0038                  		tst.b	$38(a0)
00017828 6600                       		bne.s	loc_15E7C
0001782A 4A68 003A                  		tst.w	$3A(a0)
0001782E 6700                       		beq.s	loc_15E6A
00017830 5368 003A                  		subq.w	#1,$3A(a0)
00017834 6000                       		bra.s	loc_15E8E
00017836                            ; ===========================================================================
00017836                            
00017836                            loc_15E6A:
00017836 5368 0036                  		subq.w	#1,$36(a0)
0001783A 6A00                       		bpl.s	loc_15E8E
0001783C 317C 003C 0036             		move.w	#$3C,$36(a0)
00017842 117C 0001 0038             		move.b	#1,$38(a0)
00017848                            
00017848                            loc_15E7C:
00017848 5068 003A                  		addq.w	#8,$3A(a0)
0001784C 3028 003A                  		move.w	$3A(a0),d0
00017850 B068 003C                  		cmp.w	$3C(a0),d0
00017854 6600                       		bne.s	loc_15E8E
00017856 4228 0038                  		clr.b	$38(a0)
0001785A                            
0001785A                            loc_15E8E:
0001785A 3028 003A                  		move.w	$3A(a0),d0
0001785E 0828 0000 0022             		btst	#0,$22(a0)
00017864 6700                       		beq.s	loc_15EA0
00017866 4440                       		neg.w	d0
00017868 0640 0038                  		addi.w	#$38,d0
0001786C                            
0001786C                            loc_15EA0:
0001786C 3228 0030                  		move.w	$30(a0),d1
00017870 D240                       		add.w	d0,d1
00017872 3141 000C                  		move.w	d1,$C(a0)
00017876 4E75                       		rts	
00017878                            ; ===========================================================================
00017878                            
00017878                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
00017878 4A28 0038                  		tst.b	$38(a0)
0001787C 6600                       		bne.s	loc_15ED0
0001787E 4A68 003A                  		tst.w	$3A(a0)
00017882 6700                       		beq.s	loc_15EBE
00017884 5168 003A                  		subq.w	#8,$3A(a0)
00017888 6000                       		bra.s	loc_15EF0
0001788A                            ; ===========================================================================
0001788A                            
0001788A                            loc_15EBE:
0001788A 5368 0036                  		subq.w	#1,$36(a0)
0001788E 6A00                       		bpl.s	loc_15EF0
00017890 317C 003C 0036             		move.w	#$3C,$36(a0)
00017896 117C 0001 0038             		move.b	#1,$38(a0)
0001789C                            
0001789C                            loc_15ED0:
0001789C 3028 003A                  		move.w	$3A(a0),d0
000178A0 B068 003C                  		cmp.w	$3C(a0),d0
000178A4 6700                       		beq.s	loc_15EE0
000178A6 5068 003A                  		addq.w	#8,$3A(a0)
000178AA 6000                       		bra.s	loc_15EF0
000178AC                            ; ===========================================================================
000178AC                            
000178AC                            loc_15EE0:
000178AC 5368 0036                  		subq.w	#1,$36(a0)
000178B0 6A00                       		bpl.s	loc_15EF0
000178B2 317C 003C 0036             		move.w	#$3C,$36(a0)
000178B8 4228 0038                  		clr.b	$38(a0)
000178BC                            
000178BC                            loc_15EF0:
000178BC 3028 003A                  		move.w	$3A(a0),d0
000178C0 0828 0000 0022             		btst	#0,$22(a0)
000178C6 6700                       		beq.s	loc_15F02
000178C8 4440                       		neg.w	d0
000178CA 0640 0038                  		addi.w	#$38,d0
000178CE                            
000178CE                            loc_15F02:
000178CE 3228 0030                  		move.w	$30(a0),d1
000178D2 D240                       		add.w	d0,d1
000178D4 3141 000C                  		move.w	d1,$C(a0)
000178D8 4E75                       		rts	
000178DA                            ; ===========================================================================
000178DA                            
000178DA                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
000178DA 4A28 0038                  		tst.b	$38(a0)
000178DE 6600                       		bne.s	loc_15F3E
000178E0 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000178E4 7000                       		moveq	#0,d0
000178E6 1028 003E                  		move.b	$3E(a0),d0
000178EA 0832 0000 0000             		btst	#0,(a2,d0.w)
000178F0 6700                       		beq.s	locret_15F5C
000178F2 117C 0001 0038             		move.b	#1,$38(a0)
000178F8 45F8 FC00                  		lea	($FFFFFC00).w,a2
000178FC 7000                       		moveq	#0,d0
000178FE 1028 0023                  		move.b	$23(a0),d0
00017902 6700                       		beq.s	loc_15F3E
00017904 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001790A                            
0001790A                            loc_15F3E:
0001790A 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
00017912 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
0001791A 3168 0008 0034             		move.w	8(a0),$34(a0)
00017920 0C68 0980 0008             		cmpi.w	#$980,8(a0)
00017926 6700                       		beq.s	loc_15F5E
00017928                            
00017928                            locret_15F5C:
00017928 4E75                       		rts	
0001792A                            ; ===========================================================================
0001792A                            
0001792A                            loc_15F5E:
0001792A 4228 0028                  		clr.b	$28(a0)
0001792E 4228 0038                  		clr.b	$38(a0)
00017932 4E75                       		rts	
00017934                            ; ===========================================================================
00017934                            ; ---------------------------------------------------------------------------
00017934                            ; Sprite mappings - stomper and	platforms (SBZ)
00017934                            ; ---------------------------------------------------------------------------
00017934                            Map_obj6B:
00017934                            	include "_maps\obj6B.asm"
00017934                            ; ---------------------------------------------------------------------------
00017934                            ; Sprite mappings - stomper and	platforms (SBZ)
00017934                            ; ---------------------------------------------------------------------------
00017934 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
00017938 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
0001793C 0000                       		dc.w byte_15FB0-Map_obj6B
0001793E 04                         byte_15F72:	dc.b 4
0001793F F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
00017944 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00017949 F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
0001794E F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00017953 08                         byte_15F87:	dc.b 8
00017954 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
00017959 E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
0001795E E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00017963 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00017968 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
0001796D 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00017972 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00017977 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
0001797C 0E                         byte_15FB0:	dc.b $E
0001797D C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
00017982 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00017987 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
0001798C C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
00017991 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
00017996 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
0001799B C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
000179A0 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
000179A5 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
000179AA E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
000179AF E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
000179B4 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
000179B9 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
000179BE 200F 0058 80               		dc.b $20, $F, 0, $58, $80
000179C4 00                         		even
000179C4 00                         		even
000179C4                            
000179C4                            ; ===========================================================================
000179C4                            ; ---------------------------------------------------------------------------
000179C4                            ; Object 6C - vanishing	platforms (SBZ)
000179C4                            ; ---------------------------------------------------------------------------
000179C4                            
000179C4                            Obj6C:					; XREF: Obj_Index
000179C4 7000                       		moveq	#0,d0
000179C6 1028 0024                  		move.b	$24(a0),d0
000179CA 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
000179CE 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
000179D2                            ; ===========================================================================
000179D2 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
000179D4 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
000179D6 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
000179D8 0000                       		dc.w loc_16068-Obj6C_Index
000179DA                            ; ===========================================================================
000179DA                            
000179DA                            Obj6C_Main:				; XREF: Obj6C_Index
000179DA 5C28 0024                  		addq.b	#6,$24(a0)
000179DE 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
000179E6 317C 44C3 0002             		move.w	#$44C3,2(a0)
000179EC 0028 0004 0001             		ori.b	#4,1(a0)
000179F2 117C 0010 0019             		move.b	#$10,$19(a0)
000179F8 117C 0004 0018             		move.b	#4,$18(a0)
000179FE 7000                       		moveq	#0,d0
00017A00 1028 0028                  		move.b	$28(a0),d0	; get object type
00017A04 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00017A08 5240                       		addq.w	#1,d0		; add 1
00017A0A EF48                       		lsl.w	#7,d0		; multiply by $80
00017A0C 3200                       		move.w	d0,d1
00017A0E 5340                       		subq.w	#1,d0
00017A10 3140 0030                  		move.w	d0,$30(a0)
00017A14 3140 0032                  		move.w	d0,$32(a0)
00017A18 7000                       		moveq	#0,d0
00017A1A 1028 0028                  		move.b	$28(a0),d0	; get object type
00017A1E 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00017A22 0641 0080                  		addi.w	#$80,d1
00017A26 C0C1                       		mulu.w	d1,d0
00017A28 E088                       		lsr.l	#8,d0
00017A2A 3140 0036                  		move.w	d0,$36(a0)
00017A2E 5341                       		subq.w	#1,d1
00017A30 3141 0038                  		move.w	d1,$38(a0)
00017A34                            
00017A34                            loc_16068:				; XREF: Obj6C_Index
00017A34 3038 FE04                  		move.w	($FFFFFE04).w,d0
00017A38 9068 0036                  		sub.w	$36(a0),d0
00017A3C C068 0038                  		and.w	$38(a0),d0
00017A40 6600                       		bne.s	Obj6C_Animate
00017A42 5928 0024                  		subq.b	#4,$24(a0)
00017A46 6000                       		bra.s	Obj6C_Vanish
00017A48                            ; ===========================================================================
00017A48                            
00017A48                            Obj6C_Animate:
00017A48 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00017A4E 4EB9 0000 B860             		jsr	AnimateSprite
00017A54 6000 8E82                  		bra.w	MarkObjGone
00017A58                            ; ===========================================================================
00017A58                            
00017A58                            Obj6C_Vanish:				; XREF: Obj6C_Index
00017A58 5368 0030                  		subq.w	#1,$30(a0)
00017A5C 6A00                       		bpl.s	loc_160AA
00017A5E 317C 007F 0030             		move.w	#127,$30(a0)
00017A64 4A28 001C                  		tst.b	$1C(a0)
00017A68 6700                       		beq.s	loc_160A4
00017A6A 3168 0032 0030             		move.w	$32(a0),$30(a0)
00017A70                            
00017A70                            loc_160A4:
00017A70 0868 0000 001C             		bchg	#0,$1C(a0)
00017A76                            
00017A76                            loc_160AA:
00017A76 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00017A7C 4EB9 0000 B860             		jsr	AnimateSprite
00017A82 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
00017A88 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
00017A8A 0C28 0002 0024             		cmpi.b	#2,$24(a0)
00017A90 6600                       		bne.s	loc_160D6
00017A92 7200                       		moveq	#0,d1
00017A94 1228 0019                  		move.b	$19(a0),d1
00017A98 4EB9 0000 8508             		jsr	(PlatformObject).l
00017A9E 6000 8E38                  		bra.w	MarkObjGone
00017AA2                            ; ===========================================================================
00017AA2                            
00017AA2                            loc_160D6:
00017AA2 7200                       		moveq	#0,d1
00017AA4 1228 0019                  		move.b	$19(a0),d1
00017AA8 4EB9 0000 867C             		jsr	(ExitPlatform).l
00017AAE 3428 0008                  		move.w	8(a0),d2
00017AB2 4EB9 0000 8BEA             		jsr	(MvSonicOnPtfm2).l
00017AB8 6000 8E1E                  		bra.w	MarkObjGone
00017ABC                            ; ===========================================================================
00017ABC                            
00017ABC                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
00017ABC 0828 0003 0022             		btst	#3,$22(a0)
00017AC2 6700                       		beq.s	Obj6C_Display
00017AC4 43F8 D000                  		lea	($FFFFD000).w,a1
00017AC8 08A9 0003 0022             		bclr	#3,$22(a1)
00017ACE 08A8 0003 0022             		bclr	#3,$22(a0)
00017AD4 117C 0002 0024             		move.b	#2,$24(a0)
00017ADA 4228 0025                  		clr.b	$25(a0)
00017ADE                            
00017ADE                            Obj6C_Display:
00017ADE 6000 8DF8                  		bra.w	MarkObjGone
00017AE2                            ; ===========================================================================
00017AE2                            Ani_obj6C:
00017AE2                            	include "_anim\obj6C.asm"
00017AE2                            ; ---------------------------------------------------------------------------
00017AE2                            ; Animation script - vanishing platforms (SBZ)
00017AE2                            ; ---------------------------------------------------------------------------
00017AE2 0000                       		dc.w byte_1611A-Ani_obj6C
00017AE4 0000                       		dc.w byte_16122-Ani_obj6C
00017AE6 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
00017AEE 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
00017AF6                            		even
00017AF6                            		even
00017AF6                            
00017AF6                            ; ---------------------------------------------------------------------------
00017AF6                            ; Sprite mappings - vanishing platforms	(SBZ)
00017AF6                            ; ---------------------------------------------------------------------------
00017AF6                            Map_obj6C:
00017AF6                            	include "_maps\obj6C.asm"
00017AF6                            ; ---------------------------------------------------------------------------
00017AF6                            ; Sprite mappings - vanishing platforms	(SBZ)
00017AF6                            ; ---------------------------------------------------------------------------
00017AF6 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
00017AFA 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
00017AFE 01                         byte_16132:	dc.b 1
00017AFF F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00017B04 01                         byte_16138:	dc.b 1
00017B05 F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
00017B0A 01                         byte_1613E:	dc.b 1
00017B0B F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
00017B10 00                         byte_16144:	dc.b 0
00017B12 00                         		even
00017B12 00                         		even
00017B12                            
00017B12                            ; ===========================================================================
00017B12                            ; ---------------------------------------------------------------------------
00017B12                            ; Object 6E - electrocution orbs (SBZ)
00017B12                            ; ---------------------------------------------------------------------------
00017B12                            
00017B12                            Obj6E:					; XREF: Obj_Index
00017B12 7000                       		moveq	#0,d0
00017B14 1028 0024                  		move.b	$24(a0),d0
00017B18 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
00017B1C 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
00017B20                            ; ===========================================================================
00017B20 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
00017B22 0000                       		dc.w Obj6E_Shock-Obj6E_Index
00017B24                            ; ===========================================================================
00017B24                            
00017B24                            Obj6E_Main:				; XREF: Obj6E_Index
00017B24 5428 0024                  		addq.b	#2,$24(a0)
00017B28 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
00017B30 317C 047E 0002             		move.w	#$47E,2(a0)
00017B36 0028 0004 0001             		ori.b	#4,1(a0)
00017B3C 117C 0028 0019             		move.b	#$28,$19(a0)
00017B42 7000                       		moveq	#0,d0
00017B44 1028 0028                  		move.b	$28(a0),d0	; read object type
00017B48 E948                       		lsl.w	#4,d0		; multiply by $10
00017B4A 5340                       		subq.w	#1,d0
00017B4C 3140 0034                  		move.w	d0,$34(a0)
00017B50                            
00017B50                            Obj6E_Shock:				; XREF: Obj6E_Index
00017B50 3038 FE04                  		move.w	($FFFFFE04).w,d0
00017B54 C068 0034                  		and.w	$34(a0),d0
00017B58 6600                       		bne.s	Obj6E_Animate
00017B5A 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
00017B60 4A28 0001                  		tst.b	1(a0)
00017B64 6A00                       		bpl.s	Obj6E_Animate
00017B66 303C 00B1                  		move.w	#$B1,d0
00017B6A 4EB9 0000 132C             		jsr	(PlaySound_Special).l ;	play electricity sound
00017B70                            
00017B70                            Obj6E_Animate:
00017B70 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
00017B76 4EB9 0000 B860             		jsr	AnimateSprite
00017B7C 117C 0000 0020             		move.b	#0,$20(a0)
00017B82 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
00017B88 6600                       		bne.s	Obj6E_Display	; if not, branch
00017B8A 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
00017B90                            
00017B90                            Obj6E_Display:
00017B90 6000 8D46                  		bra.w	MarkObjGone
00017B94                            ; ===========================================================================
00017B94                            Ani_obj6E:
00017B94                            	include "_anim\obj6E.asm"
00017B94                            ; ---------------------------------------------------------------------------
00017B94                            ; Animation script - electrocution orbs (SBZ)
00017B94                            ; ---------------------------------------------------------------------------
00017B94 0000                       		dc.w byte_161CC-Ani_obj6E
00017B96 0000                       		dc.w byte_161D0-Ani_obj6E
00017B98 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
00017B9C 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
00017BAC                            		even
00017BAC                            		even
00017BAC                            
00017BAC                            ; ---------------------------------------------------------------------------
00017BAC                            ; Sprite mappings - electrocution orbs (SBZ)
00017BAC                            ; ---------------------------------------------------------------------------
00017BAC                            Map_obj6E:
00017BAC                            	include "_maps\obj6E.asm"
00017BAC                            ; ---------------------------------------------------------------------------
00017BAC                            ; Sprite mappings - electrocution orbs (SBZ)
00017BAC                            ; ---------------------------------------------------------------------------
00017BAC 0000 0000                  		dc.w byte_161EC-Map_obj6E, byte_161F7-Map_obj6E
00017BB0 0000 0000                  		dc.w byte_16207-Map_obj6E, byte_16221-Map_obj6E
00017BB4 0000 0000                  		dc.w byte_16236-Map_obj6E, byte_16255-Map_obj6E
00017BB8 02                         byte_161EC:	dc.b 2
00017BB9 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00017BBE 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00017BC3 03                         byte_161F7:	dc.b 3
00017BC4 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00017BC9 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00017BCE 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00017BD3 05                         byte_16207:	dc.b 5
00017BD4 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00017BD9 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00017BDE 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00017BE3 F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
00017BE8 F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
00017BED 04                         byte_16221:	dc.b 4
00017BEE F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00017BF3 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00017BF8 F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
00017BFD F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
00017C02 06                         byte_16236:	dc.b 6
00017C03 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00017C08 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00017C0D F60D 100C 08               		dc.b $F6, $D, $10, $C, 8
00017C12 F60D 180C DC               		dc.b $F6, $D, $18, $C, $DC
00017C17 F60D 000C 24               		dc.b $F6, $D, 0, $C, $24
00017C1C F60D 080C C0               		dc.b $F6, $D, 8, $C, $C0
00017C21 04                         byte_16255:	dc.b 4
00017C22 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00017C27 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00017C2C F60D 100C 24               		dc.b $F6, $D, $10, $C, $24
00017C31 F60D 180C C0               		dc.b $F6, $D, $18, $C, $C0
00017C36                            		even
00017C36                            		even
00017C36                            
00017C36                            ; ===========================================================================
00017C36                            ; ---------------------------------------------------------------------------
00017C36                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00017C36                            ; ---------------------------------------------------------------------------
00017C36                            
00017C36                            Obj6F:					; XREF: Obj_Index
00017C36 7000                       		moveq	#0,d0
00017C38 1028 0024                  		move.b	$24(a0),d0
00017C3C 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
00017C40 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
00017C44 3028 0030                  		move.w	$30(a0),d0
00017C48 0240 FF80                  		andi.w	#$FF80,d0
00017C4C 3238 F700                  		move.w	($FFFFF700).w,d1
00017C50 0441 0080                  		subi.w	#$80,d1
00017C54 0241 FF80                  		andi.w	#$FF80,d1
00017C58 9041                       		sub.w	d1,d0
00017C5A 0C40 0280                  		cmpi.w	#$280,d0
00017C5E 6200                       		bhi.s	loc_1629A
00017C60                            
00017C60                            Obj6F_Display:
00017C60 4EF9 0000 E75C             		jmp	DisplaySprite
00017C66                            ; ===========================================================================
00017C66                            
00017C66                            loc_1629A:
00017C66 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
00017C6C 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
00017C6E 0C40 FF80                  		cmpi.w	#-$80,d0
00017C72 64EC                       		bcc.s	Obj6F_Display
00017C74                            
00017C74                            Obj6F_Act1or2:
00017C74 1028 002F                  		move.b	$2F(a0),d0
00017C78 6A00                       		bpl.s	Obj6F_Delete
00017C7A 0240 007F                  		andi.w	#$7F,d0
00017C7E 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00017C82 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00017C88                            
00017C88                            Obj6F_Delete:
00017C88 4EF9 0000 E798             		jmp	DeleteObject
00017C8E                            ; ===========================================================================
00017C8E 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
00017C90 0000                       		dc.w loc_163D8-Obj6F_Index
00017C92                            ; ===========================================================================
00017C92                            
00017C92                            Obj6F_Main:				; XREF: Obj6F_Index
00017C92 1028 0028                  		move.b	$28(a0),d0
00017C96 6B00 0000                  		bmi.w	loc_16380
00017C9A 5428 0024                  		addq.b	#2,$24(a0)
00017C9E 217C 0001 7306 0004        		move.l	#Map_obj69a,4(a0)
00017CA6 317C 04DF 0002             		move.w	#$4DF,2(a0)
00017CAC 117C 0010 0019             		move.b	#$10,$19(a0)
00017CB2 0028 0004 0001             		ori.b	#4,1(a0)
00017CB8 117C 0004 0018             		move.b	#4,$18(a0)
00017CBE 7000                       		moveq	#0,d0
00017CC0 1028 0028                  		move.b	$28(a0),d0
00017CC4 3200                       		move.w	d0,d1
00017CC6 E648                       		lsr.w	#3,d0
00017CC8 0240 001E                  		andi.w	#$1E,d0
00017CCC 45FA 0000                  		lea	off_164A6(pc),a2
00017CD0 D4F2 0000                  		adda.w	(a2,d0.w),a2
00017CD4 315A 0038                  		move.w	(a2)+,$38(a0)
00017CD8 315A 0030                  		move.w	(a2)+,$30(a0)
00017CDC 214A 003C                  		move.l	a2,$3C(a0)
00017CE0 0241 000F                  		andi.w	#$F,d1
00017CE4 E549                       		lsl.w	#2,d1
00017CE6 1141 0038                  		move.b	d1,$38(a0)
00017CEA 117C 0004 003A             		move.b	#4,$3A(a0)
00017CF0 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00017CF4 6700                       		beq.s	loc_16356
00017CF6 117C 0001 003B             		move.b	#1,$3B(a0)
00017CFC 4428 003A                  		neg.b	$3A(a0)
00017D00 7200                       		moveq	#0,d1
00017D02 1228 0038                  		move.b	$38(a0),d1
00017D06 D228 003A                  		add.b	$3A(a0),d1
00017D0A B228 0039                  		cmp.b	$39(a0),d1
00017D0E 6500                       		bcs.s	loc_16352
00017D10 1001                       		move.b	d1,d0
00017D12 7200                       		moveq	#0,d1
00017D14 4A00                       		tst.b	d0
00017D16 6A00                       		bpl.s	loc_16352
00017D18 1228 0039                  		move.b	$39(a0),d1
00017D1C 5901                       		subq.b	#4,d1
00017D1E                            
00017D1E                            loc_16352:
00017D1E 1141 0038                  		move.b	d1,$38(a0)
00017D22                            
00017D22                            loc_16356:
00017D22 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00017D28 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00017D2E 4A41                       		tst.w	d1
00017D30 6600                       		bne.s	loc_1636C
00017D32 117C 0001 001C             		move.b	#1,$1C(a0)
00017D38                            
00017D38                            loc_1636C:
00017D38 0C41 0008                  		cmpi.w	#8,d1
00017D3C 6600                       		bne.s	loc_16378
00017D3E 117C 0000 001C             		move.b	#0,$1C(a0)
00017D44                            
00017D44                            loc_16378:
00017D44 6100 BA72                  		bsr.w	Obj63_ChangeDir
00017D48 6000 0000                  		bra.w	loc_163D8
00017D4C                            ; ===========================================================================
00017D4C                            
00017D4C                            loc_16380:				; XREF: Obj6F_Main
00017D4C 1140 002F                  		move.b	d0,$2F(a0)
00017D50 0240 007F                  		andi.w	#$7F,d0
00017D54 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00017D58 08F2 0000 0000             		bset	#0,(a2,d0.w)
00017D5E 6700                       		beq.s	loc_1639A
00017D60 4EF9 0000 E798             		jmp	DeleteObject
00017D66                            ; ===========================================================================
00017D66                            
00017D66                            loc_1639A:
00017D66 D040                       		add.w	d0,d0
00017D68 0240 001E                  		andi.w	#$1E,d0
00017D6C 0640 0080                  		addi.w	#$80,d0
00017D70 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00017D76 D4F2 0000                  		adda.w	(a2,d0.w),a2
00017D7A 321A                       		move.w	(a2)+,d1
00017D7C 2248                       		movea.l	a0,a1
00017D7E 6000                       		bra.s	Obj6F_LoadPform
00017D80                            ; ===========================================================================
00017D80                            
00017D80                            Obj6F_Loop:
00017D80 4EB9 0000 EBE4             		jsr	SingleObjLoad
00017D86 6600                       		bne.s	loc_163D0
00017D88                            
00017D88                            Obj6F_LoadPform:			; XREF: loc_1639A
00017D88 137C 006F 0000             		move.b	#$6F,0(a1)
00017D8E 335A 0008                  		move.w	(a2)+,8(a1)
00017D92 335A 000C                  		move.w	(a2)+,$C(a1)
00017D96 301A                       		move.w	(a2)+,d0
00017D98 1340 0028                  		move.b	d0,$28(a1)
00017D9C                            
00017D9C                            loc_163D0:
00017D9C 51C9 FFE2                  		dbf	d1,Obj6F_Loop
00017DA0                            
00017DA0 588F                       		addq.l	#4,sp
00017DA2 4E75                       		rts	
00017DA4                            ; ===========================================================================
00017DA4                            
00017DA4                            loc_163D8:				; XREF: Obj6F_Index
00017DA4 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
00017DAA 4EB9 0000 B860             		jsr	AnimateSprite
00017DB0 4A28 001A                  		tst.b	$1A(a0)
00017DB4 6600                       		bne.s	loc_16404
00017DB6 3F28 0008                  		move.w	8(a0),-(sp)
00017DBA 6100 0000                  		bsr.w	loc_16424
00017DBE 323C 001B                  		move.w	#$1B,d1
00017DC2 343C 0007                  		move.w	#7,d2
00017DC6 3602                       		move.w	d2,d3
00017DC8 5243                       		addq.w	#1,d3
00017DCA 381F                       		move.w	(sp)+,d4
00017DCC 6000 8E34                  		bra.w	SolidObject
00017DD0                            ; ===========================================================================
00017DD0                            
00017DD0                            loc_16404:
00017DD0 0828 0003 0022             		btst	#3,$22(a0)
00017DD6 6700                       		beq.s	loc_16420
00017DD8 43F8 D000                  		lea	($FFFFD000).w,a1
00017DDC 08A9 0003 0022             		bclr	#3,$22(a1)
00017DE2 08A8 0003 0022             		bclr	#3,$22(a0)
00017DE8 4228 0025                  		clr.b	$25(a0)
00017DEC                            
00017DEC                            loc_16420:
00017DEC 6000 0002                  		bra.w	*+4
00017DF0                            
00017DF0                            loc_16424:
00017DF0 3028 0008                  		move.w	8(a0),d0
00017DF4 B068 0034                  		cmp.w	$34(a0),d0
00017DF8 6600                       		bne.s	loc_16484
00017DFA 3028 000C                  		move.w	$C(a0),d0
00017DFE B068 0036                  		cmp.w	$36(a0),d0
00017E02 6600                       		bne.s	loc_16484
00017E04 7200                       		moveq	#0,d1
00017E06 1228 0038                  		move.b	$38(a0),d1
00017E0A D228 003A                  		add.b	$3A(a0),d1
00017E0E B228 0039                  		cmp.b	$39(a0),d1
00017E12 6500                       		bcs.s	loc_16456
00017E14 1001                       		move.b	d1,d0
00017E16 7200                       		moveq	#0,d1
00017E18 4A00                       		tst.b	d0
00017E1A 6A00                       		bpl.s	loc_16456
00017E1C 1228 0039                  		move.b	$39(a0),d1
00017E20 5901                       		subq.b	#4,d1
00017E22                            
00017E22                            loc_16456:
00017E22 1141 0038                  		move.b	d1,$38(a0)
00017E26 2268 003C                  		movea.l	$3C(a0),a1
00017E2A 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00017E30 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00017E36 4A41                       		tst.w	d1
00017E38 6600                       		bne.s	loc_16474
00017E3A 117C 0001 001C             		move.b	#1,$1C(a0)
00017E40                            
00017E40                            loc_16474:
00017E40 0C41 0008                  		cmpi.w	#8,d1
00017E44 6600                       		bne.s	loc_16480
00017E46 117C 0000 001C             		move.b	#0,$1C(a0)
00017E4C                            
00017E4C                            loc_16480:
00017E4C 6100 B96A                  		bsr.w	Obj63_ChangeDir
00017E50                            
00017E50                            loc_16484:
00017E50 4EF9 0000 E736             		jmp	SpeedToPos
00017E56                            ; ===========================================================================
00017E56                            Ani_obj6F:
00017E56                            	include "_anim\obj6F.asm"
00017E56                            ; ---------------------------------------------------------------------------
00017E56                            ; Animation script - platform on conveyor belt (SBZ)
00017E56                            ; ---------------------------------------------------------------------------
00017E56 0000                       		dc.w byte_1648E-Ani_obj6F
00017E58 0000                       		dc.w byte_164A2-Ani_obj6F
00017E5A 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00017E67 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
00017E6E 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
00017E72 00                         		even
00017E72 00                         		even
00017E72                            
00017E72 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00017E78 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00017E7E 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
00017E92 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
00017EA6 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00017EBA 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00017ECE 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00017EE2 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00017EF6                            ; ===========================================================================
00017EF6                            ; ---------------------------------------------------------------------------
00017EF6                            ; Object 70 - large girder block (SBZ)
00017EF6                            ; ---------------------------------------------------------------------------
00017EF6                            
00017EF6                            Obj70:					; XREF: Obj_Index
00017EF6 7000                       		moveq	#0,d0
00017EF8 1028 0024                  		move.b	$24(a0),d0
00017EFC 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
00017F00 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
00017F04                            ; ===========================================================================
00017F04 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
00017F06 0000                       		dc.w Obj70_Action-Obj70_Index
00017F08                            ; ===========================================================================
00017F08                            
00017F08                            Obj70_Main:				; XREF: Obj70_Index
00017F08 5428 0024                  		addq.b	#2,$24(a0)
00017F0C 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
00017F14 317C 42F0 0002             		move.w	#$42F0,2(a0)
00017F1A 0028 0004 0001             		ori.b	#4,1(a0)
00017F20 117C 0004 0018             		move.b	#4,$18(a0)
00017F26 117C 0060 0019             		move.b	#$60,$19(a0)
00017F2C 117C 0018 0016             		move.b	#$18,$16(a0)
00017F32 3168 0008 0032             		move.w	8(a0),$32(a0)
00017F38 3168 000C 0030             		move.w	$C(a0),$30(a0)
00017F3E 6100 0000                  		bsr.w	Obj70_Move2
00017F42                            
00017F42                            Obj70_Action:				; XREF: Obj70_Index
00017F42 3F28 0008                  		move.w	8(a0),-(sp)
00017F46 4A68 003A                  		tst.w	$3A(a0)
00017F4A 6700                       		beq.s	Obj70_Move
00017F4C 5368 003A                  		subq.w	#1,$3A(a0)
00017F50 6600                       		bne.s	Obj70_Solid
00017F52                            
00017F52                            Obj70_Move:
00017F52 4EB9 0000 E736             		jsr	SpeedToPos
00017F58 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
00017F5C 6600                       		bne.s	Obj70_Solid	; if time remains, branch
00017F5E 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
00017F62                            
00017F62                            Obj70_Solid:
00017F62 381F                       		move.w	(sp)+,d4
00017F64 4A28 0001                  		tst.b	1(a0)
00017F68 6A00                       		bpl.s	Obj70_ChkDel
00017F6A 7200                       		moveq	#0,d1
00017F6C 1228 0019                  		move.b	$19(a0),d1
00017F70 0641 000B                  		addi.w	#$B,d1
00017F74 7400                       		moveq	#0,d2
00017F76 1428 0016                  		move.b	$16(a0),d2
00017F7A 3602                       		move.w	d2,d3
00017F7C 5243                       		addq.w	#1,d3
00017F7E 6100 8C82                  		bsr.w	SolidObject
00017F82                            
00017F82                            Obj70_ChkDel:
00017F82 3028 0032                  		move.w	$32(a0),d0
00017F86 0240 FF80                  		andi.w	#$FF80,d0
00017F8A 3238 F700                  		move.w	($FFFFF700).w,d1
00017F8E 0441 0080                  		subi.w	#$80,d1
00017F92 0241 FF80                  		andi.w	#$FF80,d1
00017F96 9041                       		sub.w	d1,d0
00017F98 0C40 0280                  		cmpi.w	#$280,d0
00017F9C 6200                       		bhi.s	Obj70_Delete
00017F9E 4EF9 0000 E75C             		jmp	DisplaySprite
00017FA4                            ; ===========================================================================
00017FA4                            
00017FA4                            Obj70_Delete:
00017FA4 4EF9 0000 E798             		jmp	DeleteObject
00017FAA                            ; ===========================================================================
00017FAA                            
00017FAA                            Obj70_Move2:				; XREF: Obj70_Main
00017FAA 1028 0038                  		move.b	$38(a0),d0
00017FAE 0240 0018                  		andi.w	#$18,d0
00017FB2 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
00017FB8 43F1 0000                  		lea	(a1,d0.w),a1
00017FBC 3159 0010                  		move.w	(a1)+,$10(a0)
00017FC0 3159 0012                  		move.w	(a1)+,$12(a0)
00017FC4 3159 0034                  		move.w	(a1)+,$34(a0)
00017FC8 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
00017FCC 317C 0007 003A             		move.w	#7,$3A(a0)
00017FD2 4E75                       		rts	
00017FD4                            ; ===========================================================================
00017FD4 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
00017FDC 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
00017FE4 FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
00017FEC 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
00017FF4                            ; ---------------------------------------------------------------------------
00017FF4                            ; Sprite mappings - large girder block (SBZ)
00017FF4                            ; ---------------------------------------------------------------------------
00017FF4                            Map_obj70:
00017FF4                            	include "_maps\obj70.asm"
00017FF4                            ; ---------------------------------------------------------------------------
00017FF4                            ; Sprite mappings - large girder block (SBZ)
00017FF4                            ; ---------------------------------------------------------------------------
00017FF4 0000                       		dc.w byte_1662A-Map_obj70
00017FF6 0C                         byte_1662A:	dc.b $C
00017FF7 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
00017FFC 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00018001 E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00018006 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
0001800B E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
00018010 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00018015 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
0001801A 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
0001801F E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
00018024 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
00018029 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
0001802E 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
00018034 00                         		even
00018034 00                         		even
00018034                            
00018034                            ; ===========================================================================
00018034                            ; ---------------------------------------------------------------------------
00018034                            ; Object 72 - teleporter (SBZ)
00018034                            ; ---------------------------------------------------------------------------
00018034                            
00018034                            Obj72:					; XREF: Obj_Index
00018034 7000                       		moveq	#0,d0
00018036 1028 0024                  		move.b	$24(a0),d0
0001803A 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
0001803E 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
00018042 3028 0008                  		move.w	8(a0),d0
00018046 0240 FF80                  		andi.w	#$FF80,d0
0001804A 3238 F700                  		move.w	($FFFFF700).w,d1
0001804E 0441 0080                  		subi.w	#$80,d1
00018052 0241 FF80                  		andi.w	#$FF80,d1
00018056 9041                       		sub.w	d1,d0
00018058 0C40 0280                  		cmpi.w	#$280,d0
0001805C 6200                       		bhi.s	Obj72_Delete
0001805E 4E75                       		rts	
00018060                            ; ===========================================================================
00018060                            
00018060                            Obj72_Delete:
00018060 4EF9 0000 E798             		jmp	DeleteObject
00018066                            ; ===========================================================================
00018066 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
00018068 0000                       		dc.w loc_166C8-Obj72_Index
0001806A 0000                       		dc.w loc_1675E-Obj72_Index
0001806C 0000                       		dc.w loc_16798-Obj72_Index
0001806E                            ; ===========================================================================
0001806E                            
0001806E                            Obj72_Main:				; XREF: Obj72_Index
0001806E 5428 0024                  		addq.b	#2,$24(a0)
00018072 1028 0028                  		move.b	$28(a0),d0
00018076 D040                       		add.w	d0,d0
00018078 0240 001E                  		andi.w	#$1E,d0
0001807C 45FA 0000                  		lea	Obj72_Data(pc),a2
00018080 D4F2 0000                  		adda.w	(a2,d0.w),a2
00018084 315A 003A                  		move.w	(a2)+,$3A(a0)
00018088 214A 003C                  		move.l	a2,$3C(a0)
0001808C 315A 0036                  		move.w	(a2)+,$36(a0)
00018090 315A 0038                  		move.w	(a2)+,$38(a0)
00018094                            
00018094                            loc_166C8:				; XREF: Obj72_Index
00018094 43F8 D000                  		lea	($FFFFD000).w,a1
00018098 3029 0008                  		move.w	8(a1),d0
0001809C 9068 0008                  		sub.w	8(a0),d0
000180A0 0828 0000 0022             		btst	#0,$22(a0)
000180A6 6700                       		beq.s	loc_166E0
000180A8 0640 000F                  		addi.w	#$F,d0
000180AC                            
000180AC                            loc_166E0:
000180AC 0C40 0010                  		cmpi.w	#$10,d0
000180B0 6400                       		bcc.s	locret_1675C
000180B2 3229 000C                  		move.w	$C(a1),d1
000180B6 9268 000C                  		sub.w	$C(a0),d1
000180BA 0641 0020                  		addi.w	#$20,d1
000180BE 0C41 0040                  		cmpi.w	#$40,d1
000180C2 6400                       		bcc.s	locret_1675C
000180C4 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000180C8 6600                       		bne.s	locret_1675C
000180CA 0C28 0007 0028             		cmpi.b	#7,$28(a0)
000180D0 6600                       		bne.s	loc_1670E
000180D2 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
000180D8 6500                       		bcs.s	locret_1675C
000180DA                            
000180DA                            loc_1670E:
000180DA 5428 0024                  		addq.b	#2,$24(a0)
000180DE 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
000180E4 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
000180EA 337C 0800 0014             		move.w	#$800,$14(a1)
000180F0 337C 0000 0010             		move.w	#0,$10(a1)
000180F6 337C 0000 0012             		move.w	#0,$12(a1)
000180FC 08A8 0005 0022             		bclr	#5,$22(a0)
00018102 08A9 0005 0022             		bclr	#5,$22(a1)
00018108 08E9 0001 0022             		bset	#1,$22(a1)
0001810E 3368 0008 0008             		move.w	8(a0),8(a1)
00018114 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001811A 4228 0032                  		clr.b	$32(a0)
0001811E 303C 00BE                  		move.w	#$BE,d0
00018122 4EB9 0000 132C             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
00018128                            
00018128                            locret_1675C:
00018128 4E75                       		rts	
0001812A                            ; ===========================================================================
0001812A                            
0001812A                            loc_1675E:				; XREF: Obj72_Index
0001812A 43F8 D000                  		lea	($FFFFD000).w,a1
0001812E 1028 0032                  		move.b	$32(a0),d0
00018132 5428 0032                  		addq.b	#2,$32(a0)
00018136 4EB9 0000 3274             		jsr	(CalcSine).l
0001813C EA40                       		asr.w	#5,d0
0001813E 3428 000C                  		move.w	$C(a0),d2
00018142 9440                       		sub.w	d0,d2
00018144 3342 000C                  		move.w	d2,$C(a1)
00018148 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
0001814E 6600                       		bne.s	locret_16796
00018150 6100 0000                  		bsr.w	sub_1681C
00018154 5428 0024                  		addq.b	#2,$24(a0)
00018158 303C 00BC                  		move.w	#$BC,d0
0001815C 4EB9 0000 132C             		jsr	(PlaySound_Special).l ;	play teleport sound
00018162                            
00018162                            locret_16796:
00018162 4E75                       		rts	
00018164                            ; ===========================================================================
00018164                            
00018164                            loc_16798:				; XREF: Obj72_Index
00018164 588F                       		addq.l	#4,sp
00018166 43F8 D000                  		lea	($FFFFD000).w,a1
0001816A 5328 002E                  		subq.b	#1,$2E(a0)
0001816E 6A00                       		bpl.s	loc_167DA
00018170 3368 0036 0008             		move.w	$36(a0),8(a1)
00018176 3368 0038 000C             		move.w	$38(a0),$C(a1)
0001817C 7200                       		moveq	#0,d1
0001817E 1228 003A                  		move.b	$3A(a0),d1
00018182 5801                       		addq.b	#4,d1
00018184 B228 003B                  		cmp.b	$3B(a0),d1
00018188 6500                       		bcs.s	loc_167C2
0001818A 7200                       		moveq	#0,d1
0001818C 6000                       		bra.s	loc_16800
0001818E                            ; ===========================================================================
0001818E                            
0001818E                            loc_167C2:
0001818E 1141 003A                  		move.b	d1,$3A(a0)
00018192 2468 003C                  		movea.l	$3C(a0),a2
00018196 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
0001819C 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
000181A2 6000 0000                  		bra.w	sub_1681C
000181A6                            ; ===========================================================================
000181A6                            
000181A6                            loc_167DA:
000181A6 2429 0008                  		move.l	8(a1),d2
000181AA 2629 000C                  		move.l	$C(a1),d3
000181AE 3029 0010                  		move.w	$10(a1),d0
000181B2 48C0                       		ext.l	d0
000181B4 E180                       		asl.l	#8,d0
000181B6 D480                       		add.l	d0,d2
000181B8 3029 0012                  		move.w	$12(a1),d0
000181BC 48C0                       		ext.l	d0
000181BE E180                       		asl.l	#8,d0
000181C0 D680                       		add.l	d0,d3
000181C2 2342 0008                  		move.l	d2,8(a1)
000181C6 2343 000C                  		move.l	d3,$C(a1)
000181CA 4E75                       		rts	
000181CC                            ; ===========================================================================
000181CC                            
000181CC                            loc_16800:
000181CC 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
000181D2 4228 0024                  		clr.b	$24(a0)
000181D6 4238 F7C8                  		clr.b	($FFFFF7C8).w
000181DA 337C 0000 0010             		move.w	#0,$10(a1)
000181E0 337C 0200 0012             		move.w	#$200,$12(a1)
000181E6 4E75                       		rts	
000181E8                            
000181E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000181E8                            
000181E8                            
000181E8                            sub_1681C:
000181E8 7000                       		moveq	#0,d0
000181EA 343C 1000                  		move.w	#$1000,d2
000181EE 3028 0036                  		move.w	$36(a0),d0
000181F2 9069 0008                  		sub.w	8(a1),d0
000181F6 6C00                       		bge.s	loc_16830
000181F8 4440                       		neg.w	d0
000181FA 4442                       		neg.w	d2
000181FC                            
000181FC                            loc_16830:
000181FC 7200                       		moveq	#0,d1
000181FE 363C 1000                  		move.w	#$1000,d3
00018202 3228 0038                  		move.w	$38(a0),d1
00018206 9269 000C                  		sub.w	$C(a1),d1
0001820A 6C00                       		bge.s	loc_16844
0001820C 4441                       		neg.w	d1
0001820E 4443                       		neg.w	d3
00018210                            
00018210                            loc_16844:
00018210 B240                       		cmp.w	d0,d1
00018212 6500                       		bcs.s	loc_1687A
00018214 7200                       		moveq	#0,d1
00018216 3228 0038                  		move.w	$38(a0),d1
0001821A 9269 000C                  		sub.w	$C(a1),d1
0001821E 4841                       		swap	d1
00018220 83C3                       		divs.w	d3,d1
00018222 7000                       		moveq	#0,d0
00018224 3028 0036                  		move.w	$36(a0),d0
00018228 9069 0008                  		sub.w	8(a1),d0
0001822C 6700                       		beq.s	loc_16866
0001822E 4840                       		swap	d0
00018230 81C1                       		divs.w	d1,d0
00018232                            
00018232                            loc_16866:
00018232 3340 0010                  		move.w	d0,$10(a1)
00018236 3343 0012                  		move.w	d3,$12(a1)
0001823A 4A41                       		tst.w	d1
0001823C 6A00                       		bpl.s	loc_16874
0001823E 4441                       		neg.w	d1
00018240                            
00018240                            loc_16874:
00018240 3141 002E                  		move.w	d1,$2E(a0)
00018244 4E75                       		rts	
00018246                            ; ===========================================================================
00018246                            
00018246                            loc_1687A:
00018246 7000                       		moveq	#0,d0
00018248 3028 0036                  		move.w	$36(a0),d0
0001824C 9069 0008                  		sub.w	8(a1),d0
00018250 4840                       		swap	d0
00018252 81C2                       		divs.w	d2,d0
00018254 7200                       		moveq	#0,d1
00018256 3228 0038                  		move.w	$38(a0),d1
0001825A 9269 000C                  		sub.w	$C(a1),d1
0001825E 6700                       		beq.s	loc_16898
00018260 4841                       		swap	d1
00018262 83C0                       		divs.w	d0,d1
00018264                            
00018264                            loc_16898:
00018264 3341 0012                  		move.w	d1,$12(a1)
00018268 3342 0010                  		move.w	d2,$10(a1)
0001826C 4A40                       		tst.w	d0
0001826E 6A00                       		bpl.s	loc_168A6
00018270 4440                       		neg.w	d0
00018272                            
00018272                            loc_168A6:
00018272 3140 002E                  		move.w	d0,$2E(a0)
00018276 4E75                       		rts	
00018278                            ; End of function sub_1681C
00018278                            
00018278                            ; ===========================================================================
00018278 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
0001827E 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
00018284 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
00018288 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
0001828E 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
00018294 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
0001829A 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
000182A0 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
000182A6 0884 0298 0894             		dc.w $884, $298, $894
000182AC 0270 0894 0190             		dc.w $270, $894, $190
000182B2 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
000182B8 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
000182BE 1184 0498 1158             		dc.w $1184, $498, $1158
000182C4 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
000182CA 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
000182D0 04E8 0F94 0590             		dc.w $4E8, $F94, $590
000182D6 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
000182DC 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
000182E2 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
000182E8 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
000182EE 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
000182F4 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
000182FA 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
00018300                            ; ===========================================================================
00018300                            ; ---------------------------------------------------------------------------
00018300                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
00018300                            ; ---------------------------------------------------------------------------
00018300                            
00018300                            Obj78:					; XREF: Obj_Index
00018300 7000                       		moveq	#0,d0
00018302 1028 0024                  		move.b	$24(a0),d0
00018306 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
0001830A 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
0001830E                            ; ===========================================================================
0001830E 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
00018310 0000                       		dc.w Obj78_Action-Obj78_Index
00018312 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00018314 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
00018316 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00018318 0000                       		dc.w Obj78_Delete-Obj78_Index
0001831A 0000                       		dc.w loc_16CC0-Obj78_Index
0001831C                            ; ===========================================================================
0001831C                            
0001831C                            locret_16950:
0001831C 4E75                       		rts	
0001831E                            ; ===========================================================================
0001831E                            
0001831E                            Obj78_Main:				; XREF: Obj78_Index
0001831E 117C 0007 0016             		move.b	#7,$16(a0)
00018324 117C 0008 0017             		move.b	#8,$17(a0)
0001832A 4EB9 0000 E70A             		jsr	ObjectFall
00018330 4EB9 0001 67E4             		jsr	ObjHitFloor
00018336 4A41                       		tst.w	d1
00018338 6AE2                       		bpl.s	locret_16950
0001833A D368 000C                  		add.w	d1,$C(a0)
0001833E 4268 0012                  		clr.w	$12(a0)
00018342 5428 0024                  		addq.b	#2,$24(a0)
00018346 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
0001834E 317C 22B0 0002             		move.w	#$22B0,2(a0)
00018354 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
0001835A 6700                       		beq.s	loc_16996
0001835C 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
00018362                            
00018362                            loc_16996:
00018362 0228 0003 0001             		andi.b	#3,1(a0)
00018368 0028 0004 0001             		ori.b	#4,1(a0)
0001836E 1168 0001 0022             		move.b	1(a0),$22(a0)
00018374 117C 0004 0018             		move.b	#4,$18(a0)
0001837A 117C 0008 0019             		move.b	#8,$19(a0)
00018380 117C 000B 0020             		move.b	#$B,$20(a0)
00018386 3428 0008                  		move.w	8(a0),d2
0001838A 7A0C                       		moveq	#$C,d5
0001838C 0828 0000 0022             		btst	#0,$22(a0)
00018392 6700                       		beq.s	loc_169CA
00018394 4445                       		neg.w	d5
00018396                            
00018396                            loc_169CA:
00018396 1C3C 0004                  		move.b	#4,d6
0001839A 7600                       		moveq	#0,d3
0001839C 7804                       		moveq	#4,d4
0001839E 2448                       		movea.l	a0,a2
000183A0 7202                       		moveq	#2,d1
000183A2                            
000183A2                            Obj78_LoadBody:
000183A2 4EB9 0000 EBFA             		jsr	SingleObjLoad2
000183A8 6600                       		bne.s	Obj78_QuitLoad
000183AA 137C 0078 0000             		move.b	#$78,0(a1)	; load body segment object
000183B0 1346 0024                  		move.b	d6,$24(a1)
000183B4 5406                       		addq.b	#2,d6
000183B6 2368 0004 0004             		move.l	4(a0),4(a1)
000183BC 3368 0002 0002             		move.w	2(a0),2(a1)
000183C2 137C 0005 0018             		move.b	#5,$18(a1)
000183C8 137C 0008 0019             		move.b	#8,$19(a1)
000183CE 137C 00CB 0020             		move.b	#$CB,$20(a1)
000183D4 D445                       		add.w	d5,d2
000183D6 3342 0008                  		move.w	d2,8(a1)
000183DA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000183E0 1368 0022 0022             		move.b	$22(a0),$22(a1)
000183E6 1368 0022 0001             		move.b	$22(a0),1(a1)
000183EC 137C 0008 001A             		move.b	#8,$1A(a1)
000183F2 234A 003C                  		move.l	a2,$3C(a1)
000183F6 1344 003C                  		move.b	d4,$3C(a1)
000183FA 5804                       		addq.b	#4,d4
000183FC 2449                       		movea.l	a1,a2
000183FE                            
000183FE                            Obj78_QuitLoad:
000183FE 51C9 FFA2                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
00018402                            
00018402 117C 0007 002A             		move.b	#7,$2A(a0)
00018408 4228 003C                  		clr.b	$3C(a0)
0001840C                            
0001840C                            Obj78_Action:				; XREF: Obj78_Index
0001840C 4A28 0022                  		tst.b	$22(a0)
00018410 6B00 0000                  		bmi.w	loc_16C96
00018414 7000                       		moveq	#0,d0
00018416 1028 0025                  		move.b	$25(a0),d0
0001841A 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
0001841E 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
00018422 1228 002B                  		move.b	$2B(a0),d1
00018426 6A00                       		bpl.s	Obj78_Display
00018428 43F9 0000 0000             		lea	(Ani_obj78).l,a1
0001842E 1028 0026                  		move.b	$26(a0),d0
00018432 0240 007F                  		andi.w	#$7F,d0
00018436 5828 0026                  		addq.b	#4,$26(a0)
0001843A 1031 0000                  		move.b	(a1,d0.w),d0
0001843E 6A00                       		bpl.s	Obj78_AniHead
00018440 08A8 0007 002B             		bclr	#7,$2B(a0)
00018446 6000                       		bra.s	Obj78_Display
00018448                            ; ===========================================================================
00018448                            
00018448                            Obj78_AniHead:
00018448 0201 0010                  		andi.b	#$10,d1
0001844C D001                       		add.b	d1,d0
0001844E 1140 001A                  		move.b	d0,$1A(a0)
00018452                            
00018452                            Obj78_Display:
00018452 3028 0008                  		move.w	8(a0),d0
00018456 0240 FF80                  		andi.w	#$FF80,d0
0001845A 3238 F700                  		move.w	($FFFFF700).w,d1
0001845E 0441 0080                  		subi.w	#$80,d1
00018462 0241 FF80                  		andi.w	#$FF80,d1
00018466 9041                       		sub.w	d1,d0
00018468 0C40 0280                  		cmpi.w	#$280,d0
0001846C 6200 0000                  		bhi.w	Obj78_ChkGone
00018470 4EF9 0000 E75C             		jmp	DisplaySprite
00018476                            ; ===========================================================================
00018476                            
00018476                            Obj78_ChkGone:
00018476 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001847A 7000                       		moveq	#0,d0
0001847C 1028 0023                  		move.b	$23(a0),d0
00018480 6700                       		beq.s	loc_16ABC
00018482 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018488                            
00018488                            loc_16ABC:
00018488 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
0001848E 4E75                       		rts	
00018490                            ; ===========================================================================
00018490                            
00018490                            Obj78_Delete:				; XREF: Obj78_Index
00018490 4EF9 0000 E798             		jmp	DeleteObject
00018496                            ; ===========================================================================
00018496 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
00018498 0000                       		dc.w loc_16B02-Obj78_Index2
0001849A                            ; ===========================================================================
0001849A                            
0001849A                            Obj78_Move:				; XREF: Obj78_Index2
0001849A 5328 002A                  		subq.b	#1,$2A(a0)
0001849E 6B00                       		bmi.s	Obj78_Move2
000184A0 4E75                       		rts	
000184A2                            ; ===========================================================================
000184A2                            
000184A2                            Obj78_Move2:
000184A2 5428 0025                  		addq.b	#2,$25(a0)
000184A6 117C 0010 002A             		move.b	#$10,$2A(a0)
000184AC 317C FF40 0010             		move.w	#-$C0,$10(a0)
000184B2 317C 0040 0014             		move.w	#$40,$14(a0)
000184B8 0868 0004 002B             		bchg	#4,$2B(a0)
000184BE 6600                       		bne.s	loc_16AFC
000184C0 4268 0010                  		clr.w	$10(a0)
000184C4 4468 0014                  		neg.w	$14(a0)
000184C8                            
000184C8                            loc_16AFC:
000184C8 08E8 0007 002B             		bset	#7,$2B(a0)
000184CE                            
000184CE                            loc_16B02:				; XREF: Obj78_Index2
000184CE 5328 002A                  		subq.b	#1,$2A(a0)
000184D2 6B00                       		bmi.s	loc_16B5E
000184D4 2F28 0008                  		move.l	8(a0),-(sp)
000184D8 2428 0008                  		move.l	8(a0),d2
000184DC 3028 0010                  		move.w	$10(a0),d0
000184E0 0828 0000 0022             		btst	#0,$22(a0)
000184E6 6700                       		beq.s	loc_16B1E
000184E8 4440                       		neg.w	d0
000184EA                            
000184EA                            loc_16B1E:
000184EA 48C0                       		ext.l	d0
000184EC E180                       		asl.l	#8,d0
000184EE D480                       		add.l	d0,d2
000184F0 2142 0008                  		move.l	d2,8(a0)
000184F4 4EB9 0001 67E4             		jsr	ObjHitFloor
000184FA 241F                       		move.l	(sp)+,d2
000184FC 0C41 FFF8                  		cmpi.w	#-8,d1
00018500 6D00                       		blt.s	loc_16B70
00018502 0C41 000C                  		cmpi.w	#$C,d1
00018506 6C00                       		bge.s	loc_16B70
00018508 D368 000C                  		add.w	d1,$C(a0)
0001850C 4842                       		swap	d2
0001850E B468 0008                  		cmp.w	8(a0),d2
00018512 6700                       		beq.s	locret_16B5C
00018514 7000                       		moveq	#0,d0
00018516 1028 003C                  		move.b	$3C(a0),d0
0001851A 5228 003C                  		addq.b	#1,$3C(a0)
0001851E 0228 000F 003C             		andi.b	#$F,$3C(a0)
00018524 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00018528                            
00018528                            locret_16B5C:
00018528 4E75                       		rts	
0001852A                            ; ===========================================================================
0001852A                            
0001852A                            loc_16B5E:
0001852A 5528 0025                  		subq.b	#2,$25(a0)
0001852E 117C 0007 002A             		move.b	#7,$2A(a0)
00018534 317C 0000 0010             		move.w	#0,$10(a0)
0001853A 4E75                       		rts	
0001853C                            ; ===========================================================================
0001853C                            
0001853C                            loc_16B70:
0001853C 2142 0008                  		move.l	d2,8(a0)
00018540 0868 0000 0022             		bchg	#0,$22(a0)
00018546 1168 0022 0001             		move.b	$22(a0),1(a0)
0001854C 7000                       		moveq	#0,d0
0001854E 1028 003C                  		move.b	$3C(a0),d0
00018552 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
00018558 5228 003C                  		addq.b	#1,$3C(a0)
0001855C 0228 000F 003C             		andi.b	#$F,$3C(a0)
00018562 4E75                       		rts	
00018564                            ; ===========================================================================
00018564                            
00018564                            Obj78_BodySeg2:				; XREF: Obj78_Index
00018564 2268 003C                  		movea.l	$3C(a0),a1
00018568 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
0001856E 6A00                       		bpl.s	Obj78_BodySeg1
00018570 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00018576 1028 0026                  		move.b	$26(a0),d0
0001857A 0240 007F                  		andi.w	#$7F,d0
0001857E 5828 0026                  		addq.b	#4,$26(a0)
00018582 4A31 0004                  		tst.b	4(a1,d0.w)
00018586 6A00                       		bpl.s	Obj78_AniBody
00018588 5828 0026                  		addq.b	#4,$26(a0)
0001858C                            
0001858C                            Obj78_AniBody:
0001858C 1031 0000                  		move.b	(a1,d0.w),d0
00018590 5000                       		addq.b	#8,d0
00018592 1140 001A                  		move.b	d0,$1A(a0)
00018596                            
00018596                            Obj78_BodySeg1:				; XREF: Obj78_Index
00018596 2268 003C                  		movea.l	$3C(a0),a1
0001859A 4A28 0022                  		tst.b	$22(a0)
0001859E 6B00 0000                  		bmi.w	loc_16C90
000185A2 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
000185A8 1169 0025 0025             		move.b	$25(a1),$25(a0)
000185AE 6700 0000                  		beq.w	loc_16C64
000185B2 3169 0014 0014             		move.w	$14(a1),$14(a0)
000185B8 3029 0010                  		move.w	$10(a1),d0
000185BC D069 0014                  		add.w	$14(a1),d0
000185C0 3140 0010                  		move.w	d0,$10(a0)
000185C4 2428 0008                  		move.l	8(a0),d2
000185C8 2602                       		move.l	d2,d3
000185CA 3028 0010                  		move.w	$10(a0),d0
000185CE 0828 0000 0022             		btst	#0,$22(a0)
000185D4 6700                       		beq.s	loc_16C0C
000185D6 4440                       		neg.w	d0
000185D8                            
000185D8                            loc_16C0C:
000185D8 48C0                       		ext.l	d0
000185DA E180                       		asl.l	#8,d0
000185DC D480                       		add.l	d0,d2
000185DE 2142 0008                  		move.l	d2,8(a0)
000185E2 4843                       		swap	d3
000185E4 B668 0008                  		cmp.w	8(a0),d3
000185E8 6700                       		beq.s	loc_16C64
000185EA 7000                       		moveq	#0,d0
000185EC 1028 003C                  		move.b	$3C(a0),d0
000185F0 1231 002C                  		move.b	$2C(a1,d0.w),d1
000185F4 0C01 0080                  		cmpi.b	#-$80,d1
000185F8 6600                       		bne.s	loc_16C50
000185FA 4843                       		swap	d3
000185FC 2143 0008                  		move.l	d3,8(a0)
00018600 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00018604 0868 0000 0022             		bchg	#0,$22(a0)
0001860A 1168 0022 0001             		move.b	$22(a0),1(a0)
00018610 5228 003C                  		addq.b	#1,$3C(a0)
00018614 0228 000F 003C             		andi.b	#$F,$3C(a0)
0001861A 6000                       		bra.s	loc_16C64
0001861C                            ; ===========================================================================
0001861C                            
0001861C                            loc_16C50:
0001861C 4881                       		ext.w	d1
0001861E D368 000C                  		add.w	d1,$C(a0)
00018622 5228 003C                  		addq.b	#1,$3C(a0)
00018626 0228 000F 003C             		andi.b	#$F,$3C(a0)
0001862C 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00018630                            
00018630                            loc_16C64:
00018630 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
00018636 6700                       		beq.s	loc_16C90
00018638 0C29 0027 0000             		cmpi.b	#$27,0(a1)
0001863E 6700                       		beq.s	loc_16C7C
00018640 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
00018646 6600                       		bne.s	loc_16C82
00018648                            
00018648                            loc_16C7C:
00018648 117C 000A 0024             		move.b	#$A,$24(a0)
0001864E                            
0001864E                            loc_16C82:
0001864E 4EF9 0000 E75C             		jmp	DisplaySprite
00018654                            
00018654                            ; ===========================================================================
00018654 FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
0001865C                            ; ===========================================================================
0001865C                            
0001865C                            loc_16C90:
0001865C 08E9 0007 0022             		bset	#7,$22(a1)
00018662                            
00018662                            loc_16C96:
00018662 7000                       		moveq	#0,d0
00018664 1028 0024                  		move.b	$24(a0),d0
00018668 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
0001866C 0828 0000 0022             		btst	#0,$22(a0)
00018672 6700                       		beq.s	loc_16CAA
00018674 4440                       		neg.w	d0
00018676                            
00018676                            loc_16CAA:
00018676 3140 0010                  		move.w	d0,$10(a0)
0001867A 317C FC00 0012             		move.w	#-$400,$12(a0)
00018680 117C 000C 0024             		move.b	#$C,$24(a0)
00018686 0228 00F8 001A             		andi.b	#-8,$1A(a0)
0001868C                            
0001868C                            loc_16CC0:				; XREF: Obj78_Index
0001868C 4EB9 0000 E70A             		jsr	ObjectFall
00018692 4A68 0012                  		tst.w	$12(a0)
00018696 6B00                       		bmi.s	loc_16CE0
00018698 4EB9 0001 67E4             		jsr	ObjHitFloor
0001869E 4A41                       		tst.w	d1
000186A0 6A00                       		bpl.s	loc_16CE0
000186A2 D368 000C                  		add.w	d1,$C(a0)
000186A6 317C FC00 0012             		move.w	#-$400,$12(a0)
000186AC                            
000186AC                            loc_16CE0:
000186AC 4A28 0001                  		tst.b	1(a0)
000186B0 6A00 FDC4                  		bpl.w	Obj78_ChkGone
000186B4 4EF9 0000 E75C             		jmp	DisplaySprite
000186BA                            ; ===========================================================================
000186BA                            Ani_obj78:
000186BA                            	include "_anim\obj78.asm"
000186BA                            ; ---------------------------------------------------------------------------
000186BA                            ; Animation script - Caterkiller enemy (uses non-standard format)
000186BA                            ; ---------------------------------------------------------------------------
000186BA 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
000186CA 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
000186DA 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
000186EA 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
000186FA 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
0001870A 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
0001871A 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
0001872A 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
0001873A                            	even
0001873A                            	even
0001873A                            
0001873A                            ; ---------------------------------------------------------------------------
0001873A                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
0001873A                            ; ---------------------------------------------------------------------------
0001873A                            Map_obj78:
0001873A                            	include "_maps\obj78.asm"
0001873A                            ; ---------------------------------------------------------------------------
0001873A                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
0001873A                            ; ---------------------------------------------------------------------------
0001873A 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
0001873E 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
00018742 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
00018746 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
0001874A 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
0001874E 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
00018752 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
00018756 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
0001875A 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
0001875E 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
00018762 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
00018766 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
0001876A 01                         byte_16D9E:	dc.b 1
0001876B F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00018770 01                         byte_16DA4:	dc.b 1
00018771 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00018776 01                         byte_16DAA:	dc.b 1
00018777 F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
0001877C 01                         byte_16DB0:	dc.b 1
0001877D EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00018782 01                         byte_16DB6:	dc.b 1
00018783 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00018788 01                         byte_16DBC:	dc.b 1
00018789 ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
0001878E 01                         byte_16DC2:	dc.b 1
0001878F EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
00018794 01                         byte_16DC8:	dc.b 1
00018795 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
0001879A 01                         byte_16DCE:	dc.b 1
0001879B F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
000187A0 01                         byte_16DD4:	dc.b 1
000187A1 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
000187A6 01                         byte_16DDA:	dc.b 1
000187A7 F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
000187AC 01                         byte_16DE0:	dc.b 1
000187AD F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
000187B2 01                         byte_16DE6:	dc.b 1
000187B3 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
000187B8 01                         byte_16DEC:	dc.b 1
000187B9 F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
000187BE 01                         byte_16DF2:	dc.b 1
000187BF F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
000187C4 01                         byte_16DF8:	dc.b 1
000187C5 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
000187CA 01                         byte_16DFE:	dc.b 1
000187CB F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
000187D0 01                         byte_16E04:	dc.b 1
000187D1 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
000187D6 01                         byte_16E0A:	dc.b 1
000187D7 F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
000187DC 01                         byte_16E10:	dc.b 1
000187DD EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
000187E2 01                         byte_16E16:	dc.b 1
000187E3 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
000187E8 01                         byte_16E1C:	dc.b 1
000187E9 ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
000187EE 01                         byte_16E22:	dc.b 1
000187EF EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
000187F4 01                         byte_16E28:	dc.b 1
000187F5 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
000187FA                            		even
000187FA                            		even
000187FA                            
000187FA                            ; ===========================================================================
000187FA                            ; ---------------------------------------------------------------------------
000187FA                            ; Object 79 - lamppost
000187FA                            ; ---------------------------------------------------------------------------
000187FA                            
000187FA                            Obj79:					; XREF: Obj_Index
000187FA 7000                       		moveq	#0,d0
000187FC 1028 0024                  		move.b	$24(a0),d0
00018800 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
00018804 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
00018808 4EF9 0001 08D8             		jmp	MarkObjGone
0001880E                            ; ===========================================================================
0001880E 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
00018810 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
00018812 0000                       		dc.w Obj79_AfterHit-Obj79_Index
00018814 0000                       		dc.w Obj79_Twirl-Obj79_Index
00018816                            ; ===========================================================================
00018816                            
00018816                            Obj79_Main:				; XREF: Obj79_Index
00018816 5428 0024                  		addq.b	#2,$24(a0)
0001881A 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
00018822 317C 06C0 0002             		move.w	#($D800/$20),2(a0)
00018828 117C 0004 0001             		move.b	#4,1(a0)
0001882E 117C 0008 0019             		move.b	#8,$19(a0)
00018834 117C 0005 0018             		move.b	#5,$18(a0)
0001883A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001883E 7000                       		moveq	#0,d0
00018840 1028 0023                  		move.b	$23(a0),d0
00018844 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001884A 0832 0000 0002             		btst	#0,2(a2,d0.w)
00018850 6600                       		bne.s	Obj79_RedLamp
00018852 1238 FE30                  		move.b	($FFFFFE30).w,d1
00018856 0201 007F                  		andi.b	#$7F,d1
0001885A 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
0001885E 0202 007F                  		andi.b	#$7F,d2
00018862 B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
00018864 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
00018866                            
00018866                            Obj79_RedLamp:
00018866 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001886C 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
00018872 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
00018878 4E75                       		rts	
0001887A                            ; ===========================================================================
0001887A                            
0001887A                            Obj79_BlueLamp:				; XREF: Obj79_Index
0001887A 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001887E 6600 0000                  		bne.w	locret_16F90	; if yes, branch
00018882 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00018886 6B00 0000                  		bmi.w	locret_16F90
0001888A 1238 FE30                  		move.b	($FFFFFE30).w,d1
0001888E 0201 007F                  		andi.b	#$7F,d1
00018892 1428 0028                  		move.b	$28(a0),d2
00018896 0202 007F                  		andi.b	#$7F,d2
0001889A B202                       		cmp.b	d2,d1
0001889C 6500                       		bcs.s	Obj79_HitLamp
0001889E 45F8 FC00                  		lea	($FFFFFC00).w,a2
000188A2 7000                       		moveq	#0,d0
000188A4 1028 0023                  		move.b	$23(a0),d0
000188A8 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000188AE 117C 0004 0024             		move.b	#4,$24(a0)
000188B4 117C 0003 001A             		move.b	#3,$1A(a0)
000188BA 6000 0000                  		bra.w	locret_16F90
000188BE                            ; ===========================================================================
000188BE                            
000188BE                            Obj79_HitLamp:
000188BE 3038 D008                  		move.w	($FFFFD008).w,d0
000188C2 9068 0008                  		sub.w	8(a0),d0
000188C6 5040                       		addq.w	#8,d0
000188C8 0C40 0010                  		cmpi.w	#$10,d0
000188CC 6400 0000                  		bcc.w	locret_16F90
000188D0 3038 D00C                  		move.w	($FFFFD00C).w,d0
000188D4 9068 000C                  		sub.w	$C(a0),d0
000188D8 0640 0040                  		addi.w	#$40,d0
000188DC 0C40 0068                  		cmpi.w	#$68,d0
000188E0 6400                       		bcc.s	locret_16F90
000188E2 303C 00A1                  		move.w	#$A1,d0
000188E6 4EB9 0000 132C             		jsr	(PlaySound_Special).l ;	play lamppost sound
000188EC 5428 0024                  		addq.b	#2,$24(a0)
000188F0 4EB9 0000 EBE4             		jsr	SingleObjLoad
000188F6 6600                       		bne.s	loc_16F76
000188F8 137C 0079 0000             		move.b	#$79,0(a1)	; load twirling	lamp object
000188FE 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
00018904 3368 0008 0030             		move.w	8(a0),$30(a1)
0001890A 3368 000C 0032             		move.w	$C(a0),$32(a1)
00018910 0469 0018 0032             		subi.w	#$18,$32(a1)
00018916 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
0001891E 337C 06C0 0002             		move.w	#($D800/$20),2(a1)
00018924 137C 0004 0001             		move.b	#4,1(a1)
0001892A 137C 0008 0019             		move.b	#8,$19(a1)
00018930 137C 0004 0018             		move.b	#4,$18(a1)
00018936 137C 0002 001A             		move.b	#2,$1A(a1)
0001893C 337C 0020 0036             		move.w	#$20,$36(a1)
00018942                            
00018942                            loc_16F76:
00018942 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
00018948 6100 0000                  		bsr.w	Obj79_StoreInfo
0001894C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00018950 7000                       		moveq	#0,d0
00018952 1028 0023                  		move.b	$23(a0),d0
00018956 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001895C                            
0001895C                            locret_16F90:
0001895C 4E75                       		rts	
0001895E                            ; ===========================================================================
0001895E                            
0001895E                            Obj79_AfterHit:				; XREF: Obj79_Index
0001895E 4E75                       		rts	
00018960                            ; ===========================================================================
00018960                            
00018960                            Obj79_Twirl:				; XREF: Obj79_Index
00018960 5368 0036                  		subq.w	#1,$36(a0)
00018964 6A00                       		bpl.s	loc_16FA0
00018966 117C 0004 0024             		move.b	#4,$24(a0)
0001896C                            
0001896C                            loc_16FA0:
0001896C 1028 0026                  		move.b	$26(a0),d0
00018970 0428 0010 0026             		subi.b	#$10,$26(a0)
00018976 0400 0040                  		subi.b	#$40,d0
0001897A 4EB9 0000 3274             		jsr	(CalcSine).l
00018980 C3FC 0C00                  		muls.w	#$C00,d1
00018984 4841                       		swap	d1
00018986 D268 0030                  		add.w	$30(a0),d1
0001898A 3141 0008                  		move.w	d1,8(a0)
0001898E C1FC 0C00                  		muls.w	#$C00,d0
00018992 4840                       		swap	d0
00018994 D068 0032                  		add.w	$32(a0),d0
00018998 3140 000C                  		move.w	d0,$C(a0)
0001899C 4E75                       		rts	
0001899E                            ; ===========================================================================
0001899E                            ; ---------------------------------------------------------------------------
0001899E                            ; Subroutine to	store information when you hit a lamppost
0001899E                            ; ---------------------------------------------------------------------------
0001899E                            
0001899E                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
0001899E 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
000189A4 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
000189AA 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
000189B0 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
000189B6 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
000189BC 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
000189C2 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
000189C8 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
000189CE 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
000189D4 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
000189DA 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
000189E0 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
000189E6 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
000189EC 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
000189F2 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
000189F8 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
000189FE 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
00018A04 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
00018A0A 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
00018A10 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
00018A16 4E75                       		rts	
00018A18                            
00018A18                            ; ---------------------------------------------------------------------------
00018A18                            ; Subroutine to	load stored info when you start	a level	from a lamppost
00018A18                            ; ---------------------------------------------------------------------------
00018A18                            
00018A18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018A18                            
00018A18                            
00018A18                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
00018A18 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
00018A1E 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
00018A24 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
00018A2A 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
00018A30 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
00018A36 4278 FE20                  		clr.w	($FFFFFE20).w
00018A3A 4238 FE1B                  		clr.b	($FFFFFE1B).w
00018A3E 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
00018A44 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
00018A4A 5338 FE24                  		subq.b	#1,($FFFFFE24).w
00018A4E 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
00018A54 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00018A5A 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
00018A60 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
00018A66 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
00018A6C 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
00018A72 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
00018A78 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
00018A7E 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
00018A84 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
00018A8A 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
00018A90 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
00018A96 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00018A9C 6600                       		bne.s	loc_170E4
00018A9E 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
00018AA4 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00018AAA 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00018AB0                            
00018AB0                            loc_170E4:
00018AB0 4A38 FE30                  		tst.b	($FFFFFE30).w
00018AB4 6A00                       		bpl.s	locret_170F6
00018AB6 3038 FE32                  		move.w	($FFFFFE32).w,d0
00018ABA 0440 00A0                  		subi.w	#$A0,d0
00018ABE 31C0 F728                  		move.w	d0,($FFFFF728).w
00018AC2                            
00018AC2                            locret_170F6:
00018AC2 4E75                       		rts	
00018AC4                            ; End of function Obj79_LoadInfo
00018AC4                            
00018AC4                            ; ===========================================================================
00018AC4                            ; ---------------------------------------------------------------------------
00018AC4                            ; Sprite mappings - lamppost
00018AC4                            ; ---------------------------------------------------------------------------
00018AC4                            Map_obj79:
00018AC4                            	include "_maps\obj79.asm"
00018AC4                            ; ---------------------------------------------------------------------------
00018AC4                            ; Sprite mappings - lamppost
00018AC4                            ; ---------------------------------------------------------------------------
00018AC4 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
00018AC8 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
00018ACC 06                         byte_17100:	dc.b 6
00018ACD E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00018AD2 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00018AD7 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00018ADC F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00018AE1 D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
00018AE6 D401 0806 00               		dc.b $D4, 1, 8,	6, 0
00018AEB 04                         byte_1711F:	dc.b 4
00018AEC E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00018AF1 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00018AF6 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00018AFB F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00018B00 02                         byte_17134:	dc.b 2
00018B01 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
00018B06 F801 0808 00               		dc.b $F8, 1, 8,	8, 0
00018B0B 06                         byte_1713F:	dc.b 6
00018B0C E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00018B11 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00018B16 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00018B1B F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00018B20 D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
00018B25 D401 0808 00               		dc.b $D4, 1, 8,	8, 0
00018B2A                            		even
00018B2A                            		even
00018B2A                            
00018B2A                            ; ===========================================================================
00018B2A                            ; ---------------------------------------------------------------------------
00018B2A                            ; Object 7D - hidden points at the end of a level
00018B2A                            ; ---------------------------------------------------------------------------
00018B2A                            
00018B2A                            Obj7D:					; XREF: Obj_Index
00018B2A 7000                       		moveq	#0,d0
00018B2C 1028 0024                  		move.b	$24(a0),d0
00018B30 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
00018B34 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
00018B38                            ; ===========================================================================
00018B38 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
00018B3A 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
00018B3C                            ; ===========================================================================
00018B3C                            
00018B3C                            Obj7D_Main:				; XREF: Obj7D_Index
00018B3C 7410                       		moveq	#$10,d2
00018B3E 3602                       		move.w	d2,d3
00018B40 D643                       		add.w	d3,d3
00018B42 43F8 D000                  		lea	($FFFFD000).w,a1
00018B46 3029 0008                  		move.w	8(a1),d0
00018B4A 9068 0008                  		sub.w	8(a0),d0
00018B4E D042                       		add.w	d2,d0
00018B50 B043                       		cmp.w	d3,d0
00018B52 6400                       		bcc.s	Obj7D_ChkDel
00018B54 3229 000C                  		move.w	$C(a1),d1
00018B58 9268 000C                  		sub.w	$C(a0),d1
00018B5C D242                       		add.w	d2,d1
00018B5E B243                       		cmp.w	d3,d1
00018B60 6400                       		bcc.s	Obj7D_ChkDel
00018B62 4A78 FE08                  		tst.w	($FFFFFE08).w
00018B66 6600                       		bne.s	Obj7D_ChkDel
00018B68 4A38 F7CD                  		tst.b	($FFFFF7CD).w
00018B6C 6600                       		bne.s	Obj7D_ChkDel
00018B6E 5428 0024                  		addq.b	#2,$24(a0)
00018B72 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
00018B7A 317C 84B6 0002             		move.w	#$84B6,2(a0)
00018B80 0028 0004 0001             		ori.b	#4,1(a0)
00018B86 117C 0000 0018             		move.b	#0,$18(a0)
00018B8C 117C 0010 0019             		move.b	#$10,$19(a0)
00018B92 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00018B98 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
00018B9E 303C 00C9                  		move.w	#$C9,d0
00018BA2 4EB9 0000 132C             		jsr	(PlaySound_Special).l ;	play bonus sound
00018BA8 7000                       		moveq	#0,d0
00018BAA 1028 0028                  		move.b	$28(a0),d0
00018BAE D040                       		add.w	d0,d0
00018BB0 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
00018BB4 4EB9 0000 0000             		jsr	AddPoints
00018BBA                            
00018BBA                            Obj7D_ChkDel:
00018BBA 3028 0008                  		move.w	8(a0),d0
00018BBE 0240 FF80                  		andi.w	#$FF80,d0
00018BC2 3238 F700                  		move.w	($FFFFF700).w,d1
00018BC6 0441 0080                  		subi.w	#$80,d1
00018BCA 0241 FF80                  		andi.w	#$FF80,d1
00018BCE 9041                       		sub.w	d1,d0
00018BD0 0C40 0280                  		cmpi.w	#$280,d0
00018BD4 6200                       		bhi.s	Obj7D_Delete
00018BD6 4E75                       		rts	
00018BD8                            ; ===========================================================================
00018BD8                            
00018BD8                            Obj7D_Delete:
00018BD8 4EF9 0000 E798             		jmp	DeleteObject
00018BDE                            ; ===========================================================================
00018BDE 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
00018BE0 03E8                       		dc.w 1000
00018BE2 0064                       		dc.w 100
00018BE4 0001                       		dc.w 1
00018BE6                            ; ===========================================================================
00018BE6                            
00018BE6                            Obj7D_DelayDel:				; XREF: Obj7D_Index
00018BE6 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
00018BEA 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
00018BEC 3028 0008                  		move.w	8(a0),d0
00018BF0 0240 FF80                  		andi.w	#-$80,d0
00018BF4 3238 F700                  		move.w	($FFFFF700).w,d1
00018BF8 0441 0080                  		subi.w	#$80,d1
00018BFC 0241 FF80                  		andi.w	#-$80,d1
00018C00 9041                       		sub.w	d1,d0
00018C02 0C40 0280                  		cmpi.w	#$280,d0
00018C06 6200                       		bhi.s	Obj7D_Delete2
00018C08 4EF9 0000 E75C             		jmp	DisplaySprite
00018C0E                            ; ===========================================================================
00018C0E                            
00018C0E                            Obj7D_Delete2:
00018C0E 4EF9 0000 E798             		jmp	DeleteObject
00018C14                            ; ===========================================================================
00018C14                            ; ---------------------------------------------------------------------------
00018C14                            ; Sprite mappings - hidden points at the end of	a level
00018C14                            ; ---------------------------------------------------------------------------
00018C14                            Map_obj7D:
00018C14                            	include "_maps\obj7D.asm"
00018C14                            ; ---------------------------------------------------------------------------
00018C14                            ; Sprite mappings - hidden points at the end of	a level
00018C14                            ; ---------------------------------------------------------------------------
00018C14 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
00018C18 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
00018C1C 00                         byte_17250:	dc.b 0
00018C1D 01                         byte_17251:	dc.b 1
00018C1E F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
00018C23 01                         byte_17257:	dc.b 1
00018C24 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
00018C29 01                         byte_1725D:	dc.b 1
00018C2A F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
00018C30 00                         		even
00018C30 00                         		even
00018C30                            
00018C30                            ; ===========================================================================
00018C30                            ; ---------------------------------------------------------------------------
00018C30                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
00018C30                            ; ---------------------------------------------------------------------------
00018C30                            
00018C30                            Obj8A:					; XREF: Obj_Index
00018C30 7000                       		moveq	#0,d0
00018C32 1028 0024                  		move.b	$24(a0),d0
00018C36 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
00018C3A 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
00018C3E                            ; ===========================================================================
00018C3E 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
00018C40 0000                       		dc.w Obj8A_Display-Obj8A_Index
00018C42                            ; ===========================================================================
00018C42                            
00018C42                            Obj8A_Main:				; XREF: Obj8A_Index
00018C42 5428 0024                  		addq.b	#2,$24(a0)
00018C46 317C 0120 0008             		move.w	#$120,8(a0)
00018C4C 317C 00F0 000A             		move.w	#$F0,$A(a0)
00018C52 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
00018C5A 317C 05A0 0002             		move.w	#$5A0,2(a0)
00018C60 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
00018C64 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
00018C68 117C 0000 0001             		move.b	#0,1(a0)
00018C6E 117C 0000 0018             		move.b	#0,$18(a0)
00018C74 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
00018C7A 6600                       		bne.s	Obj8A_Display	; if not, branch
00018C7C 317C 00A6 0002             		move.w	#$A6,2(a0)
00018C82 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
00018C88 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
00018C8C 6700                       		beq.s	Obj8A_Display	; if not, branch
00018C8E 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
00018C94 6600                       		bne.s	Obj8A_Display	; if not, branch
00018C96 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd Palette, 1st entry = white
00018C9C 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd Palette, 2nd entry = cyan
00018CA2 4EF9 0000 E798             		jmp	DeleteObject
00018CA8                            ; ===========================================================================
00018CA8                            
00018CA8                            Obj8A_Display:				; XREF: Obj8A_Index
00018CA8 4EF9 0000 E75C             		jmp	DisplaySprite
00018CAE                            ; ===========================================================================
00018CAE                            ; ---------------------------------------------------------------------------
00018CAE                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
00018CAE                            ; ---------------------------------------------------------------------------
00018CAE                            Map_obj8A:
00018CAE                            	include "_maps\obj8A.asm"
00018CAE                            ; ---------------------------------------------------------------------------
00018CAE                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
00018CAE                            ; ---------------------------------------------------------------------------
00018CAE 0000 0000                  		dc.w byte_172F8-Map_obj8A, byte_1733F-Map_obj8A
00018CB2 0000 0000                  		dc.w byte_17390-Map_obj8A, byte_173C3-Map_obj8A
00018CB6 0000 0000                  		dc.w byte_1743C-Map_obj8A, byte_174A1-Map_obj8A
00018CBA 0000 0000                  		dc.w byte_17524-Map_obj8A, byte_17598-Map_obj8A
00018CBE 0000 0000                  		dc.w byte_17634-Map_obj8A, byte_17680-Map_obj8A
00018CC2 0000                       		dc.w byte_176A9-Map_obj8A
00018CC4 0E                         byte_172F8:	dc.b $E			 ; SONIC TEAM STAFF
00018CC5 F805 002E 88               		dc.b $F8, 5, 0,	$2E, $88
00018CCA F805 0026 98               		dc.b $F8, 5, 0,	$26, $98
00018CCF F805 001A A8               		dc.b $F8, 5, 0,	$1A, $A8
00018CD4 F801 0046 B8               		dc.b $F8, 1, 0,	$46, $B8
00018CD9 F805 001E C0               		dc.b $F8, 5, 0,	$1E, $C0
00018CDE F805 003E D8               		dc.b $F8, 5, 0,	$3E, $D8
00018CE3 F805 000E E8               		dc.b $F8, 5, 0,	$E, $E8
00018CE8 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00018CED F809 0008 08               		dc.b $F8, 9, 0,	8, 8
00018CF2 F805 002E 28               		dc.b $F8, 5, 0,	$2E, $28
00018CF7 F805 003E 38               		dc.b $F8, 5, 0,	$3E, $38
00018CFC F805 0004 48               		dc.b $F8, 5, 0,	4, $48
00018D01 F805 005C 58               		dc.b $F8, 5, 0,	$5C, $58
00018D06 F805 005C 68               		dc.b $F8, 5, 0,	$5C, $68
00018D0B 10                         byte_1733F:	dc.b $10		; GAME PLAN CAROL YAS
00018D0C D805 0000 80               		dc.b $D8, 5, 0,	0, $80
00018D11 D805 0004 90               		dc.b $D8, 5, 0,	4, $90
00018D16 D809 0008 A0               		dc.b $D8, 9, 0,	8, $A0
00018D1B D805 000E B4               		dc.b $D8, 5, 0,	$E, $B4
00018D20 D805 0012 D0               		dc.b $D8, 5, 0,	$12, $D0
00018D25 D805 0016 E0               		dc.b $D8, 5, 0,	$16, $E0
00018D2A D805 0004 F0               		dc.b $D8, 5, 0,	4, $F0
00018D2F D805 001A 00               		dc.b $D8, 5, 0,	$1A, 0
00018D34 0805 001E C8               		dc.b 8,	5, 0, $1E, $C8
00018D39 0805 0004 D8               		dc.b 8,	5, 0, 4, $D8
00018D3E 0805 0022 E8               		dc.b 8,	5, 0, $22, $E8
00018D43 0805 0026 F8               		dc.b 8,	5, 0, $26, $F8
00018D48 0805 0016 08               		dc.b 8,	5, 0, $16, 8
00018D4D 0805 002A 20               		dc.b 8,	5, 0, $2A, $20
00018D52 0805 0004 30               		dc.b 8,	5, 0, 4, $30
00018D57 0805 002E 44               		dc.b 8,	5, 0, $2E, $44
00018D5C 0A                         byte_17390:	dc.b $A			 ; PROGRAM YU 2
00018D5D D805 0012 80               		dc.b $D8, 5, 0,	$12, $80
00018D62 D805 0022 90               		dc.b $D8, 5, 0,	$22, $90
00018D67 D805 0026 A0               		dc.b $D8, 5, 0,	$26, $A0
00018D6C D805 0000 B0               		dc.b $D8, 5, 0,	0, $B0
00018D71 D805 0022 C0               		dc.b $D8, 5, 0,	$22, $C0
00018D76 D805 0004 D0               		dc.b $D8, 5, 0,	4, $D0
00018D7B D809 0008 E0               		dc.b $D8, 9, 0,	8, $E0
00018D80 0805 002A E8               		dc.b 8,	5, 0, $2A, $E8
00018D85 0805 0032 F8               		dc.b 8,	5, 0, $32, $F8
00018D8A 0805 0036 08               		dc.b 8,	5, 0, $36, 8
00018D8F 18                         byte_173C3:	dc.b $18		 ; CHARACTER DESIGN BIGISLAND
00018D90 D805 001E 88               		dc.b $D8, 5, 0,	$1E, $88
00018D95 D805 003A 98               		dc.b $D8, 5, 0,	$3A, $98
00018D9A D805 0004 A8               		dc.b $D8, 5, 0,	4, $A8
00018D9F D805 0022 B8               		dc.b $D8, 5, 0,	$22, $B8
00018DA4 D805 0004 C8               		dc.b $D8, 5, 0,	4, $C8
00018DA9 D805 001E D8               		dc.b $D8, 5, 0,	$1E, $D8
00018DAE D805 003E E8               		dc.b $D8, 5, 0,	$3E, $E8
00018DB3 D805 000E F8               		dc.b $D8, 5, 0,	$E, $F8
00018DB8 D805 0022 08               		dc.b $D8, 5, 0,	$22, 8
00018DBD D805 0042 20               		dc.b $D8, 5, 0,	$42, $20
00018DC2 D805 000E 30               		dc.b $D8, 5, 0,	$E, $30
00018DC7 D805 002E 40               		dc.b $D8, 5, 0,	$2E, $40
00018DCC D801 0046 50               		dc.b $D8, 1, 0,	$46, $50
00018DD1 D805 0000 58               		dc.b $D8, 5, 0,	0, $58
00018DD6 D805 001A 68               		dc.b $D8, 5, 0,	$1A, $68
00018DDB 0805 0048 C0               		dc.b 8,	5, 0, $48, $C0
00018DE0 0801 0046 D0               		dc.b 8,	1, 0, $46, $D0
00018DE5 0805 0000 D8               		dc.b 8,	5, 0, 0, $D8
00018DEA 0801 0046 E8               		dc.b 8,	1, 0, $46, $E8
00018DEF 0805 002E F0               		dc.b 8,	5, 0, $2E, $F0
00018DF4 0805 0016 00               		dc.b 8,	5, 0, $16, 0
00018DF9 0805 0004 10               		dc.b 8,	5, 0, 4, $10
00018DFE 0805 001A 20               		dc.b 8,	5, 0, $1A, $20
00018E03 0805 0042 30               		dc.b 8,	5, 0, $42, $30
00018E08 14                         byte_1743C:	dc.b $14		 ; DESIGN JINYA	PHENIX RIE
00018E09 D005 0042 A0               		dc.b $D0, 5, 0,	$42, $A0
00018E0E D005 000E B0               		dc.b $D0, 5, 0,	$E, $B0
00018E13 D005 002E C0               		dc.b $D0, 5, 0,	$2E, $C0
00018E18 D001 0046 D0               		dc.b $D0, 1, 0,	$46, $D0
00018E1D D005 0000 D8               		dc.b $D0, 5, 0,	0, $D8
00018E22 D005 001A E8               		dc.b $D0, 5, 0,	$1A, $E8
00018E27 0005 004C E8               		dc.b 0,	5, 0, $4C, $E8
00018E2C 0001 0046 F8               		dc.b 0,	1, 0, $46, $F8
00018E31 0005 001A 04               		dc.b 0,	5, 0, $1A, 4
00018E36 0005 002A 14               		dc.b 0,	5, 0, $2A, $14
00018E3B 0005 0004 24               		dc.b 0,	5, 0, 4, $24
00018E40 2005 0012 D0               		dc.b $20, 5, 0,	$12, $D0
00018E45 2005 003A E0               		dc.b $20, 5, 0,	$3A, $E0
00018E4A 2005 000E F0               		dc.b $20, 5, 0,	$E, $F0
00018E4F 2005 001A 00               		dc.b $20, 5, 0,	$1A, 0
00018E54 2001 0046 10               		dc.b $20, 1, 0,	$46, $10
00018E59 2005 0050 18               		dc.b $20, 5, 0,	$50, $18
00018E5E 2005 0022 30               		dc.b $20, 5, 0,	$22, $30
00018E63 2001 0046 40               		dc.b $20, 1, 0,	$46, $40
00018E68 2005 000E 48               		dc.b $20, 5, 0,	$E, $48
00018E6D 1A                         byte_174A1:	dc.b $1A		 ; SOUND PRODUCE MASATO	NAKAMURA
00018E6E D805 002E 98               		dc.b $D8, 5, 0,	$2E, $98
00018E73 D805 0026 A8               		dc.b $D8, 5, 0,	$26, $A8
00018E78 D805 0032 B8               		dc.b $D8, 5, 0,	$32, $B8
00018E7D D805 001A C8               		dc.b $D8, 5, 0,	$1A, $C8
00018E82 D805 0054 D8               		dc.b $D8, 5, 0,	$54, $D8
00018E87 D805 0012 F8               		dc.b $D8, 5, 0,	$12, $F8
00018E8C D805 0022 08               		dc.b $D8, 5, 0,	$22, 8
00018E91 D805 0026 18               		dc.b $D8, 5, 0,	$26, $18
00018E96 D805 0042 28               		dc.b $D8, 5, 0,	$42, $28
00018E9B D805 0032 38               		dc.b $D8, 5, 0,	$32, $38
00018EA0 D805 001E 48               		dc.b $D8, 5, 0,	$1E, $48
00018EA5 D805 000E 58               		dc.b $D8, 5, 0,	$E, $58
00018EAA 0809 0008 88               		dc.b 8,	9, 0, 8, $88
00018EAF 0805 0004 9C               		dc.b 8,	5, 0, 4, $9C
00018EB4 0805 002E AC               		dc.b 8,	5, 0, $2E, $AC
00018EB9 0805 0004 BC               		dc.b 8,	5, 0, 4, $BC
00018EBE 0805 003E CC               		dc.b 8,	5, 0, $3E, $CC
00018EC3 0805 0026 DC               		dc.b 8,	5, 0, $26, $DC
00018EC8 0805 001A F8               		dc.b 8,	5, 0, $1A, $F8
00018ECD 0805 0004 08               		dc.b 8,	5, 0, 4, 8
00018ED2 0805 0058 18               		dc.b 8,	5, 0, $58, $18
00018ED7 0805 0004 28               		dc.b 8,	5, 0, 4, $28
00018EDC 0809 0008 38               		dc.b 8,	9, 0, 8, $38
00018EE1 0805 0032 4C               		dc.b 8,	5, 0, $32, $4C
00018EE6 0805 0022 5C               		dc.b 8,	5, 0, $22, $5C
00018EEB 0805 0004 6C               		dc.b 8,	5, 0, 4, $6C
00018EF0 17                         byte_17524:	dc.b $17		 ; SOUND PROGRAM JIMITA	MACKY
00018EF1 D005 002E 98               		dc.b $D0, 5, 0,	$2E, $98
00018EF6 D005 0026 A8               		dc.b $D0, 5, 0,	$26, $A8
00018EFB D005 0032 B8               		dc.b $D0, 5, 0,	$32, $B8
00018F00 D005 001A C8               		dc.b $D0, 5, 0,	$1A, $C8
00018F05 D005 0054 D8               		dc.b $D0, 5, 0,	$54, $D8
00018F0A D005 0012 F8               		dc.b $D0, 5, 0,	$12, $F8
00018F0F D005 0022 08               		dc.b $D0, 5, 0,	$22, 8
00018F14 D005 0026 18               		dc.b $D0, 5, 0,	$26, $18
00018F19 D005 0000 28               		dc.b $D0, 5, 0,	0, $28
00018F1E D005 0022 38               		dc.b $D0, 5, 0,	$22, $38
00018F23 D005 0004 48               		dc.b $D0, 5, 0,	4, $48
00018F28 D009 0008 58               		dc.b $D0, 9, 0,	8, $58
00018F2D 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
00018F32 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
00018F37 0009 0008 E8               		dc.b 0,	9, 0, 8, $E8
00018F3C 0001 0046 FC               		dc.b 0,	1, 0, $46, $FC
00018F41 0005 003E 04               		dc.b 0,	5, 0, $3E, 4
00018F46 0005 0004 14               		dc.b 0,	5, 0, 4, $14
00018F4B 2009 0008 D0               		dc.b $20, 9, 0,	8, $D0
00018F50 2005 0004 E4               		dc.b $20, 5, 0,	4, $E4
00018F55 2005 001E F4               		dc.b $20, 5, 0,	$1E, $F4
00018F5A 2005 0058 04               		dc.b $20, 5, 0,	$58, 4
00018F5F 2005 002A 14               		dc.b $20, 5, 0,	$2A, $14
00018F64 1F                         byte_17598:	dc.b $1F		 ; SPECIAL THANKS FUJIO	MINEGISHI PAPA
00018F65 D805 002E 80               		dc.b $D8, 5, 0,	$2E, $80
00018F6A D805 0012 90               		dc.b $D8, 5, 0,	$12, $90
00018F6F D805 000E A0               		dc.b $D8, 5, 0,	$E, $A0
00018F74 D805 001E B0               		dc.b $D8, 5, 0,	$1E, $B0
00018F79 D801 0046 C0               		dc.b $D8, 1, 0,	$46, $C0
00018F7E D805 0004 C8               		dc.b $D8, 5, 0,	4, $C8
00018F83 D805 0016 D8               		dc.b $D8, 5, 0,	$16, $D8
00018F88 D805 003E F8               		dc.b $D8, 5, 0,	$3E, $F8
00018F8D D805 003A 08               		dc.b $D8, 5, 0,	$3A, 8
00018F92 D805 0004 18               		dc.b $D8, 5, 0,	4, $18
00018F97 D805 001A 28               		dc.b $D8, 5, 0,	$1A, $28
00018F9C D805 0058 38               		dc.b $D8, 5, 0,	$58, $38
00018FA1 D805 002E 48               		dc.b $D8, 5, 0,	$2E, $48
00018FA6 0005 005C B0               		dc.b 0,	5, 0, $5C, $B0
00018FAB 0005 0032 C0               		dc.b 0,	5, 0, $32, $C0
00018FB0 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
00018FB5 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
00018FBA 0005 0026 E8               		dc.b 0,	5, 0, $26, $E8
00018FBF 0009 0008 00               		dc.b 0,	9, 0, 8, 0
00018FC4 0001 0046 14               		dc.b 0,	1, 0, $46, $14
00018FC9 0005 001A 1C               		dc.b 0,	5, 0, $1A, $1C
00018FCE 0005 000E 2C               		dc.b 0,	5, 0, $E, $2C
00018FD3 0005 0000 3C               		dc.b 0,	5, 0, 0, $3C
00018FD8 0001 0046 4C               		dc.b 0,	1, 0, $46, $4C
00018FDD 0005 002E 54               		dc.b 0,	5, 0, $2E, $54
00018FE2 0005 003A 64               		dc.b 0,	5, 0, $3A, $64
00018FE7 0001 0046 74               		dc.b 0,	1, 0, $46, $74
00018FEC 2005 0012 F8               		dc.b $20, 5, 0,	$12, $F8
00018FF1 2005 0004 08               		dc.b $20, 5, 0,	4, 8
00018FF6 2005 0012 18               		dc.b $20, 5, 0,	$12, $18
00018FFB 2005 0004 28               		dc.b $20, 5, 0,	4, $28
00019000 0F                         byte_17634:	dc.b $F			 ; PRESENTED BY	SEGA
00019001 F805 0012 80               		dc.b $F8, 5, 0,	$12, $80
00019006 F805 0022 90               		dc.b $F8, 5, 0,	$22, $90
0001900B F805 000E A0               		dc.b $F8, 5, 0,	$E, $A0
00019010 F805 002E B0               		dc.b $F8, 5, 0,	$2E, $B0
00019015 F805 000E C0               		dc.b $F8, 5, 0,	$E, $C0
0001901A F805 001A D0               		dc.b $F8, 5, 0,	$1A, $D0
0001901F F805 003E E0               		dc.b $F8, 5, 0,	$3E, $E0
00019024 F805 000E F0               		dc.b $F8, 5, 0,	$E, $F0
00019029 F805 0042 00               		dc.b $F8, 5, 0,	$42, 0
0001902E F805 0048 18               		dc.b $F8, 5, 0,	$48, $18
00019033 F805 002A 28               		dc.b $F8, 5, 0,	$2A, $28
00019038 F805 002E 40               		dc.b $F8, 5, 0,	$2E, $40
0001903D F805 000E 50               		dc.b $F8, 5, 0,	$E, $50
00019042 F805 0000 60               		dc.b $F8, 5, 0,	0, $60
00019047 F805 0004 70               		dc.b $F8, 5, 0,	4, $70
0001904C 08                         byte_17680:	dc.b 8			 ; TRY AGAIN
0001904D 3005 003E C0               		dc.b $30, 5, 0,	$3E, $C0
00019052 3005 0022 D0               		dc.b $30, 5, 0,	$22, $D0
00019057 3005 002A E0               		dc.b $30, 5, 0,	$2A, $E0
0001905C 3005 0004 F8               		dc.b $30, 5, 0,	4, $F8
00019061 3005 0000 08               		dc.b $30, 5, 0,	0, 8
00019066 3005 0004 18               		dc.b $30, 5, 0,	4, $18
0001906B 3001 0046 28               		dc.b $30, 1, 0,	$46, $28
00019070 3005 001A 30               		dc.b $30, 5, 0,	$1A, $30
00019075 11                         byte_176A9:	dc.b $11		 ; SONIC TEAM PRESENTS
00019076 E805 002E B4               		dc.b $E8, 5, 0,	$2E, $B4
0001907B E805 0026 C4               		dc.b $E8, 5, 0,	$26, $C4
00019080 E805 001A D4               		dc.b $E8, 5, 0,	$1A, $D4
00019085 E801 0046 E4               		dc.b $E8, 1, 0,	$46, $E4
0001908A E805 001E EC               		dc.b $E8, 5, 0,	$1E, $EC
0001908F E805 003E 04               		dc.b $E8, 5, 0,	$3E, 4
00019094 E805 000E 14               		dc.b $E8, 5, 0,	$E, $14
00019099 E805 0004 24               		dc.b $E8, 5, 0,	4, $24
0001909E E809 0008 34               		dc.b $E8, 9, 0,	8, $34
000190A3 0005 0012 C0               		dc.b 0,	5, 0, $12, $C0
000190A8 0005 0022 D0               		dc.b 0,	5, 0, $22, $D0
000190AD 0005 000E E0               		dc.b 0,	5, 0, $E, $E0
000190B2 0005 002E F0               		dc.b 0,	5, 0, $2E, $F0
000190B7 0005 000E 00               		dc.b 0,	5, 0, $E, 0
000190BC 0005 001A 10               		dc.b 0,	5, 0, $1A, $10
000190C1 0005 003E 20               		dc.b 0,	5, 0, $3E, $20
000190C6 0005 002E 30               		dc.b 0,	5, 0, $2E, $30
000190CC 00                         		even
000190CC 00                         		even
000190CC                            
000190CC                            ; ===========================================================================
000190CC                            ; ---------------------------------------------------------------------------
000190CC                            ; Object 3D - Eggman (GHZ)
000190CC                            ; ---------------------------------------------------------------------------
000190CC                            
000190CC                            Obj3D:					; XREF: Obj_Index
000190CC 7000                       		moveq	#0,d0
000190CE 1028 0024                  		move.b	$24(a0),d0
000190D2 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
000190D6 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
000190DA                            ; ===========================================================================
000190DA 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
000190DC 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
000190DE 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
000190E0 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
000190E2                            
000190E2 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
000190E4 0401                       		dc.b 4,	1
000190E6 0607                       		dc.b 6,	7
000190E8                            ; ===========================================================================
000190E8                            
000190E8                            Obj3D_Main:				; XREF: Obj3D_Index
000190E8 45F9 0001 90E2             		lea	(Obj3D_ObjData).l,a2
000190EE 2248                       		movea.l	a0,a1
000190F0 7202                       		moveq	#2,d1
000190F2 6000                       		bra.s	Obj3D_LoadBoss
000190F4                            ; ===========================================================================
000190F4                            
000190F4                            Obj3D_Loop:
000190F4 4EB9 0000 EBFA             		jsr	SingleObjLoad2
000190FA 6600                       		bne.s	loc_17772
000190FC                            
000190FC                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
000190FC 135A 0024                  		move.b	(a2)+,$24(a1)
00019100 137C 003D 0000             		move.b	#$3D,0(a1)
00019106 3368 0008 0008             		move.w	8(a0),8(a1)
0001910C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019112 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
0001911A 337C 0400 0002             		move.w	#$400,2(a1)
00019120 137C 0004 0001             		move.b	#4,1(a1)
00019126 137C 0020 0019             		move.b	#$20,$19(a1)
0001912C 137C 0003 0018             		move.b	#3,$18(a1)
00019132 135A 001C                  		move.b	(a2)+,$1C(a1)
00019136 2348 0034                  		move.l	a0,$34(a1)
0001913A 51C9 FFB8                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
0001913E                            
0001913E                            loc_17772:
0001913E 3168 0008 0030             		move.w	8(a0),$30(a0)
00019144 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001914A 117C 000F 0020             		move.b	#$F,$20(a0)
00019150 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019156                            
00019156                            Obj3D_ShipMain:				; XREF: Obj3D_Index
00019156 7000                       		moveq	#0,d0
00019158 1028 0025                  		move.b	$25(a0),d0
0001915C 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
00019160 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
00019164 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001916A 4EB9 0000 B860             		jsr	AnimateSprite
00019170 1028 0022                  		move.b	$22(a0),d0
00019174 0200 0003                  		andi.b	#3,d0
00019178 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001917E 8128 0001                  		or.b	d0,1(a0)
00019182 4EF9 0000 E75C             		jmp	DisplaySprite
00019188                            ; ===========================================================================
00019188 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
0001918A 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
0001918C 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
0001918E 0000                       		dc.w loc_17954-Obj3D_ShipIndex
00019190 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
00019192 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
00019194 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
00019196                            ; ===========================================================================
00019196                            
00019196                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
00019196 317C 0100 0012             		move.w	#$100,$12(a0)	; move ship down
0001919C 6100 0000                  		bsr.w	BossMove
000191A0 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
000191A6 6600                       		bne.s	loc_177E6
000191A8 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
000191AE 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
000191B2                            
000191B2                            loc_177E6:
000191B2 1028 003F                  		move.b	$3F(a0),d0
000191B6 4EB9 0000 3274             		jsr	(CalcSine).l
000191BC EC40                       		asr.w	#6,d0
000191BE D068 0038                  		add.w	$38(a0),d0
000191C2 3140 000C                  		move.w	d0,$C(a0)
000191C6 3168 0030 0008             		move.w	$30(a0),8(a0)
000191CC 5428 003F                  		addq.b	#2,$3F(a0)
000191D0 0C28 0008 0025             		cmpi.b	#8,$25(a0)
000191D6 6400                       		bcc.s	locret_1784A
000191D8 4A28 0022                  		tst.b	$22(a0)
000191DC 6B00                       		bmi.s	loc_1784C
000191DE 4A28 0020                  		tst.b	$20(a0)
000191E2 6600                       		bne.s	locret_1784A
000191E4 4A28 003E                  		tst.b	$3E(a0)
000191E8 6600                       		bne.s	Obj3D_ShipFlash
000191EA 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
000191F0 303C 00AC                  		move.w	#$AC,d0
000191F4 4EB9 0000 132C             		jsr	(PlaySound_Special).l ;	play boss damage sound
000191FA                            
000191FA                            Obj3D_ShipFlash:
000191FA 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd Palette, 2nd	entry
000191FE 7000                       		moveq	#0,d0		; move 0 (black) to d0
00019200 4A51                       		tst.w	(a1)
00019202 6600                       		bne.s	loc_1783C
00019204 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00019208                            
00019208                            loc_1783C:
00019208 3280                       		move.w	d0,(a1)		; load colour stored in	d0
0001920A 5328 003E                  		subq.b	#1,$3E(a0)
0001920E 6600                       		bne.s	locret_1784A
00019210 117C 000F 0020             		move.b	#$F,$20(a0)
00019216                            
00019216                            locret_1784A:
00019216 4E75                       		rts	
00019218                            ; ===========================================================================
00019218                            
00019218                            loc_1784C:				; XREF: loc_177E6
00019218 7064                       		moveq	#100,d0
0001921A 6100 0000                  		bsr.w	AddPoints
0001921E 117C 0008 0025             		move.b	#8,$25(a0)
00019224 317C 00B3 003C             		move.w	#$B3,$3C(a0)
0001922A 4E75                       		rts	
0001922C                            
0001922C                            ; ---------------------------------------------------------------------------
0001922C                            ; Defeated boss	subroutine
0001922C                            ; ---------------------------------------------------------------------------
0001922C                            
0001922C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001922C                            
0001922C                            
0001922C                            BossDefeated:
0001922C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00019230 0200 0007                  		andi.b	#7,d0
00019234 6600                       		bne.s	locret_178A2
00019236 4EB9 0000 EBE4             		jsr	SingleObjLoad
0001923C 6600                       		bne.s	locret_178A2
0001923E 137C 003F 0000             		move.b	#$3F,0(a1)	; load explosion object
00019244 3368 0008 0008             		move.w	8(a0),8(a1)
0001924A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019250 4EB9 0000 324E             		jsr	(RandomNumber).l
00019256 3200                       		move.w	d0,d1
00019258 7200                       		moveq	#0,d1
0001925A 1200                       		move.b	d0,d1
0001925C E409                       		lsr.b	#2,d1
0001925E 0441 0020                  		subi.w	#$20,d1
00019262 D369 0008                  		add.w	d1,8(a1)
00019266 E048                       		lsr.w	#8,d0
00019268 E608                       		lsr.b	#3,d0
0001926A D169 000C                  		add.w	d0,$C(a1)
0001926E                            
0001926E                            locret_178A2:
0001926E 4E75                       		rts	
00019270                            ; End of function BossDefeated
00019270                            
00019270                            ; ---------------------------------------------------------------------------
00019270                            ; Subroutine to	move a boss
00019270                            ; ---------------------------------------------------------------------------
00019270                            
00019270                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019270                            
00019270                            
00019270                            BossMove:
00019270 2428 0030                  		move.l	$30(a0),d2
00019274 2628 0038                  		move.l	$38(a0),d3
00019278 3028 0010                  		move.w	$10(a0),d0
0001927C 48C0                       		ext.l	d0
0001927E E180                       		asl.l	#8,d0
00019280 D480                       		add.l	d0,d2
00019282 3028 0012                  		move.w	$12(a0),d0
00019286 48C0                       		ext.l	d0
00019288 E180                       		asl.l	#8,d0
0001928A D680                       		add.l	d0,d3
0001928C 2142 0030                  		move.l	d2,$30(a0)
00019290 2143 0038                  		move.l	d3,$38(a0)
00019294 4E75                       		rts	
00019296                            ; End of function BossMove
00019296                            
00019296                            ; ===========================================================================
00019296                            
00019296                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex
00019296 317C FF00 0010             		move.w	#-$100,$10(a0)
0001929C 317C FFC0 0012             		move.w	#-$40,$12(a0)
000192A2 6100 FFCC                  		bsr.w	BossMove
000192A6 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
000192AC 6600                       		bne.s	loc_17916
000192AE 317C 0000 0010             		move.w	#0,$10(a0)
000192B4 317C 0000 0012             		move.w	#0,$12(a0)
000192BA 5428 0025                  		addq.b	#2,$25(a0)
000192BE 4EB9 0000 EBFA             		jsr	SingleObjLoad2
000192C4 6600                       		bne.s	loc_17910
000192C6 137C 0048 0000             		move.b	#$48,0(a1)	; load swinging	ball object
000192CC 3368 0030 0008             		move.w	$30(a0),8(a1)
000192D2 3368 0038 000C             		move.w	$38(a0),$C(a1)
000192D8 2348 0034                  		move.l	a0,$34(a1)
000192DC                            
000192DC                            loc_17910:
000192DC 317C 0077 003C             		move.w	#$77,$3C(a0)
000192E2                            
000192E2                            loc_17916:
000192E2 6000 FECE                  		bra.w	loc_177E6
000192E6                            ; ===========================================================================
000192E6                            
000192E6                            Obj3D_ShipMove:				; XREF: Obj3D_ShipIndex
000192E6 5368 003C                  		subq.w	#1,$3C(a0)
000192EA 6A00                       		bpl.s	Obj3D_Reverse
000192EC 5428 0025                  		addq.b	#2,$25(a0)
000192F0 317C 003F 003C             		move.w	#$3F,$3C(a0)
000192F6 317C 0100 0010             		move.w	#$100,$10(a0)	; move the ship	sideways
000192FC 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00019302 6600                       		bne.s	Obj3D_Reverse
00019304 317C 007F 003C             		move.w	#$7F,$3C(a0)
0001930A 317C 0040 0010             		move.w	#$40,$10(a0)
00019310                            
00019310                            Obj3D_Reverse:
00019310 0828 0000 0022             		btst	#0,$22(a0)
00019316 6600                       		bne.s	loc_17950
00019318 4468 0010                  		neg.w	$10(a0)		; reverse direction of the ship
0001931C                            
0001931C                            loc_17950:
0001931C 6000 FE94                  		bra.w	loc_177E6
00019320                            ; ===========================================================================
00019320                            
00019320                            loc_17954:				; XREF: Obj3D_ShipIndex
00019320 5368 003C                  		subq.w	#1,$3C(a0)
00019324 6B00                       		bmi.s	loc_17960
00019326 6100 FF48                  		bsr.w	BossMove
0001932A 6000                       		bra.s	loc_17976
0001932C                            ; ===========================================================================
0001932C                            
0001932C                            loc_17960:
0001932C 0868 0000 0022             		bchg	#0,$22(a0)
00019332 317C 003F 003C             		move.w	#$3F,$3C(a0)
00019338 5528 0025                  		subq.b	#2,$25(a0)
0001933C 317C 0000 0010             		move.w	#0,$10(a0)
00019342                            
00019342                            loc_17976:
00019342 6000 FE6E                  		bra.w	loc_177E6
00019346                            ; ===========================================================================
00019346                            
00019346                            loc_1797A:				; XREF: Obj3D_ShipIndex
00019346 5368 003C                  		subq.w	#1,$3C(a0)
0001934A 6B00                       		bmi.s	loc_17984
0001934C 6000 FEDE                  		bra.w	BossDefeated
00019350                            ; ===========================================================================
00019350                            
00019350                            loc_17984:
00019350 08E8 0000 0022             		bset	#0,$22(a0)
00019356 08A8 0007 0022             		bclr	#7,$22(a0)
0001935C 4268 0010                  		clr.w	$10(a0)
00019360 5428 0025                  		addq.b	#2,$25(a0)
00019364 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001936A 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001936E 6600                       		bne.s	locret_179AA
00019370 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019376                            
00019376                            locret_179AA:
00019376 4E75                       		rts	
00019378                            ; ===========================================================================
00019378                            
00019378                            loc_179AC:				; XREF: Obj3D_ShipIndex
00019378 5268 003C                  		addq.w	#1,$3C(a0)
0001937C 6700                       		beq.s	loc_179BC
0001937E 6A00                       		bpl.s	loc_179C2
00019380 0668 0018 0012             		addi.w	#$18,$12(a0)
00019386 6000                       		bra.s	loc_179EE
00019388                            ; ===========================================================================
00019388                            
00019388                            loc_179BC:
00019388 4268 0012                  		clr.w	$12(a0)
0001938C 6000                       		bra.s	loc_179EE
0001938E                            ; ===========================================================================
0001938E                            
0001938E                            loc_179C2:
0001938E 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00019394 6500                       		bcs.s	loc_179DA
00019396 6700                       		beq.s	loc_179E0
00019398 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001939E 6500                       		bcs.s	loc_179EE
000193A0 5428 0025                  		addq.b	#2,$25(a0)
000193A4 6000                       		bra.s	loc_179EE
000193A6                            ; ===========================================================================
000193A6                            
000193A6                            loc_179DA:
000193A6 5168 0012                  		subq.w	#8,$12(a0)
000193AA 6000                       		bra.s	loc_179EE
000193AC                            ; ===========================================================================
000193AC                            
000193AC                            loc_179E0:
000193AC 4268 0012                  		clr.w	$12(a0)
000193B0                            		
000193B0 4240                       		clr.w	d0
000193B2 13C0 FFFF FFFF             		move.b	d0,$FFFFFFFF	; clear Boss flag
000193B8 0C38 0001 FE2D             		cmpi.b	#$1,($FFFFFE2D).w	; does Sonic have invincibility?
000193BE 6700                       		beq.b	loc_179E0_inv 	; if yes, load invincibility music
000193C0 0C38 0001 FE2E             		cmpi.b	#$1,($FFFFFE2E).w	; does Sonic have speed shoes?
000193C6 6700                       		beq.b	loc_179E0_speed	; if yes, load speed shoes music
000193C8                            
000193C8 1039 FFFF FFFE             		move.b	$FFFFFFFE,d0	; loads music from RAM
000193CE 6000                       		bra.s	loc_179E0_play
000193D0                            
000193D0                            loc_179E0_speed:
000193D0 103C 009A                  		move.b	#$9A,d0
000193D4 6000                       		bra.s	loc_179E0_play
000193D6                            loc_179E0_inv:
000193D6 0C38 0001 FE2E             		cmpi.b	#$1,($FFFFFE2E).w	; does Sonic have also speed shoes?
000193DC 6700                       		beq.s	loc_179E0_inv_and_speed
000193DE 103C 0087                  		move.b	#$87,d0
000193E2 6000                       		bra.s	loc_179E0_play
000193E4                            loc_179E0_inv_and_speed:
000193E4 103C 0097                  		move.b	#$97,d0
000193E8                            loc_179E0_play:
000193E8 4EB9 0000 1326             		jsr	(PlaySound).l	; play some music
000193EE                            
000193EE                            loc_179EE:
000193EE 6100 FE80                  		bsr.w	BossMove
000193F2 6000 FDBE                  		bra.w	loc_177E6
000193F6                            ; ===========================================================================
000193F6                            
000193F6                            loc_179F6:				; XREF: Obj3D_ShipIndex
000193F6 317C 0400 0010             		move.w	#$400,$10(a0)
000193FC 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019402 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
00019408 6700                       		beq.s	loc_17A10
0001940A 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001940E 6000                       		bra.s	loc_17A16
00019410                            ; ===========================================================================
00019410                            
00019410                            loc_17A10:
00019410 4A28 0001                  		tst.b	1(a0)
00019414 6A00                       		bpl.s	Obj3D_ShipDel
00019416                            
00019416                            loc_17A16:
00019416 6100 FE58                  		bsr.w	BossMove
0001941A 6000 FD96                  		bra.w	loc_177E6
0001941E                            ; ===========================================================================
0001941E                            
0001941E                            Obj3D_ShipDel:
0001941E 4EF9 0000 E798             		jmp	DeleteObject
00019424                            ; ===========================================================================
00019424                            
00019424                            Obj3D_FaceMain:				; XREF: Obj3D_Index
00019424 7000                       		moveq	#0,d0
00019426 7201                       		moveq	#1,d1
00019428 2268 0034                  		movea.l	$34(a0),a1
0001942C 1029 0025                  		move.b	$25(a1),d0
00019430 5900                       		subq.b	#4,d0
00019432 6600                       		bne.s	loc_17A3E
00019434 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
0001943A 6600                       		bne.s	loc_17A46
0001943C 7204                       		moveq	#4,d1
0001943E                            
0001943E                            loc_17A3E:
0001943E 5D00                       		subq.b	#6,d0
00019440 6B00                       		bmi.s	loc_17A46
00019442 720A                       		moveq	#$A,d1
00019444 6000                       		bra.s	loc_17A5A
00019446                            ; ===========================================================================
00019446                            
00019446                            loc_17A46:
00019446 4A29 0020                  		tst.b	$20(a1)
0001944A 6600                       		bne.s	loc_17A50
0001944C 7205                       		moveq	#5,d1
0001944E 6000                       		bra.s	loc_17A5A
00019450                            ; ===========================================================================
00019450                            
00019450                            loc_17A50:
00019450 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019456 6500                       		bcs.s	loc_17A5A
00019458 7204                       		moveq	#4,d1
0001945A                            
0001945A                            loc_17A5A:
0001945A 1141 001C                  		move.b	d1,$1C(a0)
0001945E 5500                       		subq.b	#2,d0
00019460 6600                       		bne.s	Obj3D_FaceDisp
00019462 117C 0006 001C             		move.b	#6,$1C(a0)
00019468 4A28 0001                  		tst.b	1(a0)
0001946C 6A00                       		bpl.s	Obj3D_FaceDel
0001946E                            
0001946E                            Obj3D_FaceDisp:
0001946E 6000                       		bra.s	Obj3D_Display
00019470                            ; ===========================================================================
00019470                            
00019470                            Obj3D_FaceDel:
00019470 4EF9 0000 E798             		jmp	DeleteObject
00019476                            ; ===========================================================================
00019476                            
00019476                            Obj3D_FlameMain:			; XREF: Obj3D_Index
00019476 117C 0007 001C             		move.b	#7,$1C(a0)
0001947C 2268 0034                  		movea.l	$34(a0),a1
00019480 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
00019486 6600                       		bne.s	loc_17A96
00019488 117C 000B 001C             		move.b	#$B,$1C(a0)
0001948E 4A28 0001                  		tst.b	1(a0)
00019492 6A00                       		bpl.s	Obj3D_FlameDel
00019494 6000                       		bra.s	Obj3D_FlameDisp
00019496                            ; ===========================================================================
00019496                            
00019496                            loc_17A96:
00019496 3029 0010                  		move.w	$10(a1),d0
0001949A 6700                       		beq.s	Obj3D_FlameDisp
0001949C 117C 0008 001C             		move.b	#8,$1C(a0)
000194A2                            
000194A2                            Obj3D_FlameDisp:
000194A2 6000                       		bra.s	Obj3D_Display
000194A4                            ; ===========================================================================
000194A4                            
000194A4                            Obj3D_FlameDel:
000194A4 4EF9 0000 E798             		jmp	DeleteObject
000194AA                            ; ===========================================================================
000194AA                            
000194AA                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
000194AA 2268 0034                  		movea.l	$34(a0),a1
000194AE 3169 0008 0008             		move.w	8(a1),8(a0)
000194B4 3169 000C 000C             		move.w	$C(a1),$C(a0)
000194BA 1169 0022 0022             		move.b	$22(a1),$22(a0)
000194C0 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
000194C6 4EB9 0000 B860             		jsr	AnimateSprite
000194CC 1028 0022                  		move.b	$22(a0),d0
000194D0 0200 0003                  		andi.b	#3,d0
000194D4 0228 00FC 0001             		andi.b	#$FC,1(a0)
000194DA 8128 0001                  		or.b	d0,1(a0)
000194DE 4EF9 0000 E75C             		jmp	DisplaySprite
000194E4                            ; ===========================================================================
000194E4                            ; ---------------------------------------------------------------------------
000194E4                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
000194E4                            ; ---------------------------------------------------------------------------
000194E4                            
000194E4                            Obj48:					; XREF: Obj_Index
000194E4 7000                       		moveq	#0,d0
000194E6 1028 0024                  		move.b	$24(a0),d0
000194EA 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
000194EE 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
000194F2                            ; ===========================================================================
000194F2 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
000194F4 0000                       		dc.w Obj48_Base-Obj48_Index
000194F6 0000                       		dc.w Obj48_Display2-Obj48_Index
000194F8 0000                       		dc.w loc_17C68-Obj48_Index
000194FA 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
000194FC                            ; ===========================================================================
000194FC                            
000194FC                            Obj48_Main:				; XREF: Obj48_Index
000194FC 5428 0024                  		addq.b	#2,$24(a0)
00019500 317C 4080 0026             		move.w	#$4080,$26(a0)
00019506 317C FE00 003E             		move.w	#-$200,$3E(a0)
0001950C 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
00019514 317C 046C 0002             		move.w	#$46C,2(a0)
0001951A 45E8 0028                  		lea	$28(a0),a2
0001951E 14FC 0000                  		move.b	#0,(a2)+
00019522 7205                       		moveq	#5,d1
00019524 2248                       		movea.l	a0,a1
00019526 6000                       		bra.s	loc_17B60
00019528                            ; ===========================================================================
00019528                            
00019528                            Obj48_MakeLinks:
00019528 4EB9 0000 EBFA             		jsr	SingleObjLoad2
0001952E 6600                       		bne.s	Obj48_MakeBall
00019530 3368 0008 0008             		move.w	8(a0),8(a1)
00019536 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001953C 137C 0048 0000             		move.b	#$48,0(a1)	; load chain link object
00019542 137C 0006 0024             		move.b	#6,$24(a1)
00019548 237C 0000 8D04 0004        		move.l	#Map_obj15,4(a1)
00019550 337C 0380 0002             		move.w	#$380,2(a1)
00019556 137C 0001 001A             		move.b	#1,$1A(a1)
0001955C 5228 0028                  		addq.b	#1,$28(a0)
00019560                            
00019560                            loc_17B60:				; XREF: Obj48_Main
00019560 3A09                       		move.w	a1,d5
00019562 0445 D000                  		subi.w	#$D000,d5
00019566 EC4D                       		lsr.w	#6,d5
00019568 0245 007F                  		andi.w	#$7F,d5
0001956C 14C5                       		move.b	d5,(a2)+
0001956E 137C 0004 0001             		move.b	#4,1(a1)
00019574 137C 0008 0019             		move.b	#8,$19(a1)
0001957A 137C 0006 0018             		move.b	#6,$18(a1)
00019580 2368 0034 0034             		move.l	$34(a0),$34(a1)
00019586 51C9 FFA0                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
0001958A                            
0001958A                            Obj48_MakeBall:
0001958A 137C 0008 0024             		move.b	#8,$24(a1)
00019590 237C 0000 9266 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
00019598 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
0001959E 137C 0001 001A             		move.b	#1,$1A(a1)
000195A4 137C 0005 0018             		move.b	#5,$18(a1)
000195AA 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
000195B0 4E75                       		rts	
000195B2                            ; ===========================================================================
000195B2                            
000195B2 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
000195B8                            
000195B8                            ; ===========================================================================
000195B8                            
000195B8                            Obj48_Base:				; XREF: Obj48_Index
000195B8 47F9 0001 95B2             		lea	(Obj48_PosData).l,a3
000195BE 45E8 0028                  		lea	$28(a0),a2
000195C2 7C00                       		moveq	#0,d6
000195C4 1C1A                       		move.b	(a2)+,d6
000195C6                            
000195C6                            loc_17BC6:
000195C6 7800                       		moveq	#0,d4
000195C8 181A                       		move.b	(a2)+,d4
000195CA ED4C                       		lsl.w	#6,d4
000195CC 0684 00FF D000             		addi.l	#$FFD000,d4
000195D2 2244                       		movea.l	d4,a1
000195D4 101B                       		move.b	(a3)+,d0
000195D6 B029 003C                  		cmp.b	$3C(a1),d0
000195DA 6700                       		beq.s	loc_17BE0
000195DC 5229 003C                  		addq.b	#1,$3C(a1)
000195E0                            
000195E0                            loc_17BE0:
000195E0 51CE FFE4                  		dbf	d6,loc_17BC6
000195E4                            
000195E4 B029 003C                  		cmp.b	$3C(a1),d0
000195E8 6600                       		bne.s	loc_17BFA
000195EA 2268 0034                  		movea.l	$34(a0),a1
000195EE 0C29 0006 0025             		cmpi.b	#6,$25(a1)
000195F4 6600                       		bne.s	loc_17BFA
000195F6 5428 0024                  		addq.b	#2,$24(a0)
000195FA                            
000195FA                            loc_17BFA:
000195FA 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
00019600 6700                       		beq.s	Obj48_Display
00019602 5268 0032                  		addq.w	#1,$32(a0)
00019606                            
00019606                            Obj48_Display:
00019606 6100 0000                  		bsr.w	sub_17C2A
0001960A 1028 0026                  		move.b	$26(a0),d0
0001960E 4EB9 0000 8C76             		jsr	(Obj15_Move2).l
00019614 4EF9 0000 E75C             		jmp	DisplaySprite
0001961A                            ; ===========================================================================
0001961A                            
0001961A                            Obj48_Display2:				; XREF: Obj48_Index
0001961A 6100 0000                  		bsr.w	sub_17C2A
0001961E 4EB9 0000 8C36             		jsr	(Obj48_Move).l
00019624 4EF9 0000 E75C             		jmp	DisplaySprite
0001962A                            
0001962A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001962A                            
0001962A                            
0001962A                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
0001962A 2268 0034                  		movea.l	$34(a0),a1
0001962E 0628 0020 001B             		addi.b	#$20,$1B(a0)
00019634 6400                       		bcc.s	loc_17C3C
00019636 0868 0000 001A             		bchg	#0,$1A(a0)
0001963C                            
0001963C                            loc_17C3C:
0001963C 3169 0008 003A             		move.w	8(a1),$3A(a0)
00019642 3029 000C                  		move.w	$C(a1),d0
00019646 D068 0032                  		add.w	$32(a0),d0
0001964A 3140 0038                  		move.w	d0,$38(a0)
0001964E 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019654 4A29 0022                  		tst.b	$22(a1)
00019658 6A00                       		bpl.s	locret_17C66
0001965A 117C 003F 0000             		move.b	#$3F,0(a0)
00019660 117C 0000 0024             		move.b	#0,$24(a0)
00019666                            
00019666                            locret_17C66:
00019666 4E75                       		rts	
00019668                            ; End of function sub_17C2A
00019668                            
00019668                            ; ===========================================================================
00019668                            
00019668                            loc_17C68:				; XREF: Obj48_Index
00019668 2268 0034                  		movea.l	$34(a0),a1
0001966C 4A29 0022                  		tst.b	$22(a1)
00019670 6A00                       		bpl.s	Obj48_Display3
00019672 117C 003F 0000             		move.b	#$3F,0(a0)
00019678 117C 0000 0024             		move.b	#0,$24(a0)
0001967E                            
0001967E                            Obj48_Display3:
0001967E 4EF9 0000 E75C             		jmp	DisplaySprite
00019684                            ; ===========================================================================
00019684                            
00019684                            Obj48_ChkVanish:			; XREF: Obj48_Index
00019684 7000                       		moveq	#0,d0
00019686 4A28 001A                  		tst.b	$1A(a0)
0001968A 6600                       		bne.s	Obj48_Vanish
0001968C 5200                       		addq.b	#1,d0
0001968E                            
0001968E                            Obj48_Vanish:
0001968E 1140 001A                  		move.b	d0,$1A(a0)
00019692 2268 0034                  		movea.l	$34(a0),a1
00019696 4A29 0022                  		tst.b	$22(a1)
0001969A 6A00                       		bpl.s	Obj48_Display4
0001969C 117C 0000 0020             		move.b	#0,$20(a0)
000196A2 6100 FB88                  		bsr.w	BossDefeated
000196A6 5328 003C                  		subq.b	#1,$3C(a0)
000196AA 6A00                       		bpl.s	Obj48_Display4
000196AC 10BC 003F                  		move.b	#$3F,(a0)
000196B0 117C 0000 0024             		move.b	#0,$24(a0)
000196B6                            
000196B6                            Obj48_Display4:
000196B6 4EF9 0000 E75C             		jmp	DisplaySprite
000196BC                            ; ===========================================================================
000196BC                            Ani_Eggman:
000196BC                            	include "_anim\Eggman.asm"
000196BC                            ; ---------------------------------------------------------------------------
000196BC                            ; Animation script - Eggman (bosses)
000196BC                            ; ---------------------------------------------------------------------------
000196BC 0000                       		dc.w byte_17CD4-Ani_Eggman
000196BE 0000                       		dc.w byte_17CD8-Ani_Eggman
000196C0 0000                       		dc.w byte_17CDC-Ani_Eggman
000196C2 0000                       		dc.w byte_17CE0-Ani_Eggman
000196C4 0000                       		dc.w byte_17CE4-Ani_Eggman
000196C6 0000                       		dc.w byte_17CE8-Ani_Eggman
000196C8 0000                       		dc.w byte_17CEC-Ani_Eggman
000196CA 0000                       		dc.w byte_17CF0-Ani_Eggman
000196CC 0000                       		dc.w byte_17CF4-Ani_Eggman
000196CE 0000                       		dc.w byte_17CF8-Ani_Eggman
000196D0 0000                       		dc.w byte_17CFC-Ani_Eggman
000196D2 0000                       		dc.w byte_17D00-Ani_Eggman
000196D4 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
000196D8 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
000196DC 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
000196E0 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
000196E4 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
000196E8 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
000196EC 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
000196F0 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
000196F4 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
000196F8 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
000196FC 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
00019700 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
0001970C                            		even
0001970C                            		even
0001970C                            
0001970C                            ; ---------------------------------------------------------------------------
0001970C                            ; Sprite mappings - Eggman (boss levels)
0001970C                            ; ---------------------------------------------------------------------------
0001970C                            Map_Eggman:
0001970C                            	include "_maps\Eggman.asm"
0001970C                            ; ---------------------------------------------------------------------------
0001970C                            ; Sprite mappings - Eggman (boss levels)
0001970C                            ; ---------------------------------------------------------------------------
0001970C 0000 0000                  		dc.w byte_17D26-Map_Eggman, byte_17D45-Map_Eggman
00019710 0000 0000                  		dc.w byte_17D50-Map_Eggman, byte_17D5B-Map_Eggman
00019714 0000 0000                  		dc.w byte_17D6B-Map_Eggman, byte_17D7B-Map_Eggman
00019718 0000 0000                  		dc.w byte_17D8B-Map_Eggman, byte_17D9B-Map_Eggman
0001971C 0000 0000                  		dc.w byte_17DB0-Map_Eggman, byte_17DB6-Map_Eggman
00019720 0000 0000                  		dc.w byte_17DBC-Map_Eggman, byte_17DBD-Map_Eggman
00019724 0000                       		dc.w byte_17DC8-Map_Eggman
00019726 06                         byte_17D26:	dc.b 6
00019727 EC01 000A E4               		dc.b $EC, 1, 0,	$A, $E4
0001972C EC05 000C 0C               		dc.b $EC, 5, 0,	$C, $C
00019731 FC0E 2010 E4               		dc.b $FC, $E, $20, $10,	$E4
00019736 FC0E 201C 04               		dc.b $FC, $E, $20, $1C,	4
0001973B 140C 2028 EC               		dc.b $14, $C, $20, $28,	$EC
00019740 1400 202C 0C               		dc.b $14, 0, $20, $2C, $C
00019745 02                         byte_17D45:	dc.b 2
00019746 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
0001974B EC0D 0002 EC               		dc.b $EC, $D, 0, 2, $EC
00019750 02                         byte_17D50:	dc.b 2
00019751 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00019756 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
0001975B 03                         byte_17D5B:	dc.b 3
0001975C E408 003D F4               		dc.b $E4, 8, 0,	$3D, $F4
00019761 EC09 0040 EC               		dc.b $EC, 9, 0,	$40, $EC
00019766 EC05 0046 04               		dc.b $EC, 5, 0,	$46, 4
0001976B 03                         byte_17D6B:	dc.b 3
0001976C E408 004A F4               		dc.b $E4, 8, 0,	$4A, $F4
00019771 EC09 004D EC               		dc.b $EC, 9, 0,	$4D, $EC
00019776 EC05 0053 04               		dc.b $EC, 5, 0,	$53, 4
0001977B 03                         byte_17D7B:	dc.b 3
0001977C E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
00019781 EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
00019786 EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
0001978B 0